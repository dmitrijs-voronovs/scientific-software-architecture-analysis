id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://psicode.org/psi4manual/1.2.1/build_faq.html:2805,Testability,test,tests,2805," building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”; How to fix error “RuntimeError: value for ERI”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git mer",MatchSource.WIKI,psi4manual/1.2.1/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_faq.html
https://psicode.org/psi4manual/1.2.1/build_faq.html:2843,Testability,test,tests,2843," building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”; How to fix error “RuntimeError: value for ERI”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git mer",MatchSource.WIKI,psi4manual/1.2.1/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_faq.html
https://psicode.org/psi4manual/1.2.1/build_faq.html:2857,Testability,test,test,2857," building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”; How to fix error “RuntimeError: value for ERI”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git mer",MatchSource.WIKI,psi4manual/1.2.1/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_faq.html
https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html:2047,Availability,down,downloads,2047,"y-Installer. I want to compile it myself for best performance on my computer.; I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions. Get Updates; # on branch",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html
https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html:4231,Availability,down,download,4231,"https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Set up a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions. Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions. Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. Psi3 from SourceForge¶. Get Initially; A tarball of the most recent version of Psi3 (3.4.0 circa 2009) is; available from SourceForge. Build; Follow the INSTALL file that comes with the distribution. An old; computer is probably handy for generating a working executable. Get Updates; Updates are not forthcoming. Contribute Back; This code is not under any development. What is the suggested GitHub workflow¶. table of contents. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested ",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html
https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html:4618,Availability,avail,available,4618," a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions. Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions. Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. Psi3 from SourceForge¶. Get Initially; A tarball of the most recent version of Psi3 (3.4.0 circa 2009) is; available from SourceForge. Build; Follow the INSTALL file that comes with the distribution. An old; computer is probably handy for generating a working executable. Get Updates; Updates are not forthcoming. Contribute Back; This code is not under any development. What is the suggested GitHub workflow¶. table of contents. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html
https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html:1026,Deployability,install,installer,1026,"ing PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. Obtaining PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; faq:condapkg; Clone from GitHub Repository (read-only unless core developer); Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge. Find-the-code Quiz¶. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base.; Provided I still get good, threaded BLAS/LAPACK, I’m willing to; sacrifice processor architecture fine tuning to avoid compiling it myself.; I’m on Linux or Mac or Windows with Ubuntu Bash Shell.; I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself for best performance on my computer.; I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initiall",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html
https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html:2178,Deployability,update,update,2178,"with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions. Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. F",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html
https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html:2361,Deployability,install,installed,2361,"e code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions. Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use htt",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html
https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html:2458,Deployability,install,install,2458," with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions. Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html
https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html:2649,Deployability,update,update,2649,"g PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions. Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Set up a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html
https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html:3688,Deployability,update,update,3688,"git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions. Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Set up a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions. Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions. Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. Psi3 from SourceForge¶. Get Initially; A tarball of the most recent version of Psi3 (3.4.0 circa 2009) is; available from SourceForge. Build; Follow the INSTALL file that comes with the distribution. An ol",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html
https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html:5436,Deployability,update,updated,5436," a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions. Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions. Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. Psi3 from SourceForge¶. Get Initially; A tarball of the most recent version of Psi3 (3.4.0 circa 2009) is; available from SourceForge. Build; Follow the INSTALL file that comes with the distribution. An old; computer is probably handy for generating a working executable. Get Updates; Updates are not forthcoming. Contribute Back; This code is not under any development. What is the suggested GitHub workflow¶. table of contents. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html
https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html:1702,Modifiability,plugin,plugin,1702,"oping anything to contribute back to the code base.; Provided I still get good, threaded BLAS/LAPACK, I’m willing to; sacrifice processor architecture fine tuning to avoid compiling it myself.; I’m on Linux or Mac or Windows with Ubuntu Bash Shell.; I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself for best performance on my computer.; I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html
https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html:1770,Modifiability,plugin,plugins,1770," avoid compiling it myself.; I’m on Linux or Mac or Windows with Ubuntu Bash Shell.; I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself for best performance on my computer.; I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html
https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html:1870,Modifiability,plugin,plugins,1870," avoid compiling it myself.; I’m on Linux or Mac or Windows with Ubuntu Bash Shell.; I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself for best performance on my computer.; I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html
https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html:1100,Performance,perform,performance,1100,"llation and Runtime Configuration. Obtaining PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; faq:condapkg; Clone from GitHub Repository (read-only unless core developer); Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge. Find-the-code Quiz¶. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base.; Provided I still get good, threaded BLAS/LAPACK, I’m willing to; sacrifice processor architecture fine tuning to avoid compiling it myself.; I’m on Linux or Mac or Windows with Ubuntu Bash Shell.; I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself for best performance on my computer.; I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions ther",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html
https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html:821,Safety,avoid,avoid,821,"﻿. Obtaining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. Obtaining PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; faq:condapkg; Clone from GitHub Repository (read-only unless core developer); Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge. Find-the-code Quiz¶. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base.; Provided I still get good, threaded BLAS/LAPACK, I’m willing to; sacrifice processor architecture fine tuning to avoid compiling it myself.; I’m on Linux or Mac or Windows with Ubuntu Bash Shell.; I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself for best performance on my computer.; I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html
https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html:1235,Security,access,access,1235," a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; faq:condapkg; Clone from GitHub Repository (read-only unless core developer); Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge. Find-the-code Quiz¶. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base.; Provided I still get good, threaded BLAS/LAPACK, I’m willing to; sacrifice processor architecture fine tuning to avoid compiling it myself.; I’m on Linux or Mac or Windows with Ubuntu Bash Shell.; I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself for best performance on my computer.; I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not un",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining-1.html
https://psicode.org/psi4manual/1.2.1/build_obtaining.html:2047,Availability,down,downloads,2047,"y-Installer. I want to compile it myself for best performance on my computer.; I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions. Get Updates; # on branch",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining.html
https://psicode.org/psi4manual/1.2.1/build_obtaining.html:4231,Availability,down,download,4231,"https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Set up a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions. Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions. Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. Psi3 from SourceForge¶. Get Initially; A tarball of the most recent version of Psi3 (3.4.0 circa 2009) is; available from SourceForge. Build; Follow the INSTALL file that comes with the distribution. An old; computer is probably handy for generating a working executable. Get Updates; Updates are not forthcoming. Contribute Back; This code is not under any development. What is the suggested GitHub workflow¶. table of contents. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested ",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining.html
https://psicode.org/psi4manual/1.2.1/build_obtaining.html:4618,Availability,avail,available,4618," a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions. Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions. Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. Psi3 from SourceForge¶. Get Initially; A tarball of the most recent version of Psi3 (3.4.0 circa 2009) is; available from SourceForge. Build; Follow the INSTALL file that comes with the distribution. An old; computer is probably handy for generating a working executable. Get Updates; Updates are not forthcoming. Contribute Back; This code is not under any development. What is the suggested GitHub workflow¶. table of contents. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining.html
https://psicode.org/psi4manual/1.2.1/build_obtaining.html:1026,Deployability,install,installer,1026,"ing PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. Obtaining PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; faq:condapkg; Clone from GitHub Repository (read-only unless core developer); Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge. Find-the-code Quiz¶. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base.; Provided I still get good, threaded BLAS/LAPACK, I’m willing to; sacrifice processor architecture fine tuning to avoid compiling it myself.; I’m on Linux or Mac or Windows with Ubuntu Bash Shell.; I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself for best performance on my computer.; I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initiall",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining.html
https://psicode.org/psi4manual/1.2.1/build_obtaining.html:2178,Deployability,update,update,2178,"with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions. Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. F",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining.html
https://psicode.org/psi4manual/1.2.1/build_obtaining.html:2361,Deployability,install,installed,2361,"e code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions. Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use htt",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining.html
https://psicode.org/psi4manual/1.2.1/build_obtaining.html:2458,Deployability,install,install,2458," with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions. Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining.html
https://psicode.org/psi4manual/1.2.1/build_obtaining.html:2649,Deployability,update,update,2649,"g PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions. Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Set up a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining.html
https://psicode.org/psi4manual/1.2.1/build_obtaining.html:3688,Deployability,update,update,3688,"git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions. Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Set up a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions. Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions. Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. Psi3 from SourceForge¶. Get Initially; A tarball of the most recent version of Psi3 (3.4.0 circa 2009) is; available from SourceForge. Build; Follow the INSTALL file that comes with the distribution. An ol",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining.html
https://psicode.org/psi4manual/1.2.1/build_obtaining.html:5436,Deployability,update,updated,5436," a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions. Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions. Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. Psi3 from SourceForge¶. Get Initially; A tarball of the most recent version of Psi3 (3.4.0 circa 2009) is; available from SourceForge. Build; Follow the INSTALL file that comes with the distribution. An old; computer is probably handy for generating a working executable. Get Updates; Updates are not forthcoming. Contribute Back; This code is not under any development. What is the suggested GitHub workflow¶. table of contents. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining.html
https://psicode.org/psi4manual/1.2.1/build_obtaining.html:1702,Modifiability,plugin,plugin,1702,"oping anything to contribute back to the code base.; Provided I still get good, threaded BLAS/LAPACK, I’m willing to; sacrifice processor architecture fine tuning to avoid compiling it myself.; I’m on Linux or Mac or Windows with Ubuntu Bash Shell.; I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself for best performance on my computer.; I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining.html
https://psicode.org/psi4manual/1.2.1/build_obtaining.html:1770,Modifiability,plugin,plugins,1770," avoid compiling it myself.; I’m on Linux or Mac or Windows with Ubuntu Bash Shell.; I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself for best performance on my computer.; I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining.html
https://psicode.org/psi4manual/1.2.1/build_obtaining.html:1870,Modifiability,plugin,plugins,1870," avoid compiling it myself.; I’m on Linux or Mac or Windows with Ubuntu Bash Shell.; I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself for best performance on my computer.; I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining.html
https://psicode.org/psi4manual/1.2.1/build_obtaining.html:1100,Performance,perform,performance,1100,"llation and Runtime Configuration. Obtaining PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; faq:condapkg; Clone from GitHub Repository (read-only unless core developer); Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge. Find-the-code Quiz¶. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base.; Provided I still get good, threaded BLAS/LAPACK, I’m willing to; sacrifice processor architecture fine tuning to avoid compiling it myself.; I’m on Linux or Mac or Windows with Ubuntu Bash Shell.; I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself for best performance on my computer.; I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions ther",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining.html
https://psicode.org/psi4manual/1.2.1/build_obtaining.html:821,Safety,avoid,avoid,821,"﻿. Obtaining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. Obtaining PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; faq:condapkg; Clone from GitHub Repository (read-only unless core developer); Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge. Find-the-code Quiz¶. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base.; Provided I still get good, threaded BLAS/LAPACK, I’m willing to; sacrifice processor architecture fine tuning to avoid compiling it myself.; I’m on Linux or Mac or Windows with Ubuntu Bash Shell.; I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself for best performance on my computer.; I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining.html
https://psicode.org/psi4manual/1.2.1/build_obtaining.html:1235,Security,access,access,1235," a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; faq:condapkg; Clone from GitHub Repository (read-only unless core developer); Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge. Find-the-code Quiz¶. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base.; Provided I still get good, threaded BLAS/LAPACK, I’m willing to; sacrifice processor architecture fine tuning to avoid compiling it myself.; I’m on Linux or Mac or Windows with Ubuntu Bash Shell.; I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself for best performance on my computer.; I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4.; In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do.; I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Goto Psi3-from-SourceForge. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html and follow the; instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not un",MatchSource.WIKI,psi4manual/1.2.1/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_obtaining.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:2471,Availability,avail,available,2471,"conf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:3129,Availability,error,errors,3129,"he; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:4136,Availability,down,download,4136,"ion. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate ena",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:4472,Availability,down,download,4472,"ation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Docum",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:5211,Availability,avail,available,5211," (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:5284,Availability,down,download,5284,"GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cf",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:5441,Availability,avail,available,5441,"ystem will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cfour — [what is this?]; dftd3 — [what is this?]; gcp — [what is this?]; mrcc — [what is this?]; v2rdm_casscf — [what is this?]; snsmp",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:8453,Availability,avail,available,8453,"detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s) containing the am8; metapackage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:14675,Availability,failure,failures,14675,"ions are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization"" ON; ""-xHost"" ""-march=native""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-che",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:18525,Availability,error,error,18525,"NSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:24830,Availability,echo,echo,24830,"_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:25309,Availability,redundant,redundant,25309,"I. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E................................",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:25506,Availability,redundant,redundant,25506,"CF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:26952,Availability,avail,available,26952,"for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:32363,Availability,echo,echo,32363,"tall XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:32447,Availability,echo,echo,32447,"tall XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:34789,Availability,down,download,34789,"¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g.,",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:37889,Availability,avail,available,37889,"ibmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". OpenBLAS - see note below. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib cmake. Build with explicit MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/intel64/libmkl_lapack95_lp64.a;/path/to/lib/intel64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". Build with explicit non-MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". Notes. Much of PSI4’s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/iss",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:38061,Availability,avail,available,38061,"xplicit MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/intel64/libmkl_lapack95_lp64.a;/path/to/lib/intel64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". Build with explicit non-MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". Notes. Much of PSI4’s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independen",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:39175,Availability,error,errors,39175," libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the mat",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:39218,Availability,down,down,39218," libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the mat",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:42326,Availability,error,error,42326,"ification to root directory ${PFXC}. >>> cmake -DPYTHON_EXECUTABLE=""${PFXC}/bin/python"" \; -DPYTHON_LIBRARY=""${PFXC}/lib/libpython3.5m.so"" \; -DPYTHON_INCLUDE_DIR=""${PFXC}/include/python3.5m"". What Python is Psi4 running¶; The Python detected at build-time is embedded into the PSI4; executable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/envs/p4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anacond",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:42785,Availability,error,errors,42785,"h PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [libm.so.6] in /usr/lib64 may be hidden by files in:; /theoryfs2/common/software/anaconda/lib. Some of these librar",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:42968,Availability,error,errors,42968,"a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [libm.so.6] in /usr/lib64 may be hidden by files in:; /theoryfs2/common/software/anaconda/lib. Some of these libraries may not be found correctly. How to set up the scratch directory¶; The scratch directory is where Psi4 stores poten",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46593,Availability,error,errors,46593,"y similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47491,Availability,avail,available,47491,"me; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addon",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47890,Availability,avail,available,47890," all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. How to refer to Psi4¶; Ways to refer ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:52169,Availability,avail,available,52169,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:52268,Availability,error,error,52268,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:53507,Availability,error,errors,53507,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:53896,Availability,error,errors,53896,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:1201,Deployability,install,install,1201,"lt through CMake. Prior to 1.1, PSI4 had a Python; script setup as a frontend to CMake, but this is no more, and; cmake is now invoked directly. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:1306,Deployability,install,installing,1306,"lt through CMake. Prior to 1.1, PSI4 had a Python; script setup as a frontend to CMake, but this is no more, and; cmake is now invoked directly. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:1422,Deployability,configurat,configuration,1422,".; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration opt",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:1510,Deployability,install,install,1510,".; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration opt",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:1543,Deployability,install,install,1543,", and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure.",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:1922,Deployability,install,installation,1922,"o not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _N",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:1971,Deployability,install,install,1971,"ons are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:2157,Deployability,install,installed,2157,"nts to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tes",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:2349,Deployability,configurat,configuration,2349,"cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configur",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:2399,Deployability,configurat,configuration,2399,"cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configur",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:2445,Deployability,configurat,configuration,2445,"conf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:2795,Deployability,configurat,configuration,2795,"1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links belo",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:3156,Deployability,install,installation,3156,"he; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:3257,Deployability,install,install,3257,"-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to ang",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:3286,Deployability,install,install,3286,"nd what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:3335,Deployability,install,installation,3335,"figuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:4329,Deployability,install,install,4329,"ter installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:5368,Deployability,install,installed,5368,"e following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cfour — [what is this?]; dftd3 — [what is this?]; gcp — [what",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:7425,Deployability,install,install,7425,"hat is this?]. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles arbitrary order; angular momentum, but compiling that is prohibitive. The default of 5; is generally good. 6 has met all of a research group’s needs for; years. 4 is handy for quickly testing other parts of the build. Build with Higher Angular Momentum; >>> cmake -DMAX_AM_ERI=6. Relevant CMake Options:; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s) containing the am8; metapackage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are av",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:7508,Deployability,install,installation,7508,"hat is this?]. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles arbitrary order; angular momentum, but compiling that is prohibitive. The default of 5; is generally good. 6 has met all of a research group’s needs for; years. 4 is handy for quickly testing other parts of the build. Build with Higher Angular Momentum; >>> cmake -DMAX_AM_ERI=6. Relevant CMake Options:; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s) containing the am8; metapackage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are av",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:7864,Deployability,install,install,7864,"; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s) containing the am8; metapackage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PR",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:8427,Deployability,configurat,configuration,8427,"detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s) containing the am8; metapackage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:8884,Deployability,install,install-,8884,"l am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:9057,Deployability,install,install,9057,"efault Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortra",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:9161,Deployability,install,install,9161,"move --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:9265,Deployability,install,install,9265,"n Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:9350,Deployability,install,install,9350,"M8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:9452,Deployability,install,install,9452,"doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn}",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:9510,Deployability,install,install,9510,"e; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMS",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:9586,Deployability,install,install,9586,"owever, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:9688,Deployability,configurat,configuration,9688," summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:10698,Deployability,install,install-libint,10698," # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (onl",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:10722,Deployability,install,install-gdma,10722," # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (onl",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:10757,Deployability,install,install-libint,10757," # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (onl",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:12007,Deployability,install,installed,12007,"n; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:12134,Deployability,install,installed,12134,"n; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:12247,Deployability,install,installed,12247,"n; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:12361,Deployability,install,installed,12361,"n; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:12478,Deployability,install,installed,12478,"n; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:12600,Deployability,install,installed,12600,"n; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:12670,Deployability,install,install,12670,"ction""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be adde",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:13786,Deployability,install,installed,13786,"ation within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERR",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:13868,Deployability,install,installed,13868,"ation within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERR",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:16781,Deployability,install,installed,16781,"i4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization"" ON; ""-xHost"" ""-march=native""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /).",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:16905,Deployability,install,installed,16905,"i4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization"" ON; ""-xHost"" ""-march=native""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /).",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:16983,Deployability,configurat,configuration,16983,"y compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recurs",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:17076,Deployability,install,install,17076,"py)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUI",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:17121,Deployability,install,installation,17121,"py)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUI",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:17325,Deployability,install,installation,17325,"=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:17634,Deployability,install,installed,17634," name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:17731,Deployability,install,install,17731,"ALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory,",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:18393,Deployability,release,release,18393,"ariable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -D",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:18452,Deployability,release,release,18452,"rectory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/external",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:18504,Deployability,release,release,18504,"rectory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/external",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:19142,Deployability,configurat,configuration,19142,"hat these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/ps",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:19460,Deployability,install,install-libint,19460," type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting i",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:19625,Deployability,install,installed,19625,"o configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:19810,Deployability,install,installation,19810,"o choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:19831,Deployability,install,installation,19831,"jdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:19871,Deployability,install,install,19871,"jdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:19958,Deployability,install,installation,19958,"H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (objec",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:20090,Deployability,install,installed,20090,"utside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); l",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:20468,Deployability,install,installed,20468,"E_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for det",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:20534,Deployability,install,install,20534," u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/python",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:21684,Deployability,install,installation,21684,"; share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. todo how to check if current py is compatible with compilation. How to configure paths for PsiAPI¶; If you know the location of the PSI4 executab",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:21882,Deployability,install,installation,21882,"+ any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. todo how to check if current py is compatible with compilation. How to configure paths for PsiAPI¶; If you know the location of the PSI4 executable (bin/psi4); for Psithon mode and want to know the corresponding location to add to; PYTHONPATH for PsiAPI mode, execute psi4 --psiapi-path. It; will return bash comma",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:23469,Deployability,install,installation,23469,"F E.............................................................PASSED. todo how to check if current py is compatible with compilation. How to configure paths for PsiAPI¶; If you know the location of the PSI4 executable (bin/psi4); for Psithon mode and want to know the corresponding location to add to; PYTHONPATH for PsiAPI mode, execute psi4 --psiapi-path. It; will return bash commands to set PATH (for correct python; interpreter) and PYTHONPATH (to find psi4 module) correctly,; after which import psi4 will work.; >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". How to run Psi4 as Python module after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable o",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:23667,Deployability,install,installation,23667," If you know the location of the PSI4 executable (bin/psi4); for Psithon mode and want to know the corresponding location to add to; PYTHONPATH for PsiAPI mode, execute psi4 --psiapi-path. It; will return bash commands to set PATH (for correct python; interpreter) and PYTHONPATH (to find psi4 module) correctly,; after which import psi4 will work.; >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". How to run Psi4 as Python module after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:24548,Deployability,install,installation,24548,"en a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRA",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:24567,Deployability,configurat,configuration,24567,"en a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRA",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:24668,Deployability,install,installing,24668,"en a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRA",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:25037,Deployability,install,installed,25037,"I. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E................................",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:25077,Deployability,install,installed,25077,"I. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E................................",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:25328,Deployability,install,installed,25328,"CF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:27538,Deployability,install,installed,27538,"ion using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected c",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:31359,Deployability,install,install,31359,"t; (CONDA_PREFIX and HOST are defined upon; activation). >>> cmake -DCMAKE_C_COMPILER=${GCC} \; -DCMAKE_CXX_COMPILER=${GXX} \; -DCMAKE_Fortran_COMPILER=${GFORTRAN}. What C and C++ compilers and versions are approved¶; On Linux, the following work nicely. GNU: gcc, g++; Intel: icc, icpc; Clang: clang, clang++. On Mac, the following work nicely. Apple Clang: clang, clang++; Intel: icc, icpc. PSI4 requires full C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; psi4/cmake/custom_cxxstandard.cmake, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:31926,Deployability,update,update,31926,"try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMA",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:31982,Deployability,install,install,31982,"try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMA",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:34540,Deployability,install,install,34540,"y requires setting environment variables CRAYPE_LINK_TYPE; and CRAY_ADD_RPATH before running cmake.; 1CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set b",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:36824,Deployability,install,install,36824,"ATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL from conda (install mkl-devel package from defaults channel). >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PREFIX}/lib/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". OpenBLAS - see note below. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib cmake. Build with explicit MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/intel64/libmkl_lapack95_lp64.a;/path/to/lib/intel64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". Build with explicit non-MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". Notes. Much of PSI4’s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:43098,Deployability,toggle,toggle,43098,"ix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [libm.so.6] in /usr/lib64 may be hidden by files in:; /theoryfs2/common/software/anaconda/lib. Some of these libraries may not be found correctly. How to set up the scratch directory¶; The scratch directory is where Psi4 stores potentially large files during; computation. It should thus be on a local, fast disk to minimize any; computational inefficiencies caused by I/O. The scratch directory is; com",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:45045,Deployability,update,update,45045,"set up through the PSI_SCRATCH environment variable:; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:45083,Deployability,update,updates,45083,"set up through the PSI_SCRATCH environment variable:; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:45398,Deployability,update,update,45398,"rofile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests ma",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:45522,Deployability,install,installed,45522,"o the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:45641,Deployability,install,installed,45641,"h the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/buil",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47250,Deployability,install,installation,47250,"nd any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_ad",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47380,Deployability,install,installation,47380,"nd any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_ad",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47406,Deployability,install,installed,47406,"me; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addon",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47438,Deployability,install,installation,47438,"me; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addon",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:50621,Deployability,install,install,50621,". Sometimes, you’re the one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset.; Find the CMakeLists.txt governing the target Add-On in; psi4/external and make changes analogous to the below:; 1; 2; 3; 4#GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you’re changing the PSI4 repo codebase between compiles, there’s; nothing more to do as CMake will handle the code rebuild deps for you.; If you’re changing the local Add-On repo codebase between compiles,; CMake does not know when libaddon.[a|so|dylib] needs rebuilding. It; is recommended that the PSI4 build be initially configured with; -DBUILD_SHARED_LIBS=ON (easier to notice changes). And to trigger; Add-On library rebuild, rm -rf {objdir}/external/upstream/addon/; and rm -rf {objdir}/stage/{prefix}/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/{prefix},; especially any *.pyc files.; Alternatively to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as ne",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:50924,Deployability,install,install,50924,"RY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you’re changing the PSI4 repo codebase between compiles, there’s; nothing more to do as CMake will handle the code rebuild deps for you.; If you’re changing the local Add-On repo codebase between compiles,; CMake does not know when libaddon.[a|so|dylib] needs rebuilding. It; is recommended that the PSI4 build be initially configured with; -DBUILD_SHARED_LIBS=ON (easier to notice changes). And to trigger; Add-On library rebuild, rm -rf {objdir}/external/upstream/addon/; and rm -rf {objdir}/stage/{prefix}/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/{prefix},; especially any *.pyc files.; Alternatively to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; Wha",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:51528,Deployability,update,update,51528,"and rm -rf {objdir}/stage/{prefix}/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/{prefix},; especially any *.pyc files.; Alternatively to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compil",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:51771,Deployability,install,install,51771,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:51830,Deployability,install,install,51830,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:52143,Deployability,configurat,configuration,52143,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:52187,Deployability,install,install,52187,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:52368,Deployability,configurat,configuration,52368,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:52453,Deployability,install,installed,52453,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:52673,Deployability,install,installation,52673,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:53778,Deployability,update,update,53778,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:53923,Deployability,install,installation,53923,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:54201,Deployability,update,updated,54201,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:22403,Energy Efficiency,energy,energy,22403,"ecutable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. todo how to check if current py is compatible with compilation. How to configure paths for PsiAPI¶; If you know the location of the PSI4 executable (bin/psi4); for Psithon mode and want to know the corresponding location to add to; PYTHONPATH for PsiAPI mode, execute psi4 --psiapi-path. It; will return bash commands to set PATH (for correct python; interpreter) and PYTHONPATH (to find psi4 module) correctly,; after which import psi4 will work.; >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". How to run Psi4 as",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:22475,Energy Efficiency,energy,energy,22475,"ATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. todo how to check if current py is compatible with compilation. How to configure paths for PsiAPI¶; If you know the location of the PSI4 executable (bin/psi4); for Psithon mode and want to know the corresponding location to add to; PYTHONPATH for PsiAPI mode, execute psi4 --psiapi-path. It; will return bash commands to set PATH (for correct python; interpreter) and PYTHONPATH (to find psi4 module) correctly,; after which import psi4 will work.; >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". How to run Psi4 as Python module after compilation¶; Substituting the full installati",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:24284,Energy Efficiency,energy,energy,24284,">>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". How to run Psi4 as Python module after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:24371,Energy Efficiency,energy,energy,24371,"import psi4"". How to run Psi4 as Python module after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performe",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:26022,Energy Efficiency,energy,energy,26022,"If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/sta",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:26094,Energy Efficiency,energy,energy,26094,"conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/ru",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:26339,Energy Efficiency,energy,energy,26339,"nvironment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:26426,Energy Efficiency,energy,energy,26426,"s; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only re",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:37940,Energy Efficiency,efficient,efficient,37940,"ibmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". OpenBLAS - see note below. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib cmake. Build with explicit MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/intel64/libmkl_lapack95_lp64.a;/path/to/lib/intel64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". Build with explicit non-MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". Notes. Much of PSI4’s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/iss",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:42586,Energy Efficiency,energy,energy,42586,"cutable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/envs/p4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path f",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:42707,Energy Efficiency,energy,energy,42707,"the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46705,Energy Efficiency,energy,energy,46705,"y similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46736,Energy Efficiency,energy,energy,46736,"y similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47770,Energy Efficiency,green,green,47770," all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. How to refer to Psi4¶; Ways to refer ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:1040,Integrability,depend,dependencies,1040,"ng from Source. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. Compiling and Installing from Source¶. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. Prior to 1.1, PSI4 had a Python; script setup as a frontend to CMake, but this is no more, and; cmake is now invoked directly. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Config",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:1064,Integrability,depend,dependencies,1064,"ng from Source. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. Compiling and Installing from Source¶. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. Prior to 1.1, PSI4 had a Python; script setup as a frontend to CMake, but this is no more, and; cmake is now invoked directly. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Config",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:2144,Integrability,depend,dependencies,2144,"nts to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tes",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:2191,Integrability,depend,dependencies,2191," section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install.",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:2302,Integrability,depend,dependencies,2302," section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install.",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:3513,Integrability,depend,dependencies,3513,"CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; L",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:4708,Integrability,depend,dependencies,4708,"bint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jup",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:4907,Integrability,depend,dependencies,4907,"mized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:5063,Integrability,depend,dependencies,5063,"aders (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is t",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:5774,Integrability,message,message,5774,"kx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cfour — [what is this?]; dftd3 — [what is this?]; gcp — [what is this?]; mrcc — [what is this?]; v2rdm_casscf — [what is this?]; snsmp2 — [what is this?]. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles arbitrary order; angular momentum, but compiling that is prohibitive. The default of 5; is generally good. 6 has met all of a research group’s needs for; years. 4 is handy for quickly testing other parts of the build. Bui",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:5819,Integrability,depend,dependencies,5819,"kx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cfour — [what is this?]; dftd3 — [what is this?]; gcp — [what is this?]; mrcc — [what is this?]; v2rdm_casscf — [what is this?]; snsmp2 — [what is this?]. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles arbitrary order; angular momentum, but compiling that is prohibitive. The default of 5; is generally good. 6 has met all of a research group’s needs for; years. 4 is handy for quickly testing other parts of the build. Bui",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:8176,Integrability,depend,depending,8176,"you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s) containing the am8; metapackage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g.",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:9087,Integrability,depend,dependencies,9087,"in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpr",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:10038,Integrability,depend,dependencies,10038,"Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detec",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:10666,Integrability,depend,dependencies,10666," only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:14009,Integrability,message,message,14009,"OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build int",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:14226,Integrability,message,message,14226,"IMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:14287,Integrability,message,message,14287,"les PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test th",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:14321,Integrability,interface,interface,14321,"les PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test th",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:14444,Integrability,message,message,14444,"f ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization"" ON; ""-xHost"" ""-march=native""); option_with",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:32050,Integrability,rout,route,32050,"th icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:37435,Integrability,depend,depends,37435,"ve Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL from conda (install mkl-devel package from defaults channel). >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PREFIX}/lib/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". OpenBLAS - see note below. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib cmake. Build with explicit MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/intel64/libmkl_lapack95_lp64.a;/path/to/lib/intel64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". Build with explicit non-MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". Notes. Much of PSI4’s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; pa",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:40433,Integrability,interface,interface,40433,"ussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language.; Downstream Dependencies — PSI4 \(\Leftarrow\) Python Interpreter. CMake Variables. PYTHON_EXECUTABLE — specify name or full path to Python interpreter.; PYTHON_LIBRARY — specify path to Python library.; PYTHON_INCLUDE_DIR — specify directory of Python headers. Contains Python.h. Examples. Build with detected Python from PATH. >>> cmake. Build with specific Python. >>> cmake -DPYTHON_EXECUTABLE=/path/to/interp/python2.7. Build with full Python specification to root directory ${PFXC}. >>> cmake -DPYTHON_EXECUTABLE=""${PFXC}/bin/python"" \; -DPYTHON_LIBRARY=""${PFXC}/lib/libpython3.5m.so"" \; -DPYTHON_INCLUDE_DIR=""${",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:45305,Integrability,depend,depending,45305,"cal-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47038,Integrability,depend,depending,47038,"ite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run corre",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:50665,Integrability,interface,interface,50665,". Sometimes, you’re the one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset.; Find the CMakeLists.txt governing the target Add-On in; psi4/external and make changes analogous to the below:; 1; 2; 3; 4#GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you’re changing the PSI4 repo codebase between compiles, there’s; nothing more to do as CMake will handle the code rebuild deps for you.; If you’re changing the local Add-On repo codebase between compiles,; CMake does not know when libaddon.[a|so|dylib] needs rebuilding. It; is recommended that the PSI4 build be initially configured with; -DBUILD_SHARED_LIBS=ON (easier to notice changes). And to trigger; Add-On library rebuild, rm -rf {objdir}/external/upstream/addon/; and rm -rf {objdir}/stage/{prefix}/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/{prefix},; especially any *.pyc files.; Alternatively to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as ne",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:51878,Integrability,depend,dependencies,51878,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:51989,Integrability,depend,dependencies,51989,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:207,Modifiability,config,configure,207,"﻿. Compiling and Installing from Source. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. Compiling and Installing from Source¶. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. Prior to 1.1, PSI4 had a Python; script setup as a frontend to CMake, but this is no more, and; cmake is now invoked directly. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/lo",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:781,Modifiability,config,configure,781,"﻿. Compiling and Installing from Source. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. Compiling and Installing from Source¶. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. Prior to 1.1, PSI4 had a Python; script setup as a frontend to CMake, but this is no more, and; cmake is now invoked directly. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/lo",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:1277,Modifiability,config,configuring,1277,"lt through CMake. Prior to 1.1, PSI4 had a Python; script setup as a frontend to CMake, but this is no more, and; cmake is now invoked directly. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:1422,Modifiability,config,configuration,1422,".; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration opt",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:2349,Modifiability,config,configuration,2349,"cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configur",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:2399,Modifiability,config,configuration,2399,"cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configur",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:2445,Modifiability,config,configuration,2445,"conf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:2499,Modifiability,config,configure,2499,"conf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:2795,Modifiability,config,configuration,2795,"1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links belo",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:3361,Modifiability,config,configure,3361,"figuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:3377,Modifiability,variab,variables,3377,"figuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:3808,Modifiability,config,configure,3808,"ile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:6476,Modifiability,config,configure,6476,"rg; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cfour — [what is this?]; dftd3 — [what is this?]; gcp — [what is this?]; mrcc — [what is this?]; v2rdm_casscf — [what is this?]; snsmp2 — [what is this?]. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles arbitrary order; angular momentum, but compiling that is prohibitive. The default of 5; is generally good. 6 has met all of a research group’s needs for; years. 4 is handy for quickly testing other parts of the build. Build with Higher Angular Momentum; >>> cmake -DMAX_AM_ERI=6. Relevant CMake Options:; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time. How to configu",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:7545,Modifiability,config,configure,7545,"handles arbitrary order; angular momentum, but compiling that is prohibitive. The default of 5; is generally good. 6 has met all of a research group’s needs for; years. 4 is handy for quickly testing other parts of the build. Build with Higher Angular Momentum; >>> cmake -DMAX_AM_ERI=6. Relevant CMake Options:; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s) containing the am8; metapackage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the dev",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:8427,Modifiability,config,configuration,8427,"detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s) containing the am8; metapackage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:9668,Modifiability,variab,variables,9668," summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:9688,Modifiability,config,configuration,9688," summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:13404,Modifiability,plugin,plugin,13404,"ation within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERR",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:13498,Modifiability,plugin,plugin,13498,"ation within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERR",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:13602,Modifiability,plugin,plugin,13602,"ation within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERR",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:13779,Modifiability,plugin,plugin,13779,"ation within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERR",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:13861,Modifiability,plugin,plugin,13861,"ation within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERR",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:14042,Modifiability,plugin,plugins,14042,"OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build int",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:15322,Modifiability,plugin,plugin,15322,,MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:16983,Modifiability,config,configuration,16983,"y compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recurs",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:17378,Modifiability,variab,variable,17378,"=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:17771,Modifiability,config,configured,17771,"ALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory,",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:18130,Modifiability,plugin,plugins,18130,"/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-leve",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:18149,Modifiability,variab,variable,18149,"/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-leve",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:18677,Modifiability,config,configure,18677,"to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:19142,Modifiability,config,configuration,19142,"hat these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/ps",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:19214,Modifiability,config,configure,19214,"hat these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/ps",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:19343,Modifiability,config,configure,19343,"ization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 libr",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:19558,Modifiability,config,configure,19558," type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting i",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:19578,Modifiability,config,configure,19578,"ebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersi",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:20750,Modifiability,plugin,plugins,20750,"a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; termina",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:20759,Modifiability,plugin,plugin,20759,"a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; termina",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:21277,Modifiability,variab,variables,21277,"/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-net",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:22663,Modifiability,config,configure,22663,"g commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. todo how to check if current py is compatible with compilation. How to configure paths for PsiAPI¶; If you know the location of the PSI4 executable (bin/psi4); for Psithon mode and want to know the corresponding location to add to; PYTHONPATH for PsiAPI mode, execute psi4 --psiapi-path. It; will return bash commands to set PATH (for correct python; interpreter) and PYTHONPATH (to find psi4 module) correctly,; after which import psi4 will work.; >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". How to run Psi4 as Python module after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:24148,Modifiability,config,configure,24148,"HONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". How to run Psi4 as Python module after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Min",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:24567,Modifiability,config,configuration,24567,"en a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRA",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:27186,Modifiability,variab,variable,27186,"....PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Varia",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:27453,Modifiability,variab,variable,27453,"t energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additiona",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:27992,Modifiability,config,configure,27992,"ir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected compilers from PATH. >>> cmake. Build with specific (Intel) compilers from PATH. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. Build with specific (GNU) compilers not in PATH. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. Build with specific (Intel) compilers from PATH based on GCC not in PATH. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:28233,Modifiability,variab,variable,28233," of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected compilers from PATH. >>> cmake. Build with specific (Intel) compilers from PATH. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. Build with specific (GNU) compilers not in PATH. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. Build with specific (Intel) compilers from PATH based on GCC not in PATH. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". Build with specific (Intel) compilers from PATH based on GCC not in PATH and also building Fortran Add-Ons. >",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:28314,Modifiability,variab,variable,28314,"eveloper use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected compilers from PATH. >>> cmake. Build with specific (Intel) compilers from PATH. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. Build with specific (GNU) compilers not in PATH. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. Build with specific (Intel) compilers from PATH based on GCC not in PATH. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". Build with specific (Intel) compilers from PATH based on GCC not in PATH and also building Fortran Add-Ons. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_Fortran_C",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:28392,Modifiability,variab,variable,28392,"are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected compilers from PATH. >>> cmake. Build with specific (Intel) compilers from PATH. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. Build with specific (GNU) compilers not in PATH. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. Build with specific (Intel) compilers from PATH based on GCC not in PATH. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". Build with specific (Intel) compilers from PATH based on GCC not in PATH and also building Fortran Add-Ons. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:28488,Modifiability,variab,variable,28488,"SI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected compilers from PATH. >>> cmake. Build with specific (Intel) compilers from PATH. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. Build with specific (GNU) compilers not in PATH. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. Build with specific (Intel) compilers from PATH based on GCC not in PATH. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". Build with specific (Intel) compilers from PATH based on GCC not in PATH and also building Fortran Add-Ons. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"" \; -DCMAKE_Fortran_FLAGS=""-gcc-name=${GCC5}/bin/",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:32302,Modifiability,variab,variables,32302,"tall XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:33346,Modifiability,config,configure,33346,"conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4 build on Cray¶; Cray systems strongly prefer to build static libraries, but PSI4; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building PSI4 on; Cray requires setting environment variables CRAYPE_LINK_TYPE; and CRAY_ADD_RPATH before running cmake.; 1CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. W",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:33616,Modifiability,variab,variables,33616,". # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4 build on Cray¶; Cray systems strongly prefer to build static libraries, but PSI4; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building PSI4 on; Cray requires setting environment variables CRAYPE_LINK_TYPE; and CRAY_ADD_RPATH before running cmake.; 1CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubun",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:33748,Modifiability,config,configure,33748," (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4 build on Cray¶; Cray systems strongly prefer to build static libraries, but PSI4; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building PSI4 on; Cray requires setting environment variables CRAYPE_LINK_TYPE; and CRAY_ADD_RPATH before running cmake.; 1CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:34100,Modifiability,variab,variable,34100," Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4 build on Cray¶; Cray systems strongly prefer to build static libraries, but PSI4; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building PSI4 on; Cray requires setting environment variables CRAYPE_LINK_TYPE; and CRAY_ADD_RPATH before running cmake.; 1CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and e",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:34188,Modifiability,variab,variable,34188,"bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4 build on Cray¶; Cray systems strongly prefer to build static libraries, but PSI4; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building PSI4 on; Cray requires setting environment variables CRAYPE_LINK_TYPE; and CRAY_ADD_RPATH before running cmake.; 1CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular sy",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:34984,Modifiability,config,configure,34984,"Solver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full p",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:35318,Modifiability,variab,variable,35318,"ler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:35442,Modifiability,variab,variable,35442,"ng work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accele",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:35571,Modifiability,variab,variable,35571,"ers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DL",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:35702,Modifiability,variab,variable,35702," not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> c",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:35888,Modifiability,variab,variable,35888," too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL from conda (install mkl-devel package from defaults channel). >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PR",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:36047,Modifiability,variab,variable,36047,"LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL from conda (install mkl-devel package from defaults channel). >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PREFIX}/lib/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". OpenBLAS - see note below. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/l",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:39800,Modifiability,variab,variables,39800,"nalysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexib",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:40644,Modifiability,config,configure,40644,"n relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language.; Downstream Dependencies — PSI4 \(\Leftarrow\) Python Interpreter. CMake Variables. PYTHON_EXECUTABLE — specify name or full path to Python interpreter.; PYTHON_LIBRARY — specify path to Python library.; PYTHON_INCLUDE_DIR — specify directory of Python headers. Contains Python.h. Examples. Build with detected Python from PATH. >>> cmake. Build with specific Python. >>> cmake -DPYTHON_EXECUTABLE=/path/to/interp/python2.7. Build with full Python specification to root directory ${PFXC}. >>> cmake -DPYTHON_EXECUTABLE=""${PFXC}/bin/python"" \; -DPYTHON_LIBRARY=""${PFXC}/lib/libpython3.5m.so"" \; -DPYTHON_INCLUDE_DIR=""${PFXC}/include/python3.5m"". What Python is Psi4 running¶; The Python detected at build-time is embedded into the PSI4; executable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/en",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:44157,Modifiability,variab,variable,44157,"kers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [libm.so.6] in /usr/lib64 may be hidden by files in:; /theoryfs2/common/software/anaconda/lib. Some of these libraries may not be found correctly. How to set up the scratch directory¶; The scratch directory is where Psi4 stores potentially large files during; computation. It should thus be on a local, fast disk to minimize any; computational inefficiencies caused by I/O. The scratch directory is; commonly set up through the PSI_SCRATCH environment variable:; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone fro",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:44819,Modifiability,variab,variables,44819,"b. Some of these libraries may not be found correctly. How to set up the scratch directory¶; The scratch directory is where Psi4 stores potentially large files during; computation. It should thus be on a local, fast disk to minimize any; computational inefficiencies caused by I/O. The scratch directory is; commonly set up through the PSI_SCRATCH environment variable:; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47641,Modifiability,config,configure,47641,"r/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::tes",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:50371,Modifiability,config,configured,50371,"in the Psi4 build¶; For each Add-On, PSI4 pulls source from a specific online Git; repository and a specific tag/branch/commit in it. This ensures success; of the PSI4 build, reproducibility of the runtime results, and; freedom for continued upstream development. Sometimes, you’re the one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset.; Find the CMakeLists.txt governing the target Add-On in; psi4/external and make changes analogous to the below:; 1; 2; 3; 4#GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you’re changing the PSI4 repo codebase between compiles, there’s; nothing more to do as CMake will handle the code rebuild deps for you.; If you’re changing the local Add-On repo codebase between compiles,; CMake does not know when libaddon.[a|so|dylib] needs rebuilding. It; is recommended that the PSI4 build be initially configured with; -DBUILD_SHARED_LIBS=ON (easier to notice changes). And to trigger; Add-On library rebuild, rm -rf {objdir}/external/upstream/addon/; and rm -rf {objdir}/stage/{prefix}/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/{prefix},; especially any *.pyc files.; Alternatively to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4’s CMake as; -DAddon_DIR=",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:51387,Modifiability,config,config,51387,"ured with; -DBUILD_SHARED_LIBS=ON (easier to notice changes). And to trigger; Add-On library rebuild, rm -rf {objdir}/external/upstream/addon/; and rm -rf {objdir}/stage/{prefix}/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/{prefix},; especially any *.pyc files.; Alternatively to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configurat",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:51721,Modifiability,config,configure,51721,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:52010,Modifiability,config,configure,52010,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:52143,Modifiability,config,configuration,52143,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:52368,Modifiability,config,configuration,52368,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:52535,Modifiability,config,configure,52535,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:52795,Modifiability,config,configure,52795,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:53058,Modifiability,config,configure,53058,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:53097,Modifiability,config,configure,53097,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:53266,Modifiability,config,configure,53266,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:53314,Modifiability,config,configure,53314,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:15419,Performance,optimiz,optimization,15419,,MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:18060,Performance,optimiz,optimizations,18060,"/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-leve",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:18312,Performance,optimiz,optimization,18312,"stallation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-d",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:21125,Performance,load,loader,21125,"xternal proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:25373,Performance,perform,performed,25373,"CF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:31539,Performance,perform,performed,31539,"and C++ compilers and versions are approved¶; On Linux, the following work nicely. GNU: gcc, g++; Intel: icc, icpc; Clang: clang, clang++. On Mac, the following work nicely. Apple Clang: clang, clang++; Intel: icc, icpc. PSI4 requires full C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; psi4/cmake/custom_cxxstandard.cmake, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -D",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:39014,Performance,load,loaders,39014,"ich is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:42165,Performance,load,loading,42165,"etected Python from PATH. >>> cmake. Build with specific Python. >>> cmake -DPYTHON_EXECUTABLE=/path/to/interp/python2.7. Build with full Python specification to root directory ${PFXC}. >>> cmake -DPYTHON_EXECUTABLE=""${PFXC}/bin/python"" \; -DPYTHON_LIBRARY=""${PFXC}/lib/libpython3.5m.so"" \; -DPYTHON_INCLUDE_DIR=""${PFXC}/include/python3.5m"". What Python is Psi4 running¶; The Python detected at build-time is embedded into the PSI4; executable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/envs/p4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:44719,Performance,queue,queue,44719,"b. Some of these libraries may not be found correctly. How to set up the scratch directory¶; The scratch directory is where Psi4 stores potentially large files during; computation. It should thus be on a local, fast disk to minimize any; computational inefficiencies caused by I/O. The scratch directory is; commonly set up through the PSI_SCRATCH environment variable:; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47349,Performance,perform,performed,47349,"nd any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_ad",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:53764,Performance,queue,queue,53764,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:747,Safety,detect,detect,747,"﻿. Compiling and Installing from Source. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. Compiling and Installing from Source¶. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. Prior to 1.1, PSI4 had a Python; script setup as a frontend to CMake, but this is no more, and; cmake is now invoked directly. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/lo",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:4425,Safety,detect,detected,4425,"ation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Docum",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:7496,Safety,detect,detect,7496,"hat is this?]. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles arbitrary order; angular momentum, but compiling that is prohibitive. The default of 5; is generally good. 6 has met all of a research group’s needs for; years. 4 is handy for quickly testing other parts of the build. Build with Higher Angular Momentum; >>> cmake -DMAX_AM_ERI=6. Relevant CMake Options:; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s) containing the am8; metapackage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are av",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:9393,Safety,avoid,avoidable,9393,"M8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:10876,Safety,detect,detection,10876,"ome add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Locat",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:11052,Safety,detect,detect,11052,"ome add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Locat",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:11170,Safety,detect,detected,11170,"e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which exe",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:11266,Safety,detect,detection,11266,"python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:11437,Safety,detect,detection,11437,"r any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX t",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:11663,Safety,detect,detection,11663,"nstall-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ###############",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:11770,Safety,detect,detection,11770,"nstall-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ###############",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:11891,Safety,detect,detection,11891,"nstall-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ###############",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:15174,Safety,detect,detect,15174,,MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:15252,Safety,detect,detect,15252,,MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:18260,Safety,detect,detected,18260,"dministrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake comman",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:20458,Safety,detect,detecting,20458,"E_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for det",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:25309,Safety,redund,redundant,25309,"I. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E................................",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:25506,Safety,redund,redundant,25506,"CF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:28580,Safety,detect,detected,28580,"ways needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected compilers from PATH. >>> cmake. Build with specific (Intel) compilers from PATH. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. Build with specific (GNU) compilers not in PATH. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. Build with specific (Intel) compilers from PATH based on GCC not in PATH. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". Build with specific (Intel) compilers from PATH based on GCC not in PATH and also building Fortran Add-Ons. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"" \; -DCMAKE_Fortran_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". Build with specific (Intel) compilers from PAT",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:34286,Safety,detect,detected,34286,"D_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4 build on Cray¶; Cray systems strongly prefer to build static libraries, but PSI4; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building PSI4 on; Cray requires setting environment variables CRAYPE_LINK_TYPE; and CRAY_ADD_RPATH before running cmake.; 1CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Varia",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:35642,Safety,detect,detection,35642,"ow to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:35778,Safety,detect,detected,35778," not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> c",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:35957,Safety,detect,detection,35957," too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL from conda (install mkl-devel package from defaults channel). >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PR",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:36122,Safety,detect,detection,36122,"LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL from conda (install mkl-devel package from defaults channel). >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PREFIX}/lib/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". OpenBLAS - see note below. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/l",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:38336,Safety,avoid,avoid,38336,"so;/path/to/lib/libblas.a"". Notes. Much of PSI4’s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/10",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:38444,Safety,risk,risk,38444,"linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy an",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:38646,Safety,safe,safe,38646,"ith many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that req",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:38679,Safety,safe,safe,38679,"ith many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that req",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:38710,Safety,safe,safe,38710,"ith many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that req",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:39573,Safety,detect,detected,39573,"ay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:39711,Safety,detect,detection,39711,"tly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Ps",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:39770,Safety,detect,detection,39770,"nalysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexib",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:40191,Safety,detect,detection,40191,"thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language.; Downstream Dependencies — PSI4 \(\Leftarrow\) Python Interpreter. CMake Variables. PYTHON_EXECUTABLE — specify name or full path to Python interpreter.; PYTHON_LIBRARY — specify path to Python library.; PYTHON_INCLUDE_DIR — specify directory of Python headers. Contains Python.h. Examples. Build with detected Pyth",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:40504,Safety,detect,detected,40504,"ussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language.; Downstream Dependencies — PSI4 \(\Leftarrow\) Python Interpreter. CMake Variables. PYTHON_EXECUTABLE — specify name or full path to Python interpreter.; PYTHON_LIBRARY — specify path to Python library.; PYTHON_INCLUDE_DIR — specify directory of Python headers. Contains Python.h. Examples. Build with detected Python from PATH. >>> cmake. Build with specific Python. >>> cmake -DPYTHON_EXECUTABLE=/path/to/interp/python2.7. Build with full Python specification to root directory ${PFXC}. >>> cmake -DPYTHON_EXECUTABLE=""${PFXC}/bin/python"" \; -DPYTHON_LIBRARY=""${PFXC}/lib/libpython3.5m.so"" \; -DPYTHON_INCLUDE_DIR=""${",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:41148,Safety,detect,detected,41148,"of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language.; Downstream Dependencies — PSI4 \(\Leftarrow\) Python Interpreter. CMake Variables. PYTHON_EXECUTABLE — specify name or full path to Python interpreter.; PYTHON_LIBRARY — specify path to Python library.; PYTHON_INCLUDE_DIR — specify directory of Python headers. Contains Python.h. Examples. Build with detected Python from PATH. >>> cmake. Build with specific Python. >>> cmake -DPYTHON_EXECUTABLE=/path/to/interp/python2.7. Build with full Python specification to root directory ${PFXC}. >>> cmake -DPYTHON_EXECUTABLE=""${PFXC}/bin/python"" \; -DPYTHON_LIBRARY=""${PFXC}/lib/libpython3.5m.so"" \; -DPYTHON_INCLUDE_DIR=""${PFXC}/include/python3.5m"". What Python is Psi4 running¶; The Python detected at build-time is embedded into the PSI4; executable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/envs/p4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:41532,Safety,detect,detected,41532," the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language.; Downstream Dependencies — PSI4 \(\Leftarrow\) Python Interpreter. CMake Variables. PYTHON_EXECUTABLE — specify name or full path to Python interpreter.; PYTHON_LIBRARY — specify path to Python library.; PYTHON_INCLUDE_DIR — specify directory of Python headers. Contains Python.h. Examples. Build with detected Python from PATH. >>> cmake. Build with specific Python. >>> cmake -DPYTHON_EXECUTABLE=/path/to/interp/python2.7. Build with full Python specification to root directory ${PFXC}. >>> cmake -DPYTHON_EXECUTABLE=""${PFXC}/bin/python"" \; -DPYTHON_LIBRARY=""${PFXC}/lib/libpython3.5m.so"" \; -DPYTHON_INCLUDE_DIR=""${PFXC}/include/python3.5m"". What Python is Psi4 running¶; The Python detected at build-time is embedded into the PSI4; executable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/envs/p4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- pyth",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:43559,Safety,safe,safe,43559,"t; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [libm.so.6] in /usr/lib64 may be hidden by files in:; /theoryfs2/common/software/anaconda/lib. Some of these libraries may not be found correctly. How to set up the scratch directory¶; The scratch directory is where Psi4 stores potentially large files during; computation. It should thus be on a local, fast disk to minimize any; computational inefficiencies caused by I/O. The scratch directory is; commonly set up through the PSI_SCRATCH environment variable:; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specif",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47589,Safety,detect,detectable,47589,"ting errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:51037,Safety,avoid,avoid,51037," changing the PSI4 repo codebase between compiles, there’s; nothing more to do as CMake will handle the code rebuild deps for you.; If you’re changing the local Add-On repo codebase between compiles,; CMake does not know when libaddon.[a|so|dylib] needs rebuilding. It; is recommended that the PSI4 build be initially configured with; -DBUILD_SHARED_LIBS=ON (easier to notice changes). And to trigger; Add-On library rebuild, rm -rf {objdir}/external/upstream/addon/; and rm -rf {objdir}/stage/{prefix}/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/{prefix},; especially any *.pyc files.; Alternatively to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:15778,Security,sanitiz,sanitizer,15778,,MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:15934,Security,sanitiz,sanitizer,15934,"i4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization"" ON; ""-xHost"" ""-march=native""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /).",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:16113,Security,sanitiz,sanitizer,16113,"i4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization"" ON; ""-xHost"" ""-march=native""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /).",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:16271,Security,sanitiz,sanitizer,16271,"i4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization"" ON; ""-xHost"" ""-march=native""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /).",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:40777,Security,access,accessed,40777,"ction printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language.; Downstream Dependencies — PSI4 \(\Leftarrow\) Python Interpreter. CMake Variables. PYTHON_EXECUTABLE — specify name or full path to Python interpreter.; PYTHON_LIBRARY — specify path to Python library.; PYTHON_INCLUDE_DIR — specify directory of Python headers. Contains Python.h. Examples. Build with detected Python from PATH. >>> cmake. Build with specific Python. >>> cmake -DPYTHON_EXECUTABLE=/path/to/interp/python2.7. Build with full Python specification to root directory ${PFXC}. >>> cmake -DPYTHON_EXECUTABLE=""${PFXC}/bin/python"" \; -DPYTHON_LIBRARY=""${PFXC}/lib/libpython3.5m.so"" \; -DPYTHON_INCLUDE_DIR=""${PFXC}/include/python3.5m"". What Python is Psi4 running¶; The Python detected at build-time is embedded into the PSI4; executable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/envs/p4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:1533,Testability,test,test,1533,", and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure.",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:3020,Testability,test,test,3020,"local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a sta",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:3067,Testability,test,tests,3067,"he; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:3097,Testability,test,tests,3097,"he; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:3121,Testability,test,testing,3121,"he; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:3144,Testability,test,test,3144,"he; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:3245,Testability,test,tests,3245,"-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to ang",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:5332,Testability,test,tests,5332,"GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cf",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:5378,Testability,test,testing,5378,"e following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cfour — [what is this?]; dftd3 — [what is this?]; gcp — [what",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:6750,Testability,test,testing,6750,"nx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cfour — [what is this?]; dftd3 — [what is this?]; gcp — [what is this?]; mrcc — [what is this?]; v2rdm_casscf — [what is this?]; snsmp2 — [what is this?]. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles arbitrary order; angular momentum, but compiling that is prohibitive. The default of 5; is generally good. 6 has met all of a research group’s needs for; years. 4 is handy for quickly testing other parts of the build. Build with Higher Angular Momentum; >>> cmake -DMAX_AM_ERI=6. Relevant CMake Options:; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:8815,Testability,test,tests,8815,"ckage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:14739,Testability,test,tested,14739,"ions are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization"" ON; ""-xHost"" ""-march=native""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-che",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:19776,Testability,test,tested,19776,"o choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:26694,Testability,test,test,26694,"_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:30964,Testability,test,test,30964,"X and HOST are defined upon; activation). >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${CONDA_PREFIX}/bin/${HOST} --sysroot=${CONDA_PREFIX}/${HOST}/sysroot"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${CONDA_PREFIX}/bin/${HOST} --sysroot=${CONDA_PREFIX}/${HOST}/sysroot"". Build on Linux with specific (GCC) compilers from; from conda in activated environment; (CONDA_PREFIX and HOST are defined upon; activation). >>> cmake -DCMAKE_C_COMPILER=${GCC} \; -DCMAKE_CXX_COMPILER=${GXX} \; -DCMAKE_Fortran_COMPILER=${GFORTRAN}. What C and C++ compilers and versions are approved¶; On Linux, the following work nicely. GNU: gcc, g++; Intel: icc, icpc; Clang: clang, clang++. On Mac, the following work nicely. Apple Clang: clang, clang++; Intel: icc, icpc. PSI4 requires full C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; psi4/cmake/custom_cxxstandard.cmake, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; pa",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:32057,Testability,test,tested,32057,"th icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:38459,Testability,test,testing,38459,"linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy an",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:38508,Testability,test,tests,38508,"linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy an",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:38883,Testability,test,testing,38883,"is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:42572,Testability,test,tests,42572,"cutable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/envs/p4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path f",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:42693,Testability,test,tests,42693,"the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:45445,Testability,test,tests,45445,"o the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:45488,Testability,test,test,45488,"o the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:45737,Testability,test,tests,45737,"a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:45794,Testability,test,test,45794,"a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:45830,Testability,test,testname,45830," directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.0",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:45852,Testability,test,test,45852," directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.0",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:45869,Testability,test,testlabel,45869," directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.0",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:45958,Testability,test,tests,45958,"to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/te",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46061,Testability,test,test,46061,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46105,Testability,test,tests,46105,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46194,Testability,test,tests,46194,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46235,Testability,test,test,46235,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46290,Testability,test,tests,46290,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46365,Testability,test,tests,46365,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46398,Testability,test,testname,46398,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46412,Testability,test,tests,46412,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46452,Testability,test,testname,46452,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46466,Testability,test,tests,46466,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46500,Testability,test,testlabel,46500,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46515,Testability,test,tests,46515,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46557,Testability,test,testlabel,46557,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46585,Testability,test,testing,46585,"y similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46679,Testability,test,tests,46679,"y similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46903,Testability,test,tests,46903,"[here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fi",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46969,Testability,test,tests,46969,"[here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fi",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47002,Testability,log,log,47002,"rallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests tha",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47068,Testability,test,test,47068,"ite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run corre",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47160,Testability,test,testing,47160,"un the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_add",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47238,Testability,test,test,47238,"nd any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_ad",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47398,Testability,test,test,47398,"me; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addon",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47481,Testability,test,tests,47481,"me; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addon",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47552,Testability,test,test,47552,"label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47712,Testability,test,test,47712," Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47792,Testability,test,test,47792," all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. How to refer to Psi4¶; Ways to refer ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47882,Testability,test,test,47882," all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. How to refer to Psi4¶; Ways to refer ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47995,Testability,test,tests,47995," all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. How to refer to Psi4¶; Ways to refer ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:51820,Testability,test,test,51820,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:53834,Testability,test,tests,53834,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:53864,Testability,test,tests,53864,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:53888,Testability,test,testing,53888,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:53911,Testability,test,test,53911,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:418,Usability,guid,guide,418,"﻿. Compiling and Installing from Source. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. Compiling and Installing from Source¶. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. Prior to 1.1, PSI4 had a Python; script setup as a frontend to CMake, but this is no more, and; cmake is now invoked directly. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/lo",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:26775,Usability,clear,clear,26775,"TH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning-1.html:33556,Usability,guid,guides,33556,". # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4 build on Cray¶; Cray systems strongly prefer to build static libraries, but PSI4; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building PSI4 on; Cray requires setting environment variables CRAYPE_LINK_TYPE; and CRAY_ADD_RPATH before running cmake.; 1CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubun",MatchSource.WIKI,psi4manual/1.2.1/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:2471,Availability,avail,available,2471,"conf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:3129,Availability,error,errors,3129,"he; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:4136,Availability,down,download,4136,"ion. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate ena",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:4472,Availability,down,download,4472,"ation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Docum",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:5211,Availability,avail,available,5211," (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:5284,Availability,down,download,5284,"GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cf",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:5441,Availability,avail,available,5441,"ystem will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cfour — [what is this?]; dftd3 — [what is this?]; gcp — [what is this?]; mrcc — [what is this?]; v2rdm_casscf — [what is this?]; snsmp",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:8453,Availability,avail,available,8453,"detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s) containing the am8; metapackage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:14675,Availability,failure,failures,14675,"ions are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization"" ON; ""-xHost"" ""-march=native""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-che",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:18525,Availability,error,error,18525,"NSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:24830,Availability,echo,echo,24830,"_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:25309,Availability,redundant,redundant,25309,"I. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E................................",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:25506,Availability,redundant,redundant,25506,"CF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:26952,Availability,avail,available,26952,"for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:32363,Availability,echo,echo,32363,"tall XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:32447,Availability,echo,echo,32447,"tall XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:34789,Availability,down,download,34789,"¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g.,",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:37889,Availability,avail,available,37889,"ibmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". OpenBLAS - see note below. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib cmake. Build with explicit MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/intel64/libmkl_lapack95_lp64.a;/path/to/lib/intel64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". Build with explicit non-MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". Notes. Much of PSI4’s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/iss",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:38061,Availability,avail,available,38061,"xplicit MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/intel64/libmkl_lapack95_lp64.a;/path/to/lib/intel64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". Build with explicit non-MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". Notes. Much of PSI4’s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independen",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:39175,Availability,error,errors,39175," libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the mat",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:39218,Availability,down,down,39218," libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the mat",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:42326,Availability,error,error,42326,"ification to root directory ${PFXC}. >>> cmake -DPYTHON_EXECUTABLE=""${PFXC}/bin/python"" \; -DPYTHON_LIBRARY=""${PFXC}/lib/libpython3.5m.so"" \; -DPYTHON_INCLUDE_DIR=""${PFXC}/include/python3.5m"". What Python is Psi4 running¶; The Python detected at build-time is embedded into the PSI4; executable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/envs/p4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anacond",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:42785,Availability,error,errors,42785,"h PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [libm.so.6] in /usr/lib64 may be hidden by files in:; /theoryfs2/common/software/anaconda/lib. Some of these librar",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:42968,Availability,error,errors,42968,"a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [libm.so.6] in /usr/lib64 may be hidden by files in:; /theoryfs2/common/software/anaconda/lib. Some of these libraries may not be found correctly. How to set up the scratch directory¶; The scratch directory is where Psi4 stores poten",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46593,Availability,error,errors,46593,"y similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47491,Availability,avail,available,47491,"me; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addon",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47890,Availability,avail,available,47890," all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. How to refer to Psi4¶; Ways to refer ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:52169,Availability,avail,available,52169,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:52268,Availability,error,error,52268,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:53507,Availability,error,errors,53507,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:53896,Availability,error,errors,53896,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:1201,Deployability,install,install,1201,"lt through CMake. Prior to 1.1, PSI4 had a Python; script setup as a frontend to CMake, but this is no more, and; cmake is now invoked directly. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:1306,Deployability,install,installing,1306,"lt through CMake. Prior to 1.1, PSI4 had a Python; script setup as a frontend to CMake, but this is no more, and; cmake is now invoked directly. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:1422,Deployability,configurat,configuration,1422,".; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration opt",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:1510,Deployability,install,install,1510,".; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration opt",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:1543,Deployability,install,install,1543,", and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure.",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:1922,Deployability,install,installation,1922,"o not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _N",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:1971,Deployability,install,install,1971,"ons are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:2157,Deployability,install,installed,2157,"nts to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tes",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:2349,Deployability,configurat,configuration,2349,"cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configur",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:2399,Deployability,configurat,configuration,2399,"cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configur",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:2445,Deployability,configurat,configuration,2445,"conf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:2795,Deployability,configurat,configuration,2795,"1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links belo",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:3156,Deployability,install,installation,3156,"he; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:3257,Deployability,install,install,3257,"-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to ang",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:3286,Deployability,install,install,3286,"nd what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:3335,Deployability,install,installation,3335,"figuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:4329,Deployability,install,install,4329,"ter installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:5368,Deployability,install,installed,5368,"e following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cfour — [what is this?]; dftd3 — [what is this?]; gcp — [what",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:7425,Deployability,install,install,7425,"hat is this?]. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles arbitrary order; angular momentum, but compiling that is prohibitive. The default of 5; is generally good. 6 has met all of a research group’s needs for; years. 4 is handy for quickly testing other parts of the build. Build with Higher Angular Momentum; >>> cmake -DMAX_AM_ERI=6. Relevant CMake Options:; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s) containing the am8; metapackage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are av",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:7508,Deployability,install,installation,7508,"hat is this?]. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles arbitrary order; angular momentum, but compiling that is prohibitive. The default of 5; is generally good. 6 has met all of a research group’s needs for; years. 4 is handy for quickly testing other parts of the build. Build with Higher Angular Momentum; >>> cmake -DMAX_AM_ERI=6. Relevant CMake Options:; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s) containing the am8; metapackage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are av",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:7864,Deployability,install,install,7864,"; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s) containing the am8; metapackage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PR",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:8427,Deployability,configurat,configuration,8427,"detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s) containing the am8; metapackage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:8884,Deployability,install,install-,8884,"l am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:9057,Deployability,install,install,9057,"efault Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortra",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:9161,Deployability,install,install,9161,"move --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:9265,Deployability,install,install,9265,"n Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:9350,Deployability,install,install,9350,"M8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:9452,Deployability,install,install,9452,"doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn}",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:9510,Deployability,install,install,9510,"e; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMS",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:9586,Deployability,install,install,9586,"owever, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:9688,Deployability,configurat,configuration,9688," summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:10698,Deployability,install,install-libint,10698," # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (onl",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:10722,Deployability,install,install-gdma,10722," # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (onl",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:10757,Deployability,install,install-libint,10757," # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (onl",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:12007,Deployability,install,installed,12007,"n; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:12134,Deployability,install,installed,12134,"n; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:12247,Deployability,install,installed,12247,"n; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:12361,Deployability,install,installed,12361,"n; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:12478,Deployability,install,installed,12478,"n; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:12600,Deployability,install,installed,12600,"n; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:12670,Deployability,install,install,12670,"ction""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be adde",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:13786,Deployability,install,installed,13786,"ation within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERR",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:13868,Deployability,install,installed,13868,"ation within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERR",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:16781,Deployability,install,installed,16781,"i4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization"" ON; ""-xHost"" ""-march=native""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /).",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:16905,Deployability,install,installed,16905,"i4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization"" ON; ""-xHost"" ""-march=native""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /).",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:16983,Deployability,configurat,configuration,16983,"y compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recurs",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:17076,Deployability,install,install,17076,"py)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUI",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:17121,Deployability,install,installation,17121,"py)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUI",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:17325,Deployability,install,installation,17325,"=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:17634,Deployability,install,installed,17634," name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:17731,Deployability,install,install,17731,"ALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory,",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:18393,Deployability,release,release,18393,"ariable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -D",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:18452,Deployability,release,release,18452,"rectory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/external",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:18504,Deployability,release,release,18504,"rectory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/external",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:19142,Deployability,configurat,configuration,19142,"hat these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/ps",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:19460,Deployability,install,install-libint,19460," type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting i",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:19625,Deployability,install,installed,19625,"o configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:19810,Deployability,install,installation,19810,"o choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:19831,Deployability,install,installation,19831,"jdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:19871,Deployability,install,install,19871,"jdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:19958,Deployability,install,installation,19958,"H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (objec",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:20090,Deployability,install,installed,20090,"utside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); l",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:20468,Deployability,install,installed,20468,"E_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for det",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:20534,Deployability,install,install,20534," u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/python",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:21684,Deployability,install,installation,21684,"; share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. todo how to check if current py is compatible with compilation. How to configure paths for PsiAPI¶; If you know the location of the PSI4 executab",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:21882,Deployability,install,installation,21882,"+ any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. todo how to check if current py is compatible with compilation. How to configure paths for PsiAPI¶; If you know the location of the PSI4 executable (bin/psi4); for Psithon mode and want to know the corresponding location to add to; PYTHONPATH for PsiAPI mode, execute psi4 --psiapi-path. It; will return bash comma",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:23469,Deployability,install,installation,23469,"F E.............................................................PASSED. todo how to check if current py is compatible with compilation. How to configure paths for PsiAPI¶; If you know the location of the PSI4 executable (bin/psi4); for Psithon mode and want to know the corresponding location to add to; PYTHONPATH for PsiAPI mode, execute psi4 --psiapi-path. It; will return bash commands to set PATH (for correct python; interpreter) and PYTHONPATH (to find psi4 module) correctly,; after which import psi4 will work.; >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". How to run Psi4 as Python module after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable o",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:23667,Deployability,install,installation,23667," If you know the location of the PSI4 executable (bin/psi4); for Psithon mode and want to know the corresponding location to add to; PYTHONPATH for PsiAPI mode, execute psi4 --psiapi-path. It; will return bash commands to set PATH (for correct python; interpreter) and PYTHONPATH (to find psi4 module) correctly,; after which import psi4 will work.; >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". How to run Psi4 as Python module after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:24548,Deployability,install,installation,24548,"en a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRA",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:24567,Deployability,configurat,configuration,24567,"en a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRA",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:24668,Deployability,install,installing,24668,"en a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRA",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:25037,Deployability,install,installed,25037,"I. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E................................",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:25077,Deployability,install,installed,25077,"I. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E................................",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:25328,Deployability,install,installed,25328,"CF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:27538,Deployability,install,installed,27538,"ion using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected c",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:31359,Deployability,install,install,31359,"t; (CONDA_PREFIX and HOST are defined upon; activation). >>> cmake -DCMAKE_C_COMPILER=${GCC} \; -DCMAKE_CXX_COMPILER=${GXX} \; -DCMAKE_Fortran_COMPILER=${GFORTRAN}. What C and C++ compilers and versions are approved¶; On Linux, the following work nicely. GNU: gcc, g++; Intel: icc, icpc; Clang: clang, clang++. On Mac, the following work nicely. Apple Clang: clang, clang++; Intel: icc, icpc. PSI4 requires full C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; psi4/cmake/custom_cxxstandard.cmake, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:31926,Deployability,update,update,31926,"try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMA",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:31982,Deployability,install,install,31982,"try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMA",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:34540,Deployability,install,install,34540,"y requires setting environment variables CRAYPE_LINK_TYPE; and CRAY_ADD_RPATH before running cmake.; 1CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set b",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:36824,Deployability,install,install,36824,"ATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL from conda (install mkl-devel package from defaults channel). >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PREFIX}/lib/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". OpenBLAS - see note below. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib cmake. Build with explicit MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/intel64/libmkl_lapack95_lp64.a;/path/to/lib/intel64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". Build with explicit non-MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". Notes. Much of PSI4’s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:43098,Deployability,toggle,toggle,43098,"ix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [libm.so.6] in /usr/lib64 may be hidden by files in:; /theoryfs2/common/software/anaconda/lib. Some of these libraries may not be found correctly. How to set up the scratch directory¶; The scratch directory is where Psi4 stores potentially large files during; computation. It should thus be on a local, fast disk to minimize any; computational inefficiencies caused by I/O. The scratch directory is; com",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:45045,Deployability,update,update,45045,"set up through the PSI_SCRATCH environment variable:; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:45083,Deployability,update,updates,45083,"set up through the PSI_SCRATCH environment variable:; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:45398,Deployability,update,update,45398,"rofile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests ma",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:45522,Deployability,install,installed,45522,"o the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:45641,Deployability,install,installed,45641,"h the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/buil",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47250,Deployability,install,installation,47250,"nd any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_ad",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47380,Deployability,install,installation,47380,"nd any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_ad",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47406,Deployability,install,installed,47406,"me; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addon",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47438,Deployability,install,installation,47438,"me; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addon",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:50621,Deployability,install,install,50621,". Sometimes, you’re the one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset.; Find the CMakeLists.txt governing the target Add-On in; psi4/external and make changes analogous to the below:; 1; 2; 3; 4#GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you’re changing the PSI4 repo codebase between compiles, there’s; nothing more to do as CMake will handle the code rebuild deps for you.; If you’re changing the local Add-On repo codebase between compiles,; CMake does not know when libaddon.[a|so|dylib] needs rebuilding. It; is recommended that the PSI4 build be initially configured with; -DBUILD_SHARED_LIBS=ON (easier to notice changes). And to trigger; Add-On library rebuild, rm -rf {objdir}/external/upstream/addon/; and rm -rf {objdir}/stage/{prefix}/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/{prefix},; especially any *.pyc files.; Alternatively to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as ne",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:50924,Deployability,install,install,50924,"RY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you’re changing the PSI4 repo codebase between compiles, there’s; nothing more to do as CMake will handle the code rebuild deps for you.; If you’re changing the local Add-On repo codebase between compiles,; CMake does not know when libaddon.[a|so|dylib] needs rebuilding. It; is recommended that the PSI4 build be initially configured with; -DBUILD_SHARED_LIBS=ON (easier to notice changes). And to trigger; Add-On library rebuild, rm -rf {objdir}/external/upstream/addon/; and rm -rf {objdir}/stage/{prefix}/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/{prefix},; especially any *.pyc files.; Alternatively to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; Wha",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:51528,Deployability,update,update,51528,"and rm -rf {objdir}/stage/{prefix}/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/{prefix},; especially any *.pyc files.; Alternatively to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compil",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:51771,Deployability,install,install,51771,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:51830,Deployability,install,install,51830,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:52143,Deployability,configurat,configuration,52143,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:52187,Deployability,install,install,52187,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:52368,Deployability,configurat,configuration,52368,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:52453,Deployability,install,installed,52453,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:52673,Deployability,install,installation,52673,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:53778,Deployability,update,update,53778,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:53923,Deployability,install,installation,53923,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:54201,Deployability,update,updated,54201,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:22403,Energy Efficiency,energy,energy,22403,"ecutable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. todo how to check if current py is compatible with compilation. How to configure paths for PsiAPI¶; If you know the location of the PSI4 executable (bin/psi4); for Psithon mode and want to know the corresponding location to add to; PYTHONPATH for PsiAPI mode, execute psi4 --psiapi-path. It; will return bash commands to set PATH (for correct python; interpreter) and PYTHONPATH (to find psi4 module) correctly,; after which import psi4 will work.; >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". How to run Psi4 as",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:22475,Energy Efficiency,energy,energy,22475,"ATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. todo how to check if current py is compatible with compilation. How to configure paths for PsiAPI¶; If you know the location of the PSI4 executable (bin/psi4); for Psithon mode and want to know the corresponding location to add to; PYTHONPATH for PsiAPI mode, execute psi4 --psiapi-path. It; will return bash commands to set PATH (for correct python; interpreter) and PYTHONPATH (to find psi4 module) correctly,; after which import psi4 will work.; >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". How to run Psi4 as Python module after compilation¶; Substituting the full installati",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:24284,Energy Efficiency,energy,energy,24284,">>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". How to run Psi4 as Python module after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:24371,Energy Efficiency,energy,energy,24371,"import psi4"". How to run Psi4 as Python module after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performe",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:26022,Energy Efficiency,energy,energy,26022,"If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/sta",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:26094,Energy Efficiency,energy,energy,26094,"conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/ru",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:26339,Energy Efficiency,energy,energy,26339,"nvironment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:26426,Energy Efficiency,energy,energy,26426,"s; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only re",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:37940,Energy Efficiency,efficient,efficient,37940,"ibmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". OpenBLAS - see note below. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib cmake. Build with explicit MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/intel64/libmkl_lapack95_lp64.a;/path/to/lib/intel64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". Build with explicit non-MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". Notes. Much of PSI4’s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/iss",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:42586,Energy Efficiency,energy,energy,42586,"cutable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/envs/p4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path f",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:42707,Energy Efficiency,energy,energy,42707,"the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46705,Energy Efficiency,energy,energy,46705,"y similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46736,Energy Efficiency,energy,energy,46736,"y similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47770,Energy Efficiency,green,green,47770," all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. How to refer to Psi4¶; Ways to refer ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:1040,Integrability,depend,dependencies,1040,"ng from Source. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. Compiling and Installing from Source¶. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. Prior to 1.1, PSI4 had a Python; script setup as a frontend to CMake, but this is no more, and; cmake is now invoked directly. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Config",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:1064,Integrability,depend,dependencies,1064,"ng from Source. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. Compiling and Installing from Source¶. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. Prior to 1.1, PSI4 had a Python; script setup as a frontend to CMake, but this is no more, and; cmake is now invoked directly. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Config",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:2144,Integrability,depend,dependencies,2144,"nts to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tes",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:2191,Integrability,depend,dependencies,2191," section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install.",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:2302,Integrability,depend,dependencies,2302," section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install.",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:3513,Integrability,depend,dependencies,3513,"CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; L",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:4708,Integrability,depend,dependencies,4708,"bint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jup",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:4907,Integrability,depend,dependencies,4907,"mized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:5063,Integrability,depend,dependencies,5063,"aders (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is t",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:5774,Integrability,message,message,5774,"kx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cfour — [what is this?]; dftd3 — [what is this?]; gcp — [what is this?]; mrcc — [what is this?]; v2rdm_casscf — [what is this?]; snsmp2 — [what is this?]. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles arbitrary order; angular momentum, but compiling that is prohibitive. The default of 5; is generally good. 6 has met all of a research group’s needs for; years. 4 is handy for quickly testing other parts of the build. Bui",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:5819,Integrability,depend,dependencies,5819,"kx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cfour — [what is this?]; dftd3 — [what is this?]; gcp — [what is this?]; mrcc — [what is this?]; v2rdm_casscf — [what is this?]; snsmp2 — [what is this?]. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles arbitrary order; angular momentum, but compiling that is prohibitive. The default of 5; is generally good. 6 has met all of a research group’s needs for; years. 4 is handy for quickly testing other parts of the build. Bui",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:8176,Integrability,depend,depending,8176,"you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s) containing the am8; metapackage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g.",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:9087,Integrability,depend,dependencies,9087,"in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpr",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:10038,Integrability,depend,dependencies,10038,"Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detec",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:10666,Integrability,depend,dependencies,10666," only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:14009,Integrability,message,message,14009,"OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build int",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:14226,Integrability,message,message,14226,"IMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:14287,Integrability,message,message,14287,"les PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test th",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:14321,Integrability,interface,interface,14321,"les PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test th",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:14444,Integrability,message,message,14444,"f ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization"" ON; ""-xHost"" ""-march=native""); option_with",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:32050,Integrability,rout,route,32050,"th icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:37435,Integrability,depend,depends,37435,"ve Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL from conda (install mkl-devel package from defaults channel). >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PREFIX}/lib/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". OpenBLAS - see note below. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib cmake. Build with explicit MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/intel64/libmkl_lapack95_lp64.a;/path/to/lib/intel64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". Build with explicit non-MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". Notes. Much of PSI4’s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; pa",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:40433,Integrability,interface,interface,40433,"ussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language.; Downstream Dependencies — PSI4 \(\Leftarrow\) Python Interpreter. CMake Variables. PYTHON_EXECUTABLE — specify name or full path to Python interpreter.; PYTHON_LIBRARY — specify path to Python library.; PYTHON_INCLUDE_DIR — specify directory of Python headers. Contains Python.h. Examples. Build with detected Python from PATH. >>> cmake. Build with specific Python. >>> cmake -DPYTHON_EXECUTABLE=/path/to/interp/python2.7. Build with full Python specification to root directory ${PFXC}. >>> cmake -DPYTHON_EXECUTABLE=""${PFXC}/bin/python"" \; -DPYTHON_LIBRARY=""${PFXC}/lib/libpython3.5m.so"" \; -DPYTHON_INCLUDE_DIR=""${",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:45305,Integrability,depend,depending,45305,"cal-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47038,Integrability,depend,depending,47038,"ite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run corre",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:50665,Integrability,interface,interface,50665,". Sometimes, you’re the one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset.; Find the CMakeLists.txt governing the target Add-On in; psi4/external and make changes analogous to the below:; 1; 2; 3; 4#GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you’re changing the PSI4 repo codebase between compiles, there’s; nothing more to do as CMake will handle the code rebuild deps for you.; If you’re changing the local Add-On repo codebase between compiles,; CMake does not know when libaddon.[a|so|dylib] needs rebuilding. It; is recommended that the PSI4 build be initially configured with; -DBUILD_SHARED_LIBS=ON (easier to notice changes). And to trigger; Add-On library rebuild, rm -rf {objdir}/external/upstream/addon/; and rm -rf {objdir}/stage/{prefix}/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/{prefix},; especially any *.pyc files.; Alternatively to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as ne",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:51878,Integrability,depend,dependencies,51878,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:51989,Integrability,depend,dependencies,51989,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:207,Modifiability,config,configure,207,"﻿. Compiling and Installing from Source. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. Compiling and Installing from Source¶. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. Prior to 1.1, PSI4 had a Python; script setup as a frontend to CMake, but this is no more, and; cmake is now invoked directly. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/lo",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:781,Modifiability,config,configure,781,"﻿. Compiling and Installing from Source. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. Compiling and Installing from Source¶. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. Prior to 1.1, PSI4 had a Python; script setup as a frontend to CMake, but this is no more, and; cmake is now invoked directly. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/lo",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:1277,Modifiability,config,configuring,1277,"lt through CMake. Prior to 1.1, PSI4 had a Python; script setup as a frontend to CMake, but this is no more, and; cmake is now invoked directly. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:1422,Modifiability,config,configuration,1422,".; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration opt",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:2349,Modifiability,config,configuration,2349,"cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configur",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:2399,Modifiability,config,configuration,2399,"cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configur",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:2445,Modifiability,config,configuration,2445,"conf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:2499,Modifiability,config,configure,2499,"conf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:2795,Modifiability,config,configuration,2795,"1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links belo",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:3361,Modifiability,config,configure,3361,"figuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:3377,Modifiability,variab,variables,3377,"figuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:3808,Modifiability,config,configure,3808,"ile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:6476,Modifiability,config,configure,6476,"rg; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cfour — [what is this?]; dftd3 — [what is this?]; gcp — [what is this?]; mrcc — [what is this?]; v2rdm_casscf — [what is this?]; snsmp2 — [what is this?]. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles arbitrary order; angular momentum, but compiling that is prohibitive. The default of 5; is generally good. 6 has met all of a research group’s needs for; years. 4 is handy for quickly testing other parts of the build. Build with Higher Angular Momentum; >>> cmake -DMAX_AM_ERI=6. Relevant CMake Options:; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time. How to configu",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:7545,Modifiability,config,configure,7545,"handles arbitrary order; angular momentum, but compiling that is prohibitive. The default of 5; is generally good. 6 has met all of a research group’s needs for; years. 4 is handy for quickly testing other parts of the build. Build with Higher Angular Momentum; >>> cmake -DMAX_AM_ERI=6. Relevant CMake Options:; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s) containing the am8; metapackage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the dev",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:8427,Modifiability,config,configuration,8427,"detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s) containing the am8; metapackage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:9668,Modifiability,variab,variables,9668," summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:9688,Modifiability,config,configuration,9688," summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:13404,Modifiability,plugin,plugin,13404,"ation within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERR",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:13498,Modifiability,plugin,plugin,13498,"ation within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERR",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:13602,Modifiability,plugin,plugin,13602,"ation within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERR",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:13779,Modifiability,plugin,plugin,13779,"ation within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERR",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:13861,Modifiability,plugin,plugin,13861,"ation within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERR",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:14042,Modifiability,plugin,plugins,14042,"OFF); option(ENABLE_libefp ""Enables LIBEFP for fragments"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build int",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:15322,Modifiability,plugin,plugin,15322,,MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:16983,Modifiability,config,configuration,16983,"y compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recurs",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:17378,Modifiability,variab,variable,17378,"=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:17771,Modifiability,config,configured,17771,"ALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory,",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:18130,Modifiability,plugin,plugins,18130,"/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-leve",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:18149,Modifiability,variab,variable,18149,"/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-leve",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:18677,Modifiability,config,configure,18677,"to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:19142,Modifiability,config,configuration,19142,"hat these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/ps",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:19214,Modifiability,config,configure,19214,"hat these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/ps",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:19343,Modifiability,config,configure,19343,"ization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 libr",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:19558,Modifiability,config,configure,19558," type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting i",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:19578,Modifiability,config,configure,19578,"ebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersi",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:20750,Modifiability,plugin,plugins,20750,"a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; termina",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:20759,Modifiability,plugin,plugin,20759,"a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; termina",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:21277,Modifiability,variab,variables,21277,"/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-net",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:22663,Modifiability,config,configure,22663,"g commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. todo how to check if current py is compatible with compilation. How to configure paths for PsiAPI¶; If you know the location of the PSI4 executable (bin/psi4); for Psithon mode and want to know the corresponding location to add to; PYTHONPATH for PsiAPI mode, execute psi4 --psiapi-path. It; will return bash commands to set PATH (for correct python; interpreter) and PYTHONPATH (to find psi4 module) correctly,; after which import psi4 will work.; >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". How to run Psi4 as Python module after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:24148,Modifiability,config,configure,24148,"HONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". How to run Psi4 as Python module after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Min",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:24567,Modifiability,config,configuration,24567,"en a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRA",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:27186,Modifiability,variab,variable,27186,"....PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Varia",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:27453,Modifiability,variab,variable,27453,"t energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additiona",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:27992,Modifiability,config,configure,27992,"ir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected compilers from PATH. >>> cmake. Build with specific (Intel) compilers from PATH. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. Build with specific (GNU) compilers not in PATH. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. Build with specific (Intel) compilers from PATH based on GCC not in PATH. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:28233,Modifiability,variab,variable,28233," of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected compilers from PATH. >>> cmake. Build with specific (Intel) compilers from PATH. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. Build with specific (GNU) compilers not in PATH. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. Build with specific (Intel) compilers from PATH based on GCC not in PATH. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". Build with specific (Intel) compilers from PATH based on GCC not in PATH and also building Fortran Add-Ons. >",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:28314,Modifiability,variab,variable,28314,"eveloper use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected compilers from PATH. >>> cmake. Build with specific (Intel) compilers from PATH. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. Build with specific (GNU) compilers not in PATH. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. Build with specific (Intel) compilers from PATH based on GCC not in PATH. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". Build with specific (Intel) compilers from PATH based on GCC not in PATH and also building Fortran Add-Ons. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_Fortran_C",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:28392,Modifiability,variab,variable,28392,"are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected compilers from PATH. >>> cmake. Build with specific (Intel) compilers from PATH. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. Build with specific (GNU) compilers not in PATH. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. Build with specific (Intel) compilers from PATH based on GCC not in PATH. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". Build with specific (Intel) compilers from PATH based on GCC not in PATH and also building Fortran Add-Ons. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:28488,Modifiability,variab,variable,28488,"SI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected compilers from PATH. >>> cmake. Build with specific (Intel) compilers from PATH. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. Build with specific (GNU) compilers not in PATH. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. Build with specific (Intel) compilers from PATH based on GCC not in PATH. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". Build with specific (Intel) compilers from PATH based on GCC not in PATH and also building Fortran Add-Ons. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"" \; -DCMAKE_Fortran_FLAGS=""-gcc-name=${GCC5}/bin/",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:32302,Modifiability,variab,variables,32302,"tall XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:33346,Modifiability,config,configure,33346,"conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4 build on Cray¶; Cray systems strongly prefer to build static libraries, but PSI4; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building PSI4 on; Cray requires setting environment variables CRAYPE_LINK_TYPE; and CRAY_ADD_RPATH before running cmake.; 1CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. W",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:33616,Modifiability,variab,variables,33616,". # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4 build on Cray¶; Cray systems strongly prefer to build static libraries, but PSI4; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building PSI4 on; Cray requires setting environment variables CRAYPE_LINK_TYPE; and CRAY_ADD_RPATH before running cmake.; 1CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubun",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:33748,Modifiability,config,configure,33748," (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4 build on Cray¶; Cray systems strongly prefer to build static libraries, but PSI4; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building PSI4 on; Cray requires setting environment variables CRAYPE_LINK_TYPE; and CRAY_ADD_RPATH before running cmake.; 1CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:34100,Modifiability,variab,variable,34100," Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4 build on Cray¶; Cray systems strongly prefer to build static libraries, but PSI4; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building PSI4 on; Cray requires setting environment variables CRAYPE_LINK_TYPE; and CRAY_ADD_RPATH before running cmake.; 1CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and e",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:34188,Modifiability,variab,variable,34188,"bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4 build on Cray¶; Cray systems strongly prefer to build static libraries, but PSI4; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building PSI4 on; Cray requires setting environment variables CRAYPE_LINK_TYPE; and CRAY_ADD_RPATH before running cmake.; 1CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular sy",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:34984,Modifiability,config,configure,34984,"Solver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full p",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:35318,Modifiability,variab,variable,35318,"ler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:35442,Modifiability,variab,variable,35442,"ng work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accele",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:35571,Modifiability,variab,variable,35571,"ers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DL",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:35702,Modifiability,variab,variable,35702," not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> c",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:35888,Modifiability,variab,variable,35888," too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL from conda (install mkl-devel package from defaults channel). >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PR",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:36047,Modifiability,variab,variable,36047,"LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL from conda (install mkl-devel package from defaults channel). >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PREFIX}/lib/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". OpenBLAS - see note below. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/l",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:39800,Modifiability,variab,variables,39800,"nalysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexib",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:40644,Modifiability,config,configure,40644,"n relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language.; Downstream Dependencies — PSI4 \(\Leftarrow\) Python Interpreter. CMake Variables. PYTHON_EXECUTABLE — specify name or full path to Python interpreter.; PYTHON_LIBRARY — specify path to Python library.; PYTHON_INCLUDE_DIR — specify directory of Python headers. Contains Python.h. Examples. Build with detected Python from PATH. >>> cmake. Build with specific Python. >>> cmake -DPYTHON_EXECUTABLE=/path/to/interp/python2.7. Build with full Python specification to root directory ${PFXC}. >>> cmake -DPYTHON_EXECUTABLE=""${PFXC}/bin/python"" \; -DPYTHON_LIBRARY=""${PFXC}/lib/libpython3.5m.so"" \; -DPYTHON_INCLUDE_DIR=""${PFXC}/include/python3.5m"". What Python is Psi4 running¶; The Python detected at build-time is embedded into the PSI4; executable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/en",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:44157,Modifiability,variab,variable,44157,"kers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [libm.so.6] in /usr/lib64 may be hidden by files in:; /theoryfs2/common/software/anaconda/lib. Some of these libraries may not be found correctly. How to set up the scratch directory¶; The scratch directory is where Psi4 stores potentially large files during; computation. It should thus be on a local, fast disk to minimize any; computational inefficiencies caused by I/O. The scratch directory is; commonly set up through the PSI_SCRATCH environment variable:; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone fro",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:44819,Modifiability,variab,variables,44819,"b. Some of these libraries may not be found correctly. How to set up the scratch directory¶; The scratch directory is where Psi4 stores potentially large files during; computation. It should thus be on a local, fast disk to minimize any; computational inefficiencies caused by I/O. The scratch directory is; commonly set up through the PSI_SCRATCH environment variable:; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47641,Modifiability,config,configure,47641,"r/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::tes",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:50371,Modifiability,config,configured,50371,"in the Psi4 build¶; For each Add-On, PSI4 pulls source from a specific online Git; repository and a specific tag/branch/commit in it. This ensures success; of the PSI4 build, reproducibility of the runtime results, and; freedom for continued upstream development. Sometimes, you’re the one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset.; Find the CMakeLists.txt governing the target Add-On in; psi4/external and make changes analogous to the below:; 1; 2; 3; 4#GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you’re changing the PSI4 repo codebase between compiles, there’s; nothing more to do as CMake will handle the code rebuild deps for you.; If you’re changing the local Add-On repo codebase between compiles,; CMake does not know when libaddon.[a|so|dylib] needs rebuilding. It; is recommended that the PSI4 build be initially configured with; -DBUILD_SHARED_LIBS=ON (easier to notice changes). And to trigger; Add-On library rebuild, rm -rf {objdir}/external/upstream/addon/; and rm -rf {objdir}/stage/{prefix}/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/{prefix},; especially any *.pyc files.; Alternatively to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4’s CMake as; -DAddon_DIR=",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:51387,Modifiability,config,config,51387,"ured with; -DBUILD_SHARED_LIBS=ON (easier to notice changes). And to trigger; Add-On library rebuild, rm -rf {objdir}/external/upstream/addon/; and rm -rf {objdir}/stage/{prefix}/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/{prefix},; especially any *.pyc files.; Alternatively to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configurat",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:51721,Modifiability,config,configure,51721,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:52010,Modifiability,config,configure,52010,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:52143,Modifiability,config,configuration,52143,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:52368,Modifiability,config,configuration,52368,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:52535,Modifiability,config,configure,52535,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:52795,Modifiability,config,configure,52795,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:53058,Modifiability,config,configure,53058,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:53097,Modifiability,config,configure,53097,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:53266,Modifiability,config,configure,53266,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:53314,Modifiability,config,configure,53314,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:15419,Performance,optimiz,optimization,15419,,MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:18060,Performance,optimiz,optimizations,18060,"/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-leve",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:18312,Performance,optimiz,optimization,18312,"stallation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-d",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:21125,Performance,load,loader,21125,"xternal proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage/prefix for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:25373,Performance,perform,performed,25373,"CF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:31539,Performance,perform,performed,31539,"and C++ compilers and versions are approved¶; On Linux, the following work nicely. GNU: gcc, g++; Intel: icc, icpc; Clang: clang, clang++. On Mac, the following work nicely. Apple Clang: clang, clang++; Intel: icc, icpc. PSI4 requires full C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; psi4/cmake/custom_cxxstandard.cmake, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -D",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:39014,Performance,load,loaders,39014,"ich is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:42165,Performance,load,loading,42165,"etected Python from PATH. >>> cmake. Build with specific Python. >>> cmake -DPYTHON_EXECUTABLE=/path/to/interp/python2.7. Build with full Python specification to root directory ${PFXC}. >>> cmake -DPYTHON_EXECUTABLE=""${PFXC}/bin/python"" \; -DPYTHON_LIBRARY=""${PFXC}/lib/libpython3.5m.so"" \; -DPYTHON_INCLUDE_DIR=""${PFXC}/include/python3.5m"". What Python is Psi4 running¶; The Python detected at build-time is embedded into the PSI4; executable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/envs/p4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:44719,Performance,queue,queue,44719,"b. Some of these libraries may not be found correctly. How to set up the scratch directory¶; The scratch directory is where Psi4 stores potentially large files during; computation. It should thus be on a local, fast disk to minimize any; computational inefficiencies caused by I/O. The scratch directory is; commonly set up through the PSI_SCRATCH environment variable:; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47349,Performance,perform,performed,47349,"nd any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_ad",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:53764,Performance,queue,queue,53764,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:747,Safety,detect,detect,747,"﻿. Compiling and Installing from Source. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. Compiling and Installing from Source¶. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. Prior to 1.1, PSI4 had a Python; script setup as a frontend to CMake, but this is no more, and; cmake is now invoked directly. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/lo",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:4425,Safety,detect,detected,4425,"ation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to angular momentum >16) http://mpmath.org/; System utilities: GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Docum",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:7496,Safety,detect,detect,7496,"hat is this?]. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles arbitrary order; angular momentum, but compiling that is prohibitive. The default of 5; is generally good. 6 has met all of a research group’s needs for; years. 4 is handy for quickly testing other parts of the build. Build with Higher Angular Momentum; >>> cmake -DMAX_AM_ERI=6. Relevant CMake Options:; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s) containing the am8; metapackage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are av",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:9393,Safety,avoid,avoidable,9393,"M8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:10876,Safety,detect,detection,10876,"ome add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Locat",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:11052,Safety,detect,detect,11052,"ome add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Locat",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:11170,Safety,detect,detected,11170,"e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which exe",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:11266,Safety,detect,detection,11266,"python include files (e.g., /path/to/include/python2.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:11437,Safety,detect,detection,11437,"r any ${AddOn} of: ambit, CheMPS2, dkh, libefp, erd, gau2grid, gdma, Libint, PCMSolver, pybind11, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX t",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:11663,Safety,detect,detection,11663,"nstall-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ###############",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:11770,Safety,detect,detection,11770,"nstall-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ###############",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:11891,Safety,detect,detection,11891,"nstall-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to OFF to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ###############",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:15174,Safety,detect,detect,15174,,MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:15252,Safety,detect,detect,15252,,MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:18260,Safety,detect,detected,18260,"dministrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to fix error “RuntimeError: value for ERI”¶; You will need to rebuild Libint. Reissue cmake or edit; CMakeCache.txt with larger MAX_AM_ERI and rebuild. How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake comman",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:20458,Safety,detect,detecting,20458,"E_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for det",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:25309,Safety,redund,redundant,25309,"I. Run PSI4.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E................................",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:25506,Safety,redund,redundant,25506,"CF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4” commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; source activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:28580,Safety,detect,detected,28580,"ways needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected compilers from PATH. >>> cmake. Build with specific (Intel) compilers from PATH. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. Build with specific (GNU) compilers not in PATH. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. Build with specific (Intel) compilers from PATH based on GCC not in PATH. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". Build with specific (Intel) compilers from PATH based on GCC not in PATH and also building Fortran Add-Ons. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"" \; -DCMAKE_Fortran_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". Build with specific (Intel) compilers from PAT",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:34286,Safety,detect,detected,34286,"D_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4 build on Cray¶; Cray systems strongly prefer to build static libraries, but PSI4; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building PSI4 on; Cray requires setting environment variables CRAYPE_LINK_TYPE; and CRAY_ADD_RPATH before running cmake.; 1CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubuntu gfortran; conda gfortran_linux-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Varia",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:35642,Safety,detect,detection,35642,"ow to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:35778,Safety,detect,detected,35778," not provide a Fortran compiler. A way to get one is to download; the gcc conda package. This provides gcc, g++, and; gfortran compilers for Mac. The two former are 4.8.5 and so are too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> c",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:35957,Safety,detect,detection,35957," too; old to compile PSI4, but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL from conda (install mkl-devel package from defaults channel). >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PR",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:36122,Safety,detect,detection,36122,"LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; MKL_ROOT — Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location.; MATH_ROOT — Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so).; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be semicolon-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL. Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL from conda (install mkl-devel package from defaults channel). >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PREFIX}/lib/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". OpenBLAS - see note below. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/l",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:38336,Safety,avoid,avoid,38336,"so;/path/to/lib/libblas.a"". Notes. Much of PSI4’s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/10",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:38444,Safety,risk,risk,38444,"linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy an",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:38646,Safety,safe,safe,38646,"ith many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that req",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:38679,Safety,safe,safe,38679,"ith many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that req",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:38710,Safety,safe,safe,38710,"ith many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that req",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:39573,Safety,detect,detected,39573,"ay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:39711,Safety,detect,detection,39711,"tly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Ps",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:39770,Safety,detect,detection,39770,"nalysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexib",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:40191,Safety,detect,detection,40191,"thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language.; Downstream Dependencies — PSI4 \(\Leftarrow\) Python Interpreter. CMake Variables. PYTHON_EXECUTABLE — specify name or full path to Python interpreter.; PYTHON_LIBRARY — specify path to Python library.; PYTHON_INCLUDE_DIR — specify directory of Python headers. Contains Python.h. Examples. Build with detected Pyth",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:40504,Safety,detect,detected,40504,"ussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language.; Downstream Dependencies — PSI4 \(\Leftarrow\) Python Interpreter. CMake Variables. PYTHON_EXECUTABLE — specify name or full path to Python interpreter.; PYTHON_LIBRARY — specify path to Python library.; PYTHON_INCLUDE_DIR — specify directory of Python headers. Contains Python.h. Examples. Build with detected Python from PATH. >>> cmake. Build with specific Python. >>> cmake -DPYTHON_EXECUTABLE=/path/to/interp/python2.7. Build with full Python specification to root directory ${PFXC}. >>> cmake -DPYTHON_EXECUTABLE=""${PFXC}/bin/python"" \; -DPYTHON_LIBRARY=""${PFXC}/lib/libpython3.5m.so"" \; -DPYTHON_INCLUDE_DIR=""${",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:41148,Safety,detect,detected,41148,"of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language.; Downstream Dependencies — PSI4 \(\Leftarrow\) Python Interpreter. CMake Variables. PYTHON_EXECUTABLE — specify name or full path to Python interpreter.; PYTHON_LIBRARY — specify path to Python library.; PYTHON_INCLUDE_DIR — specify directory of Python headers. Contains Python.h. Examples. Build with detected Python from PATH. >>> cmake. Build with specific Python. >>> cmake -DPYTHON_EXECUTABLE=/path/to/interp/python2.7. Build with full Python specification to root directory ${PFXC}. >>> cmake -DPYTHON_EXECUTABLE=""${PFXC}/bin/python"" \; -DPYTHON_LIBRARY=""${PFXC}/lib/libpython3.5m.so"" \; -DPYTHON_INCLUDE_DIR=""${PFXC}/include/python3.5m"". What Python is Psi4 running¶; The Python detected at build-time is embedded into the PSI4; executable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/envs/p4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:41532,Safety,detect,detected,41532," the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language.; Downstream Dependencies — PSI4 \(\Leftarrow\) Python Interpreter. CMake Variables. PYTHON_EXECUTABLE — specify name or full path to Python interpreter.; PYTHON_LIBRARY — specify path to Python library.; PYTHON_INCLUDE_DIR — specify directory of Python headers. Contains Python.h. Examples. Build with detected Python from PATH. >>> cmake. Build with specific Python. >>> cmake -DPYTHON_EXECUTABLE=/path/to/interp/python2.7. Build with full Python specification to root directory ${PFXC}. >>> cmake -DPYTHON_EXECUTABLE=""${PFXC}/bin/python"" \; -DPYTHON_LIBRARY=""${PFXC}/lib/libpython3.5m.so"" \; -DPYTHON_INCLUDE_DIR=""${PFXC}/include/python3.5m"". What Python is Psi4 running¶; The Python detected at build-time is embedded into the PSI4; executable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/envs/p4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- pyth",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:43559,Safety,safe,safe,43559,"t; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [libm.so.6] in /usr/lib64 may be hidden by files in:; /theoryfs2/common/software/anaconda/lib. Some of these libraries may not be found correctly. How to set up the scratch directory¶; The scratch directory is where Psi4 stores potentially large files during; computation. It should thus be on a local, fast disk to minimize any; computational inefficiencies caused by I/O. The scratch directory is; commonly set up through the PSI_SCRATCH environment variable:; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specif",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47589,Safety,detect,detectable,47589,"ting errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:51037,Safety,avoid,avoid,51037," changing the PSI4 repo codebase between compiles, there’s; nothing more to do as CMake will handle the code rebuild deps for you.; If you’re changing the local Add-On repo codebase between compiles,; CMake does not know when libaddon.[a|so|dylib] needs rebuilding. It; is recommended that the PSI4 build be initially configured with; -DBUILD_SHARED_LIBS=ON (easier to notice changes). And to trigger; Add-On library rebuild, rm -rf {objdir}/external/upstream/addon/; and rm -rf {objdir}/stage/{prefix}/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/{prefix},; especially any *.pyc files.; Alternatively to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:15778,Security,sanitiz,sanitizer,15778,,MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:15934,Security,sanitiz,sanitizer,15934,"i4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization"" ON; ""-xHost"" ""-march=native""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /).",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:16113,Security,sanitiz,sanitizer,16113,"i4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization"" ON; ""-xHost"" ""-march=native""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /).",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:16271,Security,sanitiz,sanitizer,16271,"i4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization"" ON; ""-xHost"" ""-march=native""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /).",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:40777,Security,access,accessed,40777,"ction printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language.; Downstream Dependencies — PSI4 \(\Leftarrow\) Python Interpreter. CMake Variables. PYTHON_EXECUTABLE — specify name or full path to Python interpreter.; PYTHON_LIBRARY — specify path to Python library.; PYTHON_INCLUDE_DIR — specify directory of Python headers. Contains Python.h. Examples. Build with detected Python from PATH. >>> cmake. Build with specific Python. >>> cmake -DPYTHON_EXECUTABLE=/path/to/interp/python2.7. Build with full Python specification to root directory ${PFXC}. >>> cmake -DPYTHON_EXECUTABLE=""${PFXC}/bin/python"" \; -DPYTHON_LIBRARY=""${PFXC}/lib/libpython3.5m.so"" \; -DPYTHON_INCLUDE_DIR=""${PFXC}/include/python3.5m"". What Python is Psi4 running¶; The Python detected at build-time is embedded into the PSI4; executable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/envs/p4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:1533,Testability,test,test,1533,", and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure.",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:3020,Testability,test,test,3020,"local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a sta",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:3067,Testability,test,tests,3067,"he; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:3097,Testability,test,tests,3097,"he; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:3121,Testability,test,testing,3121,"he; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:3144,Testability,test,test,3144,"he; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:3245,Testability,test,tests,3245,"-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; mpmath (only needed if you build gau2grid to ang",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:5332,Testability,test,tests,5332,"GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cf",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:5378,Testability,test,testing,5378,"e following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cfour — [what is this?]; dftd3 — [what is this?]; gcp — [what",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:6750,Testability,test,testing,6750,"nx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cfour — [what is this?]; dftd3 — [what is this?]; gcp — [what is this?]; mrcc — [what is this?]; v2rdm_casscf — [what is this?]; snsmp2 — [what is this?]. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles arbitrary order; angular momentum, but compiling that is prohibitive. The default of 5; is generally good. 6 has met all of a research group’s needs for; years. 4 is handy for quickly testing other parts of the build. Build with Higher Angular Momentum; >>> cmake -DMAX_AM_ERI=6. Relevant CMake Options:; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; To switch from the default Libint package to the really large high AM; package, do the below. The channel/subchannel(s",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:8815,Testability,test,tests,8815,"ckage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:14739,Testability,test,tested,14739,"ions are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization"" ON; ""-xHost"" ""-march=native""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-che",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:19776,Testability,test,tested,19776,"o choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir; cd {top-level-psi4-dir} && cmake -H. -Bobjdir; cd {top-level-psi4-dir} && cmake -H. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10>>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -H. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage/prefix. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:26694,Testability,test,test,26694,"_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:30964,Testability,test,test,30964,"X and HOST are defined upon; activation). >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${CONDA_PREFIX}/bin/${HOST} --sysroot=${CONDA_PREFIX}/${HOST}/sysroot"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${CONDA_PREFIX}/bin/${HOST} --sysroot=${CONDA_PREFIX}/${HOST}/sysroot"". Build on Linux with specific (GCC) compilers from; from conda in activated environment; (CONDA_PREFIX and HOST are defined upon; activation). >>> cmake -DCMAKE_C_COMPILER=${GCC} \; -DCMAKE_CXX_COMPILER=${GXX} \; -DCMAKE_Fortran_COMPILER=${GFORTRAN}. What C and C++ compilers and versions are approved¶; On Linux, the following work nicely. GNU: gcc, g++; Intel: icc, icpc; Clang: clang, clang++. On Mac, the following work nicely. Apple Clang: clang, clang++; Intel: icc, icpc. PSI4 requires full C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; psi4/cmake/custom_cxxstandard.cmake, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; pa",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:32057,Testability,test,tested,32057,"th icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:38459,Testability,test,testing,38459,"linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy an",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:38508,Testability,test,tests,38508,"linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy an",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:38883,Testability,test,testing,38883,"is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:42572,Testability,test,tests,42572,"cutable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/envs/p4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path f",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:42693,Testability,test,tests,42693,"the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:45445,Testability,test,tests,45445,"o the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:45488,Testability,test,test,45488,"o the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:45737,Testability,test,tests,45737,"a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:45794,Testability,test,test,45794,"a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:45830,Testability,test,testname,45830," directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.0",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:45852,Testability,test,test,45852," directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.0",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:45869,Testability,test,testlabel,45869," directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.0",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:45958,Testability,test,tests,45958,"to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/te",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46061,Testability,test,test,46061,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46105,Testability,test,tests,46105,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46194,Testability,test,tests,46194,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46235,Testability,test,test,46235,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46290,Testability,test,tests,46290,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46365,Testability,test,tests,46365,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46398,Testability,test,testname,46398,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46412,Testability,test,tests,46412,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46452,Testability,test,testname,46452,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46466,Testability,test,tests,46466,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46500,Testability,test,testlabel,46500,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46515,Testability,test,tests,46515,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46557,Testability,test,testlabel,46557,"uild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest require",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46585,Testability,test,testing,46585,"y similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46679,Testability,test,tests,46679,"y similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46903,Testability,test,tests,46903,"[here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fi",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:46969,Testability,test,tests,46969,"[here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fi",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47002,Testability,log,log,47002,"rallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests tha",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47068,Testability,test,test,47068,"ite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run corre",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47160,Testability,test,testing,47160,"un the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_add",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47238,Testability,test,test,47238,"nd any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_ad",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47398,Testability,test,test,47398,"me; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addon",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47481,Testability,test,tests,47481,"me; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addon",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47552,Testability,test,test,47552,"label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47712,Testability,test,test,47712," Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47792,Testability,test,test,47792," all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. How to refer to Psi4¶; Ways to refer ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47882,Testability,test,test,47882," all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. How to refer to Psi4¶; Ways to refer ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:47995,Testability,test,tests,47995," all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. How to refer to Psi4¶; Ways to refer ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:51820,Testability,test,test,51820,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:53834,Testability,test,tests,53834,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:53864,Testability,test,tests,53864,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:53888,Testability,test,testing,53888,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:53911,Testability,test,test,53911,"ntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to use a local Add-On repository in the Psi4 build. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:418,Usability,guid,guide,418,"﻿. Compiling and Installing from Source. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Installation and Runtime Configuration. Compiling and Installing from Source¶. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. Prior to 1.1, PSI4 had a Python; script setup as a frontend to CMake, but this is no more, and; cmake is now invoked directly. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -H.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; 1; 2; 3; 4; 5>>> cd {top-level-psi4-dir}; >>> cmake -H. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. 1>>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/lo",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:26775,Usability,clear,clear,26775,"TH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/build_planning.html:33556,Usability,guid,guides,33556,". # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC5}/lib:$LD_LIBRARY_PATH. How to configure a Psi4 build on Cray¶; Cray systems strongly prefer to build static libraries, but PSI4; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building PSI4 on; Cray requires setting environment variables CRAYPE_LINK_TYPE; and CRAY_ADD_RPATH before running cmake.; 1CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies; PSI4 (\(\Leftarrow\) optional) Fortran Compiler; erd, dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:; Ubun",MatchSource.WIKI,psi4manual/1.2.1/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:7786,Availability,avail,available,7786,"[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_h",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:7822,Availability,avail,available,7822,"ence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to ",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:14119,Availability,avail,available,14119,"sted through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this section must be dotted with the weightings in column Wt; to get the total cbs energy. Finally, in the CBS section, are listed the results for each stage; of the cbs procedure. The stage energies of this section sum outright to the total cbs energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38==> Components <==. ----------------------------------------------------------------------------------; Method / Basis Rqd Energy [H] Variable; ----------------------------------------------------------------------------------; scf / aug-cc-pvqz * -1.11916375 SCF TOTAL ENERGY; mp2 / aug-cc-pvqz * -0.03407997 MP2 CORRELATION ENERGY; scf / aug-cc-pvdz -1.11662884 SCF TOTAL ENERGY; mp2 / aug-cc-pvdz * -0.02881480 MP2 CORRELATION ENERGY; cc",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:18433,Deployability,install,installed,18433,"; Extrapolation scheme for reference energies with three adjacent zeta-level bases.; Used by cbs().; Halkier, Helgaker, Jorgensen, Klopper, & Olsen, Chem. Phys. Lett. 302 (1999) 437-446,; DOI: 10.1016/S0009-2614(99)00179-7. \[E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}, \alpha = 3.0\]. psi4.driver.driver_cbs.corl_xtpl_helgaker_2(functionname, zLO, valueLO, zHI, valueHI, verbose=True, alpha=None)[source]¶; Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by cbs().; Halkier, Helgaker, Jorgensen, Klopper, Koch, Olsen, & Wilson, Chem. Phys. Lett. 286 (1998) 243-252,; DOI: 10.1016/S0009-2614(99)00179-7. \[E_{corl}^X = E_{corl}^{\infty} + \beta X^{-alpha}\]. Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/psi4/driver/aliases.py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='c",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:20835,Deployability,update,updated,20835,"{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). 1; 2>>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). table of contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:283,Energy Efficiency,power,powerful,283,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:414,Energy Efficiency,energy,energy,414,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:593,Energy Efficiency,energy,energy,593,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:619,Energy Efficiency,energy,energy,619,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:1048,Energy Efficiency,energy,energy,1048,"; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all c",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:1553,Energy Efficiency,energy,energy,1553,"psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:1769,Energy Efficiency,energy,energy,1769,"ion can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:2218,Energy Efficiency,energy,energy,2218,"e, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'c",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:2367,Energy Efficiency,energy,energy,2367,"e, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'c",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:2391,Energy Efficiency,energy,energy,2391,"e, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'c",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:2438,Energy Efficiency,energy,energy,2438,"e, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'c",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:2766,Energy Efficiency,energy,energy,2766,"um number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the r",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:2968,Energy Efficiency,energy,energy,2968,"nted. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energ",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:3432,Energy Efficiency,energy,energy,3432," and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtai",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:3649,Energy Efficiency,energy,energy,3649,"check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:3687,Energy Efficiency,energy,energy,3687,"check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:3936,Energy Efficiency,energy,energy,3936,"lowing energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:3976,Energy Efficiency,energy,energy,3976,"lowing energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:4163,Energy Efficiency,energy,energy,4163," fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energ",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:4226,Energy Efficiency,energy,energy,4226," fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energ",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:4361,Energy Efficiency,energy,energy,4361,"mputational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:4424,Energy Efficiency,energy,energy,4424,"mputational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:4526,Energy Efficiency,energy,energy,4526,"f_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:4596,Energy Efficiency,energy,energy,4596,"f_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:4737,Energy Efficiency,energy,energy,4737,n be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. de,MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:4807,Energy Efficiency,energy,energy,4807,n be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. de,MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:4909,Energy Efficiency,energy,energy,4909, method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the ,MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:4978,Energy Efficiency,energy,energy,4978, method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the ,MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:5120,Energy Efficiency,energy,energy,5120,"uperior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\L",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:5189,Energy Efficiency,energy,energy,5189,"uperior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\L",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:5291,Energy Efficiency,energy,energy,5291,"p2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:5361,Energy Efficiency,energy,energy,5361,"p2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:5503,Energy Efficiency,energy,energy,5503,"d for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:5573,Energy Efficiency,energy,energy,5573,"d for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:5675,Energy Efficiency,energy,energy,5675,"etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation en",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:5744,Energy Efficiency,energy,energy,5744,"etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation en",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:5886,Energy Efficiency,energy,energy,5886,"od for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (b",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:5955,Energy Efficiency,energy,energy,5955,"od for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (b",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:6288,Energy Efficiency,energy,energy,6288,"| etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction;",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:6524,Energy Efficiency,energy,energy,6524," inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transfor",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:6707,Energy Efficiency,energy,energy,6707,"(superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exa",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:6898,Energy Efficiency,energy,energy,6898,")' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:7088,Energy Efficiency,energy,energy,7088," have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; D",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:7279,Energy Efficiency,energy,energy,7279,"s the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_hig",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:7469,Energy Efficiency,energy,energy,7469,"-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:7509,Energy Efficiency,energy,energy,7509," delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_x",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:8032,Energy Efficiency,energy,energy,8032,"ates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. ",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:8504,Energy Efficiency,energy,energy,8504,"n energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta3_scheme (function) – \(\Rightarrow\) xtpl_highes",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:8873,Energy Efficiency,energy,energy,8873,"ailable schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta3_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the third delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:9251,Energy Efficiency,energy,energy,9251,tpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta3_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the third delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.,MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:9629,Energy Efficiency,energy,energy,9629,"ent in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta3_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the third delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the s",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:9970,Energy Efficiency,energy,energy,9970,"if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta3_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the third delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(n",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:10310,Energy Efficiency,energy,energy,10310,"; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta3_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the third delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 corre",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:10630,Energy Efficiency,energy,energy,10630,"to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] ",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:10789,Energy Efficiency,energy,energy,10789,"(function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:10901,Energy Efficiency,energy,energy,10901," to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xt",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:11038,Energy Efficiency,energy,energy,11038,"pl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO databa",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:11265,Energy Efficiency,energy,energy,11265,"ets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). ",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:11428,Energy Efficiency,energy,energy,11428,"ets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). ",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:11735,Energy Efficiency,energy,energy,11735,"; >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defi",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:12909,Energy Efficiency,energy,energy,12909,"[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) COR",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:13155,Energy Efficiency,energy,energy,13155," 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; e",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:13209,Energy Efficiency,energy,energy,13209," 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; e",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:14352,Energy Efficiency,energy,energy,14352,"alculations which will actually be run.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this section must be dotted with the weightings in column Wt; to get the total cbs energy. Finally, in the CBS section, are listed the results for each stage; of the cbs procedure. The stage energies of this section sum outright to the total cbs energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38==> Components <==. ----------------------------------------------------------------------------------; Method / Basis Rqd Energy [H] Variable; ----------------------------------------------------------------------------------; scf / aug-cc-pvqz * -1.11916375 SCF TOTAL ENERGY; mp2 / aug-cc-pvqz * -0.03407997 MP2 CORRELATION ENERGY; scf / aug-cc-pvdz -1.11662884 SCF TOTAL ENERGY; mp2 / aug-cc-pvdz * -0.02881480 MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz * -0.03893812 CCSD(T) CORRELATION ENERGY; ccsd / aug-cc-pvdz -0.03893812 CCSD CORRELATION ENERGY; scf / aug-cc-pvtz -1.11881134 SCF TOTAL ENERGY; mp2 / aug-cc-pvtz * -0.03288936 MP2",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:14515,Energy Efficiency,energy,energy,14515," for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this section must be dotted with the weightings in column Wt; to get the total cbs energy. Finally, in the CBS section, are listed the results for each stage; of the cbs procedure. The stage energies of this section sum outright to the total cbs energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38==> Components <==. ----------------------------------------------------------------------------------; Method / Basis Rqd Energy [H] Variable; ----------------------------------------------------------------------------------; scf / aug-cc-pvqz * -1.11916375 SCF TOTAL ENERGY; mp2 / aug-cc-pvqz * -0.03407997 MP2 CORRELATION ENERGY; scf / aug-cc-pvdz -1.11662884 SCF TOTAL ENERGY; mp2 / aug-cc-pvdz * -0.02881480 MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz * -0.03893812 CCSD(T) CORRELATION ENERGY; ccsd / aug-cc-pvdz -0.03893812 CCSD CORRELATION ENERGY; scf / aug-cc-pvtz -1.11881134 SCF TOTAL ENERGY; mp2 / aug-cc-pvtz * -0.03288936 MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz * -0.04201004 CCSD(T) CORRELATION ENERGY; ccsd / aug-cc-pvtz -0.04201004 CCSD CORRELATION ENERGY; ---------------------------------------",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:18823,Energy Efficiency,energy,energy,18823,"bose=True, alpha=None)[source]¶; Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by cbs().; Halkier, Helgaker, Jorgensen, Klopper, Koch, Olsen, & Wilson, Chem. Phys. Lett. 286 (1998) 243-252,; DOI: 10.1016/S0009-2614(99)00179-7. \[E_{corl}^X = E_{corl}^{\infty} + \beta X^{-alpha}\]. Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/psi4/driver/aliases.py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed a",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:19108,Energy Efficiency,energy,energy,19108," Phys. Lett. 286 (1998) 243-252,; DOI: 10.1016/S0009-2614(99)00179-7. \[E_{corl}^X = E_{corl}^{\infty} + \beta X^{-alpha}\]. Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/psi4/driver/aliases.py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{cor",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:19145,Energy Efficiency,energy,energy,19145," Phys. Lett. 286 (1998) 243-252,; DOI: 10.1016/S0009-2614(99)00179-7. \[E_{corl}^X = E_{corl}^{\infty} + \beta X^{-alpha}\]. Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/psi4/driver/aliases.py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{cor",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:20376,Energy Efficiency,energy,energy,20376,"{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). 1; 2>>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). table of contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:20413,Energy Efficiency,energy,energy,20413,"{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). 1; 2>>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). table of contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:1131,Integrability,wrap,wrapper,1131,"; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all c",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:13228,Integrability,wrap,wrapper,13228," 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; e",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:19908,Integrability,wrap,wrapper,19908,"{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). 1; 2>>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). table of contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:1793,Modifiability,variab,variables,1793,"t item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function re",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:751,Performance,optimiz,optimization,751,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:861,Performance,optimiz,optimize,861,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:909,Performance,optimiz,optimize,909,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:3473,Performance,perform,performed,3473," and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtai",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:12268,Performance,optimiz,optimize,12268,"uivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of ",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:12289,Performance,optimiz,optimize,12289,"uivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of ",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:12493,Performance,perform,performed,12493,"t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:12943,Performance,perform,performed,12943,"[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) COR",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:18831,Performance,perform,performed,18831,"bose=True, alpha=None)[source]¶; Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by cbs().; Halkier, Helgaker, Jorgensen, Klopper, Koch, Olsen, & Wilson, Chem. Phys. Lett. 286 (1998) 243-252,; DOI: 10.1016/S0009-2614(99)00179-7. \[E_{corl}^X = E_{corl}^{\infty} + \beta X^{-alpha}\]. Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/psi4/driver/aliases.py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed a",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:19220,Performance,optimiz,optimization,19220,"ing to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/psi4/driver/aliases.py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CC",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:19238,Performance,optimiz,optimize,19238,"ing to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/psi4/driver/aliases.py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CC",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:19315,Performance,optimiz,optimization,19315,".py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; 1; 2>>> # [1] single-poin",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:19394,Performance,optimiz,optimize,19394,".py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; 1; 2>>> # [1] single-poin",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:19817,Performance,perform,performed,19817,"orrelation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). 1; 2>>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). table of contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, Th",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:20483,Performance,optimiz,optimization,20483,"{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). 1; 2>>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). table of contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:20524,Performance,optimiz,optimize,20524,"{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). 1; 2>>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). table of contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:383,Security,access,accessed,383,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:503,Security,access,accessed,503,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:771,Security,access,accessed,771,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:10576,Usability,simpl,simple,10576,"to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] ",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs-1.html:10727,Usability,simpl,simple,10727,"(function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >",MatchSource.WIKI,psi4manual/1.2.1/cbs-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html
https://psicode.org/psi4manual/1.2.1/cbs.html:7786,Availability,avail,available,7786,"[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_h",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:7822,Availability,avail,available,7822,"ence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to ",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:14119,Availability,avail,available,14119,"sted through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this section must be dotted with the weightings in column Wt; to get the total cbs energy. Finally, in the CBS section, are listed the results for each stage; of the cbs procedure. The stage energies of this section sum outright to the total cbs energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38==> Components <==. ----------------------------------------------------------------------------------; Method / Basis Rqd Energy [H] Variable; ----------------------------------------------------------------------------------; scf / aug-cc-pvqz * -1.11916375 SCF TOTAL ENERGY; mp2 / aug-cc-pvqz * -0.03407997 MP2 CORRELATION ENERGY; scf / aug-cc-pvdz -1.11662884 SCF TOTAL ENERGY; mp2 / aug-cc-pvdz * -0.02881480 MP2 CORRELATION ENERGY; cc",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:18433,Deployability,install,installed,18433,"; Extrapolation scheme for reference energies with three adjacent zeta-level bases.; Used by cbs().; Halkier, Helgaker, Jorgensen, Klopper, & Olsen, Chem. Phys. Lett. 302 (1999) 437-446,; DOI: 10.1016/S0009-2614(99)00179-7. \[E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}, \alpha = 3.0\]. psi4.driver.driver_cbs.corl_xtpl_helgaker_2(functionname, zLO, valueLO, zHI, valueHI, verbose=True, alpha=None)[source]¶; Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by cbs().; Halkier, Helgaker, Jorgensen, Klopper, Koch, Olsen, & Wilson, Chem. Phys. Lett. 286 (1998) 243-252,; DOI: 10.1016/S0009-2614(99)00179-7. \[E_{corl}^X = E_{corl}^{\infty} + \beta X^{-alpha}\]. Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/psi4/driver/aliases.py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='c",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:20835,Deployability,update,updated,20835,"{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). 1; 2>>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). table of contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:283,Energy Efficiency,power,powerful,283,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:414,Energy Efficiency,energy,energy,414,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:593,Energy Efficiency,energy,energy,593,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:619,Energy Efficiency,energy,energy,619,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:1048,Energy Efficiency,energy,energy,1048,"; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all c",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:1553,Energy Efficiency,energy,energy,1553,"psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:1769,Energy Efficiency,energy,energy,1769,"ion can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:2218,Energy Efficiency,energy,energy,2218,"e, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'c",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:2367,Energy Efficiency,energy,energy,2367,"e, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'c",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:2391,Energy Efficiency,energy,energy,2391,"e, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'c",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:2438,Energy Efficiency,energy,energy,2438,"e, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'c",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:2766,Energy Efficiency,energy,energy,2766,"um number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the r",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:2968,Energy Efficiency,energy,energy,2968,"nted. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energ",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:3432,Energy Efficiency,energy,energy,3432," and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtai",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:3649,Energy Efficiency,energy,energy,3649,"check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:3687,Energy Efficiency,energy,energy,3687,"check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:3936,Energy Efficiency,energy,energy,3936,"lowing energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:3976,Energy Efficiency,energy,energy,3976,"lowing energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:4163,Energy Efficiency,energy,energy,4163," fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energ",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:4226,Energy Efficiency,energy,energy,4226," fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energ",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:4361,Energy Efficiency,energy,energy,4361,"mputational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:4424,Energy Efficiency,energy,energy,4424,"mputational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:4526,Energy Efficiency,energy,energy,4526,"f_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:4596,Energy Efficiency,energy,energy,4596,"f_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:4737,Energy Efficiency,energy,energy,4737,n be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. de,MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:4807,Energy Efficiency,energy,energy,4807,n be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. de,MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:4909,Energy Efficiency,energy,energy,4909, method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the ,MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:4978,Energy Efficiency,energy,energy,4978, method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the ,MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:5120,Energy Efficiency,energy,energy,5120,"uperior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\L",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:5189,Energy Efficiency,energy,energy,5189,"uperior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\L",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:5291,Energy Efficiency,energy,energy,5291,"p2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:5361,Energy Efficiency,energy,energy,5361,"p2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:5503,Energy Efficiency,energy,energy,5503,"d for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:5573,Energy Efficiency,energy,energy,5573,"d for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (string) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:5675,Energy Efficiency,energy,energy,5675,"etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation en",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:5744,Energy Efficiency,energy,energy,5744,"etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. delta3_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation en",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:5886,Energy Efficiency,energy,energy,5886,"od for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (b",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:5955,Energy Efficiency,energy,energy,5955,"od for which a third delta correction; to the correlation energy is to be obtained. delta3_wfn_lesser (string) – \(\Rightarrow\) delta2_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a third delta correction; to the correlation energy is to be obtained. delta4_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (b",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:6288,Energy Efficiency,energy,energy,6288,"| etc.; Indicates the (superior) energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta4_wfn_lesser (string) – \(\Rightarrow\) delta3_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction;",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:6524,Energy Efficiency,energy,energy,6524," inferior energy method for which a fourth delta correction; to the correlation energy is to be obtained. delta5_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transfor",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:6707,Energy Efficiency,energy,energy,6707,"(superior) energy method for which a fifth delta correction; to the correlation energy is to be obtained. delta5_wfn_lesser (string) – \(\Rightarrow\) delta4_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exa",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:6898,Energy Efficiency,energy,energy,6898,")' || etc.; Indicates the inferior energy method for which a fifth delta correction; to the correlation energy is to be obtained. Basis Sets; Currently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:7088,Energy Efficiency,energy,energy,7088," have no influence; on a cbs calculation. Parameters:; scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; D",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:7279,Energy Efficiency,energy,energy,7279,"s the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_hig",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:7469,Energy Efficiency,energy,energy,7469,"-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:7509,Energy Efficiency,energy,energy,7509," delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. delta3_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_x",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:8032,Energy Efficiency,energy,energy,8032,"ates the sequence of basis sets employed for the third delta correction; to the correlation energy. delta4_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fourth delta correction; to the correlation energy. delta5_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the fifth delta correction; to the correlation energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. ",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:8504,Energy Efficiency,energy,energy,8504,"n energy. Schemes; Transformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See sec:cbs_xtpl for all available schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta3_scheme (function) – \(\Rightarrow\) xtpl_highes",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:8873,Energy Efficiency,energy,energy,8873,"ailable schemes. Parameters:; scf_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || scf_xtpl_helgaker_3 || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta3_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the third delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:9251,Energy Efficiency,energy,energy,9251,tpl_highest_1() otherwise. xtpl_highest_1; scf_xtpl_helgaker_3; scf_xtpl_helgaker_2; scf_xtpl_truhlar_2; scf_xtpl_karton_2. corl_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta3_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the third delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.,MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:9629,Energy Efficiency,energy,energy,9629,"ent in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta3_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the third delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the s",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:9970,Energy Efficiency,energy,energy,9970,"if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta2_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta3_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the third delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(n",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:10310,Energy Efficiency,energy,energy,10310,"; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1; corl_xtpl_helgaker_2. delta3_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the third delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 corre",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:10630,Energy Efficiency,energy,energy,10630,"to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] ",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:10789,Energy Efficiency,energy,energy,10789,"(function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:10901,Energy Efficiency,energy,energy,10901," to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xt",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:11038,Energy Efficiency,energy,energy,11038,"pl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO databa",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:11265,Energy Efficiency,energy,energy,11265,"ets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). ",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:11428,Energy Efficiency,energy,energy,11428,"ets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). ",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:11735,Energy Efficiency,energy,energy,11735,"; >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defi",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:12909,Energy Efficiency,energy,energy,12909,"[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) COR",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:13155,Energy Efficiency,energy,energy,13155," 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; e",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:13209,Energy Efficiency,energy,energy,13209," 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; e",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:14352,Energy Efficiency,energy,energy,14352,"alculations which will actually be run.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this section must be dotted with the weightings in column Wt; to get the total cbs energy. Finally, in the CBS section, are listed the results for each stage; of the cbs procedure. The stage energies of this section sum outright to the total cbs energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38==> Components <==. ----------------------------------------------------------------------------------; Method / Basis Rqd Energy [H] Variable; ----------------------------------------------------------------------------------; scf / aug-cc-pvqz * -1.11916375 SCF TOTAL ENERGY; mp2 / aug-cc-pvqz * -0.03407997 MP2 CORRELATION ENERGY; scf / aug-cc-pvdz -1.11662884 SCF TOTAL ENERGY; mp2 / aug-cc-pvdz * -0.02881480 MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz * -0.03893812 CCSD(T) CORRELATION ENERGY; ccsd / aug-cc-pvdz -0.03893812 CCSD CORRELATION ENERGY; scf / aug-cc-pvtz -1.11881134 SCF TOTAL ENERGY; mp2 / aug-cc-pvtz * -0.03288936 MP2",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:14515,Energy Efficiency,energy,energy,14515," for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this section must be dotted with the weightings in column Wt; to get the total cbs energy. Finally, in the CBS section, are listed the results for each stage; of the cbs procedure. The stage energies of this section sum outright to the total cbs energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38==> Components <==. ----------------------------------------------------------------------------------; Method / Basis Rqd Energy [H] Variable; ----------------------------------------------------------------------------------; scf / aug-cc-pvqz * -1.11916375 SCF TOTAL ENERGY; mp2 / aug-cc-pvqz * -0.03407997 MP2 CORRELATION ENERGY; scf / aug-cc-pvdz -1.11662884 SCF TOTAL ENERGY; mp2 / aug-cc-pvdz * -0.02881480 MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz * -0.03893812 CCSD(T) CORRELATION ENERGY; ccsd / aug-cc-pvdz -0.03893812 CCSD CORRELATION ENERGY; scf / aug-cc-pvtz -1.11881134 SCF TOTAL ENERGY; mp2 / aug-cc-pvtz * -0.03288936 MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz * -0.04201004 CCSD(T) CORRELATION ENERGY; ccsd / aug-cc-pvtz -0.04201004 CCSD CORRELATION ENERGY; ---------------------------------------",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:18823,Energy Efficiency,energy,energy,18823,"bose=True, alpha=None)[source]¶; Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by cbs().; Halkier, Helgaker, Jorgensen, Klopper, Koch, Olsen, & Wilson, Chem. Phys. Lett. 286 (1998) 243-252,; DOI: 10.1016/S0009-2614(99)00179-7. \[E_{corl}^X = E_{corl}^{\infty} + \beta X^{-alpha}\]. Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/psi4/driver/aliases.py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed a",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:19108,Energy Efficiency,energy,energy,19108," Phys. Lett. 286 (1998) 243-252,; DOI: 10.1016/S0009-2614(99)00179-7. \[E_{corl}^X = E_{corl}^{\infty} + \beta X^{-alpha}\]. Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/psi4/driver/aliases.py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{cor",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:19145,Energy Efficiency,energy,energy,19145," Phys. Lett. 286 (1998) 243-252,; DOI: 10.1016/S0009-2614(99)00179-7. \[E_{corl}^X = E_{corl}^{\infty} + \beta X^{-alpha}\]. Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/psi4/driver/aliases.py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{cor",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:20376,Energy Efficiency,energy,energy,20376,"{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). 1; 2>>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). table of contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:20413,Energy Efficiency,energy,energy,20413,"{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). 1; 2>>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). table of contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:1131,Integrability,wrap,wrapper,1131,"; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all c",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:13228,Integrability,wrap,wrapper,13228," 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; e",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:19908,Integrability,wrap,wrapper,19908,"{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). 1; 2>>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). table of contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:1793,Modifiability,variab,variables,1793,"t item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; No way to extrapolate def2 family basis sets; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta, delta2, delta3, delta4, delta5) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function re",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:751,Performance,optimiz,optimization,751,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:861,Performance,optimiz,optimize,861,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:909,Performance,optimiz,optimize,909,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:3473,Performance,perform,performed,3473," and a second delta correction, etc.. Each is activated by its; stage_wfn keyword and is only allowed if all preceding stages are active. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtai",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:12268,Performance,optimiz,optimize,12268,"uivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of ",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:12289,Performance,optimiz,optimize,12289,"uivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of ",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:12493,Performance,perform,performed,12493,"t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:12943,Performance,perform,performed,12943,"[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) COR",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:18831,Performance,perform,performed,18831,"bose=True, alpha=None)[source]¶; Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by cbs().; Halkier, Helgaker, Jorgensen, Klopper, Koch, Olsen, & Wilson, Chem. Phys. Lett. 286 (1998) 243-252,; DOI: 10.1016/S0009-2614(99)00179-7. \[E_{corl}^X = E_{corl}^{\infty} + \beta X^{-alpha}\]. Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/psi4/driver/aliases.py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed a",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:19220,Performance,optimiz,optimization,19220,"ing to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/psi4/driver/aliases.py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CC",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:19238,Performance,optimiz,optimize,19238,"ing to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/psi4/driver/aliases.py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CC",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:19315,Performance,optimiz,optimization,19315,".py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; 1; 2>>> # [1] single-poin",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:19394,Performance,optimiz,optimize,19394,".py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; 1; 2>>> # [1] single-poin",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:19817,Performance,perform,performed,19817,"orrelation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). 1; 2>>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). table of contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, Th",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:20483,Performance,optimiz,optimization,20483,"{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). 1; 2>>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). table of contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:20524,Performance,optimiz,optimize,20524,"{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). 1; 2>>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). table of contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:383,Security,access,accessed,383,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:503,Security,access,accessed,503,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:771,Security,access,accessed,771,"﻿. Complete Basis Set. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Complete Basis Set¶. Code author: Lori A. Burns and Daniel G. A. Smith; Section author: Lori A. Burns; The psi4.cbs() function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; psi4.energy(), psi4.gradient(), etc. For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second item. energy('mp2/cc-pv[dt]z'); energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can be accessed through the first item below more; conveniently than the equivalent second item. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(cbs, corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, delta3_wfn, delta3_wfn_lesser, delta3_basis, delta3_scheme, delta4_wfn, delta4_wfn_lesser, delta4_basis, delta4_scheme, delta5_wfn, delta5_wfn_lesser, delta5_basis, delta5_scheme])[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:complete_basis_set(). Returns:(float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a develope",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:10576,Usability,simpl,simple,10576,"to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta3_basis and xtpl_highest_1() otherwise. delta4_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] ",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs.html:10727,Usability,simpl,simple,10727,"(function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fourth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta4_basis and xtpl_highest_1() otherwise. delta5_scheme (function) – \(\Rightarrow\) xtpl_highest_1 \(\Leftarrow\) || corl_xtpl_helgaker_2 || etc.; Indicates the basis set extrapolation scheme to be applied to the fifth delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta5_basis and xtpl_highest_1() otherwise. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. 1; 2>>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> cbs(name='scf', scf_basis='cc-pVDZ'). 1; 2>>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> cbs(name='mp2', corl_basis='jun-cc-pVDZ'). 1; 2>>> # [3] DTQ-zeta extrapolated scf reference energy; >>> cbs(name='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3). 1; 2>>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> cbs(corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). 1; 2; 3>>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> cbs(corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> cbs(energy, wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). 1; 2>>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >",MatchSource.WIKI,psi4manual/1.2.1/cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs.html
https://psicode.org/psi4manual/1.2.1/cbs_eqn-1.html:3425,Deployability,update,updated,3425,"e}} \left(E_{\text{corl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right)\]. \[\delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right)\]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation; Complete Basis Set. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cbs_eqn-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs_eqn-1.html
https://psicode.org/psi4manual/1.2.1/cbs_eqn-1.html:737,Energy Efficiency,energy,energy,737,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation; Complete Basis Set. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn}}^{\textbf{delta_basis}}\right) - \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn_lesser}}^{\textbf{delta_basis}}\right)\]. \[\delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; = \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn}}^{\textbf{delta2_basis}}\right) - \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn_lesser}}^{\textbf{delta2_basis}}\right)\]. \[\delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; = \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\ri",MatchSource.WIKI,psi4manual/1.2.1/cbs_eqn-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs_eqn-1.html
https://psicode.org/psi4manual/1.2.1/cbs_eqn-1.html:747,Energy Efficiency,energy,energy,747,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation; Complete Basis Set. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn}}^{\textbf{delta_basis}}\right) - \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn_lesser}}^{\textbf{delta_basis}}\right)\]. \[\delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; = \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn}}^{\textbf{delta2_basis}}\right) - \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn_lesser}}^{\textbf{delta2_basis}}\right)\]. \[\delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; = \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\ri",MatchSource.WIKI,psi4manual/1.2.1/cbs_eqn-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs_eqn-1.html
https://psicode.org/psi4manual/1.2.1/cbs_eqn-1.html:2600,Energy Efficiency,energy,energy,2600,"e}} \left(E_{\text{corl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right)\]. \[\delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right)\]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation; Complete Basis Set. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cbs_eqn-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs_eqn-1.html
https://psicode.org/psi4manual/1.2.1/cbs_eqn-1.html:2648,Energy Efficiency,energy,energy,2648,"e}} \left(E_{\text{corl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right)\]. \[\delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right)\]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation; Complete Basis Set. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cbs_eqn-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs_eqn-1.html
https://psicode.org/psi4manual/1.2.1/cbs_eqn.html:3425,Deployability,update,updated,3425,"e}} \left(E_{\text{corl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right)\]. \[\delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right)\]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation; Complete Basis Set. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cbs_eqn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs_eqn.html
https://psicode.org/psi4manual/1.2.1/cbs_eqn.html:737,Energy Efficiency,energy,energy,737,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation; Complete Basis Set. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn}}^{\textbf{delta_basis}}\right) - \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn_lesser}}^{\textbf{delta_basis}}\right)\]. \[\delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; = \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn}}^{\textbf{delta2_basis}}\right) - \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn_lesser}}^{\textbf{delta2_basis}}\right)\]. \[\delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; = \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\ri",MatchSource.WIKI,psi4manual/1.2.1/cbs_eqn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs_eqn.html
https://psicode.org/psi4manual/1.2.1/cbs_eqn.html:747,Energy Efficiency,energy,energy,747,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation; Complete Basis Set. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn}}^{\textbf{delta_basis}}\right) - \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn_lesser}}^{\textbf{delta_basis}}\right)\]. \[\delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; = \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn}}^{\textbf{delta2_basis}}\right) - \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn_lesser}}^{\textbf{delta2_basis}}\right)\]. \[\delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; = \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\ri",MatchSource.WIKI,psi4manual/1.2.1/cbs_eqn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs_eqn.html
https://psicode.org/psi4manual/1.2.1/cbs_eqn.html:2600,Energy Efficiency,energy,energy,2600,"e}} \left(E_{\text{corl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right)\]. \[\delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right)\]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation; Complete Basis Set. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cbs_eqn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs_eqn.html
https://psicode.org/psi4manual/1.2.1/cbs_eqn.html:2648,Energy Efficiency,energy,energy,2648,"e}} \left(E_{\text{corl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right)\]. \[\delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right)\]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation; Complete Basis Set. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cbs_eqn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs_eqn.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:589,Availability,reliab,reliable,589,"﻿. CC: Coupled Cluster Theory. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Theoretical Methods: SCF to FCI. CC: Coupled Cluster Theory¶; Code author: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuration; interaction, coupled cluster uses an exponential expansion,. (1)¶\[\begin{split}| \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,\end{split}\]; where the cluster operator \({\hat{T}}\) is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. \[{\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},\]; with. \[\begin{split}{\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,\end{split}\]; etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at \({\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}\). This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term \({\hat{T}_2}^2\) approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:7056,Availability,avail,available,7056,"x quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to 0.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists.; Set the PRINT keyword to 2. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. Excited State Coupled Cluster Calculations¶; A complete list of keywords related to; coupled cluster linear response is provided in Appendix CCEOM.; The most important keywords associated with EOM-CC calculations are:. ROOTS_PER_IRREP¶. Number of excited st",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:7601,Availability,fault,faults,7601," Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to 0.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists.; Set the PRINT keyword to 2. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. Excited State Coupled Cluster Calculations¶; A complete list of keywords related to; coupled cluster linear response is provided in Appendix CCEOM.; The most important keywords associated with EOM-CC calculations are:. ROOTS_PER_IRREP¶. Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. SINGLES_PRINT¶. Do print information on the iterative solution to the single-excitation EOM-CC problem used as a gues",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:7741,Availability,error,errors,7741,"print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to 0.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists.; Set the PRINT keyword to 2. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. Excited State Coupled Cluster Calculations¶; A complete list of keywords related to; coupled cluster linear response is provided in Appendix CCEOM.; The most important keywords associated with EOM-CC calculations are:. ROOTS_PER_IRREP¶. Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. SINGLES_PRINT¶. Do print information on the iterative solution to the single-excitation EOM-CC problem used as a guess to full EOM-CC?. Type: boolean; Default: false. SCHMIDT_ADD_RESIDUAL_TOLERANCE¶. Minimum absolute value above which a guess vector to a root is added to the",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:9228,Availability,avail,available,9228,"t. E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. SINGLES_PRINT¶. Do print information on the iterative solution to the single-excitation EOM-CC problem used as a guess to full EOM-CC?. Type: boolean; Default: false. SCHMIDT_ADD_RESIDUAL_TOLERANCE¶. Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. EOM_GUESS¶. Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. Linear Response (CCLR) Calculations¶; Linear response computations are invoked like property('ccsd'); or property('cc2'), along with a list of requested properties.; A complete list of keywords related to; coupled cluster linear response is provided in Appendix CCRESPONSE.; The most important keywords associated with CC-LR calculations are as follows. PROPERTY¶. The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:739,Deployability,configurat,configuration,739,"﻿. CC: Coupled Cluster Theory. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Theoretical Methods: SCF to FCI. CC: Coupled Cluster Theory¶; Code author: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuration; interaction, coupled cluster uses an exponential expansion,. (1)¶\[\begin{split}| \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,\end{split}\]; where the cluster operator \({\hat{T}}\) is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. \[{\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},\]; with. \[\begin{split}{\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,\end{split}\]; etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at \({\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}\). This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term \({\hat{T}_2}^2\) approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:1676,Deployability,configurat,configuration,1676,"d by configuration; interaction, coupled cluster uses an exponential expansion,. (1)¶\[\begin{split}| \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,\end{split}\]; where the cluster operator \({\hat{T}}\) is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. \[{\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},\]; with. \[\begin{split}{\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,\end{split}\]; etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at \({\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}\). This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term \({\hat{T}_2}^2\) approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as \({\cal{O}}(o^2 v^4)\), where; \(o\) is the number of occupied orbitals and \(v\) is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the \({\hat{T}_3}\); operator. The computational cost of this additional term scales as; \({\cal{O}}(o^3 v^4)\), making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a;",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:5531,Deployability,update,updates,5531,"ndix CCENERGY. For a standard ground-state; CCSD or CCSD(T) computation, the following keywords are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Typ",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:11670,Deployability,update,updated,11670,"fault) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. GAUGE¶. Specifies the choice of representation of the electric dipole operator. For polarizability, this keyword is ignored and LENGTH gauge is computed. For optical rotation and raman optical activity, this keyword is active, and acceptable values are LENGTH for the usual length-gauge representation, VELOCITY``(default) for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or ``BOTH. Note that, for optical rotation and raman optical activity calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: VELOCITY. table of contents. CC: Coupled Cluster Theory; Basic Keywords; REFERENCE; R_CONVERGENCE; MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; RESTART; CACHELEVEL; CACHETYPE; NUM_AMPS_PRINT; MP2_AMPS_PRINT. Larger Calculations; Excited State Coupled Cluster Calculations; ROOTS_PER_IRREP; E_CONVERGENCE; SINGLES_PRINT; SCHMIDT_ADD_RESIDUAL_TOLERANCE; EOM_GUESS. Linear Response (CCLR) Calculations; PROPERTY; OMEGA; GAUGE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:2352,Energy Efficiency,energy,energy,2352," | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,\end{split}\]; etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at \({\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}\). This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term \({\hat{T}_2}^2\) approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as \({\cal{O}}(o^2 v^4)\), where; \(o\) is the number of occupied orbitals and \(v\) is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the \({\hat{T}_3}\); operator. The computational cost of this additional term scales as; \({\cal{O}}(o^3 v^4)\), making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC).; Solvent effects on energies can be taken into account using the polarizable; ",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:3946,Energy Efficiency,energy,energy,3946,"thods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC).; Solvent effects on energies can be taken into account using the polarizable; continuum model (PCM) in the PTE approximation [Cammi:2009:164104], see; PCM. Current coupled cluster capabilities of PSI4¶. Method; Reference; Energy; Gradient; Exc. Energies; LR Props. CC2; RHF; Y; Y; Y; Y. UHF; Y; —; N; —. ROHF; Y; —; N; —. CCSD; RHF; Y; Y; Y; Y. UHF; Y; Y; Y; —. ROHF; Y; Y; Y; —. CCSD(T); RHF; Y; Y; n/a; n/a. UHF; Y; Y; n/a; n/a. ROHF; Y; —; n/a; n/a. CCSD(AT); RHF; Y; —; n/a; n/a. CC3; RHF; Y; —; Y; —. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCD; Brueckner; Y; N; N; N. CCD(T); Brueckner; Y; N; n/a; n/a. The following wavefunctions are currently recognized by PSI4 as arguments; to functions like energy(): 'ccsd', 'ccsd(t)', 'ccsd(at)', 'cc2',; 'cc3', 'bccd' (CCD with Brueckner orbitals), 'bccd(t)' (CCD(T) with; Brueckner orbitals), 'eom-ccsd', 'eom-cc2' (CC2 for excited states),; 'eom-cc3' (CC3 for excited states). Response properties can be obtained; by calling the function property() (instead of, for example, energy(),; e.g., property('ccsd'). There are many sample; coupled cluster inputs provided in psi4/samples. Basic Keywords¶; A complete list of keywords related to coupled-cluster computations is; provided in the appendices, with the majority of the relevant; keywords appearing in Appendix CCENERGY. For a standard ground-state; CCSD or CCSD(T) computation, the following keywords are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:4268,Energy Efficiency,energy,energy,4268,"s MRCC code (see MRCC).; Solvent effects on energies can be taken into account using the polarizable; continuum model (PCM) in the PTE approximation [Cammi:2009:164104], see; PCM. Current coupled cluster capabilities of PSI4¶. Method; Reference; Energy; Gradient; Exc. Energies; LR Props. CC2; RHF; Y; Y; Y; Y. UHF; Y; —; N; —. ROHF; Y; —; N; —. CCSD; RHF; Y; Y; Y; Y. UHF; Y; Y; Y; —. ROHF; Y; Y; Y; —. CCSD(T); RHF; Y; Y; n/a; n/a. UHF; Y; Y; n/a; n/a. ROHF; Y; —; n/a; n/a. CCSD(AT); RHF; Y; —; n/a; n/a. CC3; RHF; Y; —; Y; —. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCD; Brueckner; Y; N; N; N. CCD(T); Brueckner; Y; N; n/a; n/a. The following wavefunctions are currently recognized by PSI4 as arguments; to functions like energy(): 'ccsd', 'ccsd(t)', 'ccsd(at)', 'cc2',; 'cc3', 'bccd' (CCD with Brueckner orbitals), 'bccd(t)' (CCD(T) with; Brueckner orbitals), 'eom-ccsd', 'eom-cc2' (CC2 for excited states),; 'eom-cc3' (CC3 for excited states). Response properties can be obtained; by calling the function property() (instead of, for example, energy(),; e.g., property('ccsd'). There are many sample; coupled cluster inputs provided in psi4/samples. Basic Keywords¶; A complete list of keywords related to coupled-cluster computations is; provided in the appendices, with the majority of the relevant; keywords appearing in Appendix CCENERGY. For a standard ground-state; CCSD or CCSD(T) computation, the following keywords are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do rest",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:8271,Energy Efficiency,energy,energy,8271,"y the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to 0.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists.; Set the PRINT keyword to 2. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. Excited State Coupled Cluster Calculations¶; A complete list of keywords related to; coupled cluster linear response is provided in Appendix CCEOM.; The most important keywords associated with EOM-CC calculations are:. ROOTS_PER_IRREP¶. Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. SINGLES_PRINT¶. Do print information on the iterative solution to the single-excitation EOM-CC problem used as a guess to full EOM-CC?. Type: boolean; Default: false. SCHMIDT_ADD_RESIDUAL_TOLERANCE¶. Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. EOM_GUESS¶. Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, ",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:2846,Integrability,depend,dependent,2846,"g., the term \({\hat{T}_2}^2\) approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as \({\cal{O}}(o^2 v^4)\), where; \(o\) is the number of occupied orbitals and \(v\) is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the \({\hat{T}_3}\); operator. The computational cost of this additional term scales as; \({\cal{O}}(o^3 v^4)\), making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC).; Solvent effects on energies can be taken into account using the polarizable; continuum model (PCM) in the PTE approximation [Cammi:2009:164104], see; PCM. Current coupled cluster capabilities of PSI4¶. Method; Reference; Energy; Gradient; Exc. Energies; LR Props. CC2; RHF; Y; Y; Y; Y. UHF; Y; —; N; —. ROHF; Y; —; N; —. CCSD; RHF; Y; Y; Y; Y. UHF; Y; Y; Y; —. ROHF; Y; Y; Y; —. CCSD(T); RHF; Y; Y; n/a; n/a. UHF; Y; Y; n/a; n/a. ROHF; Y; —; n/a; n/a. CCSD(AT); RHF; Y; —; n/a; n/a. CC3; RHF; Y; —; Y; —. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCD; Brueckner; Y; N; N; N. CCD(T); Brueckner; Y; N; ",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:3205,Integrability,interface,interface,3205,"cupied orbitals and \(v\) is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the \({\hat{T}_3}\); operator. The computational cost of this additional term scales as; \({\cal{O}}(o^3 v^4)\), making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC).; Solvent effects on energies can be taken into account using the polarizable; continuum model (PCM) in the PTE approximation [Cammi:2009:164104], see; PCM. Current coupled cluster capabilities of PSI4¶. Method; Reference; Energy; Gradient; Exc. Energies; LR Props. CC2; RHF; Y; Y; Y; Y. UHF; Y; —; N; —. ROHF; Y; —; N; —. CCSD; RHF; Y; Y; Y; Y. UHF; Y; Y; Y; —. ROHF; Y; Y; Y; —. CCSD(T); RHF; Y; Y; n/a; n/a. UHF; Y; Y; n/a; n/a. ROHF; Y; —; n/a; n/a. CCSD(AT); RHF; Y; —; n/a; n/a. CC3; RHF; Y; —; Y; —. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCD; Brueckner; Y; N; N; N. CCD(T); Brueckner; Y; N; n/a; n/a. The following wavefunctions are currently recognized by PSI4 as arguments; to functions like energy(): 'ccsd', 'ccsd(t)', 'ccsd(at)', 'cc2',; 'cc3', 'bccd' (CCD with Brueckner orbitals), 'bccd(t)' (CCD(T) with; Brueckner orbitals), 'eom-ccsd', 'eom-cc2' (CC2 for excited states),; 'eom-cc3' (CC3 for excited states). Response properties",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:5146,Integrability,depend,depending,5146,"r excited states). Response properties can be obtained; by calling the function property() (instead of, for example, energy(),; e.g., property('ccsd'). There are many sample; coupled cluster inputs provided in psi4/samples. Basic Keywords¶; A complete list of keywords related to coupled-cluster computations is; provided in the appendices, with the majority of the relevant; keywords appearing in Appendix CCENERGY. For a standard ground-state; CCSD or CCSD(T) computation, the following keywords are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in t",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:7236,Integrability,rout,routines,7236,"nteger; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to 0.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists.; Set the PRINT keyword to 2. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. Excited State Coupled Cluster Calculations¶; A complete list of keywords related to; coupled cluster linear response is provided in Appendix CCEOM.; The most important keywords associated with EOM-CC calculations are:. ROOTS_PER_IRREP¶. Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of ",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:10831,Integrability,depend,dependent,10831,"ty desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. GAUGE¶. Specifies the choice of representation of the electric dipole operator. For polarizability, this keyword is ignored and LENGTH gauge is computed. For optical rotation and raman optical activity, this keyword is active, and acceptable values are LENGTH for the usual length-gauge representation, VELOCITY``(default) for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or ``BOTH. Note that, for optical rotation and raman optical activity calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: VELOCITY. table of contents. CC: Coupled Cluster Theory; Basic Keywords; REFERENCE; R_CONVERGENCE; MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; RESTART; CACHELEVEL; CACHETYPE; NUM_AMPS_PRINT; MP2_AMPS_PRINT. Larger Calculations; Excited State Coupled Cluster Calculations; ROOTS_PER_IRREP; E_CONVERGENCE; SINGLES_PRINT; SCHMIDT_ADD_RESIDUAL_TOLERANCE; EOM_GUESS. Linear Response (CCLR) Calculations; PROPERTY; OMEGA; GAUGE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 ",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:739,Modifiability,config,configuration,739,"﻿. CC: Coupled Cluster Theory. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Theoretical Methods: SCF to FCI. CC: Coupled Cluster Theory¶; Code author: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuration; interaction, coupled cluster uses an exponential expansion,. (1)¶\[\begin{split}| \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,\end{split}\]; where the cluster operator \({\hat{T}}\) is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. \[{\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},\]; with. \[\begin{split}{\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,\end{split}\]; etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at \({\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}\). This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term \({\hat{T}_2}^2\) approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:1676,Modifiability,config,configuration,1676,"d by configuration; interaction, coupled cluster uses an exponential expansion,. (1)¶\[\begin{split}| \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,\end{split}\]; where the cluster operator \({\hat{T}}\) is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. \[{\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},\]; with. \[\begin{split}{\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,\end{split}\]; etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at \({\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}\). This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term \({\hat{T}_2}^2\) approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as \({\cal{O}}(o^2 v^4)\), where; \(o\) is the number of occupied orbitals and \(v\) is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the \({\hat{T}_3}\); operator. The computational cost of this additional term scales as; \({\cal{O}}(o^3 v^4)\), making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a;",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:5314,Performance,optimiz,optimizations,5314,"operty('ccsd'). There are many sample; coupled cluster inputs provided in psi4/samples. Basic Keywords¶; A complete list of keywords related to coupled-cluster computations is; provided in the appendices, with the majority of the relevant; keywords appearing in Appendix CCENERGY. For a standard ground-state; CCSD or CCSD(T) computation, the following keywords are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:5822,Performance,cache,cache,5822,"plitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolea",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:5884,Performance,cache,cache,5884,"plitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolea",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:6154,Performance,cache,cache,6154,"e. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:6263,Performance,cache,cache,6263,"er iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. T",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:6382,Performance,cache,cache,6382,"e iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for e",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:6513,Performance,cache,cache,6513," that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:7512,Performance,cache,cacheing,7512," Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to 0.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists.; Set the PRINT keyword to 2. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. Excited State Coupled Cluster Calculations¶; A complete list of keywords related to; coupled cluster linear response is provided in Appendix CCEOM.; The most important keywords associated with EOM-CC calculations are:. ROOTS_PER_IRREP¶. Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. SINGLES_PRINT¶. Do print information on the iterative solution to the single-excitation EOM-CC problem used as a gues",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc-1.html:7720,Performance,bottleneck,bottlenecks,7720,"print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to 0.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists.; Set the PRINT keyword to 2. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. Excited State Coupled Cluster Calculations¶; A complete list of keywords related to; coupled cluster linear response is provided in Appendix CCEOM.; The most important keywords associated with EOM-CC calculations are:. ROOTS_PER_IRREP¶. Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. SINGLES_PRINT¶. Do print information on the iterative solution to the single-excitation EOM-CC problem used as a guess to full EOM-CC?. Type: boolean; Default: false. SCHMIDT_ADD_RESIDUAL_TOLERANCE¶. Minimum absolute value above which a guess vector to a root is added to the",MatchSource.WIKI,psi4manual/1.2.1/cc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc-1.html
https://psicode.org/psi4manual/1.2.1/cc.html:589,Availability,reliab,reliable,589,"﻿. CC: Coupled Cluster Theory. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Theoretical Methods: SCF to FCI. CC: Coupled Cluster Theory¶; Code author: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuration; interaction, coupled cluster uses an exponential expansion,. (1)¶\[\begin{split}| \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,\end{split}\]; where the cluster operator \({\hat{T}}\) is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. \[{\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},\]; with. \[\begin{split}{\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,\end{split}\]; etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at \({\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}\). This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term \({\hat{T}_2}^2\) approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:7056,Availability,avail,available,7056,"x quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to 0.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists.; Set the PRINT keyword to 2. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. Excited State Coupled Cluster Calculations¶; A complete list of keywords related to; coupled cluster linear response is provided in Appendix CCEOM.; The most important keywords associated with EOM-CC calculations are:. ROOTS_PER_IRREP¶. Number of excited st",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:7601,Availability,fault,faults,7601," Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to 0.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists.; Set the PRINT keyword to 2. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. Excited State Coupled Cluster Calculations¶; A complete list of keywords related to; coupled cluster linear response is provided in Appendix CCEOM.; The most important keywords associated with EOM-CC calculations are:. ROOTS_PER_IRREP¶. Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. SINGLES_PRINT¶. Do print information on the iterative solution to the single-excitation EOM-CC problem used as a gues",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:7741,Availability,error,errors,7741,"print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to 0.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists.; Set the PRINT keyword to 2. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. Excited State Coupled Cluster Calculations¶; A complete list of keywords related to; coupled cluster linear response is provided in Appendix CCEOM.; The most important keywords associated with EOM-CC calculations are:. ROOTS_PER_IRREP¶. Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. SINGLES_PRINT¶. Do print information on the iterative solution to the single-excitation EOM-CC problem used as a guess to full EOM-CC?. Type: boolean; Default: false. SCHMIDT_ADD_RESIDUAL_TOLERANCE¶. Minimum absolute value above which a guess vector to a root is added to the",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:9228,Availability,avail,available,9228,"t. E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. SINGLES_PRINT¶. Do print information on the iterative solution to the single-excitation EOM-CC problem used as a guess to full EOM-CC?. Type: boolean; Default: false. SCHMIDT_ADD_RESIDUAL_TOLERANCE¶. Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. EOM_GUESS¶. Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. Linear Response (CCLR) Calculations¶; Linear response computations are invoked like property('ccsd'); or property('cc2'), along with a list of requested properties.; A complete list of keywords related to; coupled cluster linear response is provided in Appendix CCRESPONSE.; The most important keywords associated with CC-LR calculations are as follows. PROPERTY¶. The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:739,Deployability,configurat,configuration,739,"﻿. CC: Coupled Cluster Theory. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Theoretical Methods: SCF to FCI. CC: Coupled Cluster Theory¶; Code author: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuration; interaction, coupled cluster uses an exponential expansion,. (1)¶\[\begin{split}| \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,\end{split}\]; where the cluster operator \({\hat{T}}\) is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. \[{\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},\]; with. \[\begin{split}{\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,\end{split}\]; etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at \({\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}\). This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term \({\hat{T}_2}^2\) approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:1676,Deployability,configurat,configuration,1676,"d by configuration; interaction, coupled cluster uses an exponential expansion,. (1)¶\[\begin{split}| \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,\end{split}\]; where the cluster operator \({\hat{T}}\) is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. \[{\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},\]; with. \[\begin{split}{\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,\end{split}\]; etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at \({\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}\). This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term \({\hat{T}_2}^2\) approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as \({\cal{O}}(o^2 v^4)\), where; \(o\) is the number of occupied orbitals and \(v\) is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the \({\hat{T}_3}\); operator. The computational cost of this additional term scales as; \({\cal{O}}(o^3 v^4)\), making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a;",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:5531,Deployability,update,updates,5531,"ndix CCENERGY. For a standard ground-state; CCSD or CCSD(T) computation, the following keywords are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Typ",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:11670,Deployability,update,updated,11670,"fault) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. GAUGE¶. Specifies the choice of representation of the electric dipole operator. For polarizability, this keyword is ignored and LENGTH gauge is computed. For optical rotation and raman optical activity, this keyword is active, and acceptable values are LENGTH for the usual length-gauge representation, VELOCITY``(default) for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or ``BOTH. Note that, for optical rotation and raman optical activity calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: VELOCITY. table of contents. CC: Coupled Cluster Theory; Basic Keywords; REFERENCE; R_CONVERGENCE; MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; RESTART; CACHELEVEL; CACHETYPE; NUM_AMPS_PRINT; MP2_AMPS_PRINT. Larger Calculations; Excited State Coupled Cluster Calculations; ROOTS_PER_IRREP; E_CONVERGENCE; SINGLES_PRINT; SCHMIDT_ADD_RESIDUAL_TOLERANCE; EOM_GUESS. Linear Response (CCLR) Calculations; PROPERTY; OMEGA; GAUGE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:2352,Energy Efficiency,energy,energy,2352," | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,\end{split}\]; etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at \({\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}\). This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term \({\hat{T}_2}^2\) approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as \({\cal{O}}(o^2 v^4)\), where; \(o\) is the number of occupied orbitals and \(v\) is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the \({\hat{T}_3}\); operator. The computational cost of this additional term scales as; \({\cal{O}}(o^3 v^4)\), making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC).; Solvent effects on energies can be taken into account using the polarizable; ",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:3946,Energy Efficiency,energy,energy,3946,"thods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC).; Solvent effects on energies can be taken into account using the polarizable; continuum model (PCM) in the PTE approximation [Cammi:2009:164104], see; PCM. Current coupled cluster capabilities of PSI4¶. Method; Reference; Energy; Gradient; Exc. Energies; LR Props. CC2; RHF; Y; Y; Y; Y. UHF; Y; —; N; —. ROHF; Y; —; N; —. CCSD; RHF; Y; Y; Y; Y. UHF; Y; Y; Y; —. ROHF; Y; Y; Y; —. CCSD(T); RHF; Y; Y; n/a; n/a. UHF; Y; Y; n/a; n/a. ROHF; Y; —; n/a; n/a. CCSD(AT); RHF; Y; —; n/a; n/a. CC3; RHF; Y; —; Y; —. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCD; Brueckner; Y; N; N; N. CCD(T); Brueckner; Y; N; n/a; n/a. The following wavefunctions are currently recognized by PSI4 as arguments; to functions like energy(): 'ccsd', 'ccsd(t)', 'ccsd(at)', 'cc2',; 'cc3', 'bccd' (CCD with Brueckner orbitals), 'bccd(t)' (CCD(T) with; Brueckner orbitals), 'eom-ccsd', 'eom-cc2' (CC2 for excited states),; 'eom-cc3' (CC3 for excited states). Response properties can be obtained; by calling the function property() (instead of, for example, energy(),; e.g., property('ccsd'). There are many sample; coupled cluster inputs provided in psi4/samples. Basic Keywords¶; A complete list of keywords related to coupled-cluster computations is; provided in the appendices, with the majority of the relevant; keywords appearing in Appendix CCENERGY. For a standard ground-state; CCSD or CCSD(T) computation, the following keywords are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:4268,Energy Efficiency,energy,energy,4268,"s MRCC code (see MRCC).; Solvent effects on energies can be taken into account using the polarizable; continuum model (PCM) in the PTE approximation [Cammi:2009:164104], see; PCM. Current coupled cluster capabilities of PSI4¶. Method; Reference; Energy; Gradient; Exc. Energies; LR Props. CC2; RHF; Y; Y; Y; Y. UHF; Y; —; N; —. ROHF; Y; —; N; —. CCSD; RHF; Y; Y; Y; Y. UHF; Y; Y; Y; —. ROHF; Y; Y; Y; —. CCSD(T); RHF; Y; Y; n/a; n/a. UHF; Y; Y; n/a; n/a. ROHF; Y; —; n/a; n/a. CCSD(AT); RHF; Y; —; n/a; n/a. CC3; RHF; Y; —; Y; —. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCD; Brueckner; Y; N; N; N. CCD(T); Brueckner; Y; N; n/a; n/a. The following wavefunctions are currently recognized by PSI4 as arguments; to functions like energy(): 'ccsd', 'ccsd(t)', 'ccsd(at)', 'cc2',; 'cc3', 'bccd' (CCD with Brueckner orbitals), 'bccd(t)' (CCD(T) with; Brueckner orbitals), 'eom-ccsd', 'eom-cc2' (CC2 for excited states),; 'eom-cc3' (CC3 for excited states). Response properties can be obtained; by calling the function property() (instead of, for example, energy(),; e.g., property('ccsd'). There are many sample; coupled cluster inputs provided in psi4/samples. Basic Keywords¶; A complete list of keywords related to coupled-cluster computations is; provided in the appendices, with the majority of the relevant; keywords appearing in Appendix CCENERGY. For a standard ground-state; CCSD or CCSD(T) computation, the following keywords are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do rest",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:8271,Energy Efficiency,energy,energy,8271,"y the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to 0.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists.; Set the PRINT keyword to 2. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. Excited State Coupled Cluster Calculations¶; A complete list of keywords related to; coupled cluster linear response is provided in Appendix CCEOM.; The most important keywords associated with EOM-CC calculations are:. ROOTS_PER_IRREP¶. Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. SINGLES_PRINT¶. Do print information on the iterative solution to the single-excitation EOM-CC problem used as a guess to full EOM-CC?. Type: boolean; Default: false. SCHMIDT_ADD_RESIDUAL_TOLERANCE¶. Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. EOM_GUESS¶. Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, ",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:2846,Integrability,depend,dependent,2846,"g., the term \({\hat{T}_2}^2\) approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as \({\cal{O}}(o^2 v^4)\), where; \(o\) is the number of occupied orbitals and \(v\) is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the \({\hat{T}_3}\); operator. The computational cost of this additional term scales as; \({\cal{O}}(o^3 v^4)\), making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC).; Solvent effects on energies can be taken into account using the polarizable; continuum model (PCM) in the PTE approximation [Cammi:2009:164104], see; PCM. Current coupled cluster capabilities of PSI4¶. Method; Reference; Energy; Gradient; Exc. Energies; LR Props. CC2; RHF; Y; Y; Y; Y. UHF; Y; —; N; —. ROHF; Y; —; N; —. CCSD; RHF; Y; Y; Y; Y. UHF; Y; Y; Y; —. ROHF; Y; Y; Y; —. CCSD(T); RHF; Y; Y; n/a; n/a. UHF; Y; Y; n/a; n/a. ROHF; Y; —; n/a; n/a. CCSD(AT); RHF; Y; —; n/a; n/a. CC3; RHF; Y; —; Y; —. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCD; Brueckner; Y; N; N; N. CCD(T); Brueckner; Y; N; ",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:3205,Integrability,interface,interface,3205,"cupied orbitals and \(v\) is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the \({\hat{T}_3}\); operator. The computational cost of this additional term scales as; \({\cal{O}}(o^3 v^4)\), making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; CC Methods summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within PSI4.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, PSI4; can interface to Kállay’s MRCC code (see MRCC).; Solvent effects on energies can be taken into account using the polarizable; continuum model (PCM) in the PTE approximation [Cammi:2009:164104], see; PCM. Current coupled cluster capabilities of PSI4¶. Method; Reference; Energy; Gradient; Exc. Energies; LR Props. CC2; RHF; Y; Y; Y; Y. UHF; Y; —; N; —. ROHF; Y; —; N; —. CCSD; RHF; Y; Y; Y; Y. UHF; Y; Y; Y; —. ROHF; Y; Y; Y; —. CCSD(T); RHF; Y; Y; n/a; n/a. UHF; Y; Y; n/a; n/a. ROHF; Y; —; n/a; n/a. CCSD(AT); RHF; Y; —; n/a; n/a. CC3; RHF; Y; —; Y; —. UHF; Y; —; Y; —. ROHF; Y; —; Y; —. CCD; Brueckner; Y; N; N; N. CCD(T); Brueckner; Y; N; n/a; n/a. The following wavefunctions are currently recognized by PSI4 as arguments; to functions like energy(): 'ccsd', 'ccsd(t)', 'ccsd(at)', 'cc2',; 'cc3', 'bccd' (CCD with Brueckner orbitals), 'bccd(t)' (CCD(T) with; Brueckner orbitals), 'eom-ccsd', 'eom-cc2' (CC2 for excited states),; 'eom-cc3' (CC3 for excited states). Response properties",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:5146,Integrability,depend,depending,5146,"r excited states). Response properties can be obtained; by calling the function property() (instead of, for example, energy(),; e.g., property('ccsd'). There are many sample; coupled cluster inputs provided in psi4/samples. Basic Keywords¶; A complete list of keywords related to coupled-cluster computations is; provided in the appendices, with the majority of the relevant; keywords appearing in Appendix CCENERGY. For a standard ground-state; CCSD or CCSD(T) computation, the following keywords are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in t",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:7236,Integrability,rout,routines,7236,"nteger; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to 0.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists.; Set the PRINT keyword to 2. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. Excited State Coupled Cluster Calculations¶; A complete list of keywords related to; coupled cluster linear response is provided in Appendix CCEOM.; The most important keywords associated with EOM-CC calculations are:. ROOTS_PER_IRREP¶. Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of ",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:10831,Integrability,depend,dependent,10831,"ty desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. GAUGE¶. Specifies the choice of representation of the electric dipole operator. For polarizability, this keyword is ignored and LENGTH gauge is computed. For optical rotation and raman optical activity, this keyword is active, and acceptable values are LENGTH for the usual length-gauge representation, VELOCITY``(default) for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or ``BOTH. Note that, for optical rotation and raman optical activity calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: VELOCITY. table of contents. CC: Coupled Cluster Theory; Basic Keywords; REFERENCE; R_CONVERGENCE; MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; RESTART; CACHELEVEL; CACHETYPE; NUM_AMPS_PRINT; MP2_AMPS_PRINT. Larger Calculations; Excited State Coupled Cluster Calculations; ROOTS_PER_IRREP; E_CONVERGENCE; SINGLES_PRINT; SCHMIDT_ADD_RESIDUAL_TOLERANCE; EOM_GUESS. Linear Response (CCLR) Calculations; PROPERTY; OMEGA; GAUGE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 ",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:739,Modifiability,config,configuration,739,"﻿. CC: Coupled Cluster Theory. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Theoretical Methods: SCF to FCI. CC: Coupled Cluster Theory¶; Code author: T. Daniel Crawford; Section author: T. Daniel Crawford; Module: Keywords, PSI Variables, CCENERGY; Module: Keywords, PSI Variables, CCEOM; Module: Keywords, PSI Variables, CCRESPONSE; Module: Keywords, PSI Variables, CCTRIPLES; Module: Keywords, PSI Variables, CCDENSITY; Module: Keywords, CCHBAR; Module: Keywords, CCLAMBDA; Module: Keywords, CCSORT; The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuration; interaction, coupled cluster uses an exponential expansion,. (1)¶\[\begin{split}| \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,\end{split}\]; where the cluster operator \({\hat{T}}\) is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. \[{\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},\]; with. \[\begin{split}{\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,\end{split}\]; etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at \({\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}\). This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term \({\hat{T}_2}^2\) approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:1676,Modifiability,config,configuration,1676,"d by configuration; interaction, coupled cluster uses an exponential expansion,. (1)¶\[\begin{split}| \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,\end{split}\]; where the cluster operator \({\hat{T}}\) is written as a sum of operators that; generate singly-excited, doubly-excited, etc., determinants:. \[{\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},\]; with. \[\begin{split}{\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,\end{split}\]; etc. The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982] truncates the expansion at \({\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}\). This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (e.g., the term \({\hat{T}_2}^2\) approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods size extensive, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as \({\cal{O}}(o^2 v^4)\), where; \(o\) is the number of occupied orbitals and \(v\) is the number of virtual; orbitals.; Improving upon CCSD, the CCSD(T) method [Raghavachari:1989] includes; a perturbative estimate of the energy contributed by the \({\hat{T}_3}\); operator. The computational cost of this additional term scales as; \({\cal{O}}(o^3 v^4)\), making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases.; PSI4 is capable of computing energies and analytic gradients for a;",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:5314,Performance,optimiz,optimizations,5314,"operty('ccsd'). There are many sample; coupled cluster inputs provided in psi4/samples. Basic Keywords¶; A complete list of keywords related to coupled-cluster computations is; provided in the appendices, with the majority of the relevant; keywords appearing in Appendix CCENERGY. For a standard ground-state; CCSD or CCSD(T) computation, the following keywords are common:. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:5822,Performance,cache,cache,5822,"plitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolea",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:5884,Performance,cache,cache,5884,"plitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolea",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:6154,Performance,cache,cache,6154,"e. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:6263,Performance,cache,cache,6263,"er iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. T",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:6382,Performance,cache,cache,6382,"e iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for e",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:6513,Performance,cache,cache,6513," that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:7512,Performance,cache,cacheing,7512," Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to 0.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists.; Set the PRINT keyword to 2. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. Excited State Coupled Cluster Calculations¶; A complete list of keywords related to; coupled cluster linear response is provided in Appendix CCEOM.; The most important keywords associated with EOM-CC calculations are:. ROOTS_PER_IRREP¶. Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. SINGLES_PRINT¶. Do print information on the iterative solution to the single-excitation EOM-CC problem used as a gues",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cc.html:7720,Performance,bottleneck,bottlenecks,7720,"print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to 0.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists.; Set the PRINT keyword to 2. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. Excited State Coupled Cluster Calculations¶; A complete list of keywords related to; coupled cluster linear response is provided in Appendix CCEOM.; The most important keywords associated with EOM-CC calculations are:. ROOTS_PER_IRREP¶. Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. SINGLES_PRINT¶. Do print information on the iterative solution to the single-excitation EOM-CC problem used as a guess to full EOM-CC?. Type: boolean; Default: false. SCHMIDT_ADD_RESIDUAL_TOLERANCE¶. Minimum absolute value above which a guess vector to a root is added to the",MatchSource.WIKI,psi4manual/1.2.1/cc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cc.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:453,Availability,avail,available,453,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:580,Availability,down,download,580,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:1041,Availability,error,error,1041,"anton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the p",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:1512,Availability,avail,available,1512,"s provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are t",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:4233,Availability,toler,tolerant,4233,"/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:10386,Availability,avail,available,10386,"4 -76.332261408714 -0.000000004262 0.00000098 0.00000066 0.00000622 0.00000371 ~; --------------------------------------------------------------------------------------------------------------- ~. The above example also shows the total memory for the computation being; set in PSI4 format. See Memory Specification for details. When; specified, the memory value is passed on to Cfour by setting keywords; CFOUR_MEMORY_SIZE and CFOUR_MEM_UNIT=MB.; PSI4 has an extensive basis set library in; Gaussian94 format. See Basis Sets for details. Contrasts to; Cfour basis handling include identifying basis sets by standard name; (aug-cc-pVDZ instead of AUG-PVDZ), direct handles for; diffuse-function-pruned sets (e.g., jun-cc-pVDZ), case insensitivity,; appropriate setting of spherical/Cartesian depending on basis set design,; and syntax to set different basis sets to different classes of atoms; without listing each atom. All of these features are available to Cfour by; using the BASIS keyword instead of CFOUR_BASIS; (accompanied, of course, by specifying the molecule PSI4-style).; Internally, PSI4 processes the basis set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which w",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:12919,Availability,avail,available,12919,"75; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4’s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the;",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:19434,Availability,error,error,19434,"g; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will not run. Therefore, if mixing sandwich and; standard or pure-PSI4 computations in an input file, place all; the sandwich jobs at the beginning before declaring PSI4; molecules. If necessary, clear the cfour block with cfour {} before; commencing standard P4C4 jobs. Output¶; The output of xcfour invoked from a PSI4 input file is; written to the PSI4 output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in CFOUR ERROR CODE.; Energies & Scalars; After execution of xcfour has completed, the output string is; extensively parsed and appropriate results are stored in PSI; Variables. All gleaned variables are printed in the; Cfour output section of the PSI4 output file, as shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:20729,Availability,avail,available,20729," shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; 1; 2; 3; 4energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessar",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:26107,Availability,avail,available,26107,"ams”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; complete_basis_set() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; property() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP pe",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:26819,Availability,avail,available,26819,"timizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; property() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:32601,Availability,down,down,32601," applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; 1energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; 1; 2set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4’s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gr",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:33532,Availability,avail,available,33532,"tten by; SCF module keyword (local scope works, too) where; the PSI4’s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that co",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:592,Deployability,install,install,592,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:27856,Deployability,integrat,integration,27856,"full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:34894,Deployability,update,updated,34894,"und here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:1112,Energy Efficiency,adapt,adapted,1112,"· . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PS",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:1410,Energy Efficiency,energy,energy,1410,"ilable after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE whe",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:1433,Energy Efficiency,energy,energy,1433,"ilable after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE whe",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:1535,Energy Efficiency,energy,energy,1535,"s provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are t",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:3110,Energy Efficiency,energy,energy,3110,"on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; qcdb.cfour.muster_psi4options().; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows C",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:3274,Energy Efficiency,energy,energy,3274,"are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; qcdb.cfour.muster_psi4options().; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Speci",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:3528,Energy Efficiency,energy,energy,3528,"dules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; qcdb.cfour.muster_psi4options().; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:3600,Energy Efficiency,energy,energy,3600,"NCE. For a; list of applicable keywords, see source of; qcdb.cfour.muster_psi4options().; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is no",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:5271,Energy Efficiency,energy,energy,5271," in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23# UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywo",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:5645,Energy Efficiency,energy,energy,5645,"frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23# UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in C",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:7243,Energy Efficiency,energy,energy,7243,"he common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:7906,Energy Efficiency,monitor,monitor,7906,"11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-04 o ~; 3 -76.33226140 -4.39e-07 * 4.31e-05 * 3.58e-05 9.89e-05 * 8.93e-05 o ~; 4 -76.33226141 -4.26e-09 * 9.76e-07 * 6.58e-07 * 6.22e-06 * 3.71e-06 o ~; ----------------------------------",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:11617,Energy Efficiency,energy,energy,11617," set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:13118,Energy Efficiency,energy,energy,13118,"set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4’s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:13887,Energy Efficiency,energy,energy,13887,"overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.; Depending on the nature of the variable, this may or may not make any physical sense. ==> Requested Energy <==. ----------------------------------------------------------------------------------------------; Reaction Reaction Energy Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [H] Wt [H] Wt; ----------------------------------------------------------------------------------------------; NBC1-MeMe-3.2 0.0690 1.1639 1.0949 -80.72700202 1 -40.36442840 -2; NBC1-MeMe-3.3 -0.2390 0.6709 0.9099 -80.72764911 1 -40.36435916 -2; NBC1-MeMe-3.4 -0.4170 0.3407 0.7577 -80.72806043 1 -40.36430165 -2; NBC1-MeMe-3.5 -0.5080 0.1244 0.",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:16657,Energy Efficiency,energy,energy,16657,"1387 -80.72842215 1 -40.36409932 -2; NBC1-MeMe-4.6 -0.2170 -0.1155 0.1015 -80.72836761 1 -40.36409177 -2; NBC1-MeMe-4.8 -0.1680 -0.0933 0.0747 -80.72831991 1 -40.36408563 -2; NBC1-MeMe-5.0 -0.1300 -0.0747 0.0553 -80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the complete_basis_set() wrapper allows any; compound computational method that can be expressed through CBS to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through PSI4 and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; 1; 2; 3; 4; 5; 6; 7; 8molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ----------------------",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:20818,Energy Efficiency,energy,energy,20818,"1; 22//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; 1; 2; 3; 4energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:20956,Energy Efficiency,energy,energy,20956,"<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; 1; 2; 3; 4energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PS",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:21007,Energy Efficiency,energy,energy,21007,"---------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; 1; 2; 3; 4energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4’s active molecule are shifted,; rotated, flipped, and otherwise badgere",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:21061,Energy Efficiency,energy,energy,21061,"---------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; 1; 2; 3; 4energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4’s active molecule are shifted,; rotated, flipped, and otherwise badgere",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:23841,Energy Efficiency,energy,energy,23841,"0000000000 -0.0122978407 0.0000000000 0.0000000000; 1.0000000000 0.0040992802 -0.0051191833 -0.0088666856; 1.0000000000 0.0040992802 -0.0051191833 0.0088666856; 1.0000000000 0.0040992802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; 1; 2energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:24043,Energy Efficiency,energy,energy,24043,"92802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; 1; 2energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconcil",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:24088,Energy Efficiency,energy,energy,24088,"92802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; 1; 2energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconcil",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:24502,Energy Efficiency,energy,energy,24502,"ing could be placed in the PSI4 input file.; 1; 2energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:25167,Energy Efficiency,energy,energy,25167,"he; run_cfour() function documented below. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; complete_basis_set() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; property() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gaus",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:28206,Energy Efficiency,charge,charge,28206,"gles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). e",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:29154,Energy Efficiency,energy,energy,29154," here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). energy('c4-scf'). Specifying anything in PSI4 format (molecule, basis, options,; method call) starts building a *CFOUR(...) directive for the; ZMAT file. Since the contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route. Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:29211,Energy Efficiency,energy,energy,29211,"licity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). energy('c4-scf'). Specifying anything in PSI4 format (molecule, basis, options,; method call) starts building a *CFOUR(...) directive for the; ZMAT file. Since the contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route. Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:30635,Energy Efficiency,energy,energy,30635," the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route. Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL). Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles. Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; qcdb.cfour.muster_modelchem() for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; 1; 2set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; 1; 2; 3set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; 1energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; 1; 2set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:30664,Energy Efficiency,energy,energy,30664," the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route. Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL). Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles. Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; qcdb.cfour.muster_modelchem() for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; 1; 2set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; 1; 2; 3set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; 1energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; 1; 2set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:31175,Energy Efficiency,energy,energy,31175,"overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL). Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles. Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; qcdb.cfour.muster_modelchem() for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; 1; 2set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; 1; 2; 3set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; 1energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; 1; 2set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:31310,Energy Efficiency,energy,energy,31310,"ying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles. Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; qcdb.cfour.muster_modelchem() for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; 1; 2set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; 1; 2; 3set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; 1energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; 1; 2set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; 1energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; k",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:31497,Energy Efficiency,energy,energy,31497,"e Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles. Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; qcdb.cfour.muster_modelchem() for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; 1; 2set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; 1; 2; 3set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; 1energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; 1; 2set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; 1energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; 1; 2set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv c",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:32293,Energy Efficiency,energy,energy,32293,"2; 3set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; 1energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; 1; 2set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; 1energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; 1; 2set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4’s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multipl",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:32417,Energy Efficiency,energy,energy,32417,"e requested ccsd; 1energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; 1; 2set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; 1energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; 1; 2set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4’s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:32673,Energy Efficiency,energy,energy,32673," applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; 1energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; 1; 2set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4’s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gr",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:32856,Energy Efficiency,energy,energy,32856,"set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; 1energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; 1; 2set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4’s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the follo",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:328,Integrability,interface,interface,328,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:810,Integrability,interface,interface,810,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:947,Integrability,interface,interface,947,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:1084,Integrability,interface,interface,1084,"· . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PS",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:1624,Integrability,interface,interface,1624,", the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REF",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:2908,Integrability,interface,interface,2908,"ion intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; qcdb.cfour.muster_psi4options().; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:2950,Integrability,wrap,wrap,2950,"ion intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; qcdb.cfour.muster_psi4options().; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:3958,Integrability,interface,interface,3958,"n the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this s",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:6736,Integrability,interface,interface,6736," Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:7539,Integrability,interface,interface,7539,"ptimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:10231,Integrability,depend,depending,10231,"507630 0.00881949 ~; 2 -76.332260965382 -0.000018117284 0.00048446 0.00040256 0.00077146 0.00070447 ~; 3 -76.332261404452 -0.000000439070 0.00004307 0.00003577 0.00009889 0.00008926 ~; 4 -76.332261408714 -0.000000004262 0.00000098 0.00000066 0.00000622 0.00000371 ~; --------------------------------------------------------------------------------------------------------------- ~. The above example also shows the total memory for the computation being; set in PSI4 format. See Memory Specification for details. When; specified, the memory value is passed on to Cfour by setting keywords; CFOUR_MEMORY_SIZE and CFOUR_MEM_UNIT=MB.; PSI4 has an extensive basis set library in; Gaussian94 format. See Basis Sets for details. Contrasts to; Cfour basis handling include identifying basis sets by standard name; (aug-cc-pVDZ instead of AUG-PVDZ), direct handles for; diffuse-function-pruned sets (e.g., jun-cc-pVDZ), case insensitivity,; appropriate setting of spherical/Cartesian depending on basis set design,; and syntax to set different basis sets to different classes of atoms; without listing each atom. All of these features are available to Cfour by; using the BASIS keyword instead of CFOUR_BASIS; (accompanied, of course, by specifying the molecule PSI4-style).; Internally, PSI4 processes the basis set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argum",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:10680,Integrability,interface,interface,10680,"tion for details. When; specified, the memory value is passed on to Cfour by setting keywords; CFOUR_MEMORY_SIZE and CFOUR_MEM_UNIT=MB.; PSI4 has an extensive basis set library in; Gaussian94 format. See Basis Sets for details. Contrasts to; Cfour basis handling include identifying basis sets by standard name; (aug-cc-pVDZ instead of AUG-PVDZ), direct handles for; diffuse-function-pruned sets (e.g., jun-cc-pVDZ), case insensitivity,; appropriate setting of spherical/Cartesian depending on basis set design,; and syntax to set different basis sets to different classes of atoms; without listing each atom. All of these features are available to Cfour by; using the BASIS keyword instead of CFOUR_BASIS; (accompanied, of course, by specifying the molecule PSI4-style).; Internally, PSI4 processes the basis set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:11727,Integrability,interface,interface,11727," CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4’s Python dri",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:12777,Integrability,wrap,wrapped,12777,"; 11; 12; 13; 14; 15; 16; 17; 18; 19memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4’s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergen",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:12909,Integrability,wrap,wrappers,12909,"75; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4’s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the;",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:13611,Integrability,wrap,wrapper,13611,"icitly set to VCC.; An advantage of PSI4’s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.; Depending on the nature of the variable, this may or may not make any physical sense. ==> Requested Energy <==. ----------------------------------------------------------------------------------------------; Reaction Reaction ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:16385,Integrability,wrap,wrapper,16385,"3960 -0.1712 0.2248 -80.72850993 1 -40.36411859 -2; NBC1-MeMe-4.2 -0.3540 -0.1633 0.1907 -80.72848118 1 -40.36411044 -2; NBC1-MeMe-4.3 -0.3150 -0.1525 0.1625 -80.72845143 1 -40.36410422 -2; NBC1-MeMe-4.4 -0.2790 -0.1403 0.1387 -80.72842215 1 -40.36409932 -2; NBC1-MeMe-4.6 -0.2170 -0.1155 0.1015 -80.72836761 1 -40.36409177 -2; NBC1-MeMe-4.8 -0.1680 -0.0933 0.0747 -80.72831991 1 -40.36408563 -2; NBC1-MeMe-5.0 -0.1300 -0.0747 0.0553 -80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the complete_basis_set() wrapper allows any; compound computational method that can be expressed through CBS to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through PSI4 and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; 1; 2; 3; 4; 5; 6; 7; 8molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; -------------------------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:16877,Integrability,wrap,wrapper,16877,"80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the complete_basis_set() wrapper allows any; compound computational method that can be expressed through CBS to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through PSI4 and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; 1; 2; 3; 4; 5; 6; 7; 8molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for complete_basis_set(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:17885,Integrability,wrap,wrappers,17885,"4; 5; 6; 7; 8molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for complete_basis_set(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; PSI4 input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and i",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:18563,Integrability,interface,interface,18563,"--------------------------------------------------------------------------------------------------------. Note that especially for complete_basis_set(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; PSI4 input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will not run. Therefore, if mixing sandwich and; standard or pure-PSI4 computations in an input file, place all; the sandwich jobs at the beginning before declaring PSI4; molecules. If necessary, clear the cfour block with cfour {} before; commencing standard P4C4 jobs. Output¶; The output of xcfour invoked from a PSI4 input file is; written to the PSI4 output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in CFOUR ERROR CODE.; Energies & Scalars; After execution of xcfour has completed, the output string is; extensively parsed and appropriate results are stored in PSI; Variables. All",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:21356,Integrability,interface,interface,21356,"030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; 1; 2; 3; 4energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4’s active molecule are shifted,; rotated, flipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in GRD, the result of which; is printed below and passed on to Optking.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:21672,Integrability,interface,interface,21672,"0; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; 1; 2; 3; 4energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4’s active molecule are shifted,; rotated, flipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in GRD, the result of which; is printed below and passed on to Optking.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3. 1 2 3. 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000;",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:24342,Integrability,interface,interface,24342,"rns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; 1; 2energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:26130,Integrability,interface,interface,26130,"ams”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; complete_basis_set() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; property() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP pe",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:26842,Integrability,interface,interface,26842,"timizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; property() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:27583,Integrability,interface,interface,27583,"SD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computation",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:27856,Integrability,integrat,integration,27856,"full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:28128,Integrability,contract,contract,28128,"r MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' bel",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:29831,Integrability,rout,route,29831,"; 7; 8; 9; 10; 11; 12; 13; 14; 15memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). energy('c4-scf'). Specifying anything in PSI4 format (molecule, basis, options,; method call) starts building a *CFOUR(...) directive for the; ZMAT file. Since the contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route. Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL). Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles. Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOU",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:31818,Integrability,contract,contract,31818,", any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; qcdb.cfour.muster_modelchem() for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; 1; 2set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; 1; 2; 3set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; 1energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; 1; 2set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; 1energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; 1; 2set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4’s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword;",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:34066,Integrability,rout,route,34066,"und here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:1112,Modifiability,adapt,adapted,1112,"· . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PS",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:3803,Modifiability,variab,variables,3803,"n the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this s",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:4131,Modifiability,variab,variables,4131,"lculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords i",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:4168,Modifiability,variab,variables,4168,"lculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords i",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:5122,Modifiability,flexible,flexible,5122,"tesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23# UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and fi",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:5841,Modifiability,extend,extended,5841,"on. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23# UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:14456,Modifiability,variab,variable,14456,"). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.; Depending on the nature of the variable, this may or may not make any physical sense. ==> Requested Energy <==. ----------------------------------------------------------------------------------------------; Reaction Reaction Energy Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [H] Wt [H] Wt; ----------------------------------------------------------------------------------------------; NBC1-MeMe-3.2 0.0690 1.1639 1.0949 -80.72700202 1 -40.36442840 -2; NBC1-MeMe-3.3 -0.2390 0.6709 0.9099 -80.72764911 1 -40.36435916 -2; NBC1-MeMe-3.4 -0.4170 0.3407 0.7577 -80.72806043 1 -40.36430165 -2; NBC1-MeMe-3.5 -0.5080 0.1244 0.6324 -80.72831099 1 -40.36425461 -2; NBC1-MeMe-3.6 -0.5410 -0.0129 0.5281 -80.72845373 1 -40.36421659 -2; NBC1-MeMe-3.7 -0.5390 -0.0961 0.4429 -80.72852567 1 -40.36418623 -2; NBC1-MeMe-3.8 -0.5150 -0.1430 0.3720 -80.72855247 1 -40.36416227 -2; NBC1-MeMe-3.9 -0.4800 -0.1659 0.3141 -80.72855167 1 -40.36414365 -2; NBC1-MeMe-4.0 -0.4390 -0.1733 0.2657 -80.72853498 1 -40.36412938 -2; NBC1-MeMe-4.1 -0.3960 -0.1712 0.224",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:18380,Modifiability,variab,variables,18380,"-; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for complete_basis_set(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; PSI4 input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will not run. Therefore, if mixing sandwich and; standard or pure-PSI4 computations in an input file, place all; the sandwich jobs at the beginning before declaring PSI4; molecules. If necessary, clear the cfour block with cfour {} before; commencing standard P4C4 jobs. Output¶; The output of xcfour invoked from a PSI4 ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:19660,Modifiability,variab,variables,19660,"rd mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will not run. Therefore, if mixing sandwich and; standard or pure-PSI4 computations in an input file, place all; the sandwich jobs at the beginning before declaring PSI4; molecules. If necessary, clear the cfour block with cfour {} before; commencing standard P4C4 jobs. Output¶; The output of xcfour invoked from a PSI4 input file is; written to the PSI4 output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in CFOUR ERROR CODE.; Energies & Scalars; After execution of xcfour has completed, the output string is; extensively parsed and appropriate results are stored in PSI; Variables. All gleaned variables are printed in the; Cfour output section of the PSI4 output file, as shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.06274846018",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:32563,Modifiability,flexible,flexible,32563," applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; 1energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; 1; 2set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4’s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gr",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:33870,Modifiability,variab,variables,33870,"odule keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ;",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:34263,Modifiability,variab,variable,34263,"und here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:1454,Performance,optimiz,optimize,1454,"ilable after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE whe",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:1483,Performance,optimiz,optimize,1483,"ilable after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE whe",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:1571,Performance,optimiz,optimize,1571,"s provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are t",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:6451,Performance,perform,perform,6451,"ow in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, t",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:6468,Performance,optimiz,optimizations,6468,"ow in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, t",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:6635,Performance,optimiz,optimizations,6635," Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:6674,Performance,optimiz,optimizations,6674," Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:6702,Performance,optimiz,optimizations,6702," Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:6807,Performance,optimiz,optimizations,6807,"gers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:6836,Performance,optimiz,optimizer,6836,"gers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:6883,Performance,optimiz,optimization,6883,"uare-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:7176,Performance,optimiz,optimize,7176,"Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( )",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:7257,Performance,optimiz,optimize,7257,"he common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:7282,Performance,optimiz,optimization,7282,"he common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:7634,Performance,optimiz,optimizations,7634,"tions on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:7673,Performance,optimiz,optimizations,7673,"d in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-0",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:7765,Performance,optimiz,optimization,7765,"d in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-0",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:7832,Performance,optimiz,optimization,7832,"ur optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-04 o ~; 3 -76.33226140 -4.39e-07 * 4.31e-05 * 3.58e-05 9.89e-05 * 8.93e-05 o ~; 4 -76.332261",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:7942,Performance,optimiz,optimization,7942,"11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-04 o ~; 3 -76.33226140 -4.39e-07 * 4.31e-05 * 3.58e-05 9.89e-05 * 8.93e-05 o ~; 4 -76.33226141 -4.26e-09 * 9.76e-07 * 6.58e-07 * 6.22e-06 * 3.71e-06 o ~; ----------------------------------",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:11266,Performance,optimiz,optimize,11266,"rtesian depending on basis set design,; and syntax to set different basis sets to different classes of atoms; without listing each atom. All of these features are available to Cfour by; using the BASIS keyword instead of CFOUR_BASIS; (accompanied, of course, by specifying the molecule PSI4-style).; Internally, PSI4 processes the basis set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_c",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:11643,Performance,optimiz,optimize,11643," set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:12231,Performance,optimiz,optimize,12231," first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4’s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molec",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:12827,Performance,optimiz,optimization,12827,"; 11; 12; 13; 14; 15; 16; 17; 18; 19memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4’s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergen",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:18002,Performance,optimiz,optimize,18002,"4; 5; 6; 7; 8molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for complete_basis_set(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; PSI4 input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and i",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:24639,Performance,optimiz,optimize,24639,"s; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; complete_basis_set() for computation of compound methods involving; basis set extrapolations and/or delta",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:25190,Performance,optimiz,optimize,25190,"he; run_cfour() function documented below. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; complete_basis_set() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; property() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gaus",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:25824,Performance,optimiz,optimizations,25824,"es (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; complete_basis_set() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; property() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton a",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:25866,Performance,optimiz,optimizations,25866,"es (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; complete_basis_set() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; property() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton a",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:30294,Performance,optimiz,optimization,30294,",; method call) starts building a *CFOUR(...) directive for the; ZMAT file. Since the contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route. Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL). Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles. Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; qcdb.cfour.muster_modelchem() for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; 1; 2set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; 1; 2; 3set cfour_calc_level ccsd; set c",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:30339,Performance,optimiz,optimization,30339,"he contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route. Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL). Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles. Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; qcdb.cfour.muster_modelchem() for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; 1; 2set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; 1; 2; 3set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for th",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:30392,Performance,optimiz,optimization,30392,"he contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route. Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL). Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles. Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; qcdb.cfour.muster_modelchem() for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; 1; 2set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; 1; 2; 3set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for th",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:30470,Performance,optimiz,optimizer,30470,"om PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route. Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL). Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles. Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; qcdb.cfour.muster_modelchem() for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; 1; 2set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; 1; 2; 3set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; 1energy('c4-ccsd'). runs in vcc since hidden default overwritten by ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:30504,Performance,optimiz,optimization,30504," likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route. Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL). Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles. Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; qcdb.cfour.muster_modelchem() for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; 1; 2set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; 1; 2; 3set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; 1energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; 1; 2set cfour_cc_program vcc; energy('c4-ccsd'",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:33315,Performance,optimiz,optimizations,33315,"F conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4’s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computa",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:5029,Safety,avoid,avoid,5029,"andwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23# UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample input",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:12561,Safety,safe,safe,12561,"; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4’s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:33108,Safety,avoid,avoid,33108,"{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; 1energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; 1; 2set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4’s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:842,Security,access,access,842,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain ",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:2822,Security,access,accessible,2822,"etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; qcdb.cfour.muster_psi4options().; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of result",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:3697,Security,access,accessible,3697,"NCE. For a; list of applicable keywords, see source of; qcdb.cfour.muster_psi4options().; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is no",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:23063,Security,access,accessed,23063," to the gradient in GRD, the result of which; is printed below and passed on to Optking.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3. 1 2 3. 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000; 1.0000000000 0.4080144050 -0.9178691296 -1.5897959670; 1.0000000000 0.4080144050 -0.9178691296 1.5897959670; 1.0000000000 0.4080144050 1.8357382590 0.0000000001; 7.0000000000 -0.0122978407 0.0000000000 0.0000000000; 1.0000000000 0.0040992802 -0.0051191833 -0.0088666856; 1.0000000000 0.0040992802 -0.0051191833 0.0088666856; 1.0000000000 0.0040992802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; 1; 2energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the def",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:23208,Security,access,accessible,23208,"13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3. 1 2 3. 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000; 1.0000000000 0.4080144050 -0.9178691296 -1.5897959670; 1.0000000000 0.4080144050 -0.9178691296 1.5897959670; 1.0000000000 0.4080144050 1.8357382590 0.0000000001; 7.0000000000 -0.0122978407 0.0000000000 0.0000000000; 1.0000000000 0.0040992802 -0.0051191833 -0.0088666856; 1.0000000000 0.0040992802 -0.0051191833 0.0088666856; 1.0000000000 0.0040992802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; 1; 2energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documen",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:6024,Testability,test,tests,6024,"Control Keywords, setting keywords is flexible in; format. The previous example translates to:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23# UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_B",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:7581,Testability,test,tests,7581,"tions on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:24388,Testability,test,tested,24388,"ave been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; 1; 2energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:2877,Usability,simpl,simplest,2877,"ion intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; qcdb.cfour.muster_psi4options().; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:2942,Usability,simpl,simply,2942,"ion intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; qcdb.cfour.muster_psi4options().; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:19185,Usability,clear,clear,19185,"of preceding or following; jobs, it is prudent to separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will not run. Therefore, if mixing sandwich and; standard or pure-PSI4 computations in an input file, place all; the sandwich jobs at the beginning before declaring PSI4; molecules. If necessary, clear the cfour block with cfour {} before; commencing standard P4C4 jobs. Output¶; The output of xcfour invoked from a PSI4 input file is; written to the PSI4 output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in CFOUR ERROR CODE.; Energies & Scalars; After execution of xcfour has completed, the output string is; extensively parsed and appropriate results are stored in PSI; Variables. All gleaned variables are printed in the; Cfour output section of the PSI4 output file, as shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.00726",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour-1.html:27760,Usability,simpl,simple,27760,"full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10",MatchSource.WIKI,psi4manual/1.2.1/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html
https://psicode.org/psi4manual/1.2.1/cfour.html:453,Availability,avail,available,453,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:580,Availability,down,download,580,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:1041,Availability,error,error,1041,"anton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the p",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:1512,Availability,avail,available,1512,"s provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are t",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:4233,Availability,toler,tolerant,4233,"/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:10386,Availability,avail,available,10386,"4 -76.332261408714 -0.000000004262 0.00000098 0.00000066 0.00000622 0.00000371 ~; --------------------------------------------------------------------------------------------------------------- ~. The above example also shows the total memory for the computation being; set in PSI4 format. See Memory Specification for details. When; specified, the memory value is passed on to Cfour by setting keywords; CFOUR_MEMORY_SIZE and CFOUR_MEM_UNIT=MB.; PSI4 has an extensive basis set library in; Gaussian94 format. See Basis Sets for details. Contrasts to; Cfour basis handling include identifying basis sets by standard name; (aug-cc-pVDZ instead of AUG-PVDZ), direct handles for; diffuse-function-pruned sets (e.g., jun-cc-pVDZ), case insensitivity,; appropriate setting of spherical/Cartesian depending on basis set design,; and syntax to set different basis sets to different classes of atoms; without listing each atom. All of these features are available to Cfour by; using the BASIS keyword instead of CFOUR_BASIS; (accompanied, of course, by specifying the molecule PSI4-style).; Internally, PSI4 processes the basis set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which w",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:12919,Availability,avail,available,12919,"75; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4’s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the;",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:19434,Availability,error,error,19434,"g; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will not run. Therefore, if mixing sandwich and; standard or pure-PSI4 computations in an input file, place all; the sandwich jobs at the beginning before declaring PSI4; molecules. If necessary, clear the cfour block with cfour {} before; commencing standard P4C4 jobs. Output¶; The output of xcfour invoked from a PSI4 input file is; written to the PSI4 output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in CFOUR ERROR CODE.; Energies & Scalars; After execution of xcfour has completed, the output string is; extensively parsed and appropriate results are stored in PSI; Variables. All gleaned variables are printed in the; Cfour output section of the PSI4 output file, as shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:20729,Availability,avail,available,20729," shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; 1; 2; 3; 4energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessar",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:26107,Availability,avail,available,26107,"ams”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; complete_basis_set() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; property() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP pe",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:26819,Availability,avail,available,26819,"timizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; property() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:32601,Availability,down,down,32601," applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; 1energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; 1; 2set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4’s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gr",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:33532,Availability,avail,available,33532,"tten by; SCF module keyword (local scope works, too) where; the PSI4’s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that co",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:592,Deployability,install,install,592,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:27856,Deployability,integrat,integration,27856,"full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:34894,Deployability,update,updated,34894,"und here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:1112,Energy Efficiency,adapt,adapted,1112,"· . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PS",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:1410,Energy Efficiency,energy,energy,1410,"ilable after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE whe",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:1433,Energy Efficiency,energy,energy,1433,"ilable after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE whe",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:1535,Energy Efficiency,energy,energy,1535,"s provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are t",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:3110,Energy Efficiency,energy,energy,3110,"on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; qcdb.cfour.muster_psi4options().; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows C",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:3274,Energy Efficiency,energy,energy,3274,"are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; qcdb.cfour.muster_psi4options().; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Speci",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:3528,Energy Efficiency,energy,energy,3528,"dules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; qcdb.cfour.muster_psi4options().; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:3600,Energy Efficiency,energy,energy,3600,"NCE. For a; list of applicable keywords, see source of; qcdb.cfour.muster_psi4options().; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is no",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:5271,Energy Efficiency,energy,energy,5271," in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23# UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywo",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:5645,Energy Efficiency,energy,energy,5645,"frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23# UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in C",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:7243,Energy Efficiency,energy,energy,7243,"he common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:7906,Energy Efficiency,monitor,monitor,7906,"11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-04 o ~; 3 -76.33226140 -4.39e-07 * 4.31e-05 * 3.58e-05 9.89e-05 * 8.93e-05 o ~; 4 -76.33226141 -4.26e-09 * 9.76e-07 * 6.58e-07 * 6.22e-06 * 3.71e-06 o ~; ----------------------------------",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:11617,Energy Efficiency,energy,energy,11617," set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:13118,Energy Efficiency,energy,energy,13118,"set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4’s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:13887,Energy Efficiency,energy,energy,13887,"overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.; Depending on the nature of the variable, this may or may not make any physical sense. ==> Requested Energy <==. ----------------------------------------------------------------------------------------------; Reaction Reaction Energy Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [H] Wt [H] Wt; ----------------------------------------------------------------------------------------------; NBC1-MeMe-3.2 0.0690 1.1639 1.0949 -80.72700202 1 -40.36442840 -2; NBC1-MeMe-3.3 -0.2390 0.6709 0.9099 -80.72764911 1 -40.36435916 -2; NBC1-MeMe-3.4 -0.4170 0.3407 0.7577 -80.72806043 1 -40.36430165 -2; NBC1-MeMe-3.5 -0.5080 0.1244 0.",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:16657,Energy Efficiency,energy,energy,16657,"1387 -80.72842215 1 -40.36409932 -2; NBC1-MeMe-4.6 -0.2170 -0.1155 0.1015 -80.72836761 1 -40.36409177 -2; NBC1-MeMe-4.8 -0.1680 -0.0933 0.0747 -80.72831991 1 -40.36408563 -2; NBC1-MeMe-5.0 -0.1300 -0.0747 0.0553 -80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the complete_basis_set() wrapper allows any; compound computational method that can be expressed through CBS to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through PSI4 and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; 1; 2; 3; 4; 5; 6; 7; 8molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ----------------------",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:20818,Energy Efficiency,energy,energy,20818,"1; 22//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; 1; 2; 3; 4energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:20956,Energy Efficiency,energy,energy,20956,"<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; 1; 2; 3; 4energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PS",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:21007,Energy Efficiency,energy,energy,21007,"---------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; 1; 2; 3; 4energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4’s active molecule are shifted,; rotated, flipped, and otherwise badgere",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:21061,Energy Efficiency,energy,energy,21061,"---------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; 1; 2; 3; 4energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4’s active molecule are shifted,; rotated, flipped, and otherwise badgere",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:23841,Energy Efficiency,energy,energy,23841,"0000000000 -0.0122978407 0.0000000000 0.0000000000; 1.0000000000 0.0040992802 -0.0051191833 -0.0088666856; 1.0000000000 0.0040992802 -0.0051191833 0.0088666856; 1.0000000000 0.0040992802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; 1; 2energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:24043,Energy Efficiency,energy,energy,24043,"92802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; 1; 2energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconcil",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:24088,Energy Efficiency,energy,energy,24088,"92802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; 1; 2energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconcil",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:24502,Energy Efficiency,energy,energy,24502,"ing could be placed in the PSI4 input file.; 1; 2energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:25167,Energy Efficiency,energy,energy,25167,"he; run_cfour() function documented below. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; complete_basis_set() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; property() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gaus",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:28206,Energy Efficiency,charge,charge,28206,"gles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). e",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:29154,Energy Efficiency,energy,energy,29154," here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). energy('c4-scf'). Specifying anything in PSI4 format (molecule, basis, options,; method call) starts building a *CFOUR(...) directive for the; ZMAT file. Since the contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route. Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:29211,Energy Efficiency,energy,energy,29211,"licity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). energy('c4-scf'). Specifying anything in PSI4 format (molecule, basis, options,; method call) starts building a *CFOUR(...) directive for the; ZMAT file. Since the contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route. Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:30635,Energy Efficiency,energy,energy,30635," the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route. Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL). Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles. Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; qcdb.cfour.muster_modelchem() for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; 1; 2set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; 1; 2; 3set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; 1energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; 1; 2set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:30664,Energy Efficiency,energy,energy,30664," the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route. Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL). Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles. Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; qcdb.cfour.muster_modelchem() for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; 1; 2set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; 1; 2; 3set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; 1energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; 1; 2set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:31175,Energy Efficiency,energy,energy,31175,"overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL). Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles. Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; qcdb.cfour.muster_modelchem() for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; 1; 2set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; 1; 2; 3set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; 1energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; 1; 2set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:31310,Energy Efficiency,energy,energy,31310,"ying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles. Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; qcdb.cfour.muster_modelchem() for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; 1; 2set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; 1; 2; 3set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; 1energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; 1; 2set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; 1energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; k",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:31497,Energy Efficiency,energy,energy,31497,"e Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles. Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; qcdb.cfour.muster_modelchem() for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; 1; 2set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; 1; 2; 3set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; 1energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; 1; 2set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; 1energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; 1; 2set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv c",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:32293,Energy Efficiency,energy,energy,32293,"2; 3set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; 1energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; 1; 2set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; 1energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; 1; 2set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4’s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multipl",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:32417,Energy Efficiency,energy,energy,32417,"e requested ccsd; 1energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; 1; 2set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; 1energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; 1; 2set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4’s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:32673,Energy Efficiency,energy,energy,32673," applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; 1energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; 1; 2set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4’s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gr",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:32856,Energy Efficiency,energy,energy,32856,"set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; 1energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; 1; 2set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4’s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the follo",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:328,Integrability,interface,interface,328,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:810,Integrability,interface,interface,810,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:947,Integrability,interface,interface,947,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:1084,Integrability,interface,interface,1084,"· . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PS",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:1624,Integrability,interface,interface,1624,", the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REF",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:2908,Integrability,interface,interface,2908,"ion intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; qcdb.cfour.muster_psi4options().; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:2950,Integrability,wrap,wrap,2950,"ion intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; qcdb.cfour.muster_psi4options().; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:3958,Integrability,interface,interface,3958,"n the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this s",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:6736,Integrability,interface,interface,6736," Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:7539,Integrability,interface,interface,7539,"ptimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:10231,Integrability,depend,depending,10231,"507630 0.00881949 ~; 2 -76.332260965382 -0.000018117284 0.00048446 0.00040256 0.00077146 0.00070447 ~; 3 -76.332261404452 -0.000000439070 0.00004307 0.00003577 0.00009889 0.00008926 ~; 4 -76.332261408714 -0.000000004262 0.00000098 0.00000066 0.00000622 0.00000371 ~; --------------------------------------------------------------------------------------------------------------- ~. The above example also shows the total memory for the computation being; set in PSI4 format. See Memory Specification for details. When; specified, the memory value is passed on to Cfour by setting keywords; CFOUR_MEMORY_SIZE and CFOUR_MEM_UNIT=MB.; PSI4 has an extensive basis set library in; Gaussian94 format. See Basis Sets for details. Contrasts to; Cfour basis handling include identifying basis sets by standard name; (aug-cc-pVDZ instead of AUG-PVDZ), direct handles for; diffuse-function-pruned sets (e.g., jun-cc-pVDZ), case insensitivity,; appropriate setting of spherical/Cartesian depending on basis set design,; and syntax to set different basis sets to different classes of atoms; without listing each atom. All of these features are available to Cfour by; using the BASIS keyword instead of CFOUR_BASIS; (accompanied, of course, by specifying the molecule PSI4-style).; Internally, PSI4 processes the basis set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argum",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:10680,Integrability,interface,interface,10680,"tion for details. When; specified, the memory value is passed on to Cfour by setting keywords; CFOUR_MEMORY_SIZE and CFOUR_MEM_UNIT=MB.; PSI4 has an extensive basis set library in; Gaussian94 format. See Basis Sets for details. Contrasts to; Cfour basis handling include identifying basis sets by standard name; (aug-cc-pVDZ instead of AUG-PVDZ), direct handles for; diffuse-function-pruned sets (e.g., jun-cc-pVDZ), case insensitivity,; appropriate setting of spherical/Cartesian depending on basis set design,; and syntax to set different basis sets to different classes of atoms; without listing each atom. All of these features are available to Cfour by; using the BASIS keyword instead of CFOUR_BASIS; (accompanied, of course, by specifying the molecule PSI4-style).; Internally, PSI4 processes the basis set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:11727,Integrability,interface,interface,11727," CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4’s Python dri",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:12777,Integrability,wrap,wrapped,12777,"; 11; 12; 13; 14; 15; 16; 17; 18; 19memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4’s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergen",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:12909,Integrability,wrap,wrappers,12909,"75; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4’s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the;",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:13611,Integrability,wrap,wrapper,13611,"icitly set to VCC.; An advantage of PSI4’s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; complete_basis_set(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.; Depending on the nature of the variable, this may or may not make any physical sense. ==> Requested Energy <==. ----------------------------------------------------------------------------------------------; Reaction Reaction ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:16385,Integrability,wrap,wrapper,16385,"3960 -0.1712 0.2248 -80.72850993 1 -40.36411859 -2; NBC1-MeMe-4.2 -0.3540 -0.1633 0.1907 -80.72848118 1 -40.36411044 -2; NBC1-MeMe-4.3 -0.3150 -0.1525 0.1625 -80.72845143 1 -40.36410422 -2; NBC1-MeMe-4.4 -0.2790 -0.1403 0.1387 -80.72842215 1 -40.36409932 -2; NBC1-MeMe-4.6 -0.2170 -0.1155 0.1015 -80.72836761 1 -40.36409177 -2; NBC1-MeMe-4.8 -0.1680 -0.0933 0.0747 -80.72831991 1 -40.36408563 -2; NBC1-MeMe-5.0 -0.1300 -0.0747 0.0553 -80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the complete_basis_set() wrapper allows any; compound computational method that can be expressed through CBS to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through PSI4 and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; 1; 2; 3; 4; 5; 6; 7; 8molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; -------------------------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:16877,Integrability,wrap,wrapper,16877,"80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the complete_basis_set() wrapper allows any; compound computational method that can be expressed through CBS to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through PSI4 and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; 1; 2; 3; 4; 5; 6; 7; 8molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for complete_basis_set(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:17885,Integrability,wrap,wrappers,17885,"4; 5; 6; 7; 8molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for complete_basis_set(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; PSI4 input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and i",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:18563,Integrability,interface,interface,18563,"--------------------------------------------------------------------------------------------------------. Note that especially for complete_basis_set(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; PSI4 input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will not run. Therefore, if mixing sandwich and; standard or pure-PSI4 computations in an input file, place all; the sandwich jobs at the beginning before declaring PSI4; molecules. If necessary, clear the cfour block with cfour {} before; commencing standard P4C4 jobs. Output¶; The output of xcfour invoked from a PSI4 input file is; written to the PSI4 output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in CFOUR ERROR CODE.; Energies & Scalars; After execution of xcfour has completed, the output string is; extensively parsed and appropriate results are stored in PSI; Variables. All",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:21356,Integrability,interface,interface,21356,"030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; 1; 2; 3; 4energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4’s active molecule are shifted,; rotated, flipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in GRD, the result of which; is printed below and passed on to Optking.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:21672,Integrability,interface,interface,21672,"0; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; 1; 2; 3; 4energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4’s active molecule are shifted,; rotated, flipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in GRD, the result of which; is printed below and passed on to Optking.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3. 1 2 3. 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000;",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:24342,Integrability,interface,interface,24342,"rns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; 1; 2energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:26130,Integrability,interface,interface,26130,"ams”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; complete_basis_set() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; property() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP pe",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:26842,Integrability,interface,interface,26842,"timizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; property() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:27583,Integrability,interface,interface,27583,"SD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computation",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:27856,Integrability,integrat,integration,27856,"full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:28128,Integrability,contract,contract,28128,"r MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' bel",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:29831,Integrability,rout,route,29831,"; 7; 8; 9; 10; 11; 12; 13; 14; 15memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). energy('c4-scf'). Specifying anything in PSI4 format (molecule, basis, options,; method call) starts building a *CFOUR(...) directive for the; ZMAT file. Since the contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route. Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL). Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles. Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOU",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:31818,Integrability,contract,contract,31818,", any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; qcdb.cfour.muster_modelchem() for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; 1; 2set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; 1; 2; 3set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; 1energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; 1; 2set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; 1energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; 1; 2set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4’s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword;",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:34066,Integrability,rout,route,34066,"und here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:1112,Modifiability,adapt,adapted,1112,"· . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PS",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:3803,Modifiability,variab,variables,3803,"n the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this s",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:4131,Modifiability,variab,variables,4131,"lculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords i",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:4168,Modifiability,variab,variables,4168,"lculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/share/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords i",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:5122,Modifiability,flexible,flexible,5122,"tesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23# UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and fi",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:5841,Modifiability,extend,extended,5841,"on. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23# UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:14456,Modifiability,variab,variable,14456,"). yields; 1; 2; 3R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; 1; 2; 3; 4; 5; 6set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.; Depending on the nature of the variable, this may or may not make any physical sense. ==> Requested Energy <==. ----------------------------------------------------------------------------------------------; Reaction Reaction Energy Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [H] Wt [H] Wt; ----------------------------------------------------------------------------------------------; NBC1-MeMe-3.2 0.0690 1.1639 1.0949 -80.72700202 1 -40.36442840 -2; NBC1-MeMe-3.3 -0.2390 0.6709 0.9099 -80.72764911 1 -40.36435916 -2; NBC1-MeMe-3.4 -0.4170 0.3407 0.7577 -80.72806043 1 -40.36430165 -2; NBC1-MeMe-3.5 -0.5080 0.1244 0.6324 -80.72831099 1 -40.36425461 -2; NBC1-MeMe-3.6 -0.5410 -0.0129 0.5281 -80.72845373 1 -40.36421659 -2; NBC1-MeMe-3.7 -0.5390 -0.0961 0.4429 -80.72852567 1 -40.36418623 -2; NBC1-MeMe-3.8 -0.5150 -0.1430 0.3720 -80.72855247 1 -40.36416227 -2; NBC1-MeMe-3.9 -0.4800 -0.1659 0.3141 -80.72855167 1 -40.36414365 -2; NBC1-MeMe-4.0 -0.4390 -0.1733 0.2657 -80.72853498 1 -40.36412938 -2; NBC1-MeMe-4.1 -0.3960 -0.1712 0.224",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:18380,Modifiability,variab,variables,18380,"-; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for complete_basis_set(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; PSI4 input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will not run. Therefore, if mixing sandwich and; standard or pure-PSI4 computations in an input file, place all; the sandwich jobs at the beginning before declaring PSI4; molecules. If necessary, clear the cfour block with cfour {} before; commencing standard P4C4 jobs. Output¶; The output of xcfour invoked from a PSI4 ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:19660,Modifiability,variab,variables,19660,"rd mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will not run. Therefore, if mixing sandwich and; standard or pure-PSI4 computations in an input file, place all; the sandwich jobs at the beginning before declaring PSI4; molecules. If necessary, clear the cfour block with cfour {} before; commencing standard P4C4 jobs. Output¶; The output of xcfour invoked from a PSI4 input file is; written to the PSI4 output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in CFOUR ERROR CODE.; Energies & Scalars; After execution of xcfour has completed, the output string is; extensively parsed and appropriate results are stored in PSI; Variables. All gleaned variables are printed in the; Cfour output section of the PSI4 output file, as shown below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.06274846018",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:32563,Modifiability,flexible,flexible,32563," applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4’s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; 1energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; 1; 2set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4’s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gr",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:33870,Modifiability,variab,variables,33870,"odule keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ;",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:34263,Modifiability,variab,variable,34263,"und here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:1454,Performance,optimiz,optimize,1454,"ilable after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE whe",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:1483,Performance,optimiz,optimize,1483,"ilable after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE whe",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:1571,Performance,optimiz,optimize,1571,"s provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are t",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:6451,Performance,perform,perform,6451,"ow in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, t",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:6468,Performance,optimiz,optimizations,6468,"ow in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, t",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:6635,Performance,optimiz,optimizations,6635," Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:6674,Performance,optimiz,optimizations,6674," Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:6702,Performance,optimiz,optimizations,6702," Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:6807,Performance,optimiz,optimizations,6807,"gers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:6836,Performance,optimiz,optimizer,6836,"gers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
https://psicode.org/psi4manual/1.2.1/cfour.html:6883,Performance,optimiz,optimization,6883,"uare-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the ",MatchSource.WIKI,psi4manual/1.2.1/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour.html
