id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/TableParser.py:58,Availability,down,downloaded,58,"#!/usr/local/bin/python; # coding: UTF-8; # modified code downloaded from:; # http://devwiki.beloblotskiy.com/index.php5/Generic_HTML_Table_parser_(python); # mods by: Aquil H. Abdullah",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/TableParser.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/TableParser.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py:8,Availability,down,downloading,8,"""""""; By downloading the PROGRAM you agree to the following terms of use:. BROAD INSTITUTE SOFTWARE LICENSE AGREEMENT; FOR ACADEMIC NON-COMMERCIAL RESEARCH PURPOSES ONLY. This Agreement is made between the Broad Institute, Inc. with a principal address at 7 Cambridge Center, Cambridge, MA 02142 (""BROAD"") and the LICENSEE and is effective at the date the downloading is completed (""EFFECTIVE DATE""). WHEREAS, LICENSEE desires to license the PROGRAM, as defined hereinafter, and BROAD wishes to have this PROGRAM utilized in the public interest, subject only to the royalty-free, nonexclusive, nontransferable license rights of the United States Government pursuant to 48 CFR 52.227-14; and. WHEREAS, LICENSEE desires to license the PROGRAM and BROAD desires to grant a license on the following terms and conditions. NOW, THEREFORE, in consideration of the promises and covenants made herein, the parties hereto agree as follows:. 1. DEFINITIONS; 1.1 ""PROGRAM"" shall mean the object code and source code known as Oncotator 1.0 and related documentation, if any, as they exist on the EFFECTIVE DATE and can be downloaded from http://www.broadinstitute.org/cancer/cga/oncotator on the EFFECTIVE DATE. BROAD acknowledges that the PROGRAM employs one or more public domain code(s) that are freely available for public use. 2. LICENSE; 2.1 Grant. Subject to the terms of this Agreement, BROAD hereby grants to LICENSEE, solely for academic non-commercial research purposes, a non-exclusive, non-transferable license to: (a) download, execute and display the PROGRAM and (b) create bug fixes and modify the PROGRAM. LICENSEE hereby automatically grants to BROAD a non-exclusive, royalty-free, irrevocable license to any LICENSEE bug fixes or modifications to the PROGRAM with unlimited rights to sublicense and/or distribute. LICENSEE agrees to provide any such modifications and bug fixes to BROAD promptly upon their creation. The LICENSEE may apply the PROGRAM in a pipeline to data owned by users other t",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py:355,Availability,down,downloading,355,"""""""; By downloading the PROGRAM you agree to the following terms of use:. BROAD INSTITUTE SOFTWARE LICENSE AGREEMENT; FOR ACADEMIC NON-COMMERCIAL RESEARCH PURPOSES ONLY. This Agreement is made between the Broad Institute, Inc. with a principal address at 7 Cambridge Center, Cambridge, MA 02142 (""BROAD"") and the LICENSEE and is effective at the date the downloading is completed (""EFFECTIVE DATE""). WHEREAS, LICENSEE desires to license the PROGRAM, as defined hereinafter, and BROAD wishes to have this PROGRAM utilized in the public interest, subject only to the royalty-free, nonexclusive, nontransferable license rights of the United States Government pursuant to 48 CFR 52.227-14; and. WHEREAS, LICENSEE desires to license the PROGRAM and BROAD desires to grant a license on the following terms and conditions. NOW, THEREFORE, in consideration of the promises and covenants made herein, the parties hereto agree as follows:. 1. DEFINITIONS; 1.1 ""PROGRAM"" shall mean the object code and source code known as Oncotator 1.0 and related documentation, if any, as they exist on the EFFECTIVE DATE and can be downloaded from http://www.broadinstitute.org/cancer/cga/oncotator on the EFFECTIVE DATE. BROAD acknowledges that the PROGRAM employs one or more public domain code(s) that are freely available for public use. 2. LICENSE; 2.1 Grant. Subject to the terms of this Agreement, BROAD hereby grants to LICENSEE, solely for academic non-commercial research purposes, a non-exclusive, non-transferable license to: (a) download, execute and display the PROGRAM and (b) create bug fixes and modify the PROGRAM. LICENSEE hereby automatically grants to BROAD a non-exclusive, royalty-free, irrevocable license to any LICENSEE bug fixes or modifications to the PROGRAM with unlimited rights to sublicense and/or distribute. LICENSEE agrees to provide any such modifications and bug fixes to BROAD promptly upon their creation. The LICENSEE may apply the PROGRAM in a pipeline to data owned by users other t",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py:1108,Availability,down,downloaded,1108," INSTITUTE SOFTWARE LICENSE AGREEMENT; FOR ACADEMIC NON-COMMERCIAL RESEARCH PURPOSES ONLY. This Agreement is made between the Broad Institute, Inc. with a principal address at 7 Cambridge Center, Cambridge, MA 02142 (""BROAD"") and the LICENSEE and is effective at the date the downloading is completed (""EFFECTIVE DATE""). WHEREAS, LICENSEE desires to license the PROGRAM, as defined hereinafter, and BROAD wishes to have this PROGRAM utilized in the public interest, subject only to the royalty-free, nonexclusive, nontransferable license rights of the United States Government pursuant to 48 CFR 52.227-14; and. WHEREAS, LICENSEE desires to license the PROGRAM and BROAD desires to grant a license on the following terms and conditions. NOW, THEREFORE, in consideration of the promises and covenants made herein, the parties hereto agree as follows:. 1. DEFINITIONS; 1.1 ""PROGRAM"" shall mean the object code and source code known as Oncotator 1.0 and related documentation, if any, as they exist on the EFFECTIVE DATE and can be downloaded from http://www.broadinstitute.org/cancer/cga/oncotator on the EFFECTIVE DATE. BROAD acknowledges that the PROGRAM employs one or more public domain code(s) that are freely available for public use. 2. LICENSE; 2.1 Grant. Subject to the terms of this Agreement, BROAD hereby grants to LICENSEE, solely for academic non-commercial research purposes, a non-exclusive, non-transferable license to: (a) download, execute and display the PROGRAM and (b) create bug fixes and modify the PROGRAM. LICENSEE hereby automatically grants to BROAD a non-exclusive, royalty-free, irrevocable license to any LICENSEE bug fixes or modifications to the PROGRAM with unlimited rights to sublicense and/or distribute. LICENSEE agrees to provide any such modifications and bug fixes to BROAD promptly upon their creation. The LICENSEE may apply the PROGRAM in a pipeline to data owned by users other than the LICENSEE and provide these users the results of the PROGRAM provided LI",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py:1292,Availability,avail,available,1292,"Cambridge Center, Cambridge, MA 02142 (""BROAD"") and the LICENSEE and is effective at the date the downloading is completed (""EFFECTIVE DATE""). WHEREAS, LICENSEE desires to license the PROGRAM, as defined hereinafter, and BROAD wishes to have this PROGRAM utilized in the public interest, subject only to the royalty-free, nonexclusive, nontransferable license rights of the United States Government pursuant to 48 CFR 52.227-14; and. WHEREAS, LICENSEE desires to license the PROGRAM and BROAD desires to grant a license on the following terms and conditions. NOW, THEREFORE, in consideration of the promises and covenants made herein, the parties hereto agree as follows:. 1. DEFINITIONS; 1.1 ""PROGRAM"" shall mean the object code and source code known as Oncotator 1.0 and related documentation, if any, as they exist on the EFFECTIVE DATE and can be downloaded from http://www.broadinstitute.org/cancer/cga/oncotator on the EFFECTIVE DATE. BROAD acknowledges that the PROGRAM employs one or more public domain code(s) that are freely available for public use. 2. LICENSE; 2.1 Grant. Subject to the terms of this Agreement, BROAD hereby grants to LICENSEE, solely for academic non-commercial research purposes, a non-exclusive, non-transferable license to: (a) download, execute and display the PROGRAM and (b) create bug fixes and modify the PROGRAM. LICENSEE hereby automatically grants to BROAD a non-exclusive, royalty-free, irrevocable license to any LICENSEE bug fixes or modifications to the PROGRAM with unlimited rights to sublicense and/or distribute. LICENSEE agrees to provide any such modifications and bug fixes to BROAD promptly upon their creation. The LICENSEE may apply the PROGRAM in a pipeline to data owned by users other than the LICENSEE and provide these users the results of the PROGRAM provided LICENSEE does so for academic non-commercial purposes only. For clarification purposes, academic sponsored research is not a commercial use under the terms of this Agreement.; 2.2",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py:1518,Availability,down,download,1518,"and BROAD wishes to have this PROGRAM utilized in the public interest, subject only to the royalty-free, nonexclusive, nontransferable license rights of the United States Government pursuant to 48 CFR 52.227-14; and. WHEREAS, LICENSEE desires to license the PROGRAM and BROAD desires to grant a license on the following terms and conditions. NOW, THEREFORE, in consideration of the promises and covenants made herein, the parties hereto agree as follows:. 1. DEFINITIONS; 1.1 ""PROGRAM"" shall mean the object code and source code known as Oncotator 1.0 and related documentation, if any, as they exist on the EFFECTIVE DATE and can be downloaded from http://www.broadinstitute.org/cancer/cga/oncotator on the EFFECTIVE DATE. BROAD acknowledges that the PROGRAM employs one or more public domain code(s) that are freely available for public use. 2. LICENSE; 2.1 Grant. Subject to the terms of this Agreement, BROAD hereby grants to LICENSEE, solely for academic non-commercial research purposes, a non-exclusive, non-transferable license to: (a) download, execute and display the PROGRAM and (b) create bug fixes and modify the PROGRAM. LICENSEE hereby automatically grants to BROAD a non-exclusive, royalty-free, irrevocable license to any LICENSEE bug fixes or modifications to the PROGRAM with unlimited rights to sublicense and/or distribute. LICENSEE agrees to provide any such modifications and bug fixes to BROAD promptly upon their creation. The LICENSEE may apply the PROGRAM in a pipeline to data owned by users other than the LICENSEE and provide these users the results of the PROGRAM provided LICENSEE does so for academic non-commercial purposes only. For clarification purposes, academic sponsored research is not a commercial use under the terms of this Agreement.; 2.2 No Sublicensing or Additional Rights. LICENSEE shall not sublicense or distribute the PROGRAM, in whole or in part, without prior written permission from BROAD. LICENSEE shall ensure that all of its users agree to th",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py:3900,Availability,avail,available,3900," intellectual property, or patent rights of BROAD, or of any other entity, except as expressly granted herein. LICENSEE agrees that the PROGRAM, in whole or part, shall not be used for any commercial purpose, including without limitation, as the basis of a commercial software or hardware product or to provide services. LICENSEE further agrees that the PROGRAM shall not be copied or otherwise adapted in order to circumvent the need for obtaining a license for use of the PROGRAM. 3. OWNERSHIP OF INTELLECTUAL PROPERTY; LICENSEE acknowledges that title to the PROGRAM shall remain with BROAD. The PROGRAM is marked with the following BROAD copyright notice and notice of attribution to contributors. LICENSEE shall retain such notice on all copies. LICENSEE agrees to include appropriate attribution if any results obtained from use of the PROGRAM are included in any publication. Copyright 2014 Broad Institute, Inc.; Notice of attribution: The Oncotator 1.0 program was made available through the generosity of the Broad Institute, Inc. LICENSEE shall not use any trademark or trade name of BROAD, or any variation, adaptation, or abbreviation, of such marks or trade names, or any names of officers, faculty, students, employees, or agents of BROAD except as states above for attribution purposes. 4. INDEMNIFICATION; LICENSEE shall indemnify, defend, and hold harmless BROAD, and their respective officers, faculty, students, employees, associated investigators and agents, and their respective successors, heirs and assigns, (""Indemnitees""), against any liability, damage, loss, or expense (including reasonable attorney fees and expenses) incurred by or imposed upon any of the Indemnitees in connection with any claims, suits, actions, demands or judgments arising out of any theory of liability (including, without limitation, actions in the form of tort, warranty, or strict liability and regardless of whether such action has any factual basis) pursuant to any right or license granted un",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py:7747,Availability,failure,failure,7747,"reunder, and fails to cure such breach within thirty (30) days, BROAD may terminate this Agreement immediately. Upon termination, LICENSEE shall provide BROAD with written assurance that the original and all copies of the PROGRAM have been destroyed, except that, upon prior written authorization from BROAD, LICENSEE may retain a copy for archive purposes.; 7.3 Survival. The following provisions shall survive the expiration or termination of this Agreement: Articles 1, 3, 4, 5 and Sections 2.2, 2.3, 7.3, and 7.4.; 7.4 Notice. Any notices under this Agreement shall be in writing, shall specifically refer to this Agreement, and shall be sent by hand, recognized national overnight courier, confirmed facsimile transmission, confirmed electronic mail, or registered or certified mail, postage prepaid, return receipt requested. All notices under this Agreement shall be deemed effective upon receipt.; 7.5 Amendment and Waiver; Entire Agreement. This Agreement may be amended, supplemented, or otherwise modified only by means of a written instrument signed by all parties. Any waiver of any rights or failure to act in a specific instance shall relate only to such instance and shall not be construed as an agreement to waive any rights or fail to act in any other instance, whether or not similar. This Agreement constitutes the entire agreement among the parties with respect to its subject matter and supersedes prior agreements or understandings between the parties relating to its subject matter.; 7.6 Binding Effect; Headings. This Agreement shall be binding upon and inure to the benefit of the parties and their respective permitted successors and assigns. All headings are for convenience only and shall not affect the meaning of any provision of this Agreement.; 7.7 Governing Law. This Agreement shall be construed, governed, interpreted and applied in accordance with the internal laws of the Commonwealth of Massachusetts, U.S.A., without regard to conflict of laws principles.; """"""",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py:1962,Deployability,pipeline,pipeline,1962," related documentation, if any, as they exist on the EFFECTIVE DATE and can be downloaded from http://www.broadinstitute.org/cancer/cga/oncotator on the EFFECTIVE DATE. BROAD acknowledges that the PROGRAM employs one or more public domain code(s) that are freely available for public use. 2. LICENSE; 2.1 Grant. Subject to the terms of this Agreement, BROAD hereby grants to LICENSEE, solely for academic non-commercial research purposes, a non-exclusive, non-transferable license to: (a) download, execute and display the PROGRAM and (b) create bug fixes and modify the PROGRAM. LICENSEE hereby automatically grants to BROAD a non-exclusive, royalty-free, irrevocable license to any LICENSEE bug fixes or modifications to the PROGRAM with unlimited rights to sublicense and/or distribute. LICENSEE agrees to provide any such modifications and bug fixes to BROAD promptly upon their creation. The LICENSEE may apply the PROGRAM in a pipeline to data owned by users other than the LICENSEE and provide these users the results of the PROGRAM provided LICENSEE does so for academic non-commercial purposes only. For clarification purposes, academic sponsored research is not a commercial use under the terms of this Agreement.; 2.2 No Sublicensing or Additional Rights. LICENSEE shall not sublicense or distribute the PROGRAM, in whole or in part, without prior written permission from BROAD. LICENSEE shall ensure that all of its users agree to the terms of this Agreement. LICENSEE further agrees that it shall not put the PROGRAM on a network, server, or other similar technology that may be accessed by anyone other than the LICENSEE and its employees and users who have agreed to the terms of this agreement.; 2.3 License Limitations. Nothing in this Agreement shall be construed to confer any rights upon LICENSEE by implication, estoppel, or otherwise to any computer software, trademark, intellectual property, or patent rights of BROAD, or of any other entity, except as expressly granted herei",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py:3316,Energy Efficiency,adapt,adapted,3316,"nse or distribute the PROGRAM, in whole or in part, without prior written permission from BROAD. LICENSEE shall ensure that all of its users agree to the terms of this Agreement. LICENSEE further agrees that it shall not put the PROGRAM on a network, server, or other similar technology that may be accessed by anyone other than the LICENSEE and its employees and users who have agreed to the terms of this agreement.; 2.3 License Limitations. Nothing in this Agreement shall be construed to confer any rights upon LICENSEE by implication, estoppel, or otherwise to any computer software, trademark, intellectual property, or patent rights of BROAD, or of any other entity, except as expressly granted herein. LICENSEE agrees that the PROGRAM, in whole or part, shall not be used for any commercial purpose, including without limitation, as the basis of a commercial software or hardware product or to provide services. LICENSEE further agrees that the PROGRAM shall not be copied or otherwise adapted in order to circumvent the need for obtaining a license for use of the PROGRAM. 3. OWNERSHIP OF INTELLECTUAL PROPERTY; LICENSEE acknowledges that title to the PROGRAM shall remain with BROAD. The PROGRAM is marked with the following BROAD copyright notice and notice of attribution to contributors. LICENSEE shall retain such notice on all copies. LICENSEE agrees to include appropriate attribution if any results obtained from use of the PROGRAM are included in any publication. Copyright 2014 Broad Institute, Inc.; Notice of attribution: The Oncotator 1.0 program was made available through the generosity of the Broad Institute, Inc. LICENSEE shall not use any trademark or trade name of BROAD, or any variation, adaptation, or abbreviation, of such marks or trade names, or any names of officers, faculty, students, employees, or agents of BROAD except as states above for attribution purposes. 4. INDEMNIFICATION; LICENSEE shall indemnify, defend, and hold harmless BROAD, and their respectiv",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py:4041,Energy Efficiency,adapt,adaptation,4041,"t be used for any commercial purpose, including without limitation, as the basis of a commercial software or hardware product or to provide services. LICENSEE further agrees that the PROGRAM shall not be copied or otherwise adapted in order to circumvent the need for obtaining a license for use of the PROGRAM. 3. OWNERSHIP OF INTELLECTUAL PROPERTY; LICENSEE acknowledges that title to the PROGRAM shall remain with BROAD. The PROGRAM is marked with the following BROAD copyright notice and notice of attribution to contributors. LICENSEE shall retain such notice on all copies. LICENSEE agrees to include appropriate attribution if any results obtained from use of the PROGRAM are included in any publication. Copyright 2014 Broad Institute, Inc.; Notice of attribution: The Oncotator 1.0 program was made available through the generosity of the Broad Institute, Inc. LICENSEE shall not use any trademark or trade name of BROAD, or any variation, adaptation, or abbreviation, of such marks or trade names, or any names of officers, faculty, students, employees, or agents of BROAD except as states above for attribution purposes. 4. INDEMNIFICATION; LICENSEE shall indemnify, defend, and hold harmless BROAD, and their respective officers, faculty, students, employees, associated investigators and agents, and their respective successors, heirs and assigns, (""Indemnitees""), against any liability, damage, loss, or expense (including reasonable attorney fees and expenses) incurred by or imposed upon any of the Indemnitees in connection with any claims, suits, actions, demands or judgments arising out of any theory of liability (including, without limitation, actions in the form of tort, warranty, or strict liability and regardless of whether such action has any factual basis) pursuant to any right or license granted under this Agreement. 5. NO REPRESENTATIONS OR WARRANTIES; THE PROGRAM IS DELIVERED ""AS IS."" BROAD MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE PROGRAM ",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py:3316,Modifiability,adapt,adapted,3316,"nse or distribute the PROGRAM, in whole or in part, without prior written permission from BROAD. LICENSEE shall ensure that all of its users agree to the terms of this Agreement. LICENSEE further agrees that it shall not put the PROGRAM on a network, server, or other similar technology that may be accessed by anyone other than the LICENSEE and its employees and users who have agreed to the terms of this agreement.; 2.3 License Limitations. Nothing in this Agreement shall be construed to confer any rights upon LICENSEE by implication, estoppel, or otherwise to any computer software, trademark, intellectual property, or patent rights of BROAD, or of any other entity, except as expressly granted herein. LICENSEE agrees that the PROGRAM, in whole or part, shall not be used for any commercial purpose, including without limitation, as the basis of a commercial software or hardware product or to provide services. LICENSEE further agrees that the PROGRAM shall not be copied or otherwise adapted in order to circumvent the need for obtaining a license for use of the PROGRAM. 3. OWNERSHIP OF INTELLECTUAL PROPERTY; LICENSEE acknowledges that title to the PROGRAM shall remain with BROAD. The PROGRAM is marked with the following BROAD copyright notice and notice of attribution to contributors. LICENSEE shall retain such notice on all copies. LICENSEE agrees to include appropriate attribution if any results obtained from use of the PROGRAM are included in any publication. Copyright 2014 Broad Institute, Inc.; Notice of attribution: The Oncotator 1.0 program was made available through the generosity of the Broad Institute, Inc. LICENSEE shall not use any trademark or trade name of BROAD, or any variation, adaptation, or abbreviation, of such marks or trade names, or any names of officers, faculty, students, employees, or agents of BROAD except as states above for attribution purposes. 4. INDEMNIFICATION; LICENSEE shall indemnify, defend, and hold harmless BROAD, and their respectiv",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py:4041,Modifiability,adapt,adaptation,4041,"t be used for any commercial purpose, including without limitation, as the basis of a commercial software or hardware product or to provide services. LICENSEE further agrees that the PROGRAM shall not be copied or otherwise adapted in order to circumvent the need for obtaining a license for use of the PROGRAM. 3. OWNERSHIP OF INTELLECTUAL PROPERTY; LICENSEE acknowledges that title to the PROGRAM shall remain with BROAD. The PROGRAM is marked with the following BROAD copyright notice and notice of attribution to contributors. LICENSEE shall retain such notice on all copies. LICENSEE agrees to include appropriate attribution if any results obtained from use of the PROGRAM are included in any publication. Copyright 2014 Broad Institute, Inc.; Notice of attribution: The Oncotator 1.0 program was made available through the generosity of the Broad Institute, Inc. LICENSEE shall not use any trademark or trade name of BROAD, or any variation, adaptation, or abbreviation, of such marks or trade names, or any names of officers, faculty, students, employees, or agents of BROAD except as states above for attribution purposes. 4. INDEMNIFICATION; LICENSEE shall indemnify, defend, and hold harmless BROAD, and their respective officers, faculty, students, employees, associated investigators and agents, and their respective successors, heirs and assigns, (""Indemnitees""), against any liability, damage, loss, or expense (including reasonable attorney fees and expenses) incurred by or imposed upon any of the Indemnitees in connection with any claims, suits, actions, demands or judgments arising out of any theory of liability (including, without limitation, actions in the form of tort, warranty, or strict liability and regardless of whether such action has any factual basis) pursuant to any right or license granted under this Agreement. 5. NO REPRESENTATIONS OR WARRANTIES; THE PROGRAM IS DELIVERED ""AS IS."" BROAD MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE PROGRAM ",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py:2621,Security,access,accessed,2621,"ereby automatically grants to BROAD a non-exclusive, royalty-free, irrevocable license to any LICENSEE bug fixes or modifications to the PROGRAM with unlimited rights to sublicense and/or distribute. LICENSEE agrees to provide any such modifications and bug fixes to BROAD promptly upon their creation. The LICENSEE may apply the PROGRAM in a pipeline to data owned by users other than the LICENSEE and provide these users the results of the PROGRAM provided LICENSEE does so for academic non-commercial purposes only. For clarification purposes, academic sponsored research is not a commercial use under the terms of this Agreement.; 2.2 No Sublicensing or Additional Rights. LICENSEE shall not sublicense or distribute the PROGRAM, in whole or in part, without prior written permission from BROAD. LICENSEE shall ensure that all of its users agree to the terms of this Agreement. LICENSEE further agrees that it shall not put the PROGRAM on a network, server, or other similar technology that may be accessed by anyone other than the LICENSEE and its employees and users who have agreed to the terms of this agreement.; 2.3 License Limitations. Nothing in this Agreement shall be construed to confer any rights upon LICENSEE by implication, estoppel, or otherwise to any computer software, trademark, intellectual property, or patent rights of BROAD, or of any other entity, except as expressly granted herein. LICENSEE agrees that the PROGRAM, in whole or part, shall not be used for any commercial purpose, including without limitation, as the basis of a commercial software or hardware product or to provide services. LICENSEE further agrees that the PROGRAM shall not be copied or otherwise adapted in order to circumvent the need for obtaining a license for use of the PROGRAM. 3. OWNERSHIP OF INTELLECTUAL PROPERTY; LICENSEE acknowledges that title to the PROGRAM shall remain with BROAD. The PROGRAM is marked with the following BROAD copyright notice and notice of attribution to contributor",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py:6924,Security,authoriz,authorization,6924,"T; This Agreement is personal to LICENSEE and any rights or obligations assigned by LICENSEE without the prior written consent of BROAD shall be null and void. 7. MISCELLANEOUS; 7.1 Export Control. LICENSEE gives assurance that it will comply with all United States export control laws and regulations controlling the export of the PROGRAM, including, without limitation, all Export Administration Regulations of the United States Department of Commerce. Among other things, these laws and regulations prohibit, or require a license for, the export of certain types of software to specified countries.; 7.2 Termination. LICENSEE shall have the right to terminate this Agreement for any reason upon prior written notice to BROAD. If LICENSEE breaches any provision hereunder, and fails to cure such breach within thirty (30) days, BROAD may terminate this Agreement immediately. Upon termination, LICENSEE shall provide BROAD with written assurance that the original and all copies of the PROGRAM have been destroyed, except that, upon prior written authorization from BROAD, LICENSEE may retain a copy for archive purposes.; 7.3 Survival. The following provisions shall survive the expiration or termination of this Agreement: Articles 1, 3, 4, 5 and Sections 2.2, 2.3, 7.3, and 7.4.; 7.4 Notice. Any notices under this Agreement shall be in writing, shall specifically refer to this Agreement, and shall be sent by hand, recognized national overnight courier, confirmed facsimile transmission, confirmed electronic mail, or registered or certified mail, postage prepaid, return receipt requested. All notices under this Agreement shall be deemed effective upon receipt.; 7.5 Amendment and Waiver; Entire Agreement. This Agreement may be amended, supplemented, or otherwise modified only by means of a written instrument signed by all parties. Any waiver of any rights or failure to act in a specific instance shall relate only to such instance and shall not be construed as an agreement to waive any",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py:27,Performance,load,load,27,''' NOTE: This script will load large portions of the COSMIC input file into RAM. Updated for v76; ''',MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/createCosmicFusionGeneTsv.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/GenericTsvReader.py:37,Integrability,wrap,wraps,37,"""""""; Read a TSV file. ; ; This class wraps a DictReader, but handles comments, which are not handled gracefully in the python csv library. ; ; The next() method assumes user is interested in the content, not the comments. ; Get the comments using getComments or getCommentsAsList. The latter assumes each comment is a line of text. ; ; Notes:; IMPORTANT: At this time, this class does not support comments below the header line. ; This class will load all comment lines into RAM at one time. This could theoretically cause a bottleneck in some files.; ; TODO: Low priority: Possibly make this inherit from DictReader, since it is exactly the same plus some functionality; """"""",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/GenericTsvReader.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/GenericTsvReader.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/GenericTsvReader.py:593,Modifiability,inherit,inherit,593,"""""""; Read a TSV file. ; ; This class wraps a DictReader, but handles comments, which are not handled gracefully in the python csv library. ; ; The next() method assumes user is interested in the content, not the comments. ; Get the comments using getComments or getCommentsAsList. The latter assumes each comment is a line of text. ; ; Notes:; IMPORTANT: At this time, this class does not support comments below the header line. ; This class will load all comment lines into RAM at one time. This could theoretically cause a bottleneck in some files.; ; TODO: Low priority: Possibly make this inherit from DictReader, since it is exactly the same plus some functionality; """"""",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/GenericTsvReader.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/GenericTsvReader.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/GenericTsvReader.py:447,Performance,load,load,447,"""""""; Read a TSV file. ; ; This class wraps a DictReader, but handles comments, which are not handled gracefully in the python csv library. ; ; The next() method assumes user is interested in the content, not the comments. ; Get the comments using getComments or getCommentsAsList. The latter assumes each comment is a line of text. ; ; Notes:; IMPORTANT: At this time, this class does not support comments below the header line. ; This class will load all comment lines into RAM at one time. This could theoretically cause a bottleneck in some files.; ; TODO: Low priority: Possibly make this inherit from DictReader, since it is exactly the same plus some functionality; """"""",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/GenericTsvReader.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/GenericTsvReader.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/GenericTsvReader.py:525,Performance,bottleneck,bottleneck,525,"""""""; Read a TSV file. ; ; This class wraps a DictReader, but handles comments, which are not handled gracefully in the python csv library. ; ; The next() method assumes user is interested in the content, not the comments. ; Get the comments using getComments or getCommentsAsList. The latter assumes each comment is a line of text. ; ; Notes:; IMPORTANT: At this time, this class does not support comments below the header line. ; This class will load all comment lines into RAM at one time. This could theoretically cause a bottleneck in some files.; ; TODO: Low priority: Possibly make this inherit from DictReader, since it is exactly the same plus some functionality; """"""",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/GenericTsvReader.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/GenericTsvReader.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/GenericTsvReader.py:28,Performance,load,loaded,28,"# The comment lines must be loaded before the dict reader is initialized.",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/GenericTsvReader.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/GenericTsvReader.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/shared_utils.py:7,Performance,optimiz,optimization,7,"# loop optimization",MatchSource.CODE_COMMENT,scripts/funcotator/data_sources/cosmic/shared_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/funcotator/data_sources/cosmic/shared_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/github_actions/Reporter.py:529,Performance,race condition,race conditions,529,"# Usage: python Reporter.py <log url>; #; # This script creates a comment on github using the API token provided through GITHUB_API_TOKEN; # It first checks if a comment already exists which was made with the given identity; # and which mentions the same github actions build ID as the current running one in the first line of the comment.; # If no comment is found it creates a new one with a header and the log url.; # If a matching comment is found this appends it's log information to the existing comment.; #; # There exist race conditions when running this in parallel which can result in shards being missed if this is called; # multiple times simultaneously.",MatchSource.CODE_COMMENT,scripts/github_actions/Reporter.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/github_actions/Reporter.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/github_actions/Reporter.py:29,Testability,log,log,29,"# Usage: python Reporter.py <log url>; #; # This script creates a comment on github using the API token provided through GITHUB_API_TOKEN; # It first checks if a comment already exists which was made with the given identity; # and which mentions the same github actions build ID as the current running one in the first line of the comment.; # If no comment is found it creates a new one with a header and the log url.; # If a matching comment is found this appends it's log information to the existing comment.; #; # There exist race conditions when running this in parallel which can result in shards being missed if this is called; # multiple times simultaneously.",MatchSource.CODE_COMMENT,scripts/github_actions/Reporter.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/github_actions/Reporter.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/github_actions/Reporter.py:409,Testability,log,log,409,"# Usage: python Reporter.py <log url>; #; # This script creates a comment on github using the API token provided through GITHUB_API_TOKEN; # It first checks if a comment already exists which was made with the given identity; # and which mentions the same github actions build ID as the current running one in the first line of the comment.; # If no comment is found it creates a new one with a header and the log url.; # If a matching comment is found this appends it's log information to the existing comment.; #; # There exist race conditions when running this in parallel which can result in shards being missed if this is called; # multiple times simultaneously.",MatchSource.CODE_COMMENT,scripts/github_actions/Reporter.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/github_actions/Reporter.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/github_actions/Reporter.py:470,Testability,log,log,470,"# Usage: python Reporter.py <log url>; #; # This script creates a comment on github using the API token provided through GITHUB_API_TOKEN; # It first checks if a comment already exists which was made with the given identity; # and which mentions the same github actions build ID as the current running one in the first line of the comment.; # If no comment is found it creates a new one with a header and the log url.; # If a matching comment is found this appends it's log information to the existing comment.; #; # There exist race conditions when running this in parallel which can result in shards being missed if this is called; # multiple times simultaneously.",MatchSource.CODE_COMMENT,scripts/github_actions/Reporter.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/github_actions/Reporter.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/unsupported/reheader_bam/reheader_bam.py:15,Availability,error,error,15,"""""""WARNING: No error checking.; Assumes that the bam is coordinate sorted and paired-end.; java -jar picard.jar ReplaceSamHeader HEADER=tmp_header.sam I=<(cat <(head -n1 tmp_header.sam ) <(samtools view tumor_1_foo.bam)) O=yossi.bam CREATE_INDEX=true VALIDATION_STRINGENCY=SILENT. THIS SCRIPT CAN BE VERY SLOW ON LARGE BAMS. This script is mostly meant for generating test bams that validate (even in Picard). Example: python reheader_bam.py some.bam 20,21 some_20_21_only.bam""""""",MatchSource.CODE_COMMENT,scripts/unsupported/reheader_bam/reheader_bam.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/unsupported/reheader_bam/reheader_bam.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/unsupported/reheader_bam/reheader_bam.py:383,Security,validat,validate,383,"""""""WARNING: No error checking.; Assumes that the bam is coordinate sorted and paired-end.; java -jar picard.jar ReplaceSamHeader HEADER=tmp_header.sam I=<(cat <(head -n1 tmp_header.sam ) <(samtools view tumor_1_foo.bam)) O=yossi.bam CREATE_INDEX=true VALIDATION_STRINGENCY=SILENT. THIS SCRIPT CAN BE VERY SLOW ON LARGE BAMS. This script is mostly meant for generating test bams that validate (even in Picard). Example: python reheader_bam.py some.bam 20,21 some_20_21_only.bam""""""",MatchSource.CODE_COMMENT,scripts/unsupported/reheader_bam/reheader_bam.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/unsupported/reheader_bam/reheader_bam.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/unsupported/reheader_bam/reheader_bam.py:368,Testability,test,test,368,"""""""WARNING: No error checking.; Assumes that the bam is coordinate sorted and paired-end.; java -jar picard.jar ReplaceSamHeader HEADER=tmp_header.sam I=<(cat <(head -n1 tmp_header.sam ) <(samtools view tumor_1_foo.bam)) O=yossi.bam CREATE_INDEX=true VALIDATION_STRINGENCY=SILENT. THIS SCRIPT CAN BE VERY SLOW ON LARGE BAMS. This script is mostly meant for generating test bams that validate (even in Picard). Example: python reheader_bam.py some.bam 20,21 some_20_21_only.bam""""""",MatchSource.CODE_COMMENT,scripts/unsupported/reheader_bam/reheader_bam.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/scripts/unsupported/reheader_bam/reheader_bam.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py:35,Modifiability,extend,extend,35,"""""""; Functions and classes used to extend a GATK tool with Python. GATK uses two FIFOs to communicate wth Python. The ""ack"" FIFO is read by GATK; and written by Python code, and is used to signal that a Python command has; completed execution. The ""data"" FIFO is written by GATK and read by Python,; and is used to pass data to Python from Java. Most of the functions in this module are intended to be called by GATK via; the StreamingPythonScriptExecutor Java class, and are not called by Python; code directly. The one exception is the readDataFIFO function, which can be; used to read data that had been passed to Python by GATK Java code.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gatktool/tool.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py:32,Deployability,install,install,32,"""""""; Open the GATK ack FIFO and install the exception handler hook. Called by GATK when the StreamingPythonScriptExecutor is initialized,; which is normally in onTraversalStart. Initializes the ack FIFO and; installs the exception hook. Since the exception hook uses the ack FIFO,; it can't be installed until after the FIFO is initialized.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gatktool/tool.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py:208,Deployability,install,installs,208,"""""""; Open the GATK ack FIFO and install the exception handler hook. Called by GATK when the StreamingPythonScriptExecutor is initialized,; which is normally in onTraversalStart. Initializes the ack FIFO and; installs the exception hook. Since the exception hook uses the ack FIFO,; it can't be installed until after the FIFO is initialized.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gatktool/tool.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py:294,Deployability,install,installed,294,"""""""; Open the GATK ack FIFO and install the exception handler hook. Called by GATK when the StreamingPythonScriptExecutor is initialized,; which is normally in onTraversalStart. Initializes the ack FIFO and; installs the exception hook. Since the exception hook uses the ack FIFO,; it can't be installed until after the FIFO is initialized.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gatktool/tool.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py:57,Deployability,install,installed,57,"""""""; GATK Handler for uncaught Python exceptions. The is installed by initializeGATK after the ack FIFO has been; initialized. When an unhandled exception is caught, the handler; sends a nack to GATK through the FIFO, which results in a; PythonScriptExecutorException being thrown in the tool.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gatktool/tool.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py:75,Deployability,install,installed,75,"""""""; Send a negative acknowledgment to GATK. Generally only called by the; installed exception hook. This will result in a Java exception being; thrown that unless caught by Java code, will terminate the tool.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gatktool/tool.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py:97,Deployability,install,installed,97,"""""""; Send a negative acknowledgment to GATK, along with a message. Generally only; called by the installed exception hook. This will result in a Java exception being; thrown that unless caught by Java code, will terminate the tool.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gatktool/tool.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py:58,Integrability,message,message,58,"""""""; Send a negative acknowledgment to GATK, along with a message. Generally only; called by the installed exception hook. This will result in a Java exception being; thrown that unless caught by Java code, will terminate the tool.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gatktool/tool.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py:58,Integrability,message,message,58,"""""""; Write a negative acknowledgement with a supplemental message to the ACK FIFO. The format of a nck message is:. ncknnnnssss.... where ""nck"" is literal, ""nnnn"" is a 4 byte long string of decimal digits representing the length; of the message that follows, and ""ssss...."" is a string of length nnnn. Calling this method will result in an exception being thrown; in the GATK tool on whose behalf this module is running.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gatktool/tool.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py:103,Integrability,message,message,103,"""""""; Write a negative acknowledgement with a supplemental message to the ACK FIFO. The format of a nck message is:. ncknnnnssss.... where ""nck"" is literal, ""nnnn"" is a 4 byte long string of decimal digits representing the length; of the message that follows, and ""ssss...."" is a string of length nnnn. Calling this method will result in an exception being thrown; in the GATK tool on whose behalf this module is running.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gatktool/tool.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py:237,Integrability,message,message,237,"""""""; Write a negative acknowledgement with a supplemental message to the ACK FIFO. The format of a nck message is:. ncknnnnssss.... where ""nck"" is literal, ""nnnn"" is a 4 byte long string of decimal digits representing the length; of the message that follows, and ""ssss...."" is a string of length nnnn. Calling this method will result in an exception being thrown; in the GATK tool on whose behalf this module is running.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gatktool/tool.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py:7,Integrability,message,message,7,"""""""The message length must be exactly 4 bytes""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gatktool/tool.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/tool.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/toolconstants.py:29,Integrability,message,messages,29,"""""""; Command acknowledgement messages used to signal positive acknowledgement ('ack',; negative acknowledgement ('nck'), and negative acknowledgement with an accompanying; message ('nkm').; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gatktool/toolconstants.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/toolconstants.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/toolconstants.py:172,Integrability,message,message,172,"""""""; Command acknowledgement messages used to signal positive acknowledgement ('ack',; negative acknowledgement ('nck'), and negative acknowledgement with an accompanying; message ('nkm').; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gatktool/toolconstants.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/toolconstants.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/toolconstants.py:21,Integrability,message,message,21,"""""""; The length of a message written with a negative ack (nkm) must be 4 bytes long when; serialized as a string, and cannot have a value > 9999.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gatktool/toolconstants.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/toolconstants.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/__init__.py:60,Modifiability,extend,extending,60,"""""""gatktool package. Modules with functions and classes for extending GATK tools with Python. """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gatktool/__init__.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gatktool/__init__.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/__init__.py:8,Modifiability,config,configs,8,"# model configs and workspaces",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/__init__.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/__init__.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/convergence_tracker.py:47,Performance,perform,performing,47,"""""""Initializer. Args:; window: window size for performing linear regression; snr_stop_trigger_threshold: signal-to-noise (SNR) ratio threshold for triggering countdown to stop; stop_countdown_window: once the trigger is pulled, SNR must remain below the given threshold for at; least `stop_countdown_window` subsequent ELBO observations to raise StopIteration. the countdown; will be reset if at any point the snr goes about `snr_stop_trigger_threshold`.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/convergence_tracker.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/convergence_tracker.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/deterministic_annealing.py:111,Modifiability,variab,variable,111,"""""""Initializer. Args:; approx: an instance of PyMC approximation; temperature: a scalar shared pytensor tensor variable; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/deterministic_annealing.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/deterministic_annealing.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/deterministic_annealing.py:78,Deployability,update,updated,78,"""""""ADVI with deterministic annealing functionality. Note:; Temperature is not updated automatically by this class. This task is delegated to the ADVI step; function. This can be done by including a temperature update in `more_updates`; refer to; `pymc.opvi.ObjectiveFunction.step_function` for more information. """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/deterministic_annealing.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/deterministic_annealing.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/deterministic_annealing.py:210,Deployability,update,update,210,"""""""ADVI with deterministic annealing functionality. Note:; Temperature is not updated automatically by this class. This task is delegated to the ADVI step; function. This can be done by including a temperature update in `more_updates`; refer to; `pymc.opvi.ObjectiveFunction.step_function` for more information. """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/deterministic_annealing.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/deterministic_annealing.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:311,Deployability,update,updates,311,"""""""The base class of stochastic optimizers equipped with the functionality of saving and loading the; optimizer state to and from disk (e.g. for stateful optimizers such as ADAM and ADAMAX), and the; possibility of utilizing the extra attributes of `GeneralizedContinuousModel` to perform structured; parameter updates, e.g. updating only sample-specific variables while keeping global variables intact; (see `FancyAdamax` for a concrete implementation).; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:355,Modifiability,variab,variables,355,"""""""The base class of stochastic optimizers equipped with the functionality of saving and loading the; optimizer state to and from disk (e.g. for stateful optimizers such as ADAM and ADAMAX), and the; possibility of utilizing the extra attributes of `GeneralizedContinuousModel` to perform structured; parameter updates, e.g. updating only sample-specific variables while keeping global variables intact; (see `FancyAdamax` for a concrete implementation).; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:386,Modifiability,variab,variables,386,"""""""The base class of stochastic optimizers equipped with the functionality of saving and loading the; optimizer state to and from disk (e.g. for stateful optimizers such as ADAM and ADAMAX), and the; possibility of utilizing the extra attributes of `GeneralizedContinuousModel` to perform structured; parameter updates, e.g. updating only sample-specific variables while keeping global variables intact; (see `FancyAdamax` for a concrete implementation).; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:32,Performance,optimiz,optimizers,32,"""""""The base class of stochastic optimizers equipped with the functionality of saving and loading the; optimizer state to and from disk (e.g. for stateful optimizers such as ADAM and ADAMAX), and the; possibility of utilizing the extra attributes of `GeneralizedContinuousModel` to perform structured; parameter updates, e.g. updating only sample-specific variables while keeping global variables intact; (see `FancyAdamax` for a concrete implementation).; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:89,Performance,load,loading,89,"""""""The base class of stochastic optimizers equipped with the functionality of saving and loading the; optimizer state to and from disk (e.g. for stateful optimizers such as ADAM and ADAMAX), and the; possibility of utilizing the extra attributes of `GeneralizedContinuousModel` to perform structured; parameter updates, e.g. updating only sample-specific variables while keeping global variables intact; (see `FancyAdamax` for a concrete implementation).; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:102,Performance,optimiz,optimizer,102,"""""""The base class of stochastic optimizers equipped with the functionality of saving and loading the; optimizer state to and from disk (e.g. for stateful optimizers such as ADAM and ADAMAX), and the; possibility of utilizing the extra attributes of `GeneralizedContinuousModel` to perform structured; parameter updates, e.g. updating only sample-specific variables while keeping global variables intact; (see `FancyAdamax` for a concrete implementation).; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:154,Performance,optimiz,optimizers,154,"""""""The base class of stochastic optimizers equipped with the functionality of saving and loading the; optimizer state to and from disk (e.g. for stateful optimizers such as ADAM and ADAMAX), and the; possibility of utilizing the extra attributes of `GeneralizedContinuousModel` to perform structured; parameter updates, e.g. updating only sample-specific variables while keeping global variables intact; (see `FancyAdamax` for a concrete implementation).; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:281,Performance,perform,perform,281,"""""""The base class of stochastic optimizers equipped with the functionality of saving and loading the; optimizer state to and from disk (e.g. for stateful optimizers such as ADAM and ADAMAX), and the; possibility of utilizing the extra attributes of `GeneralizedContinuousModel` to perform structured; parameter updates, e.g. updating only sample-specific variables while keeping global variables intact; (see `FancyAdamax` for a concrete implementation).; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:33,Deployability,continuous,continuous,33,""""""". Args:; model: a generalized continuous PyMC model; approx: an instance of PyMC mean-field approximation. Returns:; A callable function that upon providing `loss_or_grads` and `params`, returns an; `OrderedDict` of shared pytensor tensor updates (for example, see `FancyAdamax.get_optimizer`).; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:242,Deployability,update,updates,242,""""""". Args:; model: a generalized continuous PyMC model; approx: an instance of PyMC mean-field approximation. Returns:; A callable function that upon providing `loss_or_grads` and `params`, returns an; `OrderedDict` of shared pytensor tensor updates (for example, see `FancyAdamax.get_optimizer`).; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:79,Deployability,update,update,79,"""""""Adamax optimizer with saving/loading functionality and sample-specific-only update mode.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:10,Performance,optimiz,optimizer,10,"""""""Adamax optimizer with saving/loading functionality and sample-specific-only update mode.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:32,Performance,load,loading,32,"""""""Adamax optimizer with saving/loading functionality and sample-specific-only update mode.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:213,Deployability,update,update,213,"""""""Initializer. Args:; learning_rate: learning rate; beta1: first moment forgetting factor; beta2: second moment forgetting factor; epsilon: a small float for avoiding division-by-zero; sample_specific_only: only update sample-specific variables (as specified in the generalized model); disable_bias_correction: disable moment estimation bias correction; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:236,Modifiability,variab,variables,236,"""""""Initializer. Args:; learning_rate: learning rate; beta1: first moment forgetting factor; beta2: second moment forgetting factor; epsilon: a small float for avoiding division-by-zero; sample_specific_only: only update sample-specific variables (as specified in the generalized model); disable_bias_correction: disable moment estimation bias correction; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:159,Safety,avoid,avoiding,159,"""""""Initializer. Args:; learning_rate: learning rate; beta1: first moment forgetting factor; beta2: second moment forgetting factor; epsilon: a small float for avoiding division-by-zero; sample_specific_only: only update sample-specific variables (as specified in the generalized model); disable_bias_correction: disable moment estimation bias correction; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:38,Usability,learn,learning,38,"""""""Initializer. Args:; learning_rate: learning rate; beta1: first moment forgetting factor; beta2: second moment forgetting factor; epsilon: a small float for avoiding division-by-zero; sample_specific_only: only update sample-specific variables (as specified in the generalized model); disable_bias_correction: disable moment estimation bias correction; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:65,Deployability,update,update,65,"""""""Adamax stochastic optimizer with partial sample-specific-only update functionality. Args:; loss_or_grads: symbolic loss function or gradients; params: variational parameter bundle; model: an instance of generalized model; approx: an instance of variational approximation for the model; learning_rate: global learning rate; beta1: first moment estimation forgetting factor; beta2: second moment estimation forgetting factor; epsilon: a small float to avoid division-by-zero; sample_specific_only: only update parameters registered in the generalized model as sample-specific; disable_bias_correction: disable moment estimation bias correction; base_class: a reference to the base class to store a reference to the shared tensors (for I/O). Returns:; returns the function itself if `loss_or_grads` and `params` are not given;; otherwise, returns an ordered dict of shared tensor updates (to be used in pymc for compiling; the step function); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:504,Deployability,update,update,504,"""""""Adamax stochastic optimizer with partial sample-specific-only update functionality. Args:; loss_or_grads: symbolic loss function or gradients; params: variational parameter bundle; model: an instance of generalized model; approx: an instance of variational approximation for the model; learning_rate: global learning rate; beta1: first moment estimation forgetting factor; beta2: second moment estimation forgetting factor; epsilon: a small float to avoid division-by-zero; sample_specific_only: only update parameters registered in the generalized model as sample-specific; disable_bias_correction: disable moment estimation bias correction; base_class: a reference to the base class to store a reference to the shared tensors (for I/O). Returns:; returns the function itself if `loss_or_grads` and `params` are not given;; otherwise, returns an ordered dict of shared tensor updates (to be used in pymc for compiling; the step function); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:880,Deployability,update,updates,880,"""""""Adamax stochastic optimizer with partial sample-specific-only update functionality. Args:; loss_or_grads: symbolic loss function or gradients; params: variational parameter bundle; model: an instance of generalized model; approx: an instance of variational approximation for the model; learning_rate: global learning rate; beta1: first moment estimation forgetting factor; beta2: second moment estimation forgetting factor; epsilon: a small float to avoid division-by-zero; sample_specific_only: only update parameters registered in the generalized model as sample-specific; disable_bias_correction: disable moment estimation bias correction; base_class: a reference to the base class to store a reference to the shared tensors (for I/O). Returns:; returns the function itself if `loss_or_grads` and `params` are not given;; otherwise, returns an ordered dict of shared tensor updates (to be used in pymc for compiling; the step function); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:21,Performance,optimiz,optimizer,21,"""""""Adamax stochastic optimizer with partial sample-specific-only update functionality. Args:; loss_or_grads: symbolic loss function or gradients; params: variational parameter bundle; model: an instance of generalized model; approx: an instance of variational approximation for the model; learning_rate: global learning rate; beta1: first moment estimation forgetting factor; beta2: second moment estimation forgetting factor; epsilon: a small float to avoid division-by-zero; sample_specific_only: only update parameters registered in the generalized model as sample-specific; disable_bias_correction: disable moment estimation bias correction; base_class: a reference to the base class to store a reference to the shared tensors (for I/O). Returns:; returns the function itself if `loss_or_grads` and `params` are not given;; otherwise, returns an ordered dict of shared tensor updates (to be used in pymc for compiling; the step function); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:453,Safety,avoid,avoid,453,"""""""Adamax stochastic optimizer with partial sample-specific-only update functionality. Args:; loss_or_grads: symbolic loss function or gradients; params: variational parameter bundle; model: an instance of generalized model; approx: an instance of variational approximation for the model; learning_rate: global learning rate; beta1: first moment estimation forgetting factor; beta2: second moment estimation forgetting factor; epsilon: a small float to avoid division-by-zero; sample_specific_only: only update parameters registered in the generalized model as sample-specific; disable_bias_correction: disable moment estimation bias correction; base_class: a reference to the base class to store a reference to the shared tensors (for I/O). Returns:; returns the function itself if `loss_or_grads` and `params` are not given;; otherwise, returns an ordered dict of shared tensor updates (to be used in pymc for compiling; the step function); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:311,Usability,learn,learning,311,"""""""Adamax stochastic optimizer with partial sample-specific-only update functionality. Args:; loss_or_grads: symbolic loss function or gradients; params: variational parameter bundle; model: an instance of generalized model; approx: an instance of variational approximation for the model; learning_rate: global learning rate; beta1: first moment estimation forgetting factor; beta2: second moment estimation forgetting factor; epsilon: a small float to avoid division-by-zero; sample_specific_only: only update parameters registered in the generalized model as sample-specific; disable_bias_correction: disable moment estimation bias correction; base_class: a reference to the base class to store a reference to the shared tensors (for I/O). Returns:; returns the function itself if `loss_or_grads` and `params` are not given;; otherwise, returns an ordered dict of shared tensor updates (to be used in pymc for compiling; the step function); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:26,Performance,optimiz,optimizer,26,"""""""Saves the state of the optimizer to disk. Args:; output_path: output path (must be writable directory); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py:26,Performance,optimiz,optimizer,26,"""""""Loads the state of the optimizer from disk. Args:; input_path: input path (must be a readable directory); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/fancy_optimizers.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/param_tracker.py:68,Modifiability,variab,variable,68,"""""""Adds a new parameter to be tracked. Args:; var_name: name of the variable (must be a free variable name in the model); inv_trans: inverse transformation; inv_trans_var_name: name of the variable after inverse transformation. Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/param_tracker.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/param_tracker.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/param_tracker.py:93,Modifiability,variab,variable,93,"""""""Adds a new parameter to be tracked. Args:; var_name: name of the variable (must be a free variable name in the model); inv_trans: inverse transformation; inv_trans_var_name: name of the variable after inverse transformation. Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/param_tracker.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/param_tracker.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/param_tracker.py:189,Modifiability,variab,variable,189,"""""""Adds a new parameter to be tracked. Args:; var_name: name of the variable (must be a free variable name in the model); inv_trans: inverse transformation; inv_trans_var_name: name of the variable after inverse transformation. Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/param_tracker.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/inference/param_tracker.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_adamax.py:30,Performance,optimiz,optimizer,30,"""""""Writes the state of adamax optimizer to disk.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_adamax.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_adamax.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_adamax.py:30,Performance,optimiz,optimizer,30,"""""""Import the state of adamax optimizer from disk.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_adamax.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_adamax.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:16,Modifiability,variab,variable-to-linear-array,16,"""""""Extracts the variable-to-linear-array of a PyMC mean-field approximation. Args:; approx: an instance of PyMC mean-field approximation. Returns:; A list of VarMap; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:387,Availability,error,error,387,"# Originally, with PyMC3 3.5, this simply returned a List[pymc3.blocking.VarMap]:; # return approx.bij.ordering.vmap; # However, changes were made to the API and the VarMap class was obviated by the use of Xarray, see:; # https://discourse.pymc.io/t/how-to-get-named-means-and-sds-from-advi-fit/11073; # Unfortunately, this new functionality appears to be somewhat brittle and yields an error in our use case.; # We instead bring the old VarMap class into this module and recreate the old functionality to; # preserve our preexisting interfaces.",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:534,Integrability,interface,interfaces,534,"# Originally, with PyMC3 3.5, this simply returned a List[pymc3.blocking.VarMap]:; # return approx.bij.ordering.vmap; # However, changes were made to the API and the VarMap class was obviated by the use of Xarray, see:; # https://discourse.pymc.io/t/how-to-get-named-means-and-sds-from-advi-fit/11073; # Unfortunately, this new functionality appears to be somewhat brittle and yields an error in our use case.; # We instead bring the old VarMap class into this module and recreate the old functionality to; # preserve our preexisting interfaces.",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:35,Usability,simpl,simply,35,"# Originally, with PyMC3 3.5, this simply returned a List[pymc3.blocking.VarMap]:; # return approx.bij.ordering.vmap; # However, changes were made to the API and the VarMap class was obviated by the use of Xarray, see:; # https://discourse.pymc.io/t/how-to-get-named-means-and-sds-from-advi-fit/11073; # Unfortunately, this new functionality appears to be somewhat brittle and yields an error in our use case.; # We instead bring the old VarMap class into this module and recreate the old functionality to; # preserve our preexisting interfaces.",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:212,Modifiability,variab,variable,212,"""""""Extracts mean-field posterior parameters in the right shape and dtype from an instance; of PyMC mean-field approximation. Args:; approx: an instance of PyMC mean-field approximation. Returns:; A tuple (set of variable names,; map from variable names to their respective Gaussian means,; map from variable names to their respective Gaussian standard deviations); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:238,Modifiability,variab,variable,238,"""""""Extracts mean-field posterior parameters in the right shape and dtype from an instance; of PyMC mean-field approximation. Args:; approx: an instance of PyMC mean-field approximation. Returns:; A tuple (set of variable names,; map from variable names to their respective Gaussian means,; map from variable names to their respective Gaussian standard deviations); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:299,Modifiability,variab,variable,299,"""""""Extracts mean-field posterior parameters in the right shape and dtype from an instance; of PyMC mean-field approximation. Args:; approx: an instance of PyMC mean-field approximation. Returns:; A tuple (set of variable names,; map from variable names to their respective Gaussian means,; map from variable names to their respective Gaussian standard deviations); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:235,Modifiability,variab,variable,235,"""""""Writes sample-specific parameters contained in an instance of PyMC mean-field approximation; to disk. Args:; sample_index: sample integer index; sample_posterior_path: output path (must be writable); approx_var_name_set: set of all variable names in the model; approx_mu_map: a map from variable names to their respective Gaussian means; approx_std_map: a map from variable names to their respective Gaussian standard deviations; model: the generalized model corresponding to the provided mean-field approximation; extra_comment_lines: (optional) additional comment lines to write to the header of each output file; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:290,Modifiability,variab,variable,290,"""""""Writes sample-specific parameters contained in an instance of PyMC mean-field approximation; to disk. Args:; sample_index: sample integer index; sample_posterior_path: output path (must be writable); approx_var_name_set: set of all variable names in the model; approx_mu_map: a map from variable names to their respective Gaussian means; approx_std_map: a map from variable names to their respective Gaussian standard deviations; model: the generalized model corresponding to the provided mean-field approximation; extra_comment_lines: (optional) additional comment lines to write to the header of each output file; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:368,Modifiability,variab,variable,368,"""""""Writes sample-specific parameters contained in an instance of PyMC mean-field approximation; to disk. Args:; sample_index: sample integer index; sample_posterior_path: output path (must be writable); approx_var_name_set: set of all variable names in the model; approx_mu_map: a map from variable names to their respective Gaussian means; approx_std_map: a map from variable names to their respective Gaussian standard deviations; model: the generalized model corresponding to the provided mean-field approximation; extra_comment_lines: (optional) additional comment lines to write to the header of each output file; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:234,Deployability,update,updated,234,"""""""Reads global parameters of a given model from saved mean-field posteriors and injects them; into a provided mean-field instance. Args:; input_model_path: input model path; approx: an instance of PyMC mean-field approximation to be updated; model: the generalized model corresponding to the provided mean-field approximation and the saved; instance; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:81,Integrability,inject,injects,81,"""""""Reads global parameters of a given model from saved mean-field posteriors and injects them; into a provided mean-field instance. Args:; input_model_path: input model path; approx: an instance of PyMC mean-field approximation to be updated; model: the generalized model corresponding to the provided mean-field approximation and the saved; instance; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:81,Security,inject,injects,81,"""""""Reads global parameters of a given model from saved mean-field posteriors and injects them; into a provided mean-field instance. Args:; input_model_path: input model path; approx: an instance of PyMC mean-field approximation to be updated; model: the generalized model corresponding to the provided mean-field approximation and the saved; instance; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:91,Integrability,inject,injects,91,"""""""Reads sample-specific parameters of a given sample from saved mean-field posteriors and injects them; into a provided mean-field instance. Args:; input_sample_calls_path: path to saved sample-specific posteriors; sample_index: index of the sample in the current instance of model/approximation; sample_name: name of the sample in the current instance of model/approximation; (used to check whether `input_sample_calls_path` actually corresponds to the sample); approx: an instance of PyMC mean-field approximation corresponding to the provided model; model: the generalized model corresponding to the provided mean-field approximation. Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:91,Security,inject,injects,91,"""""""Reads sample-specific parameters of a given sample from saved mean-field posteriors and injects them; into a provided mean-field instance. Args:; input_sample_calls_path: path to saved sample-specific posteriors; sample_index: index of the sample in the current instance of model/approximation; sample_name: name of the sample in the current instance of model/approximation; (used to check whether `input_sample_calls_path` actually corresponds to the sample); approx: an instance of PyMC mean-field approximation corresponding to the provided model; model: the generalized model corresponding to the provided mean-field approximation. Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:323,Deployability,update,updated,323,"""""""Updates the ndarray buffer of the shared parameter tensor according to a given sample-specific; parameter for a given sample index. Args:; _param: ndarray buffer of the shared parameter tensor (i.e. `mu` or `rho`); _var_slice: the slice that of `_param` that yields the full view of the sample-specific; parameter to be updated; _var_shape: full shape of the sample-specific parameter to be updated; _sample_specific_loaded_value: new single-sample slice of the sample-specific parameter; to be updated; _var_sample_axis: the sample-index axis in the full view of the sample-specific; parameter to be updates; _sample_index: sample index. Returns:; updated `_param`; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:394,Deployability,update,updated,394,"""""""Updates the ndarray buffer of the shared parameter tensor according to a given sample-specific; parameter for a given sample index. Args:; _param: ndarray buffer of the shared parameter tensor (i.e. `mu` or `rho`); _var_slice: the slice that of `_param` that yields the full view of the sample-specific; parameter to be updated; _var_shape: full shape of the sample-specific parameter to be updated; _sample_specific_loaded_value: new single-sample slice of the sample-specific parameter; to be updated; _var_sample_axis: the sample-index axis in the full view of the sample-specific; parameter to be updates; _sample_index: sample index. Returns:; updated `_param`; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:498,Deployability,update,updated,498,"""""""Updates the ndarray buffer of the shared parameter tensor according to a given sample-specific; parameter for a given sample index. Args:; _param: ndarray buffer of the shared parameter tensor (i.e. `mu` or `rho`); _var_slice: the slice that of `_param` that yields the full view of the sample-specific; parameter to be updated; _var_shape: full shape of the sample-specific parameter to be updated; _sample_specific_loaded_value: new single-sample slice of the sample-specific parameter; to be updated; _var_sample_axis: the sample-index axis in the full view of the sample-specific; parameter to be updates; _sample_index: sample index. Returns:; updated `_param`; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:604,Deployability,update,updates,604,"""""""Updates the ndarray buffer of the shared parameter tensor according to a given sample-specific; parameter for a given sample index. Args:; _param: ndarray buffer of the shared parameter tensor (i.e. `mu` or `rho`); _var_slice: the slice that of `_param` that yields the full view of the sample-specific; parameter to be updated; _var_shape: full shape of the sample-specific parameter to be updated; _sample_specific_loaded_value: new single-sample slice of the sample-specific parameter; to be updated; _var_sample_axis: the sample-index axis in the full view of the sample-specific; parameter to be updates; _sample_index: sample index. Returns:; updated `_param`; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:652,Deployability,update,updated,652,"""""""Updates the ndarray buffer of the shared parameter tensor according to a given sample-specific; parameter for a given sample index. Args:; _param: ndarray buffer of the shared parameter tensor (i.e. `mu` or `rho`); _var_slice: the slice that of `_param` that yields the full view of the sample-specific; parameter to be updated; _var_shape: full shape of the sample-specific parameter to be updated; _sample_specific_loaded_value: new single-sample slice of the sample-specific parameter; to be updated; _var_sample_axis: the sample-index axis in the full view of the sample-specific; parameter to be updates; _sample_index: sample index. Returns:; updated `_param`; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:2,Deployability,update,update,2,"# update mu and rho",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py:208,Integrability,message,messages,208,"""""""Asserts that a given .tsv file contains a set of mandatory header columns. Note:; The set of header columns found in the .tsv file must be provided. `input_tsv_file` is only used; for generating exception messages.; Args:; mandatory_columns_set: set of mandatory header columns; found_columns_set: set of header columns found in the .tsv file; input_tsv_file: path to the .tsv file in question. Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_consts.py:2,Testability,log,log,2,"# log copy number posterior matrix column name prefix for each integer copy number state",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_consts.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_consts.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_consts.py:68,Deployability,configurat,configurations,68,"# default file names for loading and saving models, posteriors, and configurations",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_consts.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_consts.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_consts.py:68,Modifiability,config,configurations,68,"# default file names for loading and saving models, posteriors, and configurations",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_consts.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_consts.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_consts.py:25,Performance,load,loading,25,"# default file names for loading and saving models, posteriors, and configurations",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_consts.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_consts.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py:18,Modifiability,config,config,18,"# write denoising config",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py:16,Modifiability,config,config,16,"# write calling config",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py:15,Modifiability,variab,variables,15,"# write global variables in the workspace",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py:15,Modifiability,variab,variables,15,"# write global variables in the posterior",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py:24,Modifiability,variab,variables,24,"# read global workspace variables",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py:68,Modifiability,variab,variables,68,"""""""Writes sample-specific model parameters and associated workspace variables to disk.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py:18,Modifiability,config,config,18,"# write denoising config",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py:16,Modifiability,config,config,16,"# write calling config",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py:20,Testability,log,log,20,"# write copy number log posterior",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py:20,Testability,log,log,20,"# write copy number log emission",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py:67,Modifiability,variab,variables,67,"""""""Reads sample-specific model parameters and associated workspace variables from disk.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py:2,Testability,assert,assert,2,"# assert that the interval list is the same",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py:38,Deployability,update,update,38,"# read sample-specific posteriors and update approximation",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py:46,Deployability,update,update,46,"# read copy number posterior and emission and update workspace",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py:2,Deployability,update,update,2,"# update auxiliary workspace variables",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py:29,Modifiability,variab,variables,29,"# update auxiliary workspace variables",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_intervals_and_counts.py:421,Testability,assert,asserted,421,"""""""Loads read counts for a given cohort corresponding to a provided list of intervals. Args:; read_count_file_list: list of read counts .tsv files; modeling_interval_list: requested list of intervals. Raises:; AssertionError: if some of the intervals in `modeling_interval_list` are absent in the; provided read counts .tsv file. Note:; it is assumed that all read counts have the SAME intervals.; this assumption is not asserted for speed. Returns:; list of sample names, 2-dim (sample x interval) ndarray of read counts; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_intervals_and_counts.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_intervals_and_counts.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_intervals_and_counts.py:2,Performance,load,load,2,"# load intervals from the first read counts table",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_intervals_and_counts.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_intervals_and_counts.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_intervals_and_counts.py:9,Performance,load,load,9,"# do not load intervals again for speed, assume it is the same as the first sample",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_intervals_and_counts.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_intervals_and_counts.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_intervals_and_counts.py:289,Integrability,message,messages,289,"""""""Converts a pandas dataframe of intervals to list(Interval). Annotations will be parsed; and added to the intervals as well. Args:; interval_list_pd: interval list as a pandas dataframe; input_tsv_file: path to the .tsv file associated to the dataframe; (only used to generate exception messages). Returns:; a list of intervals; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_intervals_and_counts.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_intervals_and_counts.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_intervals_and_counts.py:241,Testability,log,logged,241,"""""""Write a list of interval list to .tsv file. Note:; If all intervals have an annotation, that annotation will be written to the .tsv files.; If only some intervals have an annotation, that annotation will be ignored and a warning; will be logged. Args:; output_file: output .tsv file; interval_list: list of intervals to write to .tsv file; sam_header_lines: (optional) SAM header lines. Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_intervals_and_counts.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_intervals_and_counts.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_metadata.py:60,Deployability,update,updates,60,"""""""Reads the output of contig ploidy determination tool and updates the given instance of; `SampleMetadataCollection` for read depth and ploidy metadata. Args:; sample_metadata_collection: the instance of `SampleMetadataCollection` to be updated; input_calls_path: posterior output path of contig ploidy determination tool; comment: comment character; delimiter: delimiter character. Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_metadata.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_metadata.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_metadata.py:238,Deployability,update,updated,238,"""""""Reads the output of contig ploidy determination tool and updates the given instance of; `SampleMetadataCollection` for read depth and ploidy metadata. Args:; sample_metadata_collection: the instance of `SampleMetadataCollection` to be updated; input_calls_path: posterior output path of contig ploidy determination tool; comment: comment character; delimiter: delimiter character. Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_metadata.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_metadata.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_ploidy.py:15,Modifiability,config,config,15,"# write ploidy config",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_ploidy.py:15,Modifiability,variab,variables,15,"# write global variables in the posterior",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_ploidy.py:75,Modifiability,variab,variables,75,"""""""Writes sample-specific ploidy model parameters and associated workspace variables to disk.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_ploidy.py:47,Deployability,update,updates,47,"""""""Reads ploidy model parameters from disk and updates the provided approximation accordingly. Note:; It is assumed that the provided model instance and approximation are compatible with the model; parameters to be read. This has to be asserted beforehand by the CLI tool.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_ploidy.py:236,Testability,assert,asserted,236,"""""""Reads ploidy model parameters from disk and updates the provided approximation accordingly. Note:; It is assumed that the provided model instance and approximation are compatible with the model; parameters to be read. This has to be asserted beforehand by the CLI tool.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/test_io_vcf_parsing.py:36,Testability,test,tests,36,"#for GATK PythonUnitTestRunner/Java tests",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/test_io_vcf_parsing.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/test_io_vcf_parsing.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/test_io_vcf_parsing.py:33,Testability,test,tests,33,"# for running in IntelliJ/Python tests; # test_sub_dir = current_dir + ""/../../../../../../../../src/test/resources/org/broadinstitute/hellbender/tools/copynumber/gcnv-postprocess/""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/test_io_vcf_parsing.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/test_io_vcf_parsing.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/test_io_vcf_parsing.py:101,Testability,test,test,101,"# for running in IntelliJ/Python tests; # test_sub_dir = current_dir + ""/../../../../../../../../src/test/resources/org/broadinstitute/hellbender/tools/copynumber/gcnv-postprocess/""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/test_io_vcf_parsing.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/test_io_vcf_parsing.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:5,Testability,log,log,5,"# np.log(2 * np.pi)",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:10,Testability,log,log,10,"# 10 / np.log(10)",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:154,Availability,toler,tolerated,154,"""""""Normalizes the probability vector of a categorical RV to unity. Args:; prob_vector: input probability vector a categorical RV of choice; prob_sum_tol: tolerated amount of deviation from unity before performing normalization. Returns:; A new and normalized probability vector if it deviates from unity more than `prob_sum_tol`; Otherwise, `prob_vector` is returned unchanged.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:202,Performance,perform,performing,202,"""""""Normalizes the probability vector of a categorical RV to unity. Args:; prob_vector: input probability vector a categorical RV of choice; prob_sum_tol: tolerated amount of deviation from unity before performing normalization. Returns:; A new and normalized probability vector if it deviates from unity more than `prob_sum_tol`; Otherwise, `prob_vector` is returned unchanged.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:40,Testability,log,logp,40,"""""""Generates symbolic negative binomial logp. Args:; mu: negative binomial mean tensor; alpha: negative binomial over-dispersion tensor; value: negative binomial counts. Note:; `mu`, `alpha` and `value` must be either shape-compatible or be commensurately broadcastable. Returns:; symbolic negative binomial logp; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:308,Testability,log,logp,308,"""""""Generates symbolic negative binomial logp. Args:; mu: negative binomial mean tensor; alpha: negative binomial over-dispersion tensor; value: negative binomial counts. Note:; `mu`, `alpha` and `value` must be either shape-compatible or be commensurately broadcastable. Returns:; symbolic negative binomial logp; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:66,Testability,log,logp,66,"""""""Generates symbolic Gaussian approximation to negative binomial logp. Args:; mu: negative binomial mean tensor; alpha: negative binomial over-dispersion tensor; value: negative binomial counts. Note:; `mu`, `alpha` and `value` must be either shape-compatible or be commensurately broadcastable. Returns:; symbolic approximate negative binomial logp; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:346,Testability,log,logp,346,"""""""Generates symbolic Gaussian approximation to negative binomial logp. Args:; mu: negative binomial mean tensor; alpha: negative binomial over-dispersion tensor; value: negative binomial counts. Note:; `mu`, `alpha` and `value` must be either shape-compatible or be commensurately broadcastable. Returns:; symbolic approximate negative binomial logp; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:40,Testability,log,logp,40,"""""""Generates symbolic negative binomial logp with conditional switching to Gaussian approximation; if the approximation is valid. Args:; mu: negative binomial mean tensor; alpha: negative binomial over-dispersion tensor; value: negative binomial counts. Returns:; symbolic approximate negative binomial logp; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:303,Testability,log,logp,303,"""""""Generates symbolic negative binomial logp with conditional switching to Gaussian approximation; if the approximation is valid. Args:; mu: negative binomial mean tensor; alpha: negative binomial over-dispersion tensor; value: negative binomial counts. Returns:; symbolic approximate negative binomial logp; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:55,Performance,perform,performing,55,"""""""This distribution is obtained by taking X ~ Exp and performing a Bose transformation; Y = (exp(X) - 1)^{-1}. The result is:. p(y) = (1 + 2 \mu) y^{2\mu} (1 + y)^{-2(1 + \mu)}. It is a heavy-tail distribution with non-existent first moment. Args:; mu: exponential parameter of X; value: values of Y. Returns:; symbolic logp; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:321,Testability,log,logp,321,"""""""This distribution is obtained by taking X ~ Exp and performing a Bose transformation; Y = (exp(X) - 1)^{-1}. The result is:. p(y) = (1 + 2 \mu) y^{2\mu} (1 + y)^{-2(1 + \mu)}. It is a heavy-tail distribution with non-existent first moment. Args:; mu: exponential parameter of X; value: values of Y. Returns:; symbolic logp; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:12,Testability,log,log,12,"""""""Symbolic log(exp(a) + exp(b)). The edge case where `a` - `b` is undefined is handled by; setting the difference to 0. This occurs if both `a` and `b` are +inf or -inf. Returns:; symbolic log(exp(a) + exp(b)); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:190,Testability,log,log,190,"""""""Symbolic log(exp(a) + exp(b)). The edge case where `a` - `b` is undefined is handled by; setting the difference to 0. This occurs if both `a` and `b` are +inf or -inf. Returns:; symbolic log(exp(a) + exp(b)); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:157,Testability,log,log,157,"""""""Symbolic Jensen-Shannon distance (symmetric KL divergence) between two discrete distributions. Args:; log_p_1: first discrete probability distribution in log space; log_p_2: second discrete probability distribution in log space. Returns:; Symbolic Jensen-Shannon distance; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:221,Testability,log,log,221,"""""""Symbolic Jensen-Shannon distance (symmetric KL divergence) between two discrete distributions. Args:; log_p_1: first discrete probability distribution in log space; log_p_2: second discrete probability distribution in log space. Returns:; Symbolic Jensen-Shannon distance; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:126,Testability,log,log,126,"""""""Symbolic Hellinger distance between two discrete distributions. Args:; log_p_1: first discrete probability distribution in log space; log_p_2: second discrete probability distribution in log space. Returns:; Symbolic Hellinger distance; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:190,Testability,log,log,190,"""""""Symbolic Hellinger distance between two discrete distributions. Args:; log_p_1: first discrete probability distribution in log space; log_p_2: second discrete probability distribution in log space. Returns:; Symbolic Hellinger distance; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:52,Performance,perform,perform,52,"""""""Takes a vector of probabilities in log space and perform genotyping. Args:; log_p: a vector probabilities in log scape. Note:; log_p must be properly normalized, i.e. np.sum(np.exp(log_p)) == 1; (this is not explicitly asserted). Returns:; A tuple (most likely genotype index, phred-scaled genotyping quality); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:38,Testability,log,log,38,"""""""Takes a vector of probabilities in log space and perform genotyping. Args:; log_p: a vector probabilities in log scape. Note:; log_p must be properly normalized, i.e. np.sum(np.exp(log_p)) == 1; (this is not explicitly asserted). Returns:; A tuple (most likely genotype index, phred-scaled genotyping quality); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:112,Testability,log,log,112,"""""""Takes a vector of probabilities in log space and perform genotyping. Args:; log_p: a vector probabilities in log scape. Note:; log_p must be properly normalized, i.e. np.sum(np.exp(log_p)) == 1; (this is not explicitly asserted). Returns:; A tuple (most likely genotype index, phred-scaled genotyping quality); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:222,Testability,assert,asserted,222,"""""""Takes a vector of probabilities in log space and perform genotyping. Args:; log_p: a vector probabilities in log scape. Note:; log_p must be properly normalized, i.e. np.sum(np.exp(log_p)) == 1; (this is not explicitly asserted). Returns:; A tuple (most likely genotype index, phred-scaled genotyping quality); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:16,Testability,log,logsumexp,16,"# PyMC/pytensor logsumexp doesn't include the stability trick, so we port the PyMC3/theano version here for consistency",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py:92,Modifiability,variab,variable,92,"""""""Get a generator that returns samples of a precomputed model approximation for a specific variable in that model; Args:; approx: an instance of PyMC3 mean-field approximation; node: a stochastic node in the model; num_samples: number of samples to draw; Returns:; A generator that will yield `num_samples` samples from an approximation to a posterior; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/fancy_model.py:160,Performance,optimiz,optimization,160,"""""""An extension of PyMC `Model` class with the added functionality of labeling RVs; as either global or sample-specific (for the purpose of I/O, and structured optimization).; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/fancy_model.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/fancy_model.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/fancy_model.py:14,Modifiability,variab,variable,14,"""""""Register a variable as global. Args:; var: a PyMC free variable. Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/fancy_model.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/fancy_model.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/fancy_model.py:58,Modifiability,variab,variable,58,"""""""Register a variable as global. Args:; var: a PyMC free variable. Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/fancy_model.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/fancy_model.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/fancy_model.py:14,Modifiability,variab,variable,14,"""""""Register a variable as sample-specific. Args:; var: a PyMC free variable; sample_axis: axis corresponding to sample index (it is used for slicing `var` to obtain single-sample; parameters). Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/fancy_model.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/fancy_model.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/fancy_model.py:67,Modifiability,variab,variable,67,"""""""Register a variable as sample-specific. Args:; var: a PyMC free variable; sample_axis: axis corresponding to sample index (it is used for slicing `var` to obtain single-sample; parameters). Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/fancy_model.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/fancy_model.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/fancy_model.py:21,Modifiability,variab,variables,21,"""""""Verifies that all variables are registered as either as global or sample-specific.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/fancy_model.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/fancy_model.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:154,Security,expose,expose,154,"""""""Exposes arguments of `__init__` to a given instance of `ArgumentParser`. Args:; args: an instance of `ArgumentParser`; hide: a set of arguments not to expose. Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:154,Security,expose,expose,154,"""""""Exposes arguments of `__init__` to a given instance of `ArgumentParser`. Args:; args: an instance of `ArgumentParser`; hide: a set of arguments not to expose. Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:17,Testability,log,log,17,"# interval class log posterior probs",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:14,Testability,log,log,14,"# copy number log posterior probs",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:14,Testability,log,log,14,"# copy number log posterior and derived quantities (to be initialized by `PosteriorInitializer`)",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:81,Deployability,update,updated,81,"# latest MAP estimate of integer copy number (to be initialized and periodically updated by; # `DenoisingCallingWorkspace.update_auxiliary_vars)",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:77,Deployability,update,updated,77,"# latest bitmask of CNV-active intervals (to be initialized and periodically updated by; # `DenoisingCallingWorkspace.update_auxiliary_vars if q_c_expectation_mode == 'hybrid')",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:23,Testability,log,log,23,"# copy number emission log posterior",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:8,Testability,log,log,8,"# class log posterior (to be initialized by `PosteriorInitializer`)",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:17,Testability,log,log,17,"# class emission log posterior; # (to be initialized by calling `initialize_copy_number_class_inference_vars`)",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:21,Testability,log,log,21,"# class Markov chain log prior (initialized here and remains constant throughout); # (to be initialized by calling `initialize_copy_number_class_inference_vars`)",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:21,Testability,log,log,21,"# class Markov chain log transition (initialized here and remains constant throughout); # (to be initialized by calling `initialize_copy_number_class_inference_vars`)",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:17,Testability,log,log,17,"# class emission log posterior",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:21,Testability,log,log,21,"# class Markov chain log prior (initialized here and remains constant throughout)",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:21,Testability,log,log,21,"# class Markov chain log transition (initialized here and remains constant throughout)",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:138,Deployability,configurat,configuration,138,"""""""Initializes `DenoisingCallingWorkspace.W_gc_tg` and `DenoisingCallingWorkspace.interval_neighbor_index_list`; if required by the model configuration.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:138,Modifiability,config,configuration,138,"""""""Initializes `DenoisingCallingWorkspace.W_gc_tg` and `DenoisingCallingWorkspace.interval_neighbor_index_list`; if required by the model configuration.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:476,Integrability,depend,depending,476,"""""""Pads a given interval list, finds the index of overlapping neighbors, and returns a list of indices of; overlapping neighbors. Note:; It is assumed that the `interval_list` is sorted (this is not asserted). Args:; interval_list: list of intervals; maximum_neighbor_distance: Maximum distance between intervals to be considered neighbors. Returns:; A list of indices of overlapping neighbors with the same length as `interval_list`. Each element; in a variable-length list, depending on the number of neighbors.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:454,Modifiability,variab,variable-length,454,"""""""Pads a given interval list, finds the index of overlapping neighbors, and returns a list of indices of; overlapping neighbors. Note:; It is assumed that the `interval_list` is sorted (this is not asserted). Args:; interval_list: list of intervals; maximum_neighbor_distance: Maximum distance between intervals to be considered neighbors. Returns:; A list of indices of overlapping neighbors with the same length as `interval_list`. Each element; in a variable-length list, depending on the number of neighbors.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:199,Testability,assert,asserted,199,"""""""Pads a given interval list, finds the index of overlapping neighbors, and returns a list of indices of; overlapping neighbors. Note:; It is assumed that the `interval_list` is sorted (this is not asserted). Args:; interval_list: list of intervals; maximum_neighbor_distance: Maximum distance between intervals to be considered neighbors. Returns:; A list of indices of overlapping neighbors with the same length as `interval_list`. Each element; in a variable-length list, depending on the number of neighbors.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:18,Testability,log,log,18,"""""""Calculates the log transition probability between copy number classes.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:24,Testability,log,log,24,"""""""Initial mean bias in log space.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:50,Deployability,continuous,continuous,50,"""""""The gCNV coverage denoising model declaration (continuous RVs only; discrete posteriors are assumed; to be given).""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:25,Testability,log,log,25,"# interval-specific mean log bias",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:2,Testability,log,log-normal,2,"# log-normal read depth centered at the global read depth",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:2,Testability,log,log,2,"# log bias modelling, starting with the log mean bias",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:40,Testability,log,log,40,"# log bias modelling, starting with the log mean bias",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:125,Modifiability,variab,variable,125,"# PR #8651 NOTE: originally used HalfFlat in PyMC3, but this now raises; # NotImplementedError: Cannot sample from half_flat variable.; # we instead use a Uniform with a very large, unexposed upper bound; # ARD prior precisions",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:30,Performance,load,loadings,30,"# sample-specific bias factor loadings",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:28,Testability,log,log,28,"# add contribution to total log bias",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:33,Performance,load,loadings,33,"# sample-specific GC bias factor loadings",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:28,Testability,log,log,28,"# add contribution to total log bias",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:58,Availability,error,error,58,"# originally DensityDist in PyMC3, but this now raises an error about sampling;; # changed in https://github.com/broadinstitute/gatk/pull/8561",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:133,Deployability,continuous,continuous,133,"""""""Draws posterior samples from log copy number emission probabilities for a given variational; approximation to the denoising model continuous RVs.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:32,Testability,log,log,32,"""""""Draws posterior samples from log copy number emission probabilities for a given variational; approximation to the denoising model continuous RVs.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:114,Testability,log,log,114,"""""""For a given variational approximation, returns a compiled pytensor function that draws posterior samples; from log copy number emission probabilities.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:14,Deployability,update,updates,14,"""""""This class updates copy number and interval class posteriors according to the following hierarchical; hidden Markov model:. class_prior_k --> (tau_1) --> (tau_2) --> (tau_3) --> ...; | | |; | | |; v v v; (c_s1) --> (c_s2) --> (c_s3) --> ...; | | |; | | |; v v v; n_s1 n_s2 n_s3. The posterior probability of `tau` and `c_s`, q(tau) and q(c_s) respectively, are obtained via; the following variational ansatz:. \prod_s p(tau, c_s | n) ~ q(tau) \prod_s q(c_s),. where correlations between intervals are preserved in both chains, however, cross-correlations; between `tau` and `c` are neglected, including correlations induced between copy numbers of; different samples. As usual, the posteriors are determined by minimizing the KL divergence w.r.t.; the true posterior resulting in the following iterative scheme:. - Given q(tau), the effective copy number prior for the first interval and the effective copy number; transition probabilities are determined (see _get_update_copy_number_hmm_specs_compiled_function).; Along with the given emission probabilities to sample read counts, q(c_s) is updated using the; forward-backward algorithm for each sample (see _update_copy_number_log_posterior). - Given q(c_s), the emission probability of each copy number class (tau) is determined; (see _get_update_log_class_emission_tk_pytensor_func). The class prior and transition probabilities; are fixed hyperparameters. Therefore, q(tau) can be updated immediately using a single run; of forward-backward algorithm (see _update_class_log_posterior).; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:1095,Deployability,update,updated,1095,"""""""This class updates copy number and interval class posteriors according to the following hierarchical; hidden Markov model:. class_prior_k --> (tau_1) --> (tau_2) --> (tau_3) --> ...; | | |; | | |; v v v; (c_s1) --> (c_s2) --> (c_s3) --> ...; | | |; | | |; v v v; n_s1 n_s2 n_s3. The posterior probability of `tau` and `c_s`, q(tau) and q(c_s) respectively, are obtained via; the following variational ansatz:. \prod_s p(tau, c_s | n) ~ q(tau) \prod_s q(c_s),. where correlations between intervals are preserved in both chains, however, cross-correlations; between `tau` and `c` are neglected, including correlations induced between copy numbers of; different samples. As usual, the posteriors are determined by minimizing the KL divergence w.r.t.; the true posterior resulting in the following iterative scheme:. - Given q(tau), the effective copy number prior for the first interval and the effective copy number; transition probabilities are determined (see _get_update_copy_number_hmm_specs_compiled_function).; Along with the given emission probabilities to sample read counts, q(c_s) is updated using the; forward-backward algorithm for each sample (see _update_copy_number_log_posterior). - Given q(c_s), the emission probability of each copy number class (tau) is determined; (see _get_update_log_class_emission_tk_pytensor_func). The class prior and transition probabilities; are fixed hyperparameters. Therefore, q(tau) can be updated immediately using a single run; of forward-backward algorithm (see _update_class_log_posterior).; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:1439,Deployability,update,updated,1439,"""""""This class updates copy number and interval class posteriors according to the following hierarchical; hidden Markov model:. class_prior_k --> (tau_1) --> (tau_2) --> (tau_3) --> ...; | | |; | | |; v v v; (c_s1) --> (c_s2) --> (c_s3) --> ...; | | |; | | |; v v v; n_s1 n_s2 n_s3. The posterior probability of `tau` and `c_s`, q(tau) and q(c_s) respectively, are obtained via; the following variational ansatz:. \prod_s p(tau, c_s | n) ~ q(tau) \prod_s q(c_s),. where correlations between intervals are preserved in both chains, however, cross-correlations; between `tau` and `c` are neglected, including correlations induced between copy numbers of; different samples. As usual, the posteriors are determined by minimizing the KL divergence w.r.t.; the true posterior resulting in the following iterative scheme:. - Given q(tau), the effective copy number prior for the first interval and the effective copy number; transition probabilities are determined (see _get_update_copy_number_hmm_specs_compiled_function).; Along with the given emission probabilities to sample read counts, q(c_s) is updated using the; forward-backward algorithm for each sample (see _update_copy_number_log_posterior). - Given q(c_s), the emission probability of each copy number class (tau) is determined; (see _get_update_log_class_emission_tk_pytensor_func). The class prior and transition probabilities; are fixed hyperparameters. Therefore, q(tau) can be updated immediately using a single run; of forward-backward algorithm (see _update_class_log_posterior).; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:41,Deployability,update,updates,41,"# compiled function for forward-backward updates of copy number posterior",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:41,Deployability,update,update,41,"# compiled function for forward-backward update of class posterior; # Note:; # if p_active == 0, we have to deal with inf - inf expressions properly.; # setting resolve_nans = True takes care of such ambiguities.",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:24,Deployability,update,update,24,"# compiled function for update of class log emission",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:40,Testability,log,log,40,"# compiled function for update of class log emission",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:36,Deployability,update,update,36,"# compiled function for variational update of copy number HMM specs",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:22,Deployability,update,update,22,"""""""Perform a round of update of q(tau) and q(c). Note:; This function must be called until q(tau) and q(c) converge to a self-consistent solution. Args:; copy_number_update_summary_statistic_reducer: a function that reduces vectors to scalars and; is used to compile a summary of copy number posterior updates across intervals for each sample; class_update_summary_statistic_reducer: a function that reduces vectors to scalars and; is used to compile a summary of interval class posterior updates across intervals. Returns:; copy number update summary (ndarray of size `num_samples`),; copy number Markov chain log likelihoods (ndarray of size `num_samples`),; interval class update summary,; interval class Markov chain log likelihood; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:302,Deployability,update,updates,302,"""""""Perform a round of update of q(tau) and q(c). Note:; This function must be called until q(tau) and q(c) converge to a self-consistent solution. Args:; copy_number_update_summary_statistic_reducer: a function that reduces vectors to scalars and; is used to compile a summary of copy number posterior updates across intervals for each sample; class_update_summary_statistic_reducer: a function that reduces vectors to scalars and; is used to compile a summary of interval class posterior updates across intervals. Returns:; copy number update summary (ndarray of size `num_samples`),; copy number Markov chain log likelihoods (ndarray of size `num_samples`),; interval class update summary,; interval class Markov chain log likelihood; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:489,Deployability,update,updates,489,"""""""Perform a round of update of q(tau) and q(c). Note:; This function must be called until q(tau) and q(c) converge to a self-consistent solution. Args:; copy_number_update_summary_statistic_reducer: a function that reduces vectors to scalars and; is used to compile a summary of copy number posterior updates across intervals for each sample; class_update_summary_statistic_reducer: a function that reduces vectors to scalars and; is used to compile a summary of interval class posterior updates across intervals. Returns:; copy number update summary (ndarray of size `num_samples`),; copy number Markov chain log likelihoods (ndarray of size `num_samples`),; interval class update summary,; interval class Markov chain log likelihood; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:537,Deployability,update,update,537,"""""""Perform a round of update of q(tau) and q(c). Note:; This function must be called until q(tau) and q(c) converge to a self-consistent solution. Args:; copy_number_update_summary_statistic_reducer: a function that reduces vectors to scalars and; is used to compile a summary of copy number posterior updates across intervals for each sample; class_update_summary_statistic_reducer: a function that reduces vectors to scalars and; is used to compile a summary of interval class posterior updates across intervals. Returns:; copy number update summary (ndarray of size `num_samples`),; copy number Markov chain log likelihoods (ndarray of size `num_samples`),; interval class update summary,; interval class Markov chain log likelihood; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:676,Deployability,update,update,676,"""""""Perform a round of update of q(tau) and q(c). Note:; This function must be called until q(tau) and q(c) converge to a self-consistent solution. Args:; copy_number_update_summary_statistic_reducer: a function that reduces vectors to scalars and; is used to compile a summary of copy number posterior updates across intervals for each sample; class_update_summary_statistic_reducer: a function that reduces vectors to scalars and; is used to compile a summary of interval class posterior updates across intervals. Returns:; copy number update summary (ndarray of size `num_samples`),; copy number Markov chain log likelihoods (ndarray of size `num_samples`),; interval class update summary,; interval class Markov chain log likelihood; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:216,Energy Efficiency,reduce,reduces,216,"""""""Perform a round of update of q(tau) and q(c). Note:; This function must be called until q(tau) and q(c) converge to a self-consistent solution. Args:; copy_number_update_summary_statistic_reducer: a function that reduces vectors to scalars and; is used to compile a summary of copy number posterior updates across intervals for each sample; class_update_summary_statistic_reducer: a function that reduces vectors to scalars and; is used to compile a summary of interval class posterior updates across intervals. Returns:; copy number update summary (ndarray of size `num_samples`),; copy number Markov chain log likelihoods (ndarray of size `num_samples`),; interval class update summary,; interval class Markov chain log likelihood; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:400,Energy Efficiency,reduce,reduces,400,"""""""Perform a round of update of q(tau) and q(c). Note:; This function must be called until q(tau) and q(c) converge to a self-consistent solution. Args:; copy_number_update_summary_statistic_reducer: a function that reduces vectors to scalars and; is used to compile a summary of copy number posterior updates across intervals for each sample; class_update_summary_statistic_reducer: a function that reduces vectors to scalars and; is used to compile a summary of interval class posterior updates across intervals. Returns:; copy number update summary (ndarray of size `num_samples`),; copy number Markov chain log likelihoods (ndarray of size `num_samples`),; interval class update summary,; interval class Markov chain log likelihood; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:611,Testability,log,log,611,"""""""Perform a round of update of q(tau) and q(c). Note:; This function must be called until q(tau) and q(c) converge to a self-consistent solution. Args:; copy_number_update_summary_statistic_reducer: a function that reduces vectors to scalars and; is used to compile a summary of copy number posterior updates across intervals for each sample; class_update_summary_statistic_reducer: a function that reduces vectors to scalars and; is used to compile a summary of interval class posterior updates across intervals. Returns:; copy number update summary (ndarray of size `num_samples`),; copy number Markov chain log likelihoods (ndarray of size `num_samples`),; interval class update summary,; interval class Markov chain log likelihood; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:721,Testability,log,log,721,"""""""Perform a round of update of q(tau) and q(c). Note:; This function must be called until q(tau) and q(c) converge to a self-consistent solution. Args:; copy_number_update_summary_statistic_reducer: a function that reduces vectors to scalars and; is used to compile a summary of copy number posterior updates across intervals for each sample; class_update_summary_statistic_reducer: a function that reduces vectors to scalars and; is used to compile a summary of interval class posterior updates across intervals. Returns:; copy number update summary (ndarray of size `num_samples`),; copy number Markov chain log likelihoods (ndarray of size `num_samples`),; interval class update summary,; interval class Markov chain log likelihood; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:24,Deployability,update,update,24,"# copy number posterior update",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:18,Deployability,update,update,18,"# class posterior update",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:36,Testability,log,log,36,"# step 1. calculate copy-number HMM log prior and log transition matrix",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:50,Testability,log,log,50,"# step 1. calculate copy-number HMM log prior and log transition matrix",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:35,Deployability,update,update,35,"# step 2. run forward-backward and update copy-number posteriors",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:2,Deployability,update,update,2,"# update log posterior in the workspace",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:9,Testability,log,log,9,"# update log posterior in the workspace",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:2,Deployability,update,update,2,"# update summary stats",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:876,Modifiability,variab,variable,876,"""""""Returns a compiled function that calculates the interval-class-averaged and probability-sum-normalized; log copy number transition matrix and log copy number prior for the first interval. Returned pytensor function inputs:; pi_jkc: a 3d tensor containing copy-number priors for each contig (j) and each class (k); cnv_stay_prob_t: probability of staying on the same copy-number state at interval `t`; log_q_tau_tk: log probability of copy-number classes at interval `t`; t_to_j_map: a mapping from interval indices (t) to contig indices (j); it is used to unpack; `pi_jkc` to `pi_tkc` (see below). Returned pytensor function outputs:; log_prior_c_first_interval: log probability of copy-number states for the first interval; log_trans_tab: log transition probability matrix from interval `t` to interval `t+1`. Note:; In the following, we use ""a"" and ""b"" subscripts in the variable names to refer to the departure; and destination states, respectively. Like before, ""t"" and ""k"" denote interval and class, and ""j""; refers to contig index.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:107,Testability,log,log,107,"""""""Returns a compiled function that calculates the interval-class-averaged and probability-sum-normalized; log copy number transition matrix and log copy number prior for the first interval. Returned pytensor function inputs:; pi_jkc: a 3d tensor containing copy-number priors for each contig (j) and each class (k); cnv_stay_prob_t: probability of staying on the same copy-number state at interval `t`; log_q_tau_tk: log probability of copy-number classes at interval `t`; t_to_j_map: a mapping from interval indices (t) to contig indices (j); it is used to unpack; `pi_jkc` to `pi_tkc` (see below). Returned pytensor function outputs:; log_prior_c_first_interval: log probability of copy-number states for the first interval; log_trans_tab: log transition probability matrix from interval `t` to interval `t+1`. Note:; In the following, we use ""a"" and ""b"" subscripts in the variable names to refer to the departure; and destination states, respectively. Like before, ""t"" and ""k"" denote interval and class, and ""j""; refers to contig index.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:145,Testability,log,log,145,"""""""Returns a compiled function that calculates the interval-class-averaged and probability-sum-normalized; log copy number transition matrix and log copy number prior for the first interval. Returned pytensor function inputs:; pi_jkc: a 3d tensor containing copy-number priors for each contig (j) and each class (k); cnv_stay_prob_t: probability of staying on the same copy-number state at interval `t`; log_q_tau_tk: log probability of copy-number classes at interval `t`; t_to_j_map: a mapping from interval indices (t) to contig indices (j); it is used to unpack; `pi_jkc` to `pi_tkc` (see below). Returned pytensor function outputs:; log_prior_c_first_interval: log probability of copy-number states for the first interval; log_trans_tab: log transition probability matrix from interval `t` to interval `t+1`. Note:; In the following, we use ""a"" and ""b"" subscripts in the variable names to refer to the departure; and destination states, respectively. Like before, ""t"" and ""k"" denote interval and class, and ""j""; refers to contig index.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:418,Testability,log,log,418,"""""""Returns a compiled function that calculates the interval-class-averaged and probability-sum-normalized; log copy number transition matrix and log copy number prior for the first interval. Returned pytensor function inputs:; pi_jkc: a 3d tensor containing copy-number priors for each contig (j) and each class (k); cnv_stay_prob_t: probability of staying on the same copy-number state at interval `t`; log_q_tau_tk: log probability of copy-number classes at interval `t`; t_to_j_map: a mapping from interval indices (t) to contig indices (j); it is used to unpack; `pi_jkc` to `pi_tkc` (see below). Returned pytensor function outputs:; log_prior_c_first_interval: log probability of copy-number states for the first interval; log_trans_tab: log transition probability matrix from interval `t` to interval `t+1`. Note:; In the following, we use ""a"" and ""b"" subscripts in the variable names to refer to the departure; and destination states, respectively. Like before, ""t"" and ""k"" denote interval and class, and ""j""; refers to contig index.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:666,Testability,log,log,666,"""""""Returns a compiled function that calculates the interval-class-averaged and probability-sum-normalized; log copy number transition matrix and log copy number prior for the first interval. Returned pytensor function inputs:; pi_jkc: a 3d tensor containing copy-number priors for each contig (j) and each class (k); cnv_stay_prob_t: probability of staying on the same copy-number state at interval `t`; log_q_tau_tk: log probability of copy-number classes at interval `t`; t_to_j_map: a mapping from interval indices (t) to contig indices (j); it is used to unpack; `pi_jkc` to `pi_tkc` (see below). Returned pytensor function outputs:; log_prior_c_first_interval: log probability of copy-number states for the first interval; log_trans_tab: log transition probability matrix from interval `t` to interval `t+1`. Note:; In the following, we use ""a"" and ""b"" subscripts in the variable names to refer to the departure; and destination states, respectively. Like before, ""t"" and ""k"" denote interval and class, and ""j""; refers to contig index.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:743,Testability,log,log,743,"""""""Returns a compiled function that calculates the interval-class-averaged and probability-sum-normalized; log copy number transition matrix and log copy number prior for the first interval. Returned pytensor function inputs:; pi_jkc: a 3d tensor containing copy-number priors for each contig (j) and each class (k); cnv_stay_prob_t: probability of staying on the same copy-number state at interval `t`; log_q_tau_tk: log probability of copy-number classes at interval `t`; t_to_j_map: a mapping from interval indices (t) to contig indices (j); it is used to unpack; `pi_jkc` to `pi_tkc` (see below). Returned pytensor function outputs:; log_prior_c_first_interval: log probability of copy-number states for the first interval; log_trans_tab: log transition probability matrix from interval `t` to interval `t+1`. Note:; In the following, we use ""a"" and ""b"" subscripts in the variable names to refer to the departure; and destination states, respectively. Like before, ""t"" and ""k"" denote interval and class, and ""j""; refers to contig index.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:2,Testability,log,log,2,"# log prior probability for the first interval",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:2,Testability,log,log,2,"# log transition matrix",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:23,Testability,log,log,23,"# calculate normalized log transition matrix; # todo use logaddexp",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:57,Testability,log,logaddexp,57,"# calculate normalized log transition matrix; # todo use logaddexp",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:105,Deployability,update,updates,105,"""""""Returns a compiled function that calculates the log interval class emission probability and; directly updates `log_class_emission_tk` in the workspace. Note:; In the following,. xi_tab ~ posterior copy number probability of two subsequent intervals. We ignore correlations, i.e. we assume:. xi_st(a, b) \equiv q_c(c_{s,t} = a, c_{s,t+1} = b); \approx q_c(c_{s,t} = a) q_c(c_{s,t+1} = b). If needed, xi can be calculated exactly from the forward-backward tables.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:51,Testability,log,log,51,"""""""Returns a compiled function that calculates the log interval class emission probability and; directly updates `log_class_emission_tk` in the workspace. Note:; In the following,. xi_tab ~ posterior copy number probability of two subsequent intervals. We ignore correlations, i.e. we assume:. xi_st(a, b) \equiv q_c(c_{s,t} = a, c_{s,t+1} = b); \approx q_c(c_{s,t} = a) q_c(c_{s,t+1} = b). If needed, xi can be calculated exactly from the forward-backward tables.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:2,Testability,log,log,2,"# log copy number transition matrix for each class",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:12,Testability,log,log,12,"# calculate log class emission by reducing over samples; see below",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:109,Safety,avoid,avoid,109,"# this converts TensorType from row to matrix in the edge case when number of intervals is equal to 2; # (to avoid type mismatch later on)",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:272,Deployability,update,updated,272,"""""""Adds the contribution of a given sample to the log class emission (symbolically). Args:; pi_jkc: copy number prior inventory for the sample; q_c_tc: copy number posteriors for the sample; cum_sum_tk: current cumulative sum of log class emission. Returns:; Symbolically updated cumulative sum of log class emission; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:50,Testability,log,log,50,"""""""Adds the contribution of a given sample to the log class emission (symbolically). Args:; pi_jkc: copy number prior inventory for the sample; q_c_tc: copy number posteriors for the sample; cum_sum_tk: current cumulative sum of log class emission. Returns:; Symbolically updated cumulative sum of log class emission; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:229,Testability,log,log,229,"""""""Adds the contribution of a given sample to the log class emission (symbolically). Args:; pi_jkc: copy number prior inventory for the sample; q_c_tc: copy number posteriors for the sample; cum_sum_tk: current cumulative sum of log class emission. Returns:; Symbolically updated cumulative sum of log class emission; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:298,Testability,log,log,298,"""""""Adds the contribution of a given sample to the log class emission (symbolically). Args:; pi_jkc: copy number prior inventory for the sample; q_c_tc: copy number posteriors for the sample; cum_sum_tk: current cumulative sum of log class emission. Returns:; Symbolically updated cumulative sum of log class emission; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py:11,Testability,log,logaddexp,11,"# todo use logaddexp",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py:351,Availability,error,error,351,"""""""Initializer. Args:; contig_ploidy_prior_map: map from contigs to prior probabilities of each ploidy state; mean_bias_sd: standard deviation of mean contig-level coverage bias; psi_j_scale: typical scale of contig-specific unexplained variance; psi_s_scale: typical scale of sample-specific unexplained variance; mapping_error_rate: typical mapping error probability; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py:154,Security,expose,expose,154,"""""""Exposes arguments of `__init__` to a given instance of `ArgumentParser`. Args:; args: an instance of `ArgumentParser`; hide: a set of arguments not to expose. Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py:65,Deployability,continuous,continuous,65,"""""""Workspace for storing data structures that are shared between continuous and discrete sectors; of the germline contig ploidy model.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py:9,Testability,log,log,9,"# ploidy log posteriors (initial value is immaterial)",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py:9,Testability,log,log,9,"# ploidy log emission (initial value is immaterial)",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py:12,Availability,mask,mask,12,"# exclusion mask; mask(j, k) = 1 - delta(j, k)",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py:18,Availability,mask,mask,18,"# exclusion mask; mask(j, k) = 1 - delta(j, k)",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py:52,Deployability,continuous,continuous,52,"""""""Declaration of the germline contig ploidy model (continuous variables only; posterior of discrete; variables are assumed to be known).""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py:63,Modifiability,variab,variables,63,"""""""Declaration of the germline contig ploidy model (continuous variables only; posterior of discrete; variables are assumed to be known).""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py:102,Modifiability,variab,variables,102,"""""""Declaration of the germline contig ploidy model (continuous variables only; posterior of discrete; variables are assumed to be known).""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py:45,Availability,error,error,45,"# originally DensityDist, but this raised an error about random;; # changed in https://github.com/broadinstitute/gatk/pull/8561",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py:6,Testability,log,log,6,"# for log ploidy emission sampling",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py:43,Testability,log,log,43,"""""""Draws posterior samples from the ploidy log emission probability for a given variational; approximation to the ploidy model posterior.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py:118,Testability,log,log,118,"""""""For a given variational approximation, returns a compiled pytensor function that draws posterior samples; from the log ploidy emission.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py:12,Deployability,update,update,12,"""""""Bayesian update of germline contig ploidy log posteriors.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py:45,Testability,log,log,45,"""""""Bayesian update of germline contig ploidy log posteriors.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_ploidy.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py:575,Deployability,update,update,575,"""""""Initializes the forward-backward algorithm by compiling a pytensor function according to the; boolean flags. Args:; log_posterior_probs_output_tc: if not None, the new log posterior will be written to this shared tensor;; otherwise, it will be returned as an ndarray; resolve_nans: if True, expression such as inf - inf resulting in NaNs will be properly handled; do_thermalization: if True, performs thermalization of HMM parameters; do_admixing: if True, perform admixing of old and new hidden-state posterior probabilities; include_update_size_output: if True, include update size in the returned values; include_alpha_beta_output: include forward and backward tables in the return values; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py:395,Performance,perform,performs,395,"""""""Initializes the forward-backward algorithm by compiling a pytensor function according to the; boolean flags. Args:; log_posterior_probs_output_tc: if not None, the new log posterior will be written to this shared tensor;; otherwise, it will be returned as an ndarray; resolve_nans: if True, expression such as inf - inf resulting in NaNs will be properly handled; do_thermalization: if True, performs thermalization of HMM parameters; do_admixing: if True, perform admixing of old and new hidden-state posterior probabilities; include_update_size_output: if True, include update size in the returned values; include_alpha_beta_output: include forward and backward tables in the return values; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py:460,Performance,perform,perform,460,"""""""Initializes the forward-backward algorithm by compiling a pytensor function according to the; boolean flags. Args:; log_posterior_probs_output_tc: if not None, the new log posterior will be written to this shared tensor;; otherwise, it will be returned as an ndarray; resolve_nans: if True, expression such as inf - inf resulting in NaNs will be properly handled; do_thermalization: if True, performs thermalization of HMM parameters; do_admixing: if True, perform admixing of old and new hidden-state posterior probabilities; include_update_size_output: if True, include update size in the returned values; include_alpha_beta_output: include forward and backward tables in the return values; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py:171,Testability,log,log,171,"""""""Initializes the forward-backward algorithm by compiling a pytensor function according to the; boolean flags. Args:; log_posterior_probs_output_tc: if not None, the new log posterior will be written to this shared tensor;; otherwise, it will be returned as an ndarray; resolve_nans: if True, expression such as inf - inf resulting in NaNs will be properly handled; do_thermalization: if True, performs thermalization of HMM parameters; do_admixing: if True, perform admixing of old and new hidden-state posterior probabilities; include_update_size_output: if True, include update size in the returned values; include_alpha_beta_output: include forward and backward tables in the return values; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py:419,Testability,log,log,419,"""""""Runs the forward-backward algorithm. Notes:; The inputs args must be compatible with the compiled pytensor function according to the; class initializer flags. Args:; log_prior_c: prior probability vector for the first node; log_trans_tcc: transition probability matrices for each directed vertex; log_emission_tc: emission probability vector for each node; prev_log_posterior_tc: (optional) previous estimate of the log posterior; (used if `self.do_admixing` is True); admixing_rate: (optional) a float in range [0, 1] denoting the amount of the new posterior probabilities; to admix with the old posterior probabilities (higher = more of the new posterior); temperature: (optional) temperature (used if `self.do_thermalization` is True). Returns:; an instance of `ForwardBackwardResult`; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py:987,Testability,log,log,987,"""""""Returns a compiled pytensor function that computes the posterior probabilities of hidden states using; the forward-backward algorithm. Note:; The input arguments and the output of the compiled pytensor function is determined by the initializer flags; as follows:. There are 3 basic input arguments:. * log_prior_c (float vector),; * log_trans_tcc (float tensor3),; * log_emission_tc (float matrix). The rest of the input arguments must be concatenated to the basic arguments, in order, and as follows:. If either `self.do_admixing == True` or `self.include_update_size_output == True`, then concatenate:; * prev_log_posterior_tc (float matrix). If `self.do_admixing` is True, then concatenate:; * admixing_rate (float scalar). if `self.do_thermalization` is True, then concatenate:; * temperature (float scalar). The outputs list is built, in order, and as follows:. * If `log_posterior_probs_output_tc` (a shared tensor) is given to the class initializer, the computed; hidden state log posterior probabilities will be directly written to `log_posterior_probs_output_tc`.; Otherwise, it will be returned as the first entry of the outputs list. * The next entry is `log_data_likelihood` (float scalar). * If `self.include_update_size_output == True`, the next entry is `update_norm_t` (float vector). * If `self.include_alpha_beta_output == True`, the next two entries will be `alpha_tc` (float vector); and `beta_tc` (float vector). Returns:; A compiled pytensor function; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py:48,Deployability,update,updates,48,"# in theory, they are all the same; # build the updates list",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py:56,Testability,log,log,56,"""""""Generates symbolic tensors representing hidden-state log posterior, log data likelihood,; forward table (alpha), and backward table (beta).; ; Returns:; log_posterior_probs, log_data_likelihood; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py:71,Testability,log,log,71,"""""""Generates symbolic tensors representing hidden-state log posterior, log data likelihood,; forward table (alpha), and backward table (beta).; ; Returns:; log_posterior_probs, log_data_likelihood; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py:154,Testability,log,log,154,"""""""Calculates the next entry on the forward table, alpha_{t}, from alpha_{t-1}. Args:; c_log_trans_ab: a 2d tensor with rows and columns corresponding to log transition probability; from the previous state at position t-1 and to the next state at position t, respectively; c_log_emission_b: a 1d tensor representing the emission probability to each state at position t; p_alpha_a: a 1d tensor representing alpha_{t-1}. Returns:; symbolic 1d tensor of alpha_{t}; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py:157,Testability,log,log,157,"""""""Calculates the previous entry on the backward table, beta_{t-1}, from beta_{t}. Args:; n_log_trans_ab: a 2d tensor with rows and columns corresponding to log transition probability; from the previous state at position t-1 and to the next state at position t, respectively; n_log_emission_b: a 1d tensor representing the emission probability to each state at position t; n_beta_b: a 1d tensor representing beta_{t}. Returns:; symbolic 1d tensor of beta_{t-1}; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py:23,Testability,log,log,23,"# calculate normalized log posterior",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py:167,Testability,log,log,167,"""""""Generates a symbolic 1d integer tensor representing the most-likely chain of hidden states; (Viterbi algorithm). Notes:; In the following, `omega_tc` refers to the log data likelihood at position `t` for a max sum-product; path ending with hidden state `c`. Also, `psi_tc` refers to the max sum-product backtracking; table, i.e. `psi_tc` represents the best hidden state at position t-1 for a max sum-product path; ending with hidden state `c` at position t. Returns:; symbolic 1d integer tensor representing the most-likely chain of hidden states; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py:71,Testability,log,log,71,"""""""Extends the max sum-product path by one position and calculates the log data likelihood of such paths; for each final hidden state (`n_omega_b`), as well as the most-likely terminal state of the path at the; previous position, assuming that it lands on state `b` after extension (`psi_b`). Args:; p_log_trans_ab: log transition matrix from `a` to `b`; c_log_emission_b: log emission probabilities at the current position for state `b`; p_omega_a: previous log data likelihood of the max sum-product path ending with hidden state `a`. Returns:; next omega, next psi; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py:316,Testability,log,log,316,"""""""Extends the max sum-product path by one position and calculates the log data likelihood of such paths; for each final hidden state (`n_omega_b`), as well as the most-likely terminal state of the path at the; previous position, assuming that it lands on state `b` after extension (`psi_b`). Args:; p_log_trans_ab: log transition matrix from `a` to `b`; c_log_emission_b: log emission probabilities at the current position for state `b`; p_omega_a: previous log data likelihood of the max sum-product path ending with hidden state `a`. Returns:; next omega, next psi; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py:373,Testability,log,log,373,"""""""Extends the max sum-product path by one position and calculates the log data likelihood of such paths; for each final hidden state (`n_omega_b`), as well as the most-likely terminal state of the path at the; previous position, assuming that it lands on state `b` after extension (`psi_b`). Args:; p_log_trans_ab: log transition matrix from `a` to `b`; c_log_emission_b: log emission probabilities at the current position for state `b`; p_omega_a: previous log data likelihood of the max sum-product path ending with hidden state `a`. Returns:; next omega, next psi; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py:459,Testability,log,log,459,"""""""Extends the max sum-product path by one position and calculates the log data likelihood of such paths; for each final hidden state (`n_omega_b`), as well as the most-likely terminal state of the path at the; previous position, assuming that it lands on state `b` after extension (`psi_b`). Args:; p_log_trans_ab: log transition matrix from `a` to `b`; c_log_emission_b: log emission probabilities at the current position for state `b`; p_omega_a: previous log data likelihood of the max sum-product path ending with hidden state `a`. Returns:; next omega, next psi; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py:2,Testability,log,log,2,"# log data likelihood for each hidden state at the first position",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py:16,Testability,log,log,16,"# calculate the log data likelihood of the partial max sum-product paths (omega); # and the backtracking table (psi)",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/pytensor_hmm.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:200,Testability,log,log,200,"""""""Calculates quality metrics for hidden state segments for a given HMM. Note:; The initializer requires the emission and transition probabilities, as well as the forward; and backward tables and the log posterior probability.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:40,Testability,log,log,40,"""""""Initializer. Args:; log_emission_tc: log copy-number emission matrix; log_trans_tcc: log copy-number transition tensor; alpha_tc: forward log likelihood matrix (from forward-backward algorithm); beta_tc: backward log likelihood matrix (from forward-backward algorithm); log_posterior_prob_tc: log copy-number posterior matrix (from forward-backward algorithm); log_data_likelihood: log data likelihood (from forward-backward algorithm); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:88,Testability,log,log,88,"""""""Initializer. Args:; log_emission_tc: log copy-number emission matrix; log_trans_tcc: log copy-number transition tensor; alpha_tc: forward log likelihood matrix (from forward-backward algorithm); beta_tc: backward log likelihood matrix (from forward-backward algorithm); log_posterior_prob_tc: log copy-number posterior matrix (from forward-backward algorithm); log_data_likelihood: log data likelihood (from forward-backward algorithm); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:141,Testability,log,log,141,"""""""Initializer. Args:; log_emission_tc: log copy-number emission matrix; log_trans_tcc: log copy-number transition tensor; alpha_tc: forward log likelihood matrix (from forward-backward algorithm); beta_tc: backward log likelihood matrix (from forward-backward algorithm); log_posterior_prob_tc: log copy-number posterior matrix (from forward-backward algorithm); log_data_likelihood: log data likelihood (from forward-backward algorithm); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:216,Testability,log,log,216,"""""""Initializer. Args:; log_emission_tc: log copy-number emission matrix; log_trans_tcc: log copy-number transition tensor; alpha_tc: forward log likelihood matrix (from forward-backward algorithm); beta_tc: backward log likelihood matrix (from forward-backward algorithm); log_posterior_prob_tc: log copy-number posterior matrix (from forward-backward algorithm); log_data_likelihood: log data likelihood (from forward-backward algorithm); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:296,Testability,log,log,296,"""""""Initializer. Args:; log_emission_tc: log copy-number emission matrix; log_trans_tcc: log copy-number transition tensor; alpha_tc: forward log likelihood matrix (from forward-backward algorithm); beta_tc: backward log likelihood matrix (from forward-backward algorithm); log_posterior_prob_tc: log copy-number posterior matrix (from forward-backward algorithm); log_data_likelihood: log data likelihood (from forward-backward algorithm); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:385,Testability,log,log,385,"""""""Initializer. Args:; log_emission_tc: log copy-number emission matrix; log_trans_tcc: log copy-number transition tensor; alpha_tc: forward log likelihood matrix (from forward-backward algorithm); beta_tc: backward log likelihood matrix (from forward-backward algorithm); log_posterior_prob_tc: log copy-number posterior matrix (from forward-backward algorithm); log_data_likelihood: log data likelihood (from forward-backward algorithm); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:1108,Availability,error,error,1108,"""""""Returns a pytensor function that calculates the log posterior probability of hidden state paths composed; from a subset X of all hidden states S. More explicitly, this function calculates the logp of all paths constrained to the hidden-state set; X for t_0 <= t <= t_N but unconstrained for before (t < t_0) and after (t > t_N):. unconstrained constrained unconstrained; t < t_0 | t_0 t_1 ... t_N | t > t_N; c in S | c in X c in X c in X | c in S. The inputs for the returned pytensor function are as follows:. alpha_first_c: forward log likelihood (alpha) for t = t_0 and c in X; beta_last_c: backward log likelihood (beta) for t = t_N and c in X; log_emission_tc: log emission probabilities for t \in [t_0, ..., t_N] and c in X; log_trans_tcc: log transition probabilities from `t` to `t+1` for t in [t_0, ..., t_N]; and departure and destination states in X; log_data_likelihood: log data likelihood of the unconstrained problem. The output is a non-positive scalar value that signifies the desired probability in log space. Examples:. If X = S (all hidden states), we expect logp = 0 (up to round-off error). if X = {a single hidden state}, then we expect the logp of a single path that takes on the same; hidden-state for all positions [t_0, ..., t_N]. In general, if X is a proper subset of S, we expect logp <= 0 (with logp = 0 iff the removed states; are strictly forbidden by the prior and/or the transition matrix). Returns:; a pytensor function; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:51,Testability,log,log,51,"""""""Returns a pytensor function that calculates the log posterior probability of hidden state paths composed; from a subset X of all hidden states S. More explicitly, this function calculates the logp of all paths constrained to the hidden-state set; X for t_0 <= t <= t_N but unconstrained for before (t < t_0) and after (t > t_N):. unconstrained constrained unconstrained; t < t_0 | t_0 t_1 ... t_N | t > t_N; c in S | c in X c in X c in X | c in S. The inputs for the returned pytensor function are as follows:. alpha_first_c: forward log likelihood (alpha) for t = t_0 and c in X; beta_last_c: backward log likelihood (beta) for t = t_N and c in X; log_emission_tc: log emission probabilities for t \in [t_0, ..., t_N] and c in X; log_trans_tcc: log transition probabilities from `t` to `t+1` for t in [t_0, ..., t_N]; and departure and destination states in X; log_data_likelihood: log data likelihood of the unconstrained problem. The output is a non-positive scalar value that signifies the desired probability in log space. Examples:. If X = S (all hidden states), we expect logp = 0 (up to round-off error). if X = {a single hidden state}, then we expect the logp of a single path that takes on the same; hidden-state for all positions [t_0, ..., t_N]. In general, if X is a proper subset of S, we expect logp <= 0 (with logp = 0 iff the removed states; are strictly forbidden by the prior and/or the transition matrix). Returns:; a pytensor function; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:195,Testability,log,logp,195,"""""""Returns a pytensor function that calculates the log posterior probability of hidden state paths composed; from a subset X of all hidden states S. More explicitly, this function calculates the logp of all paths constrained to the hidden-state set; X for t_0 <= t <= t_N but unconstrained for before (t < t_0) and after (t > t_N):. unconstrained constrained unconstrained; t < t_0 | t_0 t_1 ... t_N | t > t_N; c in S | c in X c in X c in X | c in S. The inputs for the returned pytensor function are as follows:. alpha_first_c: forward log likelihood (alpha) for t = t_0 and c in X; beta_last_c: backward log likelihood (beta) for t = t_N and c in X; log_emission_tc: log emission probabilities for t \in [t_0, ..., t_N] and c in X; log_trans_tcc: log transition probabilities from `t` to `t+1` for t in [t_0, ..., t_N]; and departure and destination states in X; log_data_likelihood: log data likelihood of the unconstrained problem. The output is a non-positive scalar value that signifies the desired probability in log space. Examples:. If X = S (all hidden states), we expect logp = 0 (up to round-off error). if X = {a single hidden state}, then we expect the logp of a single path that takes on the same; hidden-state for all positions [t_0, ..., t_N]. In general, if X is a proper subset of S, we expect logp <= 0 (with logp = 0 iff the removed states; are strictly forbidden by the prior and/or the transition matrix). Returns:; a pytensor function; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:537,Testability,log,log,537,"""""""Returns a pytensor function that calculates the log posterior probability of hidden state paths composed; from a subset X of all hidden states S. More explicitly, this function calculates the logp of all paths constrained to the hidden-state set; X for t_0 <= t <= t_N but unconstrained for before (t < t_0) and after (t > t_N):. unconstrained constrained unconstrained; t < t_0 | t_0 t_1 ... t_N | t > t_N; c in S | c in X c in X c in X | c in S. The inputs for the returned pytensor function are as follows:. alpha_first_c: forward log likelihood (alpha) for t = t_0 and c in X; beta_last_c: backward log likelihood (beta) for t = t_N and c in X; log_emission_tc: log emission probabilities for t \in [t_0, ..., t_N] and c in X; log_trans_tcc: log transition probabilities from `t` to `t+1` for t in [t_0, ..., t_N]; and departure and destination states in X; log_data_likelihood: log data likelihood of the unconstrained problem. The output is a non-positive scalar value that signifies the desired probability in log space. Examples:. If X = S (all hidden states), we expect logp = 0 (up to round-off error). if X = {a single hidden state}, then we expect the logp of a single path that takes on the same; hidden-state for all positions [t_0, ..., t_N]. In general, if X is a proper subset of S, we expect logp <= 0 (with logp = 0 iff the removed states; are strictly forbidden by the prior and/or the transition matrix). Returns:; a pytensor function; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:606,Testability,log,log,606,"""""""Returns a pytensor function that calculates the log posterior probability of hidden state paths composed; from a subset X of all hidden states S. More explicitly, this function calculates the logp of all paths constrained to the hidden-state set; X for t_0 <= t <= t_N but unconstrained for before (t < t_0) and after (t > t_N):. unconstrained constrained unconstrained; t < t_0 | t_0 t_1 ... t_N | t > t_N; c in S | c in X c in X c in X | c in S. The inputs for the returned pytensor function are as follows:. alpha_first_c: forward log likelihood (alpha) for t = t_0 and c in X; beta_last_c: backward log likelihood (beta) for t = t_N and c in X; log_emission_tc: log emission probabilities for t \in [t_0, ..., t_N] and c in X; log_trans_tcc: log transition probabilities from `t` to `t+1` for t in [t_0, ..., t_N]; and departure and destination states in X; log_data_likelihood: log data likelihood of the unconstrained problem. The output is a non-positive scalar value that signifies the desired probability in log space. Examples:. If X = S (all hidden states), we expect logp = 0 (up to round-off error). if X = {a single hidden state}, then we expect the logp of a single path that takes on the same; hidden-state for all positions [t_0, ..., t_N]. In general, if X is a proper subset of S, we expect logp <= 0 (with logp = 0 iff the removed states; are strictly forbidden by the prior and/or the transition matrix). Returns:; a pytensor function; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:669,Testability,log,log,669,"""""""Returns a pytensor function that calculates the log posterior probability of hidden state paths composed; from a subset X of all hidden states S. More explicitly, this function calculates the logp of all paths constrained to the hidden-state set; X for t_0 <= t <= t_N but unconstrained for before (t < t_0) and after (t > t_N):. unconstrained constrained unconstrained; t < t_0 | t_0 t_1 ... t_N | t > t_N; c in S | c in X c in X c in X | c in S. The inputs for the returned pytensor function are as follows:. alpha_first_c: forward log likelihood (alpha) for t = t_0 and c in X; beta_last_c: backward log likelihood (beta) for t = t_N and c in X; log_emission_tc: log emission probabilities for t \in [t_0, ..., t_N] and c in X; log_trans_tcc: log transition probabilities from `t` to `t+1` for t in [t_0, ..., t_N]; and departure and destination states in X; log_data_likelihood: log data likelihood of the unconstrained problem. The output is a non-positive scalar value that signifies the desired probability in log space. Examples:. If X = S (all hidden states), we expect logp = 0 (up to round-off error). if X = {a single hidden state}, then we expect the logp of a single path that takes on the same; hidden-state for all positions [t_0, ..., t_N]. In general, if X is a proper subset of S, we expect logp <= 0 (with logp = 0 iff the removed states; are strictly forbidden by the prior and/or the transition matrix). Returns:; a pytensor function; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:749,Testability,log,log,749,"""""""Returns a pytensor function that calculates the log posterior probability of hidden state paths composed; from a subset X of all hidden states S. More explicitly, this function calculates the logp of all paths constrained to the hidden-state set; X for t_0 <= t <= t_N but unconstrained for before (t < t_0) and after (t > t_N):. unconstrained constrained unconstrained; t < t_0 | t_0 t_1 ... t_N | t > t_N; c in S | c in X c in X c in X | c in S. The inputs for the returned pytensor function are as follows:. alpha_first_c: forward log likelihood (alpha) for t = t_0 and c in X; beta_last_c: backward log likelihood (beta) for t = t_N and c in X; log_emission_tc: log emission probabilities for t \in [t_0, ..., t_N] and c in X; log_trans_tcc: log transition probabilities from `t` to `t+1` for t in [t_0, ..., t_N]; and departure and destination states in X; log_data_likelihood: log data likelihood of the unconstrained problem. The output is a non-positive scalar value that signifies the desired probability in log space. Examples:. If X = S (all hidden states), we expect logp = 0 (up to round-off error). if X = {a single hidden state}, then we expect the logp of a single path that takes on the same; hidden-state for all positions [t_0, ..., t_N]. In general, if X is a proper subset of S, we expect logp <= 0 (with logp = 0 iff the removed states; are strictly forbidden by the prior and/or the transition matrix). Returns:; a pytensor function; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:886,Testability,log,log,886,"""""""Returns a pytensor function that calculates the log posterior probability of hidden state paths composed; from a subset X of all hidden states S. More explicitly, this function calculates the logp of all paths constrained to the hidden-state set; X for t_0 <= t <= t_N but unconstrained for before (t < t_0) and after (t > t_N):. unconstrained constrained unconstrained; t < t_0 | t_0 t_1 ... t_N | t > t_N; c in S | c in X c in X c in X | c in S. The inputs for the returned pytensor function are as follows:. alpha_first_c: forward log likelihood (alpha) for t = t_0 and c in X; beta_last_c: backward log likelihood (beta) for t = t_N and c in X; log_emission_tc: log emission probabilities for t \in [t_0, ..., t_N] and c in X; log_trans_tcc: log transition probabilities from `t` to `t+1` for t in [t_0, ..., t_N]; and departure and destination states in X; log_data_likelihood: log data likelihood of the unconstrained problem. The output is a non-positive scalar value that signifies the desired probability in log space. Examples:. If X = S (all hidden states), we expect logp = 0 (up to round-off error). if X = {a single hidden state}, then we expect the logp of a single path that takes on the same; hidden-state for all positions [t_0, ..., t_N]. In general, if X is a proper subset of S, we expect logp <= 0 (with logp = 0 iff the removed states; are strictly forbidden by the prior and/or the transition matrix). Returns:; a pytensor function; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:1020,Testability,log,log,1020,"""""""Returns a pytensor function that calculates the log posterior probability of hidden state paths composed; from a subset X of all hidden states S. More explicitly, this function calculates the logp of all paths constrained to the hidden-state set; X for t_0 <= t <= t_N but unconstrained for before (t < t_0) and after (t > t_N):. unconstrained constrained unconstrained; t < t_0 | t_0 t_1 ... t_N | t > t_N; c in S | c in X c in X c in X | c in S. The inputs for the returned pytensor function are as follows:. alpha_first_c: forward log likelihood (alpha) for t = t_0 and c in X; beta_last_c: backward log likelihood (beta) for t = t_N and c in X; log_emission_tc: log emission probabilities for t \in [t_0, ..., t_N] and c in X; log_trans_tcc: log transition probabilities from `t` to `t+1` for t in [t_0, ..., t_N]; and departure and destination states in X; log_data_likelihood: log data likelihood of the unconstrained problem. The output is a non-positive scalar value that signifies the desired probability in log space. Examples:. If X = S (all hidden states), we expect logp = 0 (up to round-off error). if X = {a single hidden state}, then we expect the logp of a single path that takes on the same; hidden-state for all positions [t_0, ..., t_N]. In general, if X is a proper subset of S, we expect logp <= 0 (with logp = 0 iff the removed states; are strictly forbidden by the prior and/or the transition matrix). Returns:; a pytensor function; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:1082,Testability,log,logp,1082,"""""""Returns a pytensor function that calculates the log posterior probability of hidden state paths composed; from a subset X of all hidden states S. More explicitly, this function calculates the logp of all paths constrained to the hidden-state set; X for t_0 <= t <= t_N but unconstrained for before (t < t_0) and after (t > t_N):. unconstrained constrained unconstrained; t < t_0 | t_0 t_1 ... t_N | t > t_N; c in S | c in X c in X c in X | c in S. The inputs for the returned pytensor function are as follows:. alpha_first_c: forward log likelihood (alpha) for t = t_0 and c in X; beta_last_c: backward log likelihood (beta) for t = t_N and c in X; log_emission_tc: log emission probabilities for t \in [t_0, ..., t_N] and c in X; log_trans_tcc: log transition probabilities from `t` to `t+1` for t in [t_0, ..., t_N]; and departure and destination states in X; log_data_likelihood: log data likelihood of the unconstrained problem. The output is a non-positive scalar value that signifies the desired probability in log space. Examples:. If X = S (all hidden states), we expect logp = 0 (up to round-off error). if X = {a single hidden state}, then we expect the logp of a single path that takes on the same; hidden-state for all positions [t_0, ..., t_N]. In general, if X is a proper subset of S, we expect logp <= 0 (with logp = 0 iff the removed states; are strictly forbidden by the prior and/or the transition matrix). Returns:; a pytensor function; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:1167,Testability,log,logp,1167,"""""""Returns a pytensor function that calculates the log posterior probability of hidden state paths composed; from a subset X of all hidden states S. More explicitly, this function calculates the logp of all paths constrained to the hidden-state set; X for t_0 <= t <= t_N but unconstrained for before (t < t_0) and after (t > t_N):. unconstrained constrained unconstrained; t < t_0 | t_0 t_1 ... t_N | t > t_N; c in S | c in X c in X c in X | c in S. The inputs for the returned pytensor function are as follows:. alpha_first_c: forward log likelihood (alpha) for t = t_0 and c in X; beta_last_c: backward log likelihood (beta) for t = t_N and c in X; log_emission_tc: log emission probabilities for t \in [t_0, ..., t_N] and c in X; log_trans_tcc: log transition probabilities from `t` to `t+1` for t in [t_0, ..., t_N]; and departure and destination states in X; log_data_likelihood: log data likelihood of the unconstrained problem. The output is a non-positive scalar value that signifies the desired probability in log space. Examples:. If X = S (all hidden states), we expect logp = 0 (up to round-off error). if X = {a single hidden state}, then we expect the logp of a single path that takes on the same; hidden-state for all positions [t_0, ..., t_N]. In general, if X is a proper subset of S, we expect logp <= 0 (with logp = 0 iff the removed states; are strictly forbidden by the prior and/or the transition matrix). Returns:; a pytensor function; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:1313,Testability,log,logp,1313,"""""""Returns a pytensor function that calculates the log posterior probability of hidden state paths composed; from a subset X of all hidden states S. More explicitly, this function calculates the logp of all paths constrained to the hidden-state set; X for t_0 <= t <= t_N but unconstrained for before (t < t_0) and after (t > t_N):. unconstrained constrained unconstrained; t < t_0 | t_0 t_1 ... t_N | t > t_N; c in S | c in X c in X c in X | c in S. The inputs for the returned pytensor function are as follows:. alpha_first_c: forward log likelihood (alpha) for t = t_0 and c in X; beta_last_c: backward log likelihood (beta) for t = t_N and c in X; log_emission_tc: log emission probabilities for t \in [t_0, ..., t_N] and c in X; log_trans_tcc: log transition probabilities from `t` to `t+1` for t in [t_0, ..., t_N]; and departure and destination states in X; log_data_likelihood: log data likelihood of the unconstrained problem. The output is a non-positive scalar value that signifies the desired probability in log space. Examples:. If X = S (all hidden states), we expect logp = 0 (up to round-off error). if X = {a single hidden state}, then we expect the logp of a single path that takes on the same; hidden-state for all positions [t_0, ..., t_N]. In general, if X is a proper subset of S, we expect logp <= 0 (with logp = 0 iff the removed states; are strictly forbidden by the prior and/or the transition matrix). Returns:; a pytensor function; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:1329,Testability,log,logp,1329,"""""""Returns a pytensor function that calculates the log posterior probability of hidden state paths composed; from a subset X of all hidden states S. More explicitly, this function calculates the logp of all paths constrained to the hidden-state set; X for t_0 <= t <= t_N but unconstrained for before (t < t_0) and after (t > t_N):. unconstrained constrained unconstrained; t < t_0 | t_0 t_1 ... t_N | t > t_N; c in S | c in X c in X c in X | c in S. The inputs for the returned pytensor function are as follows:. alpha_first_c: forward log likelihood (alpha) for t = t_0 and c in X; beta_last_c: backward log likelihood (beta) for t = t_N and c in X; log_emission_tc: log emission probabilities for t \in [t_0, ..., t_N] and c in X; log_trans_tcc: log transition probabilities from `t` to `t+1` for t in [t_0, ..., t_N]; and departure and destination states in X; log_data_likelihood: log data likelihood of the unconstrained problem. The output is a non-positive scalar value that signifies the desired probability in log space. Examples:. If X = S (all hidden states), we expect logp = 0 (up to round-off error). if X = {a single hidden state}, then we expect the logp of a single path that takes on the same; hidden-state for all positions [t_0, ..., t_N]. In general, if X is a proper subset of S, we expect logp <= 0 (with logp = 0 iff the removed states; are strictly forbidden by the prior and/or the transition matrix). Returns:; a pytensor function; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:222,Safety,avoid,avoided,222,"""""""Calculates the constrained log posterior probability for contiguous set of sites in a Markov chain.; At each site, only a subset of all states (as set by `allowed_states`) are allowed and the other states; are strictly avoided. Args:; start_index: first site index (inclusive); end_index: last site index (inclusive); allowed_states: the list of allowed states in the segment. Returns:; log constrained posterior probability (float); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:30,Testability,log,log,30,"""""""Calculates the constrained log posterior probability for contiguous set of sites in a Markov chain.; At each site, only a subset of all states (as set by `allowed_states`) are allowed and the other states; are strictly avoided. Args:; start_index: first site index (inclusive); end_index: last site index (inclusive); allowed_states: the list of allowed states in the segment. Returns:; log constrained posterior probability (float); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:390,Testability,log,log,390,"""""""Calculates the constrained log posterior probability for contiguous set of sites in a Markov chain.; At each site, only a subset of all states (as set by `allowed_states`) are allowed and the other states; are strictly avoided. Args:; start_index: first site index (inclusive); end_index: last site index (inclusive); allowed_states: the list of allowed states in the segment. Returns:; log constrained posterior probability (float); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:39,Testability,log,log,39,"# calculate the required slices of the log emission and log transition representing; # paths that only contain the allowed states",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:56,Testability,log,log,56,"# calculate the required slices of the log emission and log transition representing; # paths that only contain the allowed states",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:645,Availability,robust,robust,645,"""""""Calculates the complementary phred-scaled posterior probability that ""all"" sites in a segment have; the same hidden state (""call""). Note:; If all of the intervals in the segment overwhelmingly support the call state, the probability of; deviations from the call state become very small, resulting in numerical instabilities. In such cases, we calculate the the quality assuming that the correlations in the posterior; distribution are negligible, i.e.:. log(1 - p(c_1 = c_2 = ... = call)) ~ log(1 - p(c_1 = call) x p(c_2 = call) x ...); = log(1 - (1 - p(c_1 != call)) x (1 - p(c_2 != call)) x ...). We calculate the latter expression using a robust numerical algorithm implemented in; `gcnvkernel.utils.math.logsumexp_double_complement`. Since this calculation is relatively cheap, we always calculate the exact quality via the above; scheme. If the uncorrelated phred-scale quality falls below `quality_switch_threshold`, we; conclude that the segment is not high-quality and the correlated calculation is stable. Hence,; we switch to the exact result. Args:; start_index: first site index (inclusive); end_index: last site index (inclusive); call_state: segment call state index; quality_switch_threshold: if the approximate quality is below this value, correlations will be; taken into account. Returns:; a phred-scaled probability; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:457,Testability,log,log,457,"""""""Calculates the complementary phred-scaled posterior probability that ""all"" sites in a segment have; the same hidden state (""call""). Note:; If all of the intervals in the segment overwhelmingly support the call state, the probability of; deviations from the call state become very small, resulting in numerical instabilities. In such cases, we calculate the the quality assuming that the correlations in the posterior; distribution are negligible, i.e.:. log(1 - p(c_1 = c_2 = ... = call)) ~ log(1 - p(c_1 = call) x p(c_2 = call) x ...); = log(1 - (1 - p(c_1 != call)) x (1 - p(c_2 != call)) x ...). We calculate the latter expression using a robust numerical algorithm implemented in; `gcnvkernel.utils.math.logsumexp_double_complement`. Since this calculation is relatively cheap, we always calculate the exact quality via the above; scheme. If the uncorrelated phred-scale quality falls below `quality_switch_threshold`, we; conclude that the segment is not high-quality and the correlated calculation is stable. Hence,; we switch to the exact result. Args:; start_index: first site index (inclusive); end_index: last site index (inclusive); call_state: segment call state index; quality_switch_threshold: if the approximate quality is below this value, correlations will be; taken into account. Returns:; a phred-scaled probability; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:494,Testability,log,log,494,"""""""Calculates the complementary phred-scaled posterior probability that ""all"" sites in a segment have; the same hidden state (""call""). Note:; If all of the intervals in the segment overwhelmingly support the call state, the probability of; deviations from the call state become very small, resulting in numerical instabilities. In such cases, we calculate the the quality assuming that the correlations in the posterior; distribution are negligible, i.e.:. log(1 - p(c_1 = c_2 = ... = call)) ~ log(1 - p(c_1 = call) x p(c_2 = call) x ...); = log(1 - (1 - p(c_1 != call)) x (1 - p(c_2 != call)) x ...). We calculate the latter expression using a robust numerical algorithm implemented in; `gcnvkernel.utils.math.logsumexp_double_complement`. Since this calculation is relatively cheap, we always calculate the exact quality via the above; scheme. If the uncorrelated phred-scale quality falls below `quality_switch_threshold`, we; conclude that the segment is not high-quality and the correlated calculation is stable. Hence,; we switch to the exact result. Args:; start_index: first site index (inclusive); end_index: last site index (inclusive); call_state: segment call state index; quality_switch_threshold: if the approximate quality is below this value, correlations will be; taken into account. Returns:; a phred-scaled probability; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:542,Testability,log,log,542,"""""""Calculates the complementary phred-scaled posterior probability that ""all"" sites in a segment have; the same hidden state (""call""). Note:; If all of the intervals in the segment overwhelmingly support the call state, the probability of; deviations from the call state become very small, resulting in numerical instabilities. In such cases, we calculate the the quality assuming that the correlations in the posterior; distribution are negligible, i.e.:. log(1 - p(c_1 = c_2 = ... = call)) ~ log(1 - p(c_1 = call) x p(c_2 = call) x ...); = log(1 - (1 - p(c_1 != call)) x (1 - p(c_2 != call)) x ...). We calculate the latter expression using a robust numerical algorithm implemented in; `gcnvkernel.utils.math.logsumexp_double_complement`. Since this calculation is relatively cheap, we always calculate the exact quality via the above; scheme. If the uncorrelated phred-scale quality falls below `quality_switch_threshold`, we; conclude that the segment is not high-quality and the correlated calculation is stable. Hence,; we switch to the exact result. Args:; start_index: first site index (inclusive); end_index: last site index (inclusive); call_state: segment call state index; quality_switch_threshold: if the approximate quality is below this value, correlations will be; taken into account. Returns:; a phred-scaled probability; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:29,Testability,log,log,29,"# calculate the uncorrelated log complementary probability",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:203,Testability,log,log,203,"""""""Calculates the complement of phred-scaled posterior probability that a site marks the start of a segment.; This is done by directly summing the probability of the following complementary paths in the log space:. ... [start_index-1] [start_index] ...; (any state) => (any state except for call_state); call_state => call_state. Args:; start_index: left breakpoint index of a segment; call_state: segment call state index. Returns:; a phred-scaled probability; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py:201,Testability,log,log,201,"""""""Calculates the complement of phred-scaled posterior probability that a site marks the end of a segment.; This is done by directly summing the probability of the following complementary paths in the log space:. ... [end_index] [end_index+1] ...; call_state => call_state; (any state except for call_state) => (any state). Args:; end_index: right breakpoint index of a segment; call_state: segment call state index. Returns:; a phred-scaled probability; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/segment_quality_utils.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/test_viterbiSegmentationEngine.py:36,Testability,test,tests,36,"#for GATK PythonUnitTestRunner/Java tests",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/test_viterbiSegmentationEngine.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/test_viterbiSegmentationEngine.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/test_viterbiSegmentationEngine.py:33,Testability,test,tests,33,"# for running in IntelliJ/Python tests; # test_sub_dir = current_dir + ""/../../../../../../../../src/test/resources/org/broadinstitute/hellbender/tools/copynumber/gcnv-postprocess/""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/test_viterbiSegmentationEngine.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/test_viterbiSegmentationEngine.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/test_viterbiSegmentationEngine.py:101,Testability,test,test,101,"# for running in IntelliJ/Python tests; # test_sub_dir = current_dir + ""/../../../../../../../../src/test/resources/org/broadinstitute/hellbender/tools/copynumber/gcnv-postprocess/""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/test_viterbiSegmentationEngine.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/test_viterbiSegmentationEngine.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/test_viterbiSegmentationEngine.py:6,Testability,test,test,6,"# any test VCF that doesn't have SAMPLE_000",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/test_viterbiSegmentationEngine.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/test_viterbiSegmentationEngine.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py:2,Performance,load,load,2,"# load copy number log emission for the sample",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py:19,Testability,log,log,19,"# load copy number log emission for the sample",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py:27,Performance,perform,perform,27,"# iterate over contigs and perform segmentation",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py:20,Testability,log,log,20,"# copy-number class log probability",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py:14,Testability,log,log,14,"# copy-number log emission probability for contig intervals",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py:2,Security,validat,validate,2,"# validate args -- should be both none or neither none",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py:8,Modifiability,config,configs,8,"# write configs, gcnvkernel version and sample name to output path",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py:2,Testability,assert,assert,2,"# assert interval lists are identical",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py:2,Testability,assert,assert,2,"# assert gcnvkernel versions are identical",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py:19,Modifiability,config,configs,19,"# assert denoising configs are identical",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py:2,Testability,assert,assert,2,"# assert denoising configs are identical",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py:18,Modifiability,config,configs,18,"# assert callings configs are identical",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py:2,Testability,assert,assert,2,"# assert callings configs are identical",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/postprocess/viterbi_segmentation.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/preprocess/interval_list_mask.py:45,Availability,mask,masks,45,"""""""This class implements different filters (""masks"") on interval lists.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/preprocess/interval_list_mask.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/preprocess/interval_list_mask.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/preprocess/interval_list_mask.py:15,Availability,mask,mask,15,"""""""Applies the mask on a given interval list and read count array. Args:; n_st: a read count matrix. Returns:; a view of the provided n_st,; a new list containing references to the provided interval list; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/preprocess/interval_list_mask.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/preprocess/interval_list_mask.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/preprocess/interval_list_mask.py:47,Availability,mask,mask,47,"""""""Only keep intervals in the given contig and mask the rest. Args:; contigs_to_keep: set of contigs to keep. Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/preprocess/interval_list_mask.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/preprocess/interval_list_mask.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/structs/interval.py:102,Security,hash,hashing,102,"""""""This class represents a genomic interval along with optional annotations. Note:; Equality test and hashing is based on get_key() which excludes all annotations.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/structs/interval.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/structs/interval.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/structs/interval.py:93,Testability,test,test,93,"""""""This class represents a genomic interval along with optional annotations. Note:; Equality test and hashing is based on get_key() which excludes all annotations.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/structs/interval.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/structs/interval.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:38,Performance,optimiz,optimizer,38,"""""""Exception raised in case inference optimizer produces a NaN. """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:18,Testability,log,log,18,"""""""Base class for log emission posterior probability samplers to be used in the hybrid ADVI scheme.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:43,Deployability,update,update,43,"""""""Take a new mean-field approximation and update the sampler routine accordingly. Args:; approx: an instance of PyMC mean-field posterior approximation. Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:62,Integrability,rout,routine,62,"""""""Take a new mean-field approximation and update the sampler routine accordingly. Args:; approx: an instance of PyMC mean-field posterior approximation. Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:56,Testability,log,log,56,"""""""Draw one sample (or average of several samples) from log emission posterior probability.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:22,Deployability,update,update,22,"""""""Add an incremental update to the current estimate of the log emission posterior mean.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:60,Testability,log,log,60,"""""""Add an incremental update to the current estimate of the log emission posterior mean.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:38,Testability,log,log,38,"""""""Returns the latest estimate of the log emission posterior mean.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:46,Deployability,update,update,46,"""""""Base class for callers, i.e. routines that update the posterior of discrete RVs, to be used in the; hybrid ADVI scheme.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:32,Integrability,rout,routines,32,"""""""Base class for callers, i.e. routines that update the posterior of discrete RVs, to be used in the; hybrid ADVI scheme.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:27,Modifiability,variab,variables,27,"""""""Takes a snapshot of the variables that change by `call` method. Taking a snapshot is useful if; several calls are necessary to achieve convergence among discrete variables themselves.; `finalize` may then admix the snapshot with the converged result.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:165,Modifiability,variab,variables,165,"""""""Takes a snapshot of the variables that change by `call` method. Taking a snapshot is useful if; several calls are necessary to achieve convergence among discrete variables themselves.; `finalize` may then admix the snapshot with the converged result.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:58,Integrability,rout,routine,58,"""""""Update auxiliary variables in workspaces, if any. This routine is called after one; (or more) round(s) of invoking `Caller.call`.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:20,Modifiability,variab,variables,20,"""""""Update auxiliary variables in workspaces, if any. This routine is called after one; (or more) round(s) of invoking `Caller.call`.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:27,Deployability,update,updates,27,"""""""Represents a summary of updates made to discrete RV posteriors by a `Caller`.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:84,Deployability,update,updates,84,"""""""A function that reduces arrays to scalars. It is used to summarize tensor-valued updates.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:19,Energy Efficiency,reduce,reduces,19,"""""""A function that reduces arrays to scalars. It is used to summarize tensor-valued updates.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:25,Deployability,update,update,25,"""""""Represents the caller update summary in a human readable format (used in logging).""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:76,Testability,log,logging,76,"""""""Represents the caller update summary in a human readable format (used in logging).""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:49,Testability,log,logger,49,"""""""Output stream for `tqdm` which will output to logger module instead of `stderr`.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:161,Deployability,continuous,continuous,161,"""""""The hybrid inference framework is applicable to PGMs with the following general structure:. +--------------+ +----------------+; | discrete RVs + --------> + continuous RVs |; +--------------+ +----------------+. Note that discrete RVs do not have any continuous parents. The inference is approximately; performed by factorizing the true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:255,Deployability,continuous,continuous,255,"""""""The hybrid inference framework is applicable to PGMs with the following general structure:. +--------------+ +----------------+; | discrete RVs + --------> + continuous RVs |; +--------------+ +----------------+. Note that discrete RVs do not have any continuous parents. The inference is approximately; performed by factorizing the true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:408,Deployability,continuous,continuous,408,"""""""The hybrid inference framework is applicable to PGMs with the following general structure:. +--------------+ +----------------+; | discrete RVs + --------> + continuous RVs |; +--------------+ +----------------+. Note that discrete RVs do not have any continuous parents. The inference is approximately; performed by factorizing the true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:487,Deployability,update,updated,487,"""""""The hybrid inference framework is applicable to PGMs with the following general structure:. +--------------+ +----------------+; | discrete RVs + --------> + continuous RVs |; +--------------+ +----------------+. Note that discrete RVs do not have any continuous parents. The inference is approximately; performed by factorizing the true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:551,Deployability,update,updated,551,"""""""The hybrid inference framework is applicable to PGMs with the following general structure:. +--------------+ +----------------+; | discrete RVs + --------> + continuous RVs |; +--------------+ +----------------+. Note that discrete RVs do not have any continuous parents. The inference is approximately; performed by factorizing the true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:914,Deployability,continuous,continuous,914,"""""""The hybrid inference framework is applicable to PGMs with the following general structure:. +--------------+ +----------------+; | discrete RVs + --------> + continuous RVs |; +--------------+ +----------------+. Note that discrete RVs do not have any continuous parents. The inference is approximately; performed by factorizing the true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:1350,Deployability,update,updates,1350," factorizing the true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general implementation motif is:. (a) to store sufficient statistics from q(DRVs) as a shared pytensor tensor such that the the; model can access it,; (b) to store log_emission(DRVs) as a shared pytensor tensor (or ndarray) such that the caller; can access it, and:; (c) let the caller directly update the shared sufficient st",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:1365,Deployability,continuous,continuous,1365," factorizing the true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general implementation motif is:. (a) to store sufficient statistics from q(DRVs) as a shared pytensor tensor such that the the; model can access it,; (b) to store log_emission(DRVs) as a shared pytensor tensor (or ndarray) such that the caller; can access it, and:; (c) let the caller directly update the shared sufficient st",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:1578,Deployability,update,updates,1578,"e true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general implementation motif is:. (a) to store sufficient statistics from q(DRVs) as a shared pytensor tensor such that the the; model can access it,; (b) to store log_emission(DRVs) as a shared pytensor tensor (or ndarray) such that the caller; can access it, and:; (c) let the caller directly update the shared sufficient statistics.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:2289,Deployability,update,update,2289,"e true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general implementation motif is:. (a) to store sufficient statistics from q(DRVs) as a shared pytensor tensor such that the the; model can access it,; (b) to store log_emission(DRVs) as a shared pytensor tensor (or ndarray) such that the caller; can access it, and:; (c) let the caller directly update the shared sufficient statistics.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:826,Energy Efficiency,energy,energy,826,"""""""The hybrid inference framework is applicable to PGMs with the following general structure:. +--------------+ +----------------+; | discrete RVs + --------> + continuous RVs |; +--------------+ +----------------+. Note that discrete RVs do not have any continuous parents. The inference is approximately; performed by factorizing the true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:1051,Energy Efficiency,energy,energy,1051,"ramework is applicable to PGMs with the following general structure:. +--------------+ +----------------+; | discrete RVs + --------> + continuous RVs |; +--------------+ +----------------+. Note that discrete RVs do not have any continuous parents. The inference is approximately; performed by factorizing the true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general implementation motif is",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:307,Performance,perform,performed,307,"""""""The hybrid inference framework is applicable to PGMs with the following general structure:. +--------------+ +----------------+; | discrete RVs + --------> + continuous RVs |; +--------------+ +----------------+. Note that discrete RVs do not have any continuous parents. The inference is approximately; performed by factorizing the true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:1333,Performance,perform,performing,1333," factorizing the true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general implementation motif is:. (a) to store sufficient statistics from q(DRVs) as a shared pytensor tensor such that the the; model can access it,; (b) to store log_emission(DRVs) as a shared pytensor tensor (or ndarray) such that the caller; can access it, and:; (c) let the caller directly update the shared sufficient st",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:2133,Security,access,access,2133,"e true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general implementation motif is:. (a) to store sufficient statistics from q(DRVs) as a shared pytensor tensor such that the the; model can access it,; (b) to store log_emission(DRVs) as a shared pytensor tensor (or ndarray) such that the caller; can access it, and:; (c) let the caller directly update the shared sufficient statistics.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:2244,Security,access,access,2244,"e true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general implementation motif is:. (a) to store sufficient statistics from q(DRVs) as a shared pytensor tensor such that the the; model can access it,; (b) to store log_emission(DRVs) as a shared pytensor tensor (or ndarray) such that the caller; can access it, and:; (c) let the caller directly update the shared sufficient statistics.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:672,Testability,log,log,672,"""""""The hybrid inference framework is applicable to PGMs with the following general structure:. +--------------+ +----------------+; | discrete RVs + --------> + continuous RVs |; +--------------+ +----------------+. Note that discrete RVs do not have any continuous parents. The inference is approximately; performed by factorizing the true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:843,Testability,log,log,843,"""""""The hybrid inference framework is applicable to PGMs with the following general structure:. +--------------+ +----------------+; | discrete RVs + --------> + continuous RVs |; +--------------+ +----------------+. Note that discrete RVs do not have any continuous parents. The inference is approximately; performed by factorizing the true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:1458,Testability,log,log,1458,"e true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general implementation motif is:. (a) to store sufficient statistics from q(DRVs) as a shared pytensor tensor such that the the; model can access it,; (b) to store log_emission(DRVs) as a shared pytensor tensor (or ndarray) such that the caller; can access it, and:; (c) let the caller directly update the shared sufficient statistics.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:1900,Usability,simpl,simple,1900,"e true posterior into an uncorrelated product of discrete RVs (DRVs); and continuous RVs (CRVs):. p(CRVs, DRVs | observed) ~ q(CRVs) q(DRVs). q(CRVs) is updated via deterministic annealing mean-field ADVI.; q(DRV) is updated by the provided ""caller"" and is out the scope of this class. Usage:; ------. Preliminaries. Let us decompose the log joint as follows:. -log_P(CRVs, DRVs, observed) = F_c(CRVs, observed); + F_d(DRVs, observed); + F_cd(CRVs, DRVs, observed). The last term in the free energy (negative log joint) is the only term with cross terms between; the discrete and continuous sectors. The user must supply the following components:. (1) a pm.Model that yields the DRV-posterior-expectation of the free energy,. F_c^{eff}(CRVs, observed) = E_{DRVs ~ q(DRVs)} [-log_P(CRVs, DRVs, observed)]; = F_c(CRVs, observed); + E_{DRVs ~ q(DRVs)} [F_cd(CRVs, DRVs, observed)]; + E_{DRVs ~ q(DRVs)} [F_d(DRVs, observed)]. Note: the last term is fully determined by q(DRVs) and can be dropped while performing; ADVI updates in the continuous sector. (2) a ""sampler"" that provides samples from the cross term, which we call ""log emission"",; defined as:. log_emission(DRVs) = E_{CRVs ~ q(CRVs)} [-F_cd (CRVs, DRV, observed)]. (3) a ""caller"" that updates q(DRVs) given log_emission(DRV), i.e.:. q(DRVs) \propto \exp[log_emission(DRVs) - F_d(DRVs, observed)]. In practice, one does not need the complete joint posterior of DRVs: only sufficient; statistics, to the extent required for calculating F_c^{eff} is needed. Calculating such; sufficient statistics could be as simple as using the Bayes rule, or more complicated if; the DRVs are strongly correlated. The general implementation motif is:. (a) to store sufficient statistics from q(DRVs) as a shared pytensor tensor such that the the; model can access it,; (b) to store log_emission(DRVs) as a shared pytensor tensor (or ndarray) such that the caller; can access it, and:; (c) let the caller directly update the shared sufficient statistics.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:45,Availability,toler,tolerance,45,"# if the temperature is within the following tolerance of 1.0, it is assumed that annealing; # has finished",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:58,Deployability,configurat,configuration,58,"""""""Initializer. Args:; hybrid_inference_params: inference configuration; continuous_model: a PyMC model representing the continuous sector of the PGM; sampler: log emission probability sampler; caller: discrete RV posterior updater; **kwargs: extra keywords. Keyword Args:; custom_optimizer: a custom stochastic optimizer to be used in place of the default optimizer (adamax; elbo_normalization_factor: normalization factor of the full model ELBO (for logging); advi_task_name: name of the ADVI step (for logging); sampling_task_name: name of the sampling step (for logging); calling_task_name: name of the calling step (for logging); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:121,Deployability,continuous,continuous,121,"""""""Initializer. Args:; hybrid_inference_params: inference configuration; continuous_model: a PyMC model representing the continuous sector of the PGM; sampler: log emission probability sampler; caller: discrete RV posterior updater; **kwargs: extra keywords. Keyword Args:; custom_optimizer: a custom stochastic optimizer to be used in place of the default optimizer (adamax; elbo_normalization_factor: normalization factor of the full model ELBO (for logging); advi_task_name: name of the ADVI step (for logging); sampling_task_name: name of the sampling step (for logging); calling_task_name: name of the calling step (for logging); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:224,Deployability,update,updater,224,"""""""Initializer. Args:; hybrid_inference_params: inference configuration; continuous_model: a PyMC model representing the continuous sector of the PGM; sampler: log emission probability sampler; caller: discrete RV posterior updater; **kwargs: extra keywords. Keyword Args:; custom_optimizer: a custom stochastic optimizer to be used in place of the default optimizer (adamax; elbo_normalization_factor: normalization factor of the full model ELBO (for logging); advi_task_name: name of the ADVI step (for logging); sampling_task_name: name of the sampling step (for logging); calling_task_name: name of the calling step (for logging); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:58,Modifiability,config,configuration,58,"""""""Initializer. Args:; hybrid_inference_params: inference configuration; continuous_model: a PyMC model representing the continuous sector of the PGM; sampler: log emission probability sampler; caller: discrete RV posterior updater; **kwargs: extra keywords. Keyword Args:; custom_optimizer: a custom stochastic optimizer to be used in place of the default optimizer (adamax; elbo_normalization_factor: normalization factor of the full model ELBO (for logging); advi_task_name: name of the ADVI step (for logging); sampling_task_name: name of the sampling step (for logging); calling_task_name: name of the calling step (for logging); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:312,Performance,optimiz,optimizer,312,"""""""Initializer. Args:; hybrid_inference_params: inference configuration; continuous_model: a PyMC model representing the continuous sector of the PGM; sampler: log emission probability sampler; caller: discrete RV posterior updater; **kwargs: extra keywords. Keyword Args:; custom_optimizer: a custom stochastic optimizer to be used in place of the default optimizer (adamax; elbo_normalization_factor: normalization factor of the full model ELBO (for logging); advi_task_name: name of the ADVI step (for logging); sampling_task_name: name of the sampling step (for logging); calling_task_name: name of the calling step (for logging); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:357,Performance,optimiz,optimizer,357,"""""""Initializer. Args:; hybrid_inference_params: inference configuration; continuous_model: a PyMC model representing the continuous sector of the PGM; sampler: log emission probability sampler; caller: discrete RV posterior updater; **kwargs: extra keywords. Keyword Args:; custom_optimizer: a custom stochastic optimizer to be used in place of the default optimizer (adamax; elbo_normalization_factor: normalization factor of the full model ELBO (for logging); advi_task_name: name of the ADVI step (for logging); sampling_task_name: name of the sampling step (for logging); calling_task_name: name of the calling step (for logging); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:160,Testability,log,log,160,"""""""Initializer. Args:; hybrid_inference_params: inference configuration; continuous_model: a PyMC model representing the continuous sector of the PGM; sampler: log emission probability sampler; caller: discrete RV posterior updater; **kwargs: extra keywords. Keyword Args:; custom_optimizer: a custom stochastic optimizer to be used in place of the default optimizer (adamax; elbo_normalization_factor: normalization factor of the full model ELBO (for logging); advi_task_name: name of the ADVI step (for logging); sampling_task_name: name of the sampling step (for logging); calling_task_name: name of the calling step (for logging); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:452,Testability,log,logging,452,"""""""Initializer. Args:; hybrid_inference_params: inference configuration; continuous_model: a PyMC model representing the continuous sector of the PGM; sampler: log emission probability sampler; caller: discrete RV posterior updater; **kwargs: extra keywords. Keyword Args:; custom_optimizer: a custom stochastic optimizer to be used in place of the default optimizer (adamax; elbo_normalization_factor: normalization factor of the full model ELBO (for logging); advi_task_name: name of the ADVI step (for logging); sampling_task_name: name of the sampling step (for logging); calling_task_name: name of the calling step (for logging); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:505,Testability,log,logging,505,"""""""Initializer. Args:; hybrid_inference_params: inference configuration; continuous_model: a PyMC model representing the continuous sector of the PGM; sampler: log emission probability sampler; caller: discrete RV posterior updater; **kwargs: extra keywords. Keyword Args:; custom_optimizer: a custom stochastic optimizer to be used in place of the default optimizer (adamax; elbo_normalization_factor: normalization factor of the full model ELBO (for logging); advi_task_name: name of the ADVI step (for logging); sampling_task_name: name of the sampling step (for logging); calling_task_name: name of the calling step (for logging); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:566,Testability,log,logging,566,"""""""Initializer. Args:; hybrid_inference_params: inference configuration; continuous_model: a PyMC model representing the continuous sector of the PGM; sampler: log emission probability sampler; caller: discrete RV posterior updater; **kwargs: extra keywords. Keyword Args:; custom_optimizer: a custom stochastic optimizer to be used in place of the default optimizer (adamax; elbo_normalization_factor: normalization factor of the full model ELBO (for logging); advi_task_name: name of the ADVI step (for logging); sampling_task_name: name of the sampling step (for logging); calling_task_name: name of the calling step (for logging); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:625,Testability,log,logging,625,"""""""Initializer. Args:; hybrid_inference_params: inference configuration; continuous_model: a PyMC model representing the continuous sector of the PGM; sampler: log emission probability sampler; caller: discrete RV posterior updater; **kwargs: extra keywords. Keyword Args:; custom_optimizer: a custom stochastic optimizer to be used in place of the default optimizer (adamax; elbo_normalization_factor: normalization factor of the full model ELBO (for logging); advi_task_name: name of the ADVI step (for logging); sampling_task_name: name of the sampling step (for logging); calling_task_name: name of the calling step (for logging); """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:12,Testability,log,log,12,"# clear out log emission",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:2,Usability,clear,clear,2,"# clear out log emission",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:11,Testability,log,log,11,"# draw new log emission posterior samples",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:2,Deployability,update,update,2,"# update the estimator",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:11,Deployability,update,update,11,"# relative update (and ensuring no NaNs are present, which can occur if latest_estimator; # has zero entries)",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py:295,Security,expose,expose,295,"""""""Exposes arguments of `__init__` to a given instance of `ArgumentParser`. Args:; args: an instance of `ArgumentParser`; override_default: a dictionary containing arguments the default values of which; are to be overridden before passing to the argument parser; hide: a set of arguments not to expose. Returns:; None; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/inference_task_base.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_denoising_calling.py:19,Integrability,wrap,wrapper,19,"""""""This class is a wrapper around `HHMMClassAndCopyNumberBasicCaller` to be used in a case denoising and; calling task. Note:; Update of copy number class is disabled since it is considered a global part of the model and is; set by the imported model.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_denoising_calling.py:45,Deployability,update,updates,45,"# the optimizer is a custom adamax that only updates sample-specific model variables",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_denoising_calling.py:75,Modifiability,variab,variables,75,"# the optimizer is a custom adamax that only updates sample-specific model variables",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_denoising_calling.py:6,Performance,optimiz,optimizer,6,"# the optimizer is a custom adamax that only updates sample-specific model variables",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_ploidy_determination.py:45,Deployability,update,updates,45,"# the optimizer is a custom adamax that only updates sample-specific model variables",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_ploidy_determination.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_ploidy_determination.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_ploidy_determination.py:75,Modifiability,variab,variables,75,"# the optimizer is a custom adamax that only updates sample-specific model variables",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_ploidy_determination.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_ploidy_determination.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_ploidy_determination.py:6,Performance,optimiz,optimizer,6,"# the optimizer is a custom adamax that only updates sample-specific model variables",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_ploidy_determination.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_case_ploidy_determination.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py:19,Integrability,wrap,wrapper,19,"""""""This class is a wrapper around `HHMMClassAndCopyNumberBasicCaller` to be used in a cohort denoising and; calling task.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py:44,Deployability,update,update,44,"""""""Copy number and interval class posterior update summary. All vector-, matrix-, and tensor- valued; updates are reduced to scalar with a single reducer function.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py:102,Deployability,update,updates,102,"""""""Copy number and interval class posterior update summary. All vector-, matrix-, and tensor- valued; updates are reduced to scalar with a single reducer function.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py:114,Energy Efficiency,reduce,reduced,114,"""""""Copy number and interval class posterior update summary. All vector-, matrix-, and tensor- valued; updates are reduced to scalar with a single reducer function.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py:146,Energy Efficiency,reduce,reducer,146,"""""""Copy number and interval class posterior update summary. All vector-, matrix-, and tensor- valued; updates are reduced to scalar with a single reducer function.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py:41,Deployability,update,update,41,"""""""Returns the largest of interval class update and copy number update. This scalar value; is used for checking convergence (i.e. self-consistency between class and copy number posteriors).""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py:64,Deployability,update,update,64,"""""""Returns the largest of interval class update and copy number update. This scalar value; is used for checking convergence (i.e. self-consistency between class and copy number posteriors).""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py:19,Integrability,wrap,wrapper,19,"""""""This class is a wrapper around `CopyNumberEmissionBasicSampler` to be used in a `HybridInferenceTask`.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py:2,Performance,optimiz,optimizer,2,"# optimizer state",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_ploidy_determination.py:19,Integrability,wrap,wrapper,19,"""""""This class is a wrapper around `PloidyBasicCaller` to be used in a `HybridInferenceTask`.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_ploidy_determination.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_ploidy_determination.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_ploidy_determination.py:19,Integrability,wrap,wrapper,19,"""""""This class is a wrapper around `PloidyEmissionBasicSampler` to be used in a `HybridInferenceTask`.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_ploidy_determination.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/tasks/task_cohort_ploidy_determination.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/cli_commons.py:8,Testability,log,logging-related,8,"""""""Adds logging-related arguments to a given `ArgumentParser`.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/cli_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/cli_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/cli_commons.py:21,Testability,log,logger,21,"""""""Configures python logger according to parsed arguments.""""""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/cli_commons.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/cli_commons.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py:39,Testability,log,log,39,"""""""Converts probabilities from natural log scale to phred scale. Args:; logp: a probability in the natural log scale; complement: if True, returns the result for the complement of 'logp'. Returns:; phred-scaled probability; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py:72,Testability,log,logp,72,"""""""Converts probabilities from natural log scale to phred scale. Args:; logp: a probability in the natural log scale; complement: if True, returns the result for the complement of 'logp'. Returns:; phred-scaled probability; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py:107,Testability,log,log,107,"""""""Converts probabilities from natural log scale to phred scale. Args:; logp: a probability in the natural log scale; complement: if True, returns the result for the complement of 'logp'. Returns:; phred-scaled probability; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py:181,Testability,log,logp,181,"""""""Converts probabilities from natural log scale to phred scale. Args:; logp: a probability in the natural log scale; complement: if True, returns the result for the complement of 'logp'. Returns:; phred-scaled probability; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py:61,Testability,log,log,61,"""""""Calculates the complement of a probability in the natural log scale:. log(1 - exp(logp)),. in a numerically stable fashion. Args:; logp: a probability in the natural log scale. Returns:; complement of the the probability in the natural log scale; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py:73,Testability,log,log,73,"""""""Calculates the complement of a probability in the natural log scale:. log(1 - exp(logp)),. in a numerically stable fashion. Args:; logp: a probability in the natural log scale. Returns:; complement of the the probability in the natural log scale; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py:85,Testability,log,logp,85,"""""""Calculates the complement of a probability in the natural log scale:. log(1 - exp(logp)),. in a numerically stable fashion. Args:; logp: a probability in the natural log scale. Returns:; complement of the the probability in the natural log scale; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py:134,Testability,log,logp,134,"""""""Calculates the complement of a probability in the natural log scale:. log(1 - exp(logp)),. in a numerically stable fashion. Args:; logp: a probability in the natural log scale. Returns:; complement of the the probability in the natural log scale; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py:169,Testability,log,log,169,"""""""Calculates the complement of a probability in the natural log scale:. log(1 - exp(logp)),. in a numerically stable fashion. Args:; logp: a probability in the natural log scale. Returns:; complement of the the probability in the natural log scale; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py:239,Testability,log,log,239,"""""""Calculates the complement of a probability in the natural log scale:. log(1 - exp(logp)),. in a numerically stable fashion. Args:; logp: a probability in the natural log scale. Returns:; complement of the the probability in the natural log scale; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py:632,Availability,error,error,632,"""""""Calculates the following expression in a numerically stable fashion:. log(1 - (1 - exp(a_0)) x (1 - exp(a_1)) x ...). where a_i are the entries of `a` and assumed to be non-positive. The algorithm is as follows:. We define:. exp(x_n) = 1 - \prod_{i=0}^n (1 - exp(a_n)),. Thus, we have x_0 = a_0 and the recursion relation:. exp(x_{n+1}) = exp(x_n) + exp(b_{n+1}),. where. b_{n+1} = a_{n+1} + log(1 - exp(x_n)). We sort `a` in the descending order and update `x` term by term. It is easy to show that x_{n} is monotonically; increasing and that |x_{N} - x_{n}| < (N - n) |x_{n} - x_{n-1}|. We use the last inequality to bound the error; for early stopping. Args:; a: a float array; rel_tol: relative error tolerance for early stopping of calculation. Returns:; a float scalar; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py:702,Availability,error,error,702,"""""""Calculates the following expression in a numerically stable fashion:. log(1 - (1 - exp(a_0)) x (1 - exp(a_1)) x ...). where a_i are the entries of `a` and assumed to be non-positive. The algorithm is as follows:. We define:. exp(x_n) = 1 - \prod_{i=0}^n (1 - exp(a_n)),. Thus, we have x_0 = a_0 and the recursion relation:. exp(x_{n+1}) = exp(x_n) + exp(b_{n+1}),. where. b_{n+1} = a_{n+1} + log(1 - exp(x_n)). We sort `a` in the descending order and update `x` term by term. It is easy to show that x_{n} is monotonically; increasing and that |x_{N} - x_{n}| < (N - n) |x_{n} - x_{n-1}|. We use the last inequality to bound the error; for early stopping. Args:; a: a float array; rel_tol: relative error tolerance for early stopping of calculation. Returns:; a float scalar; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py:708,Availability,toler,tolerance,708,"""""""Calculates the following expression in a numerically stable fashion:. log(1 - (1 - exp(a_0)) x (1 - exp(a_1)) x ...). where a_i are the entries of `a` and assumed to be non-positive. The algorithm is as follows:. We define:. exp(x_n) = 1 - \prod_{i=0}^n (1 - exp(a_n)),. Thus, we have x_0 = a_0 and the recursion relation:. exp(x_{n+1}) = exp(x_n) + exp(b_{n+1}),. where. b_{n+1} = a_{n+1} + log(1 - exp(x_n)). We sort `a` in the descending order and update `x` term by term. It is easy to show that x_{n} is monotonically; increasing and that |x_{N} - x_{n}| < (N - n) |x_{n} - x_{n-1}|. We use the last inequality to bound the error; for early stopping. Args:; a: a float array; rel_tol: relative error tolerance for early stopping of calculation. Returns:; a float scalar; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py:454,Deployability,update,update,454,"""""""Calculates the following expression in a numerically stable fashion:. log(1 - (1 - exp(a_0)) x (1 - exp(a_1)) x ...). where a_i are the entries of `a` and assumed to be non-positive. The algorithm is as follows:. We define:. exp(x_n) = 1 - \prod_{i=0}^n (1 - exp(a_n)),. Thus, we have x_0 = a_0 and the recursion relation:. exp(x_{n+1}) = exp(x_n) + exp(b_{n+1}),. where. b_{n+1} = a_{n+1} + log(1 - exp(x_n)). We sort `a` in the descending order and update `x` term by term. It is easy to show that x_{n} is monotonically; increasing and that |x_{N} - x_{n}| < (N - n) |x_{n} - x_{n-1}|. We use the last inequality to bound the error; for early stopping. Args:; a: a float array; rel_tol: relative error tolerance for early stopping of calculation. Returns:; a float scalar; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py:73,Testability,log,log,73,"""""""Calculates the following expression in a numerically stable fashion:. log(1 - (1 - exp(a_0)) x (1 - exp(a_1)) x ...). where a_i are the entries of `a` and assumed to be non-positive. The algorithm is as follows:. We define:. exp(x_n) = 1 - \prod_{i=0}^n (1 - exp(a_n)),. Thus, we have x_0 = a_0 and the recursion relation:. exp(x_{n+1}) = exp(x_n) + exp(b_{n+1}),. where. b_{n+1} = a_{n+1} + log(1 - exp(x_n)). We sort `a` in the descending order and update `x` term by term. It is easy to show that x_{n} is monotonically; increasing and that |x_{N} - x_{n}| < (N - n) |x_{n} - x_{n-1}|. We use the last inequality to bound the error; for early stopping. Args:; a: a float array; rel_tol: relative error tolerance for early stopping of calculation. Returns:; a float scalar; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py:395,Testability,log,log,395,"""""""Calculates the following expression in a numerically stable fashion:. log(1 - (1 - exp(a_0)) x (1 - exp(a_1)) x ...). where a_i are the entries of `a` and assumed to be non-positive. The algorithm is as follows:. We define:. exp(x_n) = 1 - \prod_{i=0}^n (1 - exp(a_n)),. Thus, we have x_0 = a_0 and the recursion relation:. exp(x_{n+1}) = exp(x_n) + exp(b_{n+1}),. where. b_{n+1} = a_{n+1} + log(1 - exp(x_n)). We sort `a` in the descending order and update `x` term by term. It is easy to show that x_{n} is monotonically; increasing and that |x_{N} - x_{n}| < (N - n) |x_{n} - x_{n-1}|. We use the last inequality to bound the error; for early stopping. Args:; a: a float array; rel_tol: relative error tolerance for early stopping of calculation. Returns:; a float scalar; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/math.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py:14,Performance,perform,performs,14,"""""""This class performs maximum-likelihood linear regression for sequentially observed data; on an equally spaced grid. The data can be non-stationary, and a window size needs; to be provided that determined the forgetting factor. This is a non-recursive implementation of; the recursive least squares (RLS) algorithm.; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py:109,Availability,avail,available,109,"""""""Get the latest estimate of the linear regression slope. Returns:; float value of the slope if estimate is available; None if the estimate is not available yet; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py:148,Availability,avail,available,148,"""""""Get the latest estimate of the linear regression slope. Returns:; float value of the slope if estimate is available; None if the estimate is not available yet; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py:117,Availability,avail,available,117,"""""""Get the latest estimate of the linear regression intercept. Returns:; float value of the intercept if estimate is available; None if the estimate is not available yet; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py:156,Availability,avail,available,156,"""""""Get the latest estimate of the linear regression intercept. Returns:; float value of the intercept if estimate is available; None if the estimate is not available yet; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py:115,Availability,avail,available,115,"""""""Get the latest estimate of the linear regression variance. Returns:; float value of the variance if estimate is available; None if the estimate is not available yet; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py:154,Availability,avail,available,154,"""""""Get the latest estimate of the linear regression variance. Returns:; float value of the variance if estimate is available; None if the estimate is not available yet; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/gcnvkernel/utils/rls.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/scorevariants/encoders.py:543,Modifiability,extend,extends,543,"""""""; Encodes a string as a tensor of a window centered; around a position. Args:; window:; Optional int. Determines with width of the tensor.; offset:; Optional int. When offset is 0, the variant POS; is located at middle. negative shifts it left; and positive shifts it right, with respect; to the output tensor.; base_encoder:; Optional Encoder. Encodes a base from the; string as an int representing the channel; in the output tensor.; handle_start:; Optional str or callable. Strategy for handling; the start of the tensor when the window extends; beyond the left side of the reference. Options:; * 'left': the first base of the reference is; the first base in the tensor; * 'pad': the reference's start is padded such; that the variant POS remains unchanged; with respect to the output tensor. """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/scorevariants/encoders.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/scorevariants/encoders.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/scorevariants/random_generator.py:102,Availability,down,down-sampler,102,"# Implementation of random number generator to get the same result as GATK CNNScoreVariants reservoir down-sampler; # Reservoir Downsampler: Selects n reads out of a stream whose size is not known in advance, with; # every read in the stream having an equal chance of being selected for inclusion.; # An implementation of ""Algorithm R"" from the paper ""Random Sampling with a Reservoir"" (Jeffrey Scott Vitter, 1985)",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/scorevariants/random_generator.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/scorevariants/random_generator.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/scorevariants/random_generator.py:15,Energy Efficiency,power,power,15,"# i.e., n is a power of 2",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/scorevariants/random_generator.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/scorevariants/random_generator.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/scorevariants/models/wrapper.py:20,Integrability,wrap,wrapper,20,"""""""PyTorch Lighting wrapper for training and evaluation; ; Args:; model: nn.Module, pytorch model to train/evaluate; additional_hparams: saved in hparams; ; """"""",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/scorevariants/models/wrapper.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/scorevariants/models/wrapper.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/scorevariants/models/wrapper.py:82,Availability,checkpoint,checkpointing,82,"# save all hyperparameters; # in addition to provenance, this helps; # with model checkpointing by saving the model",MatchSource.CODE_COMMENT,src/main/python/org/broadinstitute/hellbender/scorevariants/models/wrapper.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/python/org/broadinstitute/hellbender/scorevariants/models/wrapper.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py:2,Testability,log,logging,2,"# logging args",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py:16,Modifiability,config,config,16,"# add denoising config args; # Note: we are hiding parameters that are either set by the model or are irrelevant to the case calling task",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py:14,Modifiability,config,config,14,"# add calling config args; # Note: we are hiding parameters that are either set by the model or are irrelevant to the case calling task",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py:42,Modifiability,config,config,42,"# load arguments from the model denoising config that are hidden by the tool",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py:2,Performance,load,load,2,"# load arguments from the model denoising config that are hidden by the tool",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py:63,Safety,avoid,avoid,63,"# copy the intervals to the calls path; # (we do this early to avoid inadvertent cleanup of temporary files)",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py:2,Performance,load,load,2,"# load modeling interval list from the model",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py:2,Performance,load,load,2,"# load sample names, truncated counts, and interval list from the sample read counts table",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py:2,Performance,load,load,2,"# load read depth and ploidy metadata",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py:13,Deployability,configurat,configuration,13,"# read model configuration and update args dict",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py:31,Deployability,update,update,31,"# read model configuration and update args dict",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py:13,Modifiability,config,configuration,13,"# read model configuration and update args dict",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py:14,Modifiability,config,config,14,"# instantiate config classes",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py:7,Performance,optimiz,optimizer,7,"# save optimizer state",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_determine_ploidy_and_depth.py:2,Testability,log,logging,2,"# logging args",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_determine_ploidy_and_depth.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_determine_ploidy_and_depth.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_determine_ploidy_and_depth.py:2,Performance,load,load,2,"# load interval list from the model",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_determine_ploidy_and_depth.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_determine_ploidy_and_depth.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_determine_ploidy_and_depth.py:2,Performance,load,load,2,"# load sample coverage metadata",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_determine_ploidy_and_depth.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_determine_ploidy_and_depth.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_determine_ploidy_and_depth.py:2,Integrability,inject,inject,2,"# inject ploidy prior map to the dictionary of parsed args",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_determine_ploidy_and_depth.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_determine_ploidy_and_depth.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_determine_ploidy_and_depth.py:2,Security,inject,inject,2,"# inject ploidy prior map to the dictionary of parsed args",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_determine_ploidy_and_depth.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/case_determine_ploidy_and_depth.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py:2,Testability,log,logging,2,"# logging args",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py:16,Modifiability,config,config,16,"# add denoising config args",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py:14,Modifiability,config,config,14,"# add calling config args",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py:74,Safety,avoid,avoid,74,"# copy the intervals to the model and calls paths; # (we do this early to avoid inadvertent cleanup of temporary files)",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py:2,Performance,load,load,2,"# load modeling interval list",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py:2,Performance,load,load,2,"# load sample names, truncated counts, and interval list from the sample read counts table",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py:2,Performance,load,load,2,"# load read depth and ploidy metadata",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py:14,Modifiability,config,config,14,"# instantiate config classes for the main task",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py:14,Modifiability,config,config,14,"# instantiate config classes for the warm-up task",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py:2,Deployability,update,update,2,"# update the contigs for the two-stage task",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py:7,Performance,optimiz,optimizer,7,"# save optimizer state",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_denoising_calling.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_determine_ploidy_and_depth.py:2,Testability,log,logging,2,"# logging args",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_determine_ploidy_and_depth.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_determine_ploidy_and_depth.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_determine_ploidy_and_depth.py:81,Safety,avoid,avoid,81,"# copy the intervals and ploidy priors to the model path; # (we do this early to avoid inadvertent cleanup of temporary files)",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_determine_ploidy_and_depth.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_determine_ploidy_and_depth.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_determine_ploidy_and_depth.py:2,Performance,load,load,2,"# load interval list",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_determine_ploidy_and_depth.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_determine_ploidy_and_depth.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_determine_ploidy_and_depth.py:2,Performance,load,load,2,"# load sample coverage metadata",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_determine_ploidy_and_depth.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_determine_ploidy_and_depth.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_determine_ploidy_and_depth.py:2,Integrability,inject,inject,2,"# inject ploidy prior map to the dictionary of parsed args",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_determine_ploidy_and_depth.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_determine_ploidy_and_depth.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_determine_ploidy_and_depth.py:2,Security,inject,inject,2,"# inject ploidy prior map to the dictionary of parsed args",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_determine_ploidy_and_depth.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/cohort_determine_ploidy_and_depth.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/segment_gcnv_calls.py:2,Testability,log,logging,2,"# logging args",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/segment_gcnv_calls.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/segment_gcnv_calls.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/segment_gcnv_calls.py:2,Performance,load,load,2,"# load read depth and ploidy metadata",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/copynumber/segment_gcnv_calls.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/copynumber/segment_gcnv_calls.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/walkers/vqsr/nvscorevariants.py:82,Performance,load,load,82,"""""""; Args:; args: model specific and trainer arguments; model_file: model file to load parameters from a pretrained PyTorch model; """"""",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/walkers/vqsr/nvscorevariants.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/walkers/vqsr/nvscorevariants.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/walkers/vqsr/scalable/isolation-forest.py:182,Availability,down,downstream,182,"# SimpleImputer will drop any features that are completely missing, resulting in different shapes for; # imputed_X_ni and X_ni and misalignment of features when training and scoring downstream if not checked.; # We externally check for and fail in the presence of any entirely missing features, but we do a redundant check here.",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/walkers/vqsr/scalable/isolation-forest.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/walkers/vqsr/scalable/isolation-forest.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/walkers/vqsr/scalable/isolation-forest.py:307,Availability,redundant,redundant,307,"# SimpleImputer will drop any features that are completely missing, resulting in different shapes for; # imputed_X_ni and X_ni and misalignment of features when training and scoring downstream if not checked.; # We externally check for and fail in the presence of any entirely missing features, but we do a redundant check here.",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/walkers/vqsr/scalable/isolation-forest.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/walkers/vqsr/scalable/isolation-forest.py
https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/walkers/vqsr/scalable/isolation-forest.py:307,Safety,redund,redundant,307,"# SimpleImputer will drop any features that are completely missing, resulting in different shapes for; # imputed_X_ni and X_ni and misalignment of features when training and scoring downstream if not checked.; # We externally check for and fail in the presence of any entirely missing features, but we do a redundant check here.",MatchSource.CODE_COMMENT,src/main/resources/org/broadinstitute/hellbender/tools/walkers/vqsr/scalable/isolation-forest.py,broadinstitute,gatk,4.6.0.0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/tree/4.6.0.0/src/main/resources/org/broadinstitute/hellbender/tools/walkers/vqsr/scalable/isolation-forest.py
