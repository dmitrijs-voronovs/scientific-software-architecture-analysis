id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/root/html602/TRef.html:11861,Modifiability,Inherit,InheritsFrom,11861,"); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; static TObjArray*GetListOfExecs(); virtual const char*TObject::GetName() const; TObject*GetObject() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TProcessID*GetPID() const; static TObject*GetStaticObject(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject:",MatchSource.WIKI,root/html602/TRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRef.html
https://root.cern/root/html602/TRef.html:11927,Modifiability,Inherit,InheritsFrom,11927,"py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; static TObjArray*GetListOfExecs(); virtual const char*TObject::GetName() const; TObject*GetObject() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TProcessID*GetPID() const; static TObject*GetStaticObject(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); voidoperator=(TObject* obj);",MatchSource.WIKI,root/html602/TRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRef.html
https://root.cern/root/html602/TRef.html:15624,Modifiability,Inherit,Inheritance,15624,"rs; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TRef::(anonymous)kNotComputed; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TProcessID*fPID!Pointer to ProcessID when TRef was written; static TObjArray*fgExecsList of execs; static TObject*fgObjectIn: this, Out: pointer to object (used by Action on Demand). Class Charts. Inheritance Chart:. TObject. ←; TRef. Function documentation; TRef(TObject* obj); Create a ref to obj. TRef(const TRef& ref); TRef copy ctor. void operator=(TObject* obj); Assign object to reference. TRef & operator=(const TRef& ref); TRef assignment operator. Int_t AddExec(const char* name); If Exec with name does not exist in the list of Execs, it is created.; returns the index of the Exec in the list. TObjArray * GetListOfExecs(); Return a pointer to the static TObjArray holding the list of Execs. TObject * GetObject() const; Return a pointer to the referenced object. void SetAction(const char* name); Store the exec number (in the ROOT list of Execs); into the fBits of this TRef. void SetAction(TObject* parent); Find the action to be executed in the dictionary of the parent class; and store the corresponding exec number into fBits.; This function searches a data member in the class of parent with an; offset corresponding to this.; If a comment ""TEXEC:"" is found in the comment field of the da",MatchSource.WIKI,root/html602/TRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRef.html
https://root.cern/root/html602/TRef.html:6341,Performance,Load,LoadHits,6341,"nition of the TRef data member in the original class, do:; TRef fRef; //EXEC:execName. points to something; When the special keyword ""EXEC:"" is found in the comment field of the member,; the next string is assumed to be the name of a TExec object.; When a file is connected, the dictionary of the classes on the file; is read in memory (see TFile::ReadStreamerInfo). When the TStreamerElement; object is read, a TExec object is automatically created with the name; specified after the keywork ""EXEC:"" in case a TExec with a same name does; not already exist.; The action to be executed via this TExec can be specified with:; - a call to the TExec constructor, if the constructor is called before; opening the file.; - a call to TExec::SetAction at any time.; One can compute a pointer to an existing TExec with a name with:; TExec *myExec = gROOT->GetExec(execName);; myExec->SetAction(actionCommand); where; - actionCommand is a string containing a CINT instruction. Examples:; myExec->SetAction(""LoadHits()"");; myExec->SetAction("".x script.C"");. When a TRef is dereferenced via TRef::GetObject, its TExec will be; automatically executed. In the function/script being executed, one or more; of the following actions can be executed:; - load a file containing the referenced object. This function typically; looks in the file catalog (GRID).; - compute a pointer to the referenced object and communicate this pointer; back to the calling function TRef::GetObject via:; TRef::SetStaticObject(object).; When the TExec is called, it has access to the dereferencing TRef; by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this""; before the call to TExec). This can be useful for accessing the TRef's; fUniqueID.; As soon as an object is returned to GetObject, the fUniqueID of the TRef is set; to the fUniqueID of the referenced object. At the next call to GetObject,; the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on demand is shown in $R",MatchSource.WIKI,root/html602/TRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRef.html
https://root.cern/root/html602/TRef.html:6580,Performance,load,load,6580,"med to be the name of a TExec object.; When a file is connected, the dictionary of the classes on the file; is read in memory (see TFile::ReadStreamerInfo). When the TStreamerElement; object is read, a TExec object is automatically created with the name; specified after the keywork ""EXEC:"" in case a TExec with a same name does; not already exist.; The action to be executed via this TExec can be specified with:; - a call to the TExec constructor, if the constructor is called before; opening the file.; - a call to TExec::SetAction at any time.; One can compute a pointer to an existing TExec with a name with:; TExec *myExec = gROOT->GetExec(execName);; myExec->SetAction(actionCommand); where; - actionCommand is a string containing a CINT instruction. Examples:; myExec->SetAction(""LoadHits()"");; myExec->SetAction("".x script.C"");. When a TRef is dereferenced via TRef::GetObject, its TExec will be; automatically executed. In the function/script being executed, one or more; of the following actions can be executed:; - load a file containing the referenced object. This function typically; looks in the file catalog (GRID).; - compute a pointer to the referenced object and communicate this pointer; back to the calling function TRef::GetObject via:; TRef::SetStaticObject(object).; When the TExec is called, it has access to the dereferencing TRef; by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this""; before the call to TExec). This can be useful for accessing the TRef's; fUniqueID.; As soon as an object is returned to GetObject, the fUniqueID of the TRef is set; to the fUniqueID of the referenced object. At the next call to GetObject,; the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on demand is shown in $ROOTSYS/test/Event.h with; the member:; TRef fWebHistogram; //EXEC:GetWebHistogram; When calling fWebHistogram.GetObject(), the function GetObject; will automatically invoke a script GetWebHistogram.C via the int",MatchSource.WIKI,root/html602/TRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRef.html
https://root.cern/root/html602/TRef.html:822,Safety,avoid,avoid,822,". TRef. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TRef. class TRef: public TObject. TRef. Persistent Reference link to a TObject; A TRef is a lightweight object pointing to any TObject.; This object can be used instead of normal C++ pointers in case; - the referenced object R and the pointer P are not written to the same file; - P is read before R; - R and P are written to different Tree branches. When a top level object (eg Event *event) is a tree/graph of many objects,; the normal ROOT Streaming mechanism ensures that only one copy of each object; in the tree/graph is written to the output buffer to avoid circular; dependencies.; However if the object event is split into several files or into several; branches of one or more Trees, normal C++ pointers cannot be used because; each I/O operation will write the referenced objects.; When a TRef is used to point to a TObject *robj, for example in a class with; TRef fRef;; one can do:; fRef = robj; //to set the pointer; This TRef and robj can be written with two different I/O calls; in the same or different files, in the same or different branches of a Tree. If the TRef is read and the referenced object has not yet been read,; the TRef will return a null pointer. As soon as the referenced object; will be read, the TRef will point to it. If the referenced object is; contained in a TTree it can be autoloaded using the TBranchRef mechanism,; which is set up by simply calling TTree::BranchRef(). TRef also supports the complex situation where a TFile is updated; multiple times on the same machine or a different machine. How does it work. A TRef is itself a TObject with an additional transient pointer fPID.; When the statement fRef = robj is executed, the following actions happen:; - The pointer fPID is set to the cur",MatchSource.WIKI,root/html602/TRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRef.html
https://root.cern/root/html602/TRef.html:4358,Safety,avoid,avoid,4358," read by TObject::Streamer, the pidf is read.; At this point, robj is entered into the table of objects of the TProcessID; corresponding to pidf. WARNING1: If MyClass is the class of the referenced object, The TObject; part of MyClass must be Streamed. One should not; call MyClass::Class()->IgnoreTObjectStreamer(). WARNING2: A TRef cannot point to another TRef. ObjectNumber. When an object is referenced (see TRef assignement operator or TRefArray::Add); a unique identifier is computed and stored in both the fUniqueID of the; referenced and referencing object. This uniqueID is computed by incrementing; by one the static global in TProcessID::fgNumber. fUniqueID is some sort of; serial object number in the current session. One can retrieve at any time; the current value of fgNumber by calling the static function TProcessID::GetObjectCount; or set this number via TProcessID::SetObjectCount.; To avoid a growing table of fObjects in TProcessID, in case, for example,; one processes many events in a loop, it might be necessary to reset the; ObjectNumber at the end of processing of one event. See an example; in $ROOTSYS/test/Event.cxx (look at function Build).; The value of ObjectNumber (say saveNumber=TProcessID::GetObjectCount()) may be; saved at the beginning of one event and reset to this original value; at the end of the event via TProcessID::SetObjectCount(saveNumber). These; actions may be stacked. Action on Demand. The normal behaviour of a TRef has been described above. In addition,; TRef supports also ""Actions on Demand"". It may happen that the object; referenced is not yet in memory, on a separate file or not yet computed.; In this case TRef is able to automatically execute an action:; - call to a compiled function (static function of member function); - call to an interpreted function; - execution of a CINT script. How to select this option?; In the definition of the TRef data member in the original class, do:; TRef fRef; //EXEC:execName. points to something; Whe",MatchSource.WIKI,root/html602/TRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRef.html
https://root.cern/root/html602/TRef.html:8457,Safety,detect,detected,8457,"function GetObject; will automatically invoke a script GetWebHistogram.C via the interpreter.; An example of a GetWebHistogram.C script is shown below; void GetWebHistogram() {; TFile *f= TFile::Open(""http://root.cern.ch/files/pippa.root"");; f->cd(""DM/CJ"");; TH1 *h6 = (TH1*)gDirectory->Get(""h6"");; h6->SetDirectory(0);; delete f;; TRef::SetStaticObject(h6);; }; In the above example, a call to fWebHistogram.GetObject() executes the; script with the function GetWebHistogram. This script connects a file; with histograms: pippa.root on the ROOT Web site and returns the object h6; to TRef::GetObject.; Note that if the definition of the TRef fWebHistogram had been:; TRef fWebHistogram; //EXEC:GetWebHistogram(); then, the compiled or interpreted function GetWebHistogram() would have; been called instead of the CINT script GetWebHistogram.C. Special case of a TRef pointing to an object with a TUUID. If the referenced object has a TUUID, its bit kHasUUID has been set.; This case is detected by the TRef assignement operator.; (For example, TFile and TDirectory have a TUUID); The TRef fPID points directly to the single object TProcessUUID (deriving; from TProcessID) and managing the list of TUUIDs for a process.; The TRef kHasUUID bit is set and its fUniqueID is set to the fUniqueID; of the referenced object.; When the TRef is streamed to a buffer, the corresponding TUUID is also; streamed with the TRef. When a TRef is read from a buffer, the corresponding; TUUID is also read and entered into the global list of TUUIDs (if not; already there). The TRef fUniqueID is set to the UUIDNumber.; see TProcessUUID for more details. Array of TRef. The special class TRefArray should be used to store multiple references.; A TRefArray has one single pointer fPID for all objects in the array.; It has a dynamic compact table of fUniqueIDs. Use a TRefArray rather; then a collection of TRefs if all TRefs stem from the same process. Example:; Suppose a TObjArray *mytracks containing a list of Trac",MatchSource.WIKI,root/html602/TRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRef.html
https://root.cern/root/html602/TRef.html:6877,Security,access,access,6877,"ed via this TExec can be specified with:; - a call to the TExec constructor, if the constructor is called before; opening the file.; - a call to TExec::SetAction at any time.; One can compute a pointer to an existing TExec with a name with:; TExec *myExec = gROOT->GetExec(execName);; myExec->SetAction(actionCommand); where; - actionCommand is a string containing a CINT instruction. Examples:; myExec->SetAction(""LoadHits()"");; myExec->SetAction("".x script.C"");. When a TRef is dereferenced via TRef::GetObject, its TExec will be; automatically executed. In the function/script being executed, one or more; of the following actions can be executed:; - load a file containing the referenced object. This function typically; looks in the file catalog (GRID).; - compute a pointer to the referenced object and communicate this pointer; back to the calling function TRef::GetObject via:; TRef::SetStaticObject(object).; When the TExec is called, it has access to the dereferencing TRef; by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this""; before the call to TExec). This can be useful for accessing the TRef's; fUniqueID.; As soon as an object is returned to GetObject, the fUniqueID of the TRef is set; to the fUniqueID of the referenced object. At the next call to GetObject,; the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on demand is shown in $ROOTSYS/test/Event.h with; the member:; TRef fWebHistogram; //EXEC:GetWebHistogram; When calling fWebHistogram.GetObject(), the function GetObject; will automatically invoke a script GetWebHistogram.C via the interpreter.; An example of a GetWebHistogram.C script is shown below; void GetWebHistogram() {; TFile *f= TFile::Open(""http://root.cern.ch/files/pippa.root"");; f->cd(""DM/CJ"");; TH1 *h6 = (TH1*)gDirectory->Get(""h6"");; h6->SetDirectory(0);; delete f;; TRef::SetStaticObject(h6);; }; In the above example, a call to fWebHistogram.GetObject() executes the; script with the funct",MatchSource.WIKI,root/html602/TRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRef.html
https://root.cern/root/html602/TRef.html:7034,Security,access,accessing,7034,"; opening the file.; - a call to TExec::SetAction at any time.; One can compute a pointer to an existing TExec with a name with:; TExec *myExec = gROOT->GetExec(execName);; myExec->SetAction(actionCommand); where; - actionCommand is a string containing a CINT instruction. Examples:; myExec->SetAction(""LoadHits()"");; myExec->SetAction("".x script.C"");. When a TRef is dereferenced via TRef::GetObject, its TExec will be; automatically executed. In the function/script being executed, one or more; of the following actions can be executed:; - load a file containing the referenced object. This function typically; looks in the file catalog (GRID).; - compute a pointer to the referenced object and communicate this pointer; back to the calling function TRef::GetObject via:; TRef::SetStaticObject(object).; When the TExec is called, it has access to the dereferencing TRef; by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this""; before the call to TExec). This can be useful for accessing the TRef's; fUniqueID.; As soon as an object is returned to GetObject, the fUniqueID of the TRef is set; to the fUniqueID of the referenced object. At the next call to GetObject,; the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on demand is shown in $ROOTSYS/test/Event.h with; the member:; TRef fWebHistogram; //EXEC:GetWebHistogram; When calling fWebHistogram.GetObject(), the function GetObject; will automatically invoke a script GetWebHistogram.C via the interpreter.; An example of a GetWebHistogram.C script is shown below; void GetWebHistogram() {; TFile *f= TFile::Open(""http://root.cern.ch/files/pippa.root"");; f->cd(""DM/CJ"");; TH1 *h6 = (TH1*)gDirectory->Get(""h6"");; h6->SetDirectory(0);; delete f;; TRef::SetStaticObject(h6);; }; In the above example, a call to fWebHistogram.GetObject() executes the; script with the function GetWebHistogram. This script connects a file; with histograms: pippa.root on the ROOT Web site and returns t",MatchSource.WIKI,root/html602/TRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRef.html
https://root.cern/root/html602/TRef.html:11751,Security,Hash,Hash,11751,"char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; static TObjArray*GetListOfExecs(); virtual const char*TObject::GetName() const; TObject*GetObject() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TProcessID*GetPID() const; static TObject*GetStaticObject(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(s",MatchSource.WIKI,root/html602/TRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRef.html
https://root.cern/root/html602/TRef.html:17207,Security,access,access,17207,"ence. TRef & operator=(const TRef& ref); TRef assignment operator. Int_t AddExec(const char* name); If Exec with name does not exist in the list of Execs, it is created.; returns the index of the Exec in the list. TObjArray * GetListOfExecs(); Return a pointer to the static TObjArray holding the list of Execs. TObject * GetObject() const; Return a pointer to the referenced object. void SetAction(const char* name); Store the exec number (in the ROOT list of Execs); into the fBits of this TRef. void SetAction(TObject* parent); Find the action to be executed in the dictionary of the parent class; and store the corresponding exec number into fBits.; This function searches a data member in the class of parent with an; offset corresponding to this.; If a comment ""TEXEC:"" is found in the comment field of the data member,; the function stores the exec identifier of the exec statement; following this keyword. TObject * GetStaticObject(); Returns the static object. void SetObject(TObject* obj); static Obsolete function kept for back compatibility.; In the near future will print a Warning, then will be deleted. void SetStaticObject(TObject* obj); Static function to set the object found on the Action on Demand function.; This function may be called by the user in the function called; when a ""EXEC:"" keyword is specified in the data member field of the TRef.; The function can get access to the dereferencing TRef (i.e. this)using; the static function GetStaticObject(). void Streamer(TBuffer& ); Stream an object of class TRef. TRef(); { }. virtual ~TRef(); { }. TProcessID * GetPID() const; {return fPID;}. Bool_t IsValid() const; {return GetUniqueID()!=0 ? kTRUE : kFALSE;}. » Author: Rene Brun 28/09/2001 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRef.html
https://root.cern/root/html602/TRef.html:4583,Testability,test,test,4583,"; corresponding to pidf. WARNING1: If MyClass is the class of the referenced object, The TObject; part of MyClass must be Streamed. One should not; call MyClass::Class()->IgnoreTObjectStreamer(). WARNING2: A TRef cannot point to another TRef. ObjectNumber. When an object is referenced (see TRef assignement operator or TRefArray::Add); a unique identifier is computed and stored in both the fUniqueID of the; referenced and referencing object. This uniqueID is computed by incrementing; by one the static global in TProcessID::fgNumber. fUniqueID is some sort of; serial object number in the current session. One can retrieve at any time; the current value of fgNumber by calling the static function TProcessID::GetObjectCount; or set this number via TProcessID::SetObjectCount.; To avoid a growing table of fObjects in TProcessID, in case, for example,; one processes many events in a loop, it might be necessary to reset the; ObjectNumber at the end of processing of one event. See an example; in $ROOTSYS/test/Event.cxx (look at function Build).; The value of ObjectNumber (say saveNumber=TProcessID::GetObjectCount()) may be; saved at the beginning of one event and reset to this original value; at the end of the event via TProcessID::SetObjectCount(saveNumber). These; actions may be stacked. Action on Demand. The normal behaviour of a TRef has been described above. In addition,; TRef supports also ""Actions on Demand"". It may happen that the object; referenced is not yet in memory, on a separate file or not yet computed.; In this case TRef is able to automatically execute an action:; - call to a compiled function (static function of member function); - call to an interpreted function; - execution of a CINT script. How to select this option?; In the definition of the TRef data member in the original class, do:; TRef fRef; //EXEC:execName. points to something; When the special keyword ""EXEC:"" is found in the comment field of the member,; the next string is assumed to be the name of",MatchSource.WIKI,root/html602/TRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRef.html
https://root.cern/root/html602/TRef.html:7350,Testability,test,test,7350,">SetAction(""LoadHits()"");; myExec->SetAction("".x script.C"");. When a TRef is dereferenced via TRef::GetObject, its TExec will be; automatically executed. In the function/script being executed, one or more; of the following actions can be executed:; - load a file containing the referenced object. This function typically; looks in the file catalog (GRID).; - compute a pointer to the referenced object and communicate this pointer; back to the calling function TRef::GetObject via:; TRef::SetStaticObject(object).; When the TExec is called, it has access to the dereferencing TRef; by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this""; before the call to TExec). This can be useful for accessing the TRef's; fUniqueID.; As soon as an object is returned to GetObject, the fUniqueID of the TRef is set; to the fUniqueID of the referenced object. At the next call to GetObject,; the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on demand is shown in $ROOTSYS/test/Event.h with; the member:; TRef fWebHistogram; //EXEC:GetWebHistogram; When calling fWebHistogram.GetObject(), the function GetObject; will automatically invoke a script GetWebHistogram.C via the interpreter.; An example of a GetWebHistogram.C script is shown below; void GetWebHistogram() {; TFile *f= TFile::Open(""http://root.cern.ch/files/pippa.root"");; f->cd(""DM/CJ"");; TH1 *h6 = (TH1*)gDirectory->Get(""h6"");; h6->SetDirectory(0);; delete f;; TRef::SetStaticObject(h6);; }; In the above example, a call to fWebHistogram.GetObject() executes the; script with the function GetWebHistogram. This script connects a file; with histograms: pippa.root on the ROOT Web site and returns the object h6; to TRef::GetObject.; Note that if the definition of the TRef fWebHistogram had been:; TRef fWebHistogram; //EXEC:GetWebHistogram(); then, the compiled or interpreted function GetWebHistogram() would have; been called instead of the CINT script GetWebHistogram.C. Special case o",MatchSource.WIKI,root/html602/TRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRef.html
https://root.cern/root/html602/TRef.html:14072,Testability,Test,TestBit,14072,"t char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); voidoperator=(TObject* obj); TRef&operator=(const TRef& ref); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAction(const char* name); virtual voidSetAction(TObject* parent); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); static voidSetStaticObject(TObject* obj); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRef(); TRef(TObject* obj); TRef(const TRef& ref); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRef.html
https://root.cern/root/html602/TRef.html:14111,Testability,Test,TestBits,14111,"t char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); voidoperator=(TObject* obj); TRef&operator=(const TRef& ref); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAction(const char* name); virtual voidSetAction(TObject* parent); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); static voidSetStaticObject(TObject* obj); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRef(); TRef(TObject* obj); TRef(const TRef& ref); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRef.html
https://root.cern/root/html602/TRef.html:1640,Usability,simpl,simply,1640,"ent Tree branches. When a top level object (eg Event *event) is a tree/graph of many objects,; the normal ROOT Streaming mechanism ensures that only one copy of each object; in the tree/graph is written to the output buffer to avoid circular; dependencies.; However if the object event is split into several files or into several; branches of one or more Trees, normal C++ pointers cannot be used because; each I/O operation will write the referenced objects.; When a TRef is used to point to a TObject *robj, for example in a class with; TRef fRef;; one can do:; fRef = robj; //to set the pointer; This TRef and robj can be written with two different I/O calls; in the same or different files, in the same or different branches of a Tree. If the TRef is read and the referenced object has not yet been read,; the TRef will return a null pointer. As soon as the referenced object; will be read, the TRef will point to it. If the referenced object is; contained in a TTree it can be autoloaded using the TBranchRef mechanism,; which is set up by simply calling TTree::BranchRef(). TRef also supports the complex situation where a TFile is updated; multiple times on the same machine or a different machine. How does it work. A TRef is itself a TObject with an additional transient pointer fPID.; When the statement fRef = robj is executed, the following actions happen:; - The pointer fPID is set to the current TProcessID.; - The current ObjectNumber (see below) is incremented by one.; - robj::fUniqueID is set to ObjectNumber.; - In the fPID object, the element fObjects[ObjectNumber] is set to robj; - ref::fUniqueID is also set to ObjectNumber.; After having set fRef, one can immediatly return the value of robj; using fRef.GetObject(). This function returns directly fObjects[fUniqueID]; from the fPID object. When the TRef is written, the process id number pidf of fPID is written; in addition to the TObject part of TRef (fBits,fUniqueID).; When the TRef is read, its pointer fPID is set to t",MatchSource.WIKI,root/html602/TRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRef.html
https://root.cern/root/html602/TRef.html:10105,Usability,Clear,Clear,10105,,MatchSource.WIKI,root/html602/TRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRef.html
https://root.cern/root/html602/TRefArray.html:1270,Availability,error,error,1270,"ay: public TSeqCollection. TRefArray. An array of references to TObjects. The array expands automatically; when objects are added (shrinking can be done by hand using Expand() ). The TRefArray can be filled with:; array.Add(obj); array.AddAt(obj,i); but not array[i] = obj !!!. The array elements can be retrieved with:; TObject *obj = array.At(i);. By default the TRefArray 'points' to the current process and can only; receive object that have been created in this process.; To point the TRefArray to a different process do:; TRefArray array( processId );. For example, if 'obj' is an instance that was created in the different; process and you do:; TRefArray array( TProcessID::GetProcessWithUID( obj ) );; Then; array.Add(obj);; is correct (obj comes from the process the array is pointed to; while; TObject *nobj = new TObject;; array.Add(nobj);; is incorrect since 'nobj' was created in a different process than the; one the array is pointed to. In this case you will see error message:; Error in <TRefArray::AddAtAndExpand>: The object at 0x... is not; registered in the process the TRefArray point to; (pid = ProcessID../....). When a TRefArray is Streamed, only the pointer unique id is written,; not the referenced object. TRefArray may be assigned to different; branches of one Tree or several Trees.; The branch containing the TRefArray can be read before or after the; array (eg TClonesArray, STL vector,..) of the referenced objects. See an example in $ROOTSYS/test/Event.h. RESTRICTIONS when using TRefArray. - Elements in a TRefArray cannot point to a TFile or TDirectory.; - All elements of a TRefArray must be set in the same process,; In particular, one cannot modify some elements of the array in; a different process.; Use an array of TRef when one of the above restrictions is met. The number of TRef handled by a single process id is limited to; 16777215 (see TRef for more detail). When the TProcessID is full; (has seen 16777215 objects), we switch to new one TProcessID; max",MatchSource.WIKI,root/html602/TRefArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArray.html
https://root.cern/root/html602/TRefArray.html:1286,Availability,Error,Error,1286,"ay: public TSeqCollection. TRefArray. An array of references to TObjects. The array expands automatically; when objects are added (shrinking can be done by hand using Expand() ). The TRefArray can be filled with:; array.Add(obj); array.AddAt(obj,i); but not array[i] = obj !!!. The array elements can be retrieved with:; TObject *obj = array.At(i);. By default the TRefArray 'points' to the current process and can only; receive object that have been created in this process.; To point the TRefArray to a different process do:; TRefArray array( processId );. For example, if 'obj' is an instance that was created in the different; process and you do:; TRefArray array( TProcessID::GetProcessWithUID( obj ) );; Then; array.Add(obj);; is correct (obj comes from the process the array is pointed to; while; TObject *nobj = new TObject;; array.Add(nobj);; is incorrect since 'nobj' was created in a different process than the; one the array is pointed to. In this case you will see error message:; Error in <TRefArray::AddAtAndExpand>: The object at 0x... is not; registered in the process the TRefArray point to; (pid = ProcessID../....). When a TRefArray is Streamed, only the pointer unique id is written,; not the referenced object. TRefArray may be assigned to different; branches of one Tree or several Trees.; The branch containing the TRefArray can be read before or after the; array (eg TClonesArray, STL vector,..) of the referenced objects. See an example in $ROOTSYS/test/Event.h. RESTRICTIONS when using TRefArray. - Elements in a TRefArray cannot point to a TFile or TDirectory.; - All elements of a TRefArray must be set in the same process,; In particular, one cannot modify some elements of the array in; a different process.; Use an array of TRef when one of the above restrictions is met. The number of TRef handled by a single process id is limited to; 16777215 (see TRef for more detail). When the TProcessID is full; (has seen 16777215 objects), we switch to new one TProcessID; max",MatchSource.WIKI,root/html602/TRefArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArray.html
https://root.cern/root/html602/TRefArray.html:2754,Availability,Error,Error,2754,"ll elements of a TRefArray must be set in the same process,; In particular, one cannot modify some elements of the array in; a different process.; Use an array of TRef when one of the above restrictions is met. The number of TRef handled by a single process id is limited to; 16777215 (see TRef for more detail). When the TProcessID is full; (has seen 16777215 objects), we switch to new one TProcessID; maximum 65535 including the TProcessIDs read from file).; However TRefArray can not switch to new TProcessID if they already; contain objects. When the TProcessID has been switched due to overflow and an new; object is added to an existing, empty TRefArray, you will see:. Warning in <TRefArray::AddAtAndExpand>: The ProcessID for the 0x5f83819e8 has been switched to ProcessID4/6c89f37e-8259-11e2-9717-166ee183beef:4. If the TRefArray was not empty, you will se:. Error in <TRefArray::AddAtAndExpand>: The object at %p can not be registered in the process the TRefArray points to (pid = ProcessID4/6c89f37e-8259-11e2-9717-166ee183beef) because the ProcessID has too many objects and the TRefArray already contains other objects. When running out of TProcessIds, you will se:. Warning in <TProcessID::AddProcessID>: Maximum number of TProcessID (65535) is almost reached (one left). TRef will stop being functional when the limit is reached. Fatal in <TProcessID::AddProcessID>: Maximum number of TProcessID (65535) has been reached. TRef are not longer functional. Function Members (Methods); public:. virtual~TRefArray(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAfter(const TObject* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddAtAndExpand(TObject* obj, Int_t idx); virtual Int_tAddAtFree(TObject* obj); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddLast(TObject* obj); voidTC",MatchSource.WIKI,root/html602/TRefArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArray.html
https://root.cern/root/html602/TRefArray.html:5181,Availability,Error,Error,5181,"gin() const; virtual Int_tBinarySearch(TObject* obj, Int_t upto = kMaxInt); virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidCompress(); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExpand(Int_t newSize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TCollection::FindObject(const char* name) const; virtual TObject*TCollection::FindObject(const TObject* obj) const; virtual TObject*First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntries() const; Int_tGetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t ",MatchSource.WIKI,root/html602/TRefArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArray.html
https://root.cern/root/html602/TRefArray.html:5310,Availability,error,error,5310,"ollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidCompress(); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExpand(Int_t newSize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TCollection::FindObject(const char* name) const; virtual TObject*TCollection::FindObject(const TObject* obj) const; virtual TObject*First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntries() const; Int_tGetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObje",MatchSource.WIKI,root/html602/TRefArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArray.html
https://root.cern/root/html602/TRefArray.html:5394,Availability,error,error,5394,"sName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidCompress(); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExpand(Int_t newSize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TCollection::FindObject(const char* name) const; virtual TObject*TCollection::FindObject(const TObject* obj) const; virtual TObject*First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntries() const; Int_tGetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TProcessID*GetPID() const; virtual Int_tTCollection::GetSize(",MatchSource.WIKI,root/html602/TRefArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArray.html
https://root.cern/root/html602/TRefArray.html:15215,Availability,error,error,15215,"nsertion semantics; use either a TList or a TOrdCollection. void AddLast(TObject* obj); Add object in the next empty slot in the array. Expand the array; if necessary. void AddBefore(const TObject* before, TObject* obj); Add object in the slot before object before. If before=0 add object; in the first slot. Note that this will overwrite any object that; might have already been in this slot. For insertion semantics use; either a TList or a TOrdCollection. void AddAfter(const TObject* after, TObject* obj); Add object in the slot after object after. If after=0 add object in; the last empty slot. Note that this will overwrite any object that; might have already been in this slot. For insertion semantics use; either a TList or a TOrdCollection. void AddAtAndExpand(TObject* obj, Int_t idx); Add object at position idx. If idx is larger than the current size; of the array, expand the array (double its size). void AddAt(TObject* obj, Int_t idx); Add object at position ids. Give an error when idx is out of bounds; (i.e. the array is not expanded). Int_t AddAtFree(TObject* obj); Return the position of the new object.; Find the first empty cell or AddLast if there is no empty cell. TObject * After(const TObject* obj) const; Return the object after obj. Returns 0 if obj is last object. TObject * Before(const TObject* obj) const; Return the object before obj. Returns 0 if obj is first object. void Clear(Option_t* option = """"); Remove all objects from the array. void Compress(); Remove empty slots from array. void Delete(Option_t* option = """"); Remove all objects from the array and free the internal memory. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. TObject * GetFromTable(Int_t idx) const; the reference may be in the TRefTable. void Streamer(TBuffer& ); Stream all objects in the array to or from the I/O buffer. TObject * First() const; Return the object in the first slot. TObject * Last() const; Return the object in the last filled slot. Returns 0 i",MatchSource.WIKI,root/html602/TRefArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArray.html
https://root.cern/root/html602/TRefArray.html:17419,Availability,error,error,17419,"u want to know the number of; non-empty slots. This function loops over the complete array and; is therefore very slow when applied in a loop. Most of the time you; better use GetLast()+1. Int_t GetAbsLast() const; Return absolute index to last object in array. Returns -1 in case; array is empty. Int_t GetLast() const; Return index of last object in array. Returns lowerBound-1 in case; array is empty. TObject ** GetObjectRef(const TObject* obj) const; Return address of pointer obj. UInt_t GetUID(Int_t at) const; Return UID of element at. Int_t IndexOf(const TObject* obj) const; obj != 0 Return index of object in array.; Returns lowerBound-1 in case array doesn't contain the obj. obj == 0 Return the index of the first empty slot.; Returns lowerBound-1 in case array doesn't contain any empty slot. void Init(Int_t s, Int_t lowerBound); Initialize a TRefArray. TIterator * MakeIterator(Bool_t dir = kIterForward) const; Returns an array iterator. Bool_t OutOfBoundsError(const char* where, Int_t i) const; Generate an out-of-bounds error. Always returns false. TObject * RemoveAt(Int_t idx); Remove object at index idx. TObject * Remove(TObject* obj); Remove object from array. void SetLast(Int_t last); Set index of last object in array, effectively truncating the; array. Use carefully since whenever last position has to be; recalculated, e.g. after a Remove() or Sort() it will be reset; to the last non-empty slot. If last is -2 this will force the; recalculation of the last used slot. void Sort(Int_t upto = kMaxInt); If objects in array are sortable (i.e. IsSortable() returns true; for all objects) then sort array. Int_t BinarySearch(TObject* obj, Int_t upto = kMaxInt); Find object using a binary search. Array must first have been sorted.; Search can be limited by setting upto to desired index. Bool_t BoundsOk(const char* where, Int_t at) const. TObject * operator[](Int_t i) const. TObject * At(Int_t idx) const; Return the object at position i. Returns 0 if i is out of bounds",MatchSource.WIKI,root/html602/TRefArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArray.html
https://root.cern/root/html602/TRefArray.html:1276,Integrability,message,message,1276,"ay: public TSeqCollection. TRefArray. An array of references to TObjects. The array expands automatically; when objects are added (shrinking can be done by hand using Expand() ). The TRefArray can be filled with:; array.Add(obj); array.AddAt(obj,i); but not array[i] = obj !!!. The array elements can be retrieved with:; TObject *obj = array.At(i);. By default the TRefArray 'points' to the current process and can only; receive object that have been created in this process.; To point the TRefArray to a different process do:; TRefArray array( processId );. For example, if 'obj' is an instance that was created in the different; process and you do:; TRefArray array( TProcessID::GetProcessWithUID( obj ) );; Then; array.Add(obj);; is correct (obj comes from the process the array is pointed to; while; TObject *nobj = new TObject;; array.Add(nobj);; is incorrect since 'nobj' was created in a different process than the; one the array is pointed to. In this case you will see error message:; Error in <TRefArray::AddAtAndExpand>: The object at 0x... is not; registered in the process the TRefArray point to; (pid = ProcessID../....). When a TRefArray is Streamed, only the pointer unique id is written,; not the referenced object. TRefArray may be assigned to different; branches of one Tree or several Trees.; The branch containing the TRefArray can be read before or after the; array (eg TClonesArray, STL vector,..) of the referenced objects. See an example in $ROOTSYS/test/Event.h. RESTRICTIONS when using TRefArray. - Elements in a TRefArray cannot point to a TFile or TDirectory.; - All elements of a TRefArray must be set in the same process,; In particular, one cannot modify some elements of the array in; a different process.; Use an array of TRef when one of the above restrictions is met. The number of TRef handled by a single process id is limited to; 16777215 (see TRef for more detail). When the TProcessID is full; (has seen 16777215 objects), we switch to new one TProcessID; max",MatchSource.WIKI,root/html602/TRefArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArray.html
https://root.cern/root/html602/TRefArray.html:115,Modifiability,inherit,inheritance,115,". TRefArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TRefArray. class TRefArray: public TSeqCollection. TRefArray. An array of references to TObjects. The array expands automatically; when objects are added (shrinking can be done by hand using Expand() ). The TRefArray can be filled with:; array.Add(obj); array.AddAt(obj,i); but not array[i] = obj !!!. The array elements can be retrieved with:; TObject *obj = array.At(i);. By default the TRefArray 'points' to the current process and can only; receive object that have been created in this process.; To point the TRefArray to a different process do:; TRefArray array( processId );. For example, if 'obj' is an instance that was created in the different; process and you do:; TRefArray array( TProcessID::GetProcessWithUID( obj ) );; Then; array.Add(obj);; is correct (obj comes from the process the array is pointed to; while; TObject *nobj = new TObject;; array.Add(nobj);; is incorrect since 'nobj' was created in a different process than the; one the array is pointed to. In this case you will see error message:; Error in <TRefArray::AddAtAndExpand>: The object at 0x... is not; registered in the process the TRefArray point to; (pid = ProcessID../....). When a TRefArray is Streamed, only the pointer unique id is written,; not the referenced object. TRefArray may be assigned to different; branches of one Tree or several Trees.; The branch containing the TRefArray can be read before or after the; array (eg TClonesArray, STL vector,..) of the referenced objects. See an example in $ROOTSYS/test/Event.h. RESTRICTIONS when using TRefArray. - Elements in a TRefArray cannot point to a TFile or TDirectory.; - All elements of a TRefArray must be set in the same process,; In particular, one cannot modify some elements of the a",MatchSource.WIKI,root/html602/TRefArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArray.html
https://root.cern/root/html602/TRefArray.html:6816,Modifiability,Inherit,InheritsFrom,6816,"llection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntries() const; Int_tGetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TProcessID*GetPID() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; UInt_tGetUID(Int_t at) const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tIndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; virtual Bool_tIsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*Last() const; Int_tTSeqCollection::LastIndex() const; Int_tLowerBound() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method) const; Long64_tTSeqCollection::Merge(TCollection* list); virtual Bool_t",MatchSource.WIKI,root/html602/TRefArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArray.html
https://root.cern/root/html602/TRefArray.html:6882,Modifiability,Inherit,InheritsFrom,6882,"wOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntries() const; Int_tGetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TProcessID*GetPID() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; UInt_tGetUID(Int_t at) const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tIndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; virtual Bool_tIsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*Last() const; Int_tTSeqCollection::LastIndex() const; Int_tLowerBound() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method) const; Long64_tTSeqCollection::Merge(TCollection* list); virtual Bool_tTObject::Notify(); static Int_tTSeqCollection::ObjCompare(TObject*",MatchSource.WIKI,root/html602/TRefArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArray.html
https://root.cern/root/html602/TRefArray.html:13215,Modifiability,Inherit,Inheritance,13215,"Object::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfLastLast element in array containing an object; Int_tfLowerBoundLower bound of the array; TStringTCollection::fNamename of the collection; TProcessID*fPIDPointer to Process Unique Identifier; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; UInt_t*fUIDs[fSize] To store uids of referenced objects; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TRefArray. Function documentation; TRefArray(TProcessID* pid = 0); default constructor. TRefArray(Int_t s, TProcessID* pid); Create an object array. Using s one can set the array size; and lowerBound can be used to set the array lowerbound; index (default is 0). TRefArray(Int_t s, Int_t lowerBound = 0, TProcessID* pid = 0); Create an object array. Using s one can set the array size; and lowerBound can be used to set the array lowerbound; index (default is 0). TRefArray(const TRefArray& a); Create a copy of TRefArray a. TRefArray& operator=(const TRefArray& a); Assignment operator. ~TRefArray(); Usual destructor (The object pointed to by the array are never deleted). Bool_t GetObjectUID(Int_t& uid, TObject* obj, const char* methodname); Private/static function, check for validity of pid. void AddFirst(TObject* obj); Add object in the first slot of the array. This will overwrite the; first element that might have been there. To ha",MatchSource.WIKI,root/html602/TRefArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArray.html
https://root.cern/root/html602/TRefArray.html:6658,Security,Hash,Hash,6658,"ect*TCollection::FindObject(const TObject* obj) const; virtual TObject*First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntries() const; Int_tGetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TProcessID*GetPID() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; UInt_tGetUID(Int_t at) const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tIndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; virtual Bool_tIsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*Last() const; Int_tTSeqCollection::LastIndex() const; Int_tLowerBound() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*MakeIterator(Bool_t dir = kIterForward) const; virtual TIte",MatchSource.WIKI,root/html602/TRefArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArray.html
https://root.cern/root/html602/TRefArray.html:1767,Testability,test,test,1767," process.; To point the TRefArray to a different process do:; TRefArray array( processId );. For example, if 'obj' is an instance that was created in the different; process and you do:; TRefArray array( TProcessID::GetProcessWithUID( obj ) );; Then; array.Add(obj);; is correct (obj comes from the process the array is pointed to; while; TObject *nobj = new TObject;; array.Add(nobj);; is incorrect since 'nobj' was created in a different process than the; one the array is pointed to. In this case you will see error message:; Error in <TRefArray::AddAtAndExpand>: The object at 0x... is not; registered in the process the TRefArray point to; (pid = ProcessID../....). When a TRefArray is Streamed, only the pointer unique id is written,; not the referenced object. TRefArray may be assigned to different; branches of one Tree or several Trees.; The branch containing the TRefArray can be read before or after the; array (eg TClonesArray, STL vector,..) of the referenced objects. See an example in $ROOTSYS/test/Event.h. RESTRICTIONS when using TRefArray. - Elements in a TRefArray cannot point to a TFile or TDirectory.; - All elements of a TRefArray must be set in the same process,; In particular, one cannot modify some elements of the array in; a different process.; Use an array of TRef when one of the above restrictions is met. The number of TRef handled by a single process id is limited to; 16777215 (see TRef for more detail). When the TProcessID is full; (has seen 16777215 objects), we switch to new one TProcessID; maximum 65535 including the TProcessIDs read from file).; However TRefArray can not switch to new TProcessID if they already; contain objects. When the TProcessID has been switched due to overflow and an new; object is added to an existing, empty TRefArray, you will see:. Warning in <TRefArray::AddAtAndExpand>: The ProcessID for the 0x5f83819e8 has been switched to ProcessID4/6c89f37e-8259-11e2-9717-166ee183beef:4. If the TRefArray was not empty, you will se:. Error",MatchSource.WIKI,root/html602/TRefArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArray.html
https://root.cern/root/html602/TRefArray.html:4046,Testability,Assert,AssertClass,4046,,MatchSource.WIKI,root/html602/TRefArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArray.html
https://root.cern/root/html602/TRefArray.html:10605,Testability,Test,TestBit,10605,"last); virtual Int_tTObject::Read(const char* name); virtual voidTCollection::RecursiveRemove(TObject* obj); virtual TObject*Remove(TObject* obj); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTSeqCollection::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLast(Int_t last); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSort(Int_t upto = kMaxInt); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRefArray(TProcessID* pid = 0); TRefArray(const TRefArray& a); TRefArray(Int_t s, TProcessID* pid); TRefArray(Int_t s, Int_t lowerBound = 0, TProcessID* pid = 0); voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRefArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArray.html
https://root.cern/root/html602/TRefArray.html:10644,Testability,Test,TestBits,10644,"last); virtual Int_tTObject::Read(const char* name); virtual voidTCollection::RecursiveRemove(TObject* obj); virtual TObject*Remove(TObject* obj); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTSeqCollection::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLast(Int_t last); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSort(Int_t upto = kMaxInt); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRefArray(TProcessID* pid = 0); TRefArray(const TRefArray& a); TRefArray(Int_t s, TProcessID* pid); TRefArray(Int_t s, Int_t lowerBound = 0, TProcessID* pid = 0); voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRefArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArray.html
https://root.cern/root/html602/TRefArray.html:15635,Usability,Clear,Clear,15635,"t or a TOrdCollection. void AddAfter(const TObject* after, TObject* obj); Add object in the slot after object after. If after=0 add object in; the last empty slot. Note that this will overwrite any object that; might have already been in this slot. For insertion semantics use; either a TList or a TOrdCollection. void AddAtAndExpand(TObject* obj, Int_t idx); Add object at position idx. If idx is larger than the current size; of the array, expand the array (double its size). void AddAt(TObject* obj, Int_t idx); Add object at position ids. Give an error when idx is out of bounds; (i.e. the array is not expanded). Int_t AddAtFree(TObject* obj); Return the position of the new object.; Find the first empty cell or AddLast if there is no empty cell. TObject * After(const TObject* obj) const; Return the object after obj. Returns 0 if obj is last object. TObject * Before(const TObject* obj) const; Return the object before obj. Returns 0 if obj is first object. void Clear(Option_t* option = """"); Remove all objects from the array. void Compress(); Remove empty slots from array. void Delete(Option_t* option = """"); Remove all objects from the array and free the internal memory. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. TObject * GetFromTable(Int_t idx) const; the reference may be in the TRefTable. void Streamer(TBuffer& ); Stream all objects in the array to or from the I/O buffer. TObject * First() const; Return the object in the first slot. TObject * Last() const; Return the object in the last filled slot. Returns 0 if no entries. Int_t GetEntries() const; Return the number of objects in array (i.e. number of non-empty slots).; Attention: use this method ONLY if you want to know the number of; non-empty slots. This function loops over the complete array and; is therefore very slow when applied in a loop. Most of the time you; better use GetLast()+1. Int_t GetAbsLast() const; Return absolute index to last object in array. Returns -1 in case; arr",MatchSource.WIKI,root/html602/TRefArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArray.html
https://root.cern/root/html602/TRefArrayIter.html:119,Modifiability,inherit,inheritance,119,". TRefArrayIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TRefArrayIter. class TRefArrayIter: public TIterator, public iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>. TRefArrayIter. Iterator of object array. Function Members (Methods); public:. virtual~TRefArrayIter(); static TClass*Class(); virtual const TCollection*GetCollection() const; virtual Option_t*TIterator::GetOption() const; virtual TClass*IsA() const; virtual TObject*Next(); virtual Bool_toperator!=(const TIterator& aIter) const; Bool_toperator!=(const TRefArrayIter& aIter) const; TObject*TIterator::operator()(); virtual TObject*operator*() const; virtual TIterator&operator=(const TIterator& rhs); TRefArrayIter&operator=(const TRefArrayIter& rhs); Bool_tTIterator::operator==(const TIterator& other) const; virtual voidReset(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRefArrayIter(const TRefArrayIter& iter); TRefArrayIter(const TRefArray* arr, Bool_t dir = kIterForward). private:. TRefArrayIter(). Data Members; private:. const TRefArray*fArrayarray being iterated; Int_tfCurCursorcurrent position in array; Int_tfCursornext position in array; Bool_tfDirectioniteration direction. Class Charts. Inheritance Chart:. TIterator. iterator. ←; TRefArrayIter. Function documentation; TRefArrayIter(const TRefArray* arr, Bool_t dir = kIterForward); Create array iterator. By default the iteration direction; is kIterForward. To go backward use kIterBackward. TRefArrayIter(const TRefArrayIter& iter); Copy ctor. TIterator & operator=(const TIterator& rhs); Overridden assignment operator. TRefArrayIter & operator=(const TRefArrayIter& rhs); Overloaded assignment operator. TOb",MatchSource.WIKI,root/html602/TRefArrayIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArrayIter.html
https://root.cern/root/html602/TRefArrayIter.html:1526,Modifiability,Inherit,Inheritance,1526,"lass(); virtual const TCollection*GetCollection() const; virtual Option_t*TIterator::GetOption() const; virtual TClass*IsA() const; virtual TObject*Next(); virtual Bool_toperator!=(const TIterator& aIter) const; Bool_toperator!=(const TRefArrayIter& aIter) const; TObject*TIterator::operator()(); virtual TObject*operator*() const; virtual TIterator&operator=(const TIterator& rhs); TRefArrayIter&operator=(const TRefArrayIter& rhs); Bool_tTIterator::operator==(const TIterator& other) const; virtual voidReset(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRefArrayIter(const TRefArrayIter& iter); TRefArrayIter(const TRefArray* arr, Bool_t dir = kIterForward). private:. TRefArrayIter(). Data Members; private:. const TRefArray*fArrayarray being iterated; Int_tfCurCursorcurrent position in array; Int_tfCursornext position in array; Bool_tfDirectioniteration direction. Class Charts. Inheritance Chart:. TIterator. iterator. ←; TRefArrayIter. Function documentation; TRefArrayIter(const TRefArray* arr, Bool_t dir = kIterForward); Create array iterator. By default the iteration direction; is kIterForward. To go backward use kIterBackward. TRefArrayIter(const TRefArrayIter& iter); Copy ctor. TIterator & operator=(const TIterator& rhs); Overridden assignment operator. TRefArrayIter & operator=(const TRefArrayIter& rhs); Overloaded assignment operator. TObject * Next(); Return next object in array. Returns 0 when no more objects in array. void Reset(); Reset array iterator. Bool_t operator!=(const TIterator& aIter) const; This operator compares two TIterator objects. Bool_t operator!=(const TRefArrayIter& aIter) const; This operator compares two TRefArrayIter objects. TObject * operator*() const; Return current object or nullptr. TRefArrayIter(); { }. ~TRefArrayIter(); { }. const TCollection * GetCollection() const; { return fArray; }. » Author: Rene Brun 02/10/2001 » Copyright (",MatchSource.WIKI,root/html602/TRefArrayIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefArrayIter.html
https://root.cern/root/html602/TRefCnt.html:113,Modifiability,inherit,inheritance,113,". TRefCnt. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TRefCnt. class TRefCnt. TRefCnt. Definitions for TRefCnt, base class for reference counted objects. Function Members (Methods); public:. virtual~TRefCnt(); voidAddReference(); TRefCnt&operator=(const TRefCnt&); UInt_tReferences() const; UInt_tRemoveReference(); voidSetRefCount(UInt_t r); TRefCnt(Int_t initRef = 0); TRefCnt(TRefCnt::EReferenceFlag); TRefCnt(const TRefCnt&). Data Members; public:. static TRefCnt::EReferenceFlagkStaticInit. protected:. UInt_tfRefs(1 less than) number of references. Class Charts. Inheritance Chart:. TRefCnt. ←. TGFont. TGGC. TGLayoutHints; ←. TGTableLayoutHints. TGXYLayoutHints. TGPicture; ←. TGSelectedPicture. Function documentation; TRefCnt(TRefCnt::EReferenceFlag ); Leave fRefs alone. TRefCnt(Int_t initRef = 0); { }. TRefCnt(TRefCnt::EReferenceFlag ). virtual ~TRefCnt(); { }. UInt_t References() const; { return fRefs+1; }. void SetRefCount(UInt_t r); { fRefs = r-1; }. void AddReference(); { fRefs++; }. UInt_t RemoveReference(); { return fRefs--; }. » Author: Fons Rademakers 04/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRefCnt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefCnt.html
https://root.cern/root/html602/TRefCnt.html:781,Modifiability,Inherit,Inheritance,781,". TRefCnt. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TRefCnt. class TRefCnt. TRefCnt. Definitions for TRefCnt, base class for reference counted objects. Function Members (Methods); public:. virtual~TRefCnt(); voidAddReference(); TRefCnt&operator=(const TRefCnt&); UInt_tReferences() const; UInt_tRemoveReference(); voidSetRefCount(UInt_t r); TRefCnt(Int_t initRef = 0); TRefCnt(TRefCnt::EReferenceFlag); TRefCnt(const TRefCnt&). Data Members; public:. static TRefCnt::EReferenceFlagkStaticInit. protected:. UInt_tfRefs(1 less than) number of references. Class Charts. Inheritance Chart:. TRefCnt. ←. TGFont. TGGC. TGLayoutHints; ←. TGTableLayoutHints. TGXYLayoutHints. TGPicture; ←. TGSelectedPicture. Function documentation; TRefCnt(TRefCnt::EReferenceFlag ); Leave fRefs alone. TRefCnt(Int_t initRef = 0); { }. TRefCnt(TRefCnt::EReferenceFlag ). virtual ~TRefCnt(); { }. UInt_t References() const; { return fRefs+1; }. void SetRefCount(UInt_t r); { fRefs = r-1; }. void AddReference(); { fRefs++; }. UInt_t RemoveReference(); { return fRefs--; }. » Author: Fons Rademakers 04/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRefCnt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefCnt.html
https://root.cern/root/html602/TRefTable.html:2463,Availability,Error,Error,2463," virtual~TRefTable(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tAdd(Int_t uid, TProcessID* context = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """"",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:2592,Availability,error,error,2592," virtual~TRefTable(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tAdd(Int_t uid, TProcessID* context = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """"",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:2676,Availability,error,error,2676,"od) const; virtual Int_tAdd(Int_t uid, TProcessID* context = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Int_tExpand(Int_t pid, Int_t newsize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(TBuffer& b); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetN(Int_t pid) const; virtual const char*TObject::GetName() const; Int_tGetNumPIDs() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TObject*GetOwner() const; TObject*GetParent(Int_t uid, TProcessID* context = 0) const; TObjArray*GetParents() const; static TRefTable*GetRefTable(); Int_tGetSize(Int_t pid) const; virtual const char*TObject::GetTitle() const; UInt_tGetUID() const; TProcessID*Get",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:7855,Energy Efficiency,allocate,allocated,7855,"static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_t*fAllocSize![fNumPIDs] allocated size of array fParentIDs for each ProcessID; Int_tfDefaultSize!default size for a new PID array; vector<Int_t>fMapPIDtoInternal! cache of pid to index in fProcessGUIDs; Int_t*fN![fNumPIDs] current maximum number of IDs in array fParentIDs for each ProcessID; Int_tfNumPIDs!number of known ProcessIDs; TObject*fOwnerObject owning this TRefTable; Int_tfParentID!current parent ID in fParents (latest call to SetParent); Int_t**fParentIDs![fNumPIDs][fAllocSize] array of Parent IDs; TObjArray*fParentsarray of Parent objects (eg TTree branch) holding the referenced objects; vector<string>fProcessGUIDsUUIDs of TProcessIDs used in fParentIDs; Int_tfSizedummy for backward compatibility; UInt_tfUID!Current uid (set by TRef::GetObject); TProcessID*fUIDContext!TProcessID the current uid is referring to; static TRefTable*fgRefTablePointer to current TRefTable. Class Charts. Inheritance Chart:. TObject. ←; TRefTable. Function documentation; TRefTable(); Default constructor for I/O. TRefTable(TObject* owner, Int_t size); Create a TRefTable with initial size. ~TRefTable(); Destructor. Int_t Add(Int_t uid, TProcessID* context = 0); Add a new uid to the table.; we add a new pair (uid,fparent) to the map; This function is called by TObject::Streamer or TStreamerInfo::WriteBuffer. Int_t AddInternalIdxForPID(TProcessID* procid); Add the internal index for fProcessIDs, fAllocSize, etc given a PID. void Clear(Op",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:115,Modifiability,inherit,inheritance,115,". TRefTable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TRefTable. class TRefTable: public TObject. A TRefTable maintains the association between a referenced object; and the parent object supporting this referenced object. The parent object is typically a branch of a TTree. For each object; referenced in a TTree entry, the corresponding entry in the TTree's; TBranchRef::fRefTable contains the index of the branch that; needs to be loaded to bring the object into memory. Persistency of a TRefTable is split into two parts:; * entry specific information is stored (read) by FillBuffer; (ReadBuffer). For each referenced object the object's fUniqueID; and the referencing TRef::fPID is stored (to allow the TRefTable; to autoload references created by different processes).; * non-entry specific, i.e. global information is stored (read) by; the Streamer function. This comprises all members marked as; persistent. As TObject::fUniqueID is only unique for a given TProcessID, a table; of unique IDs is kept for each used TProcessID. There is no natural; order of TProcessIDs, so TRefTable stores a vector of the TGUID of; all known TProcessIDs in fProcessGUIDs; the index of a TProcessID in; this vector defines the index of the auto-loading info in fParentIDs; for that TProcessID. The mapping of TProcessID* to index is cached; for quick non-persistent lookup. Function Members (Methods); public:. virtual~TRefTable(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tAdd(Int_t uid, TProcessID* context = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """"",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:3928,Modifiability,Inherit,InheritsFrom,3928,"ct::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetN(Int_t pid) const; virtual const char*TObject::GetName() const; Int_tGetNumPIDs() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TObject*GetOwner() const; TObject*GetParent(Int_t uid, TProcessID* context = 0) const; TObjArray*GetParents() const; static TRefTable*GetRefTable(); Int_tGetSize(Int_t pid) const; virtual const char*TObject::GetTitle() const; UInt_tGetUID() const; TProcessID*GetUIDContext() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void*",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:3994,Modifiability,Inherit,InheritsFrom,3994,"indObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetN(Int_t pid) const; virtual const char*TObject::GetName() const; Int_tGetNumPIDs() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TObject*GetOwner() const; TObject*GetParent(Int_t uid, TProcessID* context = 0) const; TObjArray*GetParents() const; static TRefTable*GetRefTable(); Int_tGetSize(Int_t pid) const; virtual const char*TObject::GetTitle() const; UInt_tGetUID() const; TProcessID*GetUIDContext() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRefTable&operator=(const TRefTable&); virtual voidTObject::",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:8736,Modifiability,Inherit,Inheritance,8736,"s)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_t*fAllocSize![fNumPIDs] allocated size of array fParentIDs for each ProcessID; Int_tfDefaultSize!default size for a new PID array; vector<Int_t>fMapPIDtoInternal! cache of pid to index in fProcessGUIDs; Int_t*fN![fNumPIDs] current maximum number of IDs in array fParentIDs for each ProcessID; Int_tfNumPIDs!number of known ProcessIDs; TObject*fOwnerObject owning this TRefTable; Int_tfParentID!current parent ID in fParents (latest call to SetParent); Int_t**fParentIDs![fNumPIDs][fAllocSize] array of Parent IDs; TObjArray*fParentsarray of Parent objects (eg TTree branch) holding the referenced objects; vector<string>fProcessGUIDsUUIDs of TProcessIDs used in fParentIDs; Int_tfSizedummy for backward compatibility; UInt_tfUID!Current uid (set by TRef::GetObject); TProcessID*fUIDContext!TProcessID the current uid is referring to; static TRefTable*fgRefTablePointer to current TRefTable. Class Charts. Inheritance Chart:. TObject. ←; TRefTable. Function documentation; TRefTable(); Default constructor for I/O. TRefTable(TObject* owner, Int_t size); Create a TRefTable with initial size. ~TRefTable(); Destructor. Int_t Add(Int_t uid, TProcessID* context = 0); Add a new uid to the table.; we add a new pair (uid,fparent) to the map; This function is called by TObject::Streamer or TStreamerInfo::WriteBuffer. Int_t AddInternalIdxForPID(TProcessID* procid); Add the internal index for fProcessIDs, fAllocSize, etc given a PID. void Clear(Option_t* = """"); Clear all entries in the table. Int_t Expand(Int_t pid, Int_t newsize); Expand fParentIDs to newsize for ProcessID pid. Int_t ExpandForIID(Int_t iid, Int_t newsize); Expand fParentIDs to newsize for internel ProcessID index iid. void ExpandPIDs(Int_t numpids); Expand the arrays of managed PIDs. void FillBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::FillLeaves. Int_t FindPIDGUID(const char",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:647,Performance,load,loaded,647,". TRefTable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TRefTable. class TRefTable: public TObject. A TRefTable maintains the association between a referenced object; and the parent object supporting this referenced object. The parent object is typically a branch of a TTree. For each object; referenced in a TTree entry, the corresponding entry in the TTree's; TBranchRef::fRefTable contains the index of the branch that; needs to be loaded to bring the object into memory. Persistency of a TRefTable is split into two parts:; * entry specific information is stored (read) by FillBuffer; (ReadBuffer). For each referenced object the object's fUniqueID; and the referencing TRef::fPID is stored (to allow the TRefTable; to autoload references created by different processes).; * non-entry specific, i.e. global information is stored (read) by; the Streamer function. This comprises all members marked as; persistent. As TObject::fUniqueID is only unique for a given TProcessID, a table; of unique IDs is kept for each used TProcessID. There is no natural; order of TProcessIDs, so TRefTable stores a vector of the TGUID of; all known TProcessIDs in fProcessGUIDs; the index of a TProcessID in; this vector defines the index of the auto-loading info in fParentIDs; for that TProcessID. The mapping of TProcessID* to index is cached; for quick non-persistent lookup. Function Members (Methods); public:. virtual~TRefTable(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tAdd(Int_t uid, TProcessID* context = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """"",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:1448,Performance,load,loading,1448,"object; and the parent object supporting this referenced object. The parent object is typically a branch of a TTree. For each object; referenced in a TTree entry, the corresponding entry in the TTree's; TBranchRef::fRefTable contains the index of the branch that; needs to be loaded to bring the object into memory. Persistency of a TRefTable is split into two parts:; * entry specific information is stored (read) by FillBuffer; (ReadBuffer). For each referenced object the object's fUniqueID; and the referencing TRef::fPID is stored (to allow the TRefTable; to autoload references created by different processes).; * non-entry specific, i.e. global information is stored (read) by; the Streamer function. This comprises all members marked as; persistent. As TObject::fUniqueID is only unique for a given TProcessID, a table; of unique IDs is kept for each used TProcessID. There is no natural; order of TProcessIDs, so TRefTable stores a vector of the TGUID of; all known TProcessIDs in fProcessGUIDs; the index of a TProcessID in; this vector defines the index of the auto-loading info in fParentIDs; for that TProcessID. The mapping of TProcessID* to index is cached; for quick non-persistent lookup. Function Members (Methods); public:. virtual~TRefTable(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tAdd(Int_t uid, TProcessID* context = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Opti",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:1536,Performance,cache,cached,1536,"e corresponding entry in the TTree's; TBranchRef::fRefTable contains the index of the branch that; needs to be loaded to bring the object into memory. Persistency of a TRefTable is split into two parts:; * entry specific information is stored (read) by FillBuffer; (ReadBuffer). For each referenced object the object's fUniqueID; and the referencing TRef::fPID is stored (to allow the TRefTable; to autoload references created by different processes).; * non-entry specific, i.e. global information is stored (read) by; the Streamer function. This comprises all members marked as; persistent. As TObject::fUniqueID is only unique for a given TProcessID, a table; of unique IDs is kept for each used TProcessID. There is no natural; order of TProcessIDs, so TRefTable stores a vector of the TGUID of; all known TProcessIDs in fProcessGUIDs; the index of a TProcessID in; this vector defines the index of the auto-loading info in fParentIDs; for that TProcessID. The mapping of TProcessID* to index is cached; for quick non-persistent lookup. Function Members (Methods); public:. virtual~TRefTable(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tAdd(Int_t uid, TProcessID* context = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject:",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:7994,Performance,cache,cache,7994,"static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_t*fAllocSize![fNumPIDs] allocated size of array fParentIDs for each ProcessID; Int_tfDefaultSize!default size for a new PID array; vector<Int_t>fMapPIDtoInternal! cache of pid to index in fProcessGUIDs; Int_t*fN![fNumPIDs] current maximum number of IDs in array fParentIDs for each ProcessID; Int_tfNumPIDs!number of known ProcessIDs; TObject*fOwnerObject owning this TRefTable; Int_tfParentID!current parent ID in fParents (latest call to SetParent); Int_t**fParentIDs![fNumPIDs][fAllocSize] array of Parent IDs; TObjArray*fParentsarray of Parent objects (eg TTree branch) holding the referenced objects; vector<string>fProcessGUIDsUUIDs of TProcessIDs used in fParentIDs; Int_tfSizedummy for backward compatibility; UInt_tfUID!Current uid (set by TRef::GetObject); TProcessID*fUIDContext!TProcessID the current uid is referring to; static TRefTable*fgRefTablePointer to current TRefTable. Class Charts. Inheritance Chart:. TObject. ←; TRefTable. Function documentation; TRefTable(); Default constructor for I/O. TRefTable(TObject* owner, Int_t size); Create a TRefTable with initial size. ~TRefTable(); Destructor. Int_t Add(Int_t uid, TProcessID* context = 0); Add a new uid to the table.; we add a new pair (uid,fparent) to the map; This function is called by TObject::Streamer or TStreamerInfo::WriteBuffer. Int_t AddInternalIdxForPID(TProcessID* procid); Add the internal index for fProcessIDs, fAllocSize, etc given a PID. void Clear(Op",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:3818,Security,Hash,Hash,3818,"ct::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(TBuffer& b); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetN(Int_t pid) const; virtual const char*TObject::GetName() const; Int_tGetNumPIDs() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TObject*GetOwner() const; TObject*GetParent(Int_t uid, TProcessID* context = 0) const; TObjArray*GetParents() const; static TRefTable*GetRefTable(); Int_tGetSize(Int_t pid) const; virtual const char*TObject::GetTitle() const; UInt_tGetUID() const; TProcessID*GetUIDContext() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operato",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:6158,Testability,Test,TestBit,6158,"e(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRefTable&operator=(const TRefTable&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidReadBuffer(TBuffer& b); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset(Option_t* = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tSetParent(const TObject* parent, Int_t branchID); static voidSetRefTable(TRefTable* table); virtual voidSetUID(UInt_t uid, TProcessID* context = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRefTable(); TRefTable(const TRefTable&); TRefTable(TObject* owner, Int_t size); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:6197,Testability,Test,TestBits,6197,"e(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRefTable&operator=(const TRefTable&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidReadBuffer(TBuffer& b); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset(Option_t* = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tSetParent(const TObject* parent, Int_t branchID); static voidSetRefTable(TRefTable* table); virtual voidSetUID(UInt_t uid, TProcessID* context = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRefTable(); TRefTable(const TRefTable&); TRefTable(TObject* owner, Int_t size); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:6872,Usability,guid,guid,6872,"ble); virtual voidSetUID(UInt_t uid, TProcessID* context = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRefTable(); TRefTable(const TRefTable&); TRefTable(TObject* owner, Int_t size); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. Int_tAddInternalIdxForPID(TProcessID* procid); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Int_tExpandForIID(Int_t iid, Int_t newsize); voidExpandPIDs(Int_t numpids); Int_tFindPIDGUID(const char* guid) const; Int_tGetInternalIdxForPID(TProcessID* procid) const; Int_tGetInternalIdxForPID(Int_t pid) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TRefTable::(anonymous)kHaveWarnedReadingOld; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZomb",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:9266,Usability,Clear,Clear,9266,"fParentIDs![fNumPIDs][fAllocSize] array of Parent IDs; TObjArray*fParentsarray of Parent objects (eg TTree branch) holding the referenced objects; vector<string>fProcessGUIDsUUIDs of TProcessIDs used in fParentIDs; Int_tfSizedummy for backward compatibility; UInt_tfUID!Current uid (set by TRef::GetObject); TProcessID*fUIDContext!TProcessID the current uid is referring to; static TRefTable*fgRefTablePointer to current TRefTable. Class Charts. Inheritance Chart:. TObject. ←; TRefTable. Function documentation; TRefTable(); Default constructor for I/O. TRefTable(TObject* owner, Int_t size); Create a TRefTable with initial size. ~TRefTable(); Destructor. Int_t Add(Int_t uid, TProcessID* context = 0); Add a new uid to the table.; we add a new pair (uid,fparent) to the map; This function is called by TObject::Streamer or TStreamerInfo::WriteBuffer. Int_t AddInternalIdxForPID(TProcessID* procid); Add the internal index for fProcessIDs, fAllocSize, etc given a PID. void Clear(Option_t* = """"); Clear all entries in the table. Int_t Expand(Int_t pid, Int_t newsize); Expand fParentIDs to newsize for ProcessID pid. Int_t ExpandForIID(Int_t iid, Int_t newsize); Expand fParentIDs to newsize for internel ProcessID index iid. void ExpandPIDs(Int_t numpids); Expand the arrays of managed PIDs. void FillBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::FillLeaves. Int_t FindPIDGUID(const char* guid) const; Get fProcessGUIDs' index of the TProcessID with GUID guid. TObject * GetParent(Int_t uid, TProcessID* context = 0) const; Return object corresponding to uid. Int_t GetInternalIdxForPID(TProcessID* procid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. Int_t GetInternalIdxForPID(Int_t pid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. TRefTable * GetRefTable(); Static f",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:9289,Usability,Clear,Clear,9289,"fParentIDs![fNumPIDs][fAllocSize] array of Parent IDs; TObjArray*fParentsarray of Parent objects (eg TTree branch) holding the referenced objects; vector<string>fProcessGUIDsUUIDs of TProcessIDs used in fParentIDs; Int_tfSizedummy for backward compatibility; UInt_tfUID!Current uid (set by TRef::GetObject); TProcessID*fUIDContext!TProcessID the current uid is referring to; static TRefTable*fgRefTablePointer to current TRefTable. Class Charts. Inheritance Chart:. TObject. ←; TRefTable. Function documentation; TRefTable(); Default constructor for I/O. TRefTable(TObject* owner, Int_t size); Create a TRefTable with initial size. ~TRefTable(); Destructor. Int_t Add(Int_t uid, TProcessID* context = 0); Add a new uid to the table.; we add a new pair (uid,fparent) to the map; This function is called by TObject::Streamer or TStreamerInfo::WriteBuffer. Int_t AddInternalIdxForPID(TProcessID* procid); Add the internal index for fProcessIDs, fAllocSize, etc given a PID. void Clear(Option_t* = """"); Clear all entries in the table. Int_t Expand(Int_t pid, Int_t newsize); Expand fParentIDs to newsize for ProcessID pid. Int_t ExpandForIID(Int_t iid, Int_t newsize); Expand fParentIDs to newsize for internel ProcessID index iid. void ExpandPIDs(Int_t numpids); Expand the arrays of managed PIDs. void FillBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::FillLeaves. Int_t FindPIDGUID(const char* guid) const; Get fProcessGUIDs' index of the TProcessID with GUID guid. TObject * GetParent(Int_t uid, TProcessID* context = 0) const; Return object corresponding to uid. Int_t GetInternalIdxForPID(TProcessID* procid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. Int_t GetInternalIdxForPID(Int_t pid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. TRefTable * GetRefTable(); Static f",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:9747,Usability,guid,guid,9747," TRefTable. Function documentation; TRefTable(); Default constructor for I/O. TRefTable(TObject* owner, Int_t size); Create a TRefTable with initial size. ~TRefTable(); Destructor. Int_t Add(Int_t uid, TProcessID* context = 0); Add a new uid to the table.; we add a new pair (uid,fparent) to the map; This function is called by TObject::Streamer or TStreamerInfo::WriteBuffer. Int_t AddInternalIdxForPID(TProcessID* procid); Add the internal index for fProcessIDs, fAllocSize, etc given a PID. void Clear(Option_t* = """"); Clear all entries in the table. Int_t Expand(Int_t pid, Int_t newsize); Expand fParentIDs to newsize for ProcessID pid. Int_t ExpandForIID(Int_t iid, Int_t newsize); Expand fParentIDs to newsize for internel ProcessID index iid. void ExpandPIDs(Int_t numpids); Expand the arrays of managed PIDs. void FillBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::FillLeaves. Int_t FindPIDGUID(const char* guid) const; Get fProcessGUIDs' index of the TProcessID with GUID guid. TObject * GetParent(Int_t uid, TProcessID* context = 0) const; Return object corresponding to uid. Int_t GetInternalIdxForPID(TProcessID* procid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. Int_t GetInternalIdxForPID(Int_t pid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. TRefTable * GetRefTable(); Static function returning the current TRefTable. Bool_t Notify(); This function is called by TRef::Streamer or TStreamerInfo::ReadBuffer; when reading a reference.; This function, in turns, notifies the TRefTable owner for action.; eg, when the owner is a TBranchRef, TBranchRef::Notify is called; to read the branch containing the referenced object. void ReadBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::ReadLeaves. vo",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:9808,Usability,GUID,GUID,9808," TRefTable. Function documentation; TRefTable(); Default constructor for I/O. TRefTable(TObject* owner, Int_t size); Create a TRefTable with initial size. ~TRefTable(); Destructor. Int_t Add(Int_t uid, TProcessID* context = 0); Add a new uid to the table.; we add a new pair (uid,fparent) to the map; This function is called by TObject::Streamer or TStreamerInfo::WriteBuffer. Int_t AddInternalIdxForPID(TProcessID* procid); Add the internal index for fProcessIDs, fAllocSize, etc given a PID. void Clear(Option_t* = """"); Clear all entries in the table. Int_t Expand(Int_t pid, Int_t newsize); Expand fParentIDs to newsize for ProcessID pid. Int_t ExpandForIID(Int_t iid, Int_t newsize); Expand fParentIDs to newsize for internel ProcessID index iid. void ExpandPIDs(Int_t numpids); Expand the arrays of managed PIDs. void FillBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::FillLeaves. Int_t FindPIDGUID(const char* guid) const; Get fProcessGUIDs' index of the TProcessID with GUID guid. TObject * GetParent(Int_t uid, TProcessID* context = 0) const; Return object corresponding to uid. Int_t GetInternalIdxForPID(TProcessID* procid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. Int_t GetInternalIdxForPID(Int_t pid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. TRefTable * GetRefTable(); Static function returning the current TRefTable. Bool_t Notify(); This function is called by TRef::Streamer or TStreamerInfo::ReadBuffer; when reading a reference.; This function, in turns, notifies the TRefTable owner for action.; eg, when the owner is a TBranchRef, TBranchRef::Notify is called; to read the branch containing the referenced object. void ReadBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::ReadLeaves. vo",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:9813,Usability,guid,guid,9813," TRefTable. Function documentation; TRefTable(); Default constructor for I/O. TRefTable(TObject* owner, Int_t size); Create a TRefTable with initial size. ~TRefTable(); Destructor. Int_t Add(Int_t uid, TProcessID* context = 0); Add a new uid to the table.; we add a new pair (uid,fparent) to the map; This function is called by TObject::Streamer or TStreamerInfo::WriteBuffer. Int_t AddInternalIdxForPID(TProcessID* procid); Add the internal index for fProcessIDs, fAllocSize, etc given a PID. void Clear(Option_t* = """"); Clear all entries in the table. Int_t Expand(Int_t pid, Int_t newsize); Expand fParentIDs to newsize for ProcessID pid. Int_t ExpandForIID(Int_t iid, Int_t newsize); Expand fParentIDs to newsize for internel ProcessID index iid. void ExpandPIDs(Int_t numpids); Expand the arrays of managed PIDs. void FillBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::FillLeaves. Int_t FindPIDGUID(const char* guid) const; Get fProcessGUIDs' index of the TProcessID with GUID guid. TObject * GetParent(Int_t uid, TProcessID* context = 0) const; Return object corresponding to uid. Int_t GetInternalIdxForPID(TProcessID* procid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. Int_t GetInternalIdxForPID(Int_t pid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. TRefTable * GetRefTable(); Static function returning the current TRefTable. Bool_t Notify(); This function is called by TRef::Streamer or TStreamerInfo::ReadBuffer; when reading a reference.; This function, in turns, notifies the TRefTable owner for action.; eg, when the owner is a TBranchRef, TBranchRef::Notify is called; to read the branch containing the referenced object. void ReadBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::ReadLeaves. vo",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:10070,Usability,GUID,GUID,10070,"he map; This function is called by TObject::Streamer or TStreamerInfo::WriteBuffer. Int_t AddInternalIdxForPID(TProcessID* procid); Add the internal index for fProcessIDs, fAllocSize, etc given a PID. void Clear(Option_t* = """"); Clear all entries in the table. Int_t Expand(Int_t pid, Int_t newsize); Expand fParentIDs to newsize for ProcessID pid. Int_t ExpandForIID(Int_t iid, Int_t newsize); Expand fParentIDs to newsize for internel ProcessID index iid. void ExpandPIDs(Int_t numpids); Expand the arrays of managed PIDs. void FillBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::FillLeaves. Int_t FindPIDGUID(const char* guid) const; Get fProcessGUIDs' index of the TProcessID with GUID guid. TObject * GetParent(Int_t uid, TProcessID* context = 0) const; Return object corresponding to uid. Int_t GetInternalIdxForPID(TProcessID* procid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. Int_t GetInternalIdxForPID(Int_t pid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. TRefTable * GetRefTable(); Static function returning the current TRefTable. Bool_t Notify(); This function is called by TRef::Streamer or TStreamerInfo::ReadBuffer; when reading a reference.; This function, in turns, notifies the TRefTable owner for action.; eg, when the owner is a TBranchRef, TBranchRef::Notify is called; to read the branch containing the referenced object. void ReadBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::ReadLeaves. void Reset(Option_t* = """"); Clear all entries in the table. Int_t SetParent(const TObject* parent, Int_t branchID); -- Set current parent object, typically a branch of a tree. This function is called by TBranchElement::Fill() and by; TBranchElement::GetEntry(). void SetRefTable(TRefTable* table)",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:10234,Usability,GUID,GUID,10234,"essIDs, fAllocSize, etc given a PID. void Clear(Option_t* = """"); Clear all entries in the table. Int_t Expand(Int_t pid, Int_t newsize); Expand fParentIDs to newsize for ProcessID pid. Int_t ExpandForIID(Int_t iid, Int_t newsize); Expand fParentIDs to newsize for internel ProcessID index iid. void ExpandPIDs(Int_t numpids); Expand the arrays of managed PIDs. void FillBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::FillLeaves. Int_t FindPIDGUID(const char* guid) const; Get fProcessGUIDs' index of the TProcessID with GUID guid. TObject * GetParent(Int_t uid, TProcessID* context = 0) const; Return object corresponding to uid. Int_t GetInternalIdxForPID(TProcessID* procid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. Int_t GetInternalIdxForPID(Int_t pid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. TRefTable * GetRefTable(); Static function returning the current TRefTable. Bool_t Notify(); This function is called by TRef::Streamer or TStreamerInfo::ReadBuffer; when reading a reference.; This function, in turns, notifies the TRefTable owner for action.; eg, when the owner is a TBranchRef, TBranchRef::Notify is called; to read the branch containing the referenced object. void ReadBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::ReadLeaves. void Reset(Option_t* = """"); Clear all entries in the table. Int_t SetParent(const TObject* parent, Int_t branchID); -- Set current parent object, typically a branch of a tree. This function is called by TBranchElement::Fill() and by; TBranchElement::GetEntry(). void SetRefTable(TRefTable* table); Static function setting the current TRefTable. void Streamer(TBuffer& ); Stream an object of class TRefTable. TRefTable(). Int_t GetNumPIDs() const; {return fNumP",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRefTable.html:10793,Usability,Clear,Clear,10793,"rocessID with GUID guid. TObject * GetParent(Int_t uid, TProcessID* context = 0) const; Return object corresponding to uid. Int_t GetInternalIdxForPID(TProcessID* procid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. Int_t GetInternalIdxForPID(Int_t pid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. TRefTable * GetRefTable(); Static function returning the current TRefTable. Bool_t Notify(); This function is called by TRef::Streamer or TStreamerInfo::ReadBuffer; when reading a reference.; This function, in turns, notifies the TRefTable owner for action.; eg, when the owner is a TBranchRef, TBranchRef::Notify is called; to read the branch containing the referenced object. void ReadBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::ReadLeaves. void Reset(Option_t* = """"); Clear all entries in the table. Int_t SetParent(const TObject* parent, Int_t branchID); -- Set current parent object, typically a branch of a tree. This function is called by TBranchElement::Fill() and by; TBranchElement::GetEntry(). void SetRefTable(TRefTable* table); Static function setting the current TRefTable. void Streamer(TBuffer& ); Stream an object of class TRefTable. TRefTable(). Int_t GetNumPIDs() const; {return fNumPIDs;}. Int_t GetSize(Int_t pid) const; {return fAllocSize[GetInternalIdxForPID(pid)];}. Int_t GetN(Int_t pid) const; {return fN[GetInternalIdxForPID(pid)];}. TObject * GetOwner() const; {return fOwner;}. TObjArray * GetParents() const; {return fParents;}. UInt_t GetUID() const; {return fUID;}. TProcessID * GetUIDContext() const; {return fUIDContext;}. void SetUID(UInt_t uid, TProcessID* context = 0); {fUID=uid; fUIDContext = context;}. » Author: Rene Brun 17/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last",MatchSource.WIKI,root/html602/TRefTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRefTable.html
https://root.cern/root/html602/TRegexp.html:2751,Integrability,rout,routine,2751,"const unsigned intfgMaxpatMax length of compiled pattern. Class Charts. Inheritance Chart:. TRegexp. Function documentation; TRegexp(const char* re, Bool_t wildcard = kFALSE); Create a regular expression from the input string. If wildcard is; true then the input string will first be interpreted as a wildcard; expression by MakeWildcard(), and the result then interpreted as a; regular expression. TRegexp(const TString& re); Create a regular expression from a TString. TRegexp(const TRegexp& re); Copy ctor. ~TRegexp(); Destructor. TRegexp& operator=(const TRegexp& re); Assignment operator. TRegexp& operator=(const char* re); Assignment operator taking a char* and assigning it to a regexp. TRegexp& operator=(const TString& re); Assignment operator taking a TString. void GenPattern(const char* re); Generate the regular expression pattern. void CopyPattern(const TRegexp& re); Copy the regular expression pattern. const char * MakeWildcard(const char* re); This routine transforms a wildcarding regular expression into; a general regular expression used for pattern matching.; When using wildcards the regular expression is assumed to be; preceded by a ""^"" (BOL) and terminated by a ""$"" (EOL). Also, all; ""*""'s and ""?""'s (closures) are assumed to be preceded by a ""."" (i.e. any; character, except ""/""'s) and all .'s are escaped (so *.ps is different; from *.eps). The special treatment of ""/"" allows the easy matching of; pathnames, e.g. ""*.root"" will match ""aap.root"", but not ""pipo/aap.root"". Ssiz_t Index(const TString& str, Ssiz_t* len, Ssiz_t start = 0) const; Find the first occurance of the regexp in string and return the; position, or -1 if there is no match. Len is length of the matched; string and i is the offset at which the matching should start. EStatVal Status(). » Author: Fons Rademakers 04/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For co",MatchSource.WIKI,root/html602/TRegexp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRegexp.html
https://root.cern/root/html602/TRegexp.html:113,Modifiability,inherit,inheritance,113,". TRegexp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TRegexp. class TRegexp. TRegexp. Regular expression class. '^' // start-of-line anchor; '$' // end-of-line anchor; '.' // matches any character; '[' // start a character class; ']' // end a character class; '^' // negates character class if 1st character; '*' // Kleene closure (matches 0 or more); '+' // Positive closure (1 or more); '?' // Optional closure (0 or 1). Note that the '|' operator (union) is not supported, nor are; parentheses (grouping). Therefore ""a|b"" does not match ""a"". Standard classes like [:alnum:], [:alpha:], etc. are not supported,; only [a-zA-Z], [^ntf] and so on. Function Members (Methods); public:. virtual~TRegexp(); static TClass*Class(); Ssiz_tIndex(const TString& str, Ssiz_t* len, Ssiz_t start = 0) const; virtual TClass*IsA() const; TRegexp&operator=(const TRegexp& re); TRegexp&operator=(const TString& re); TRegexp&operator=(const char* re); virtual voidShowMembers(TMemberInspector& insp) const; TRegexp::EStatValStatus(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRegexp(const TString& re); TRegexp(const TRegexp& re); TRegexp(const char* re, Bool_t wildcard = kFALSE). private:. voidCopyPattern(const TRegexp& re); voidGenPattern(const char* re); const char*MakeWildcard(const char* re). Data Members; public:. static TRegexp::EStatValkIllegal; static TRegexp::EStatValkNomem; static TRegexp::EStatValkOK; static TRegexp::EStatValkToolong. private:. Pattern_t*fPatternCompiled pattern; TRegexp::EStatValfStatStatus; static const unsigned intfgMaxpatMax length of compiled pattern. Class Charts. Inheritance Chart:. TRegexp. Function documentation; TRegexp(const char* re, Bool_t wildcard = kFALSE); Create a regular expression from the input",MatchSource.WIKI,root/html602/TRegexp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRegexp.html
https://root.cern/root/html602/TRegexp.html:1855,Modifiability,Inherit,Inheritance,1855,"tion Members (Methods); public:. virtual~TRegexp(); static TClass*Class(); Ssiz_tIndex(const TString& str, Ssiz_t* len, Ssiz_t start = 0) const; virtual TClass*IsA() const; TRegexp&operator=(const TRegexp& re); TRegexp&operator=(const TString& re); TRegexp&operator=(const char* re); virtual voidShowMembers(TMemberInspector& insp) const; TRegexp::EStatValStatus(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRegexp(const TString& re); TRegexp(const TRegexp& re); TRegexp(const char* re, Bool_t wildcard = kFALSE). private:. voidCopyPattern(const TRegexp& re); voidGenPattern(const char* re); const char*MakeWildcard(const char* re). Data Members; public:. static TRegexp::EStatValkIllegal; static TRegexp::EStatValkNomem; static TRegexp::EStatValkOK; static TRegexp::EStatValkToolong. private:. Pattern_t*fPatternCompiled pattern; TRegexp::EStatValfStatStatus; static const unsigned intfgMaxpatMax length of compiled pattern. Class Charts. Inheritance Chart:. TRegexp. Function documentation; TRegexp(const char* re, Bool_t wildcard = kFALSE); Create a regular expression from the input string. If wildcard is; true then the input string will first be interpreted as a wildcard; expression by MakeWildcard(), and the result then interpreted as a; regular expression. TRegexp(const TString& re); Create a regular expression from a TString. TRegexp(const TRegexp& re); Copy ctor. ~TRegexp(); Destructor. TRegexp& operator=(const TRegexp& re); Assignment operator. TRegexp& operator=(const char* re); Assignment operator taking a char* and assigning it to a regexp. TRegexp& operator=(const TString& re); Assignment operator taking a TString. void GenPattern(const char* re); Generate the regular expression pattern. void CopyPattern(const TRegexp& re); Copy the regular expression pattern. const char * MakeWildcard(const char* re); This routine transforms a wildcarding regular expression into; a general regular expression used for pattern matching.",MatchSource.WIKI,root/html602/TRegexp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRegexp.html
https://root.cern/root/html602/TRemoteObject.html:1573,Availability,Error,Error,1573," virtual~TRemoteObject(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); TList*Browse(); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObjec",MatchSource.WIKI,root/html602/TRemoteObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRemoteObject.html
https://root.cern/root/html602/TRemoteObject.html:1702,Availability,error,error,1702," virtual~TRemoteObject(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); TList*Browse(); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObjec",MatchSource.WIKI,root/html602/TRemoteObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRemoteObject.html
https://root.cern/root/html602/TRemoteObject.html:1786,Availability,error,error,1786,"ect::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); TList*Browse(); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetClassName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetFileStat(FileStat_t* sbuf); virtual const char*TObject::GetIconName() const; const char*GetKeyClassName() const; const char*GetKeyObjectName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const ",MatchSource.WIKI,root/html602/TRemoteObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRemoteObject.html
https://root.cern/root/html602/TRemoteObject.html:371,Integrability,protocol,protocol,371,". TRemoteObject. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TRemoteObject. class TRemoteObject: public TNamed. TRemoteObject. The TRemoteObject class provides protocol for browsing ROOT objects; from a remote ROOT session.; It contains information on the real remote object as:; - Object Properties (i.e. file stat if the object is a TSystemFile); - Object Name; - Class Name; - TKey Object Name (if the remote object is a TKey); - TKey Class Name (if the remote object is a TKey); - Remote object address. Function Members (Methods); public:. virtual~TRemoteObject(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); TList*Browse(); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObjec",MatchSource.WIKI,root/html602/TRemoteObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRemoteObject.html
https://root.cern/root/html602/TRemoteObject.html:119,Modifiability,inherit,inheritance,119,". TRemoteObject. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TRemoteObject. class TRemoteObject: public TNamed. TRemoteObject. The TRemoteObject class provides protocol for browsing ROOT objects; from a remote ROOT session.; It contains information on the real remote object as:; - Object Properties (i.e. file stat if the object is a TSystemFile); - Object Name; - Class Name; - TKey Object Name (if the remote object is a TKey); - TKey Class Name (if the remote object is a TKey); - Remote object address. Function Members (Methods); public:. virtual~TRemoteObject(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); TList*Browse(); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObjec",MatchSource.WIKI,root/html602/TRemoteObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRemoteObject.html
https://root.cern/root/html602/TRemoteObject.html:2853,Modifiability,Inherit,InheritsFrom,2853,"t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetClassName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetFileStat(FileStat_t* sbuf); virtual const char*TObject::GetIconName() const; const char*GetKeyClassName() const; const char*GetKeyObjectName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* v",MatchSource.WIKI,root/html602/TRemoteObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRemoteObject.html
https://root.cern/root/html602/TRemoteObject.html:2919,Modifiability,Inherit,InheritsFrom,2919,"msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetClassName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetFileStat(FileStat_t* sbuf); virtual const char*TObject::GetIconName() const; const char*GetKeyClassName() const; const char*GetKeyObjectName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRemoteObject&operator=(const TRemoteObject&); virtual voidTOb",MatchSource.WIKI,root/html602/TRemoteObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRemoteObject.html
https://root.cern/root/html602/TRemoteObject.html:6926,Modifiability,Inherit,Inheritance,6926,"StatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringfClassNamereal object class name; FileStat_tfFileStatfile status; Bool_tfIsFolderis folder flag; TStringfKeyClassNamekey object class name; TStringfKeyObjectNamekey object name; TStringTNamed::fNameobject identifier; Long64_tfRemoteAddressremote address; TStringTNamed::fTitleobject title. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TRemoteObject. Function documentation; TRemoteObject(); Create a remote object. TRemoteObject(const char* name, const char* title, const char* classname); Create a remote object. ~TRemoteObject(); Delete remote object. void Browse(TBrowser* b); Browse remote object. TList * Browse(); Browse OS system directories. Bool_t GetFileStat(FileStat_t* sbuf); Get remote file status. void Streamer(TBuffer& ); Remote object streamer. TRemoteObject(). Bool_t IsFolder() const; { return fIsFolder; }. const char * GetClassName() const; { return fClassName.Data(); }. const char * GetKeyObjectName() const; { return fKeyObjectName.Data(); }. const char * GetKeyClassName() const; { return fKeyClassName.Data(); }. void SetFolder(Bool_t isFolder); { fIsFolder = isFolder; }. void SetKeyObjectName(const char* name); { fKeyObjectName = name; }. void SetKeyClassName(const char* name); { fKeyClassName = name; }. void SetRemoteAddress(Long_t addr); { fRemoteAddress = addr; }. » ",MatchSource.WIKI,root/html602/TRemoteObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRemoteObject.html
https://root.cern/root/html602/TRemoteObject.html:2743,Security,Hash,Hash,2743,"ethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetClassName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetFileStat(FileStat_t* sbuf); virtual const char*TObject::GetIconName() const; const char*GetKeyClassName() const; const char*GetKeyObjectName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator ",MatchSource.WIKI,root/html602/TRemoteObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRemoteObject.html
https://root.cern/root/html602/TRemoteObject.html:5220,Testability,Test,TestBit,5220,"(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRemoteObject&operator=(const TRemoteObject&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFolder(Bool_t isFolder); voidSetKeyClassName(const char* name); voidSetKeyObjectName(const char* name); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetRemoteAddress(Long_t addr); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRemoteObject(); TRemoteObject(const TRemoteObject&); TRemoteObject(const char* name, const char* title, const char* classname); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRemoteObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRemoteObject.html
https://root.cern/root/html602/TRemoteObject.html:5259,Testability,Test,TestBits,5259,"(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRemoteObject&operator=(const TRemoteObject&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFolder(Bool_t isFolder); voidSetKeyClassName(const char* name); voidSetKeyObjectName(const char* name); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetRemoteAddress(Long_t addr); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRemoteObject(); TRemoteObject(const TRemoteObject&); TRemoteObject(const char* name, const char* title, const char* classname); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRemoteObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRemoteObject.html
https://root.cern/root/html602/TRemoteObject.html:1030,Usability,Clear,Clear,1030," virtual~TRemoteObject(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); TList*Browse(); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObjec",MatchSource.WIKI,root/html602/TRemoteObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRemoteObject.html
https://root.cern/root/html602/TResponseTable.html:2479,Availability,Error,Error,2479,"onst; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tTTable::CopyRows(const TTable* srcTable, Long_t srcRow = 0, Long_t dstRow = 0, Long_t nRows = 0, Bool_t expand = kFALSE); virtual voidTTable::CopySet(TTable& array); virtual voidTTable::DeleteRows(Long_t indx, UInt_t nRows = 1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTable::Draw(Option_t* opt); virtual TH1*TTable::Draw(TCut varexp, TCut selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual TH1*TTable::Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; TGenericTable::iteratorTGenericTable::end(); TGenericTable::iteratorTGenericTable::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; static Int_tFindResponseLocation(TTableDescriptor& dsc); virtual TDataSet*TDataSet::First() const; virtual voidTTable::Fit(const ch",MatchSource.WIKI,root/html602/TResponseTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TResponseTable.html
https://root.cern/root/html602/TResponseTable.html:2608,Availability,error,error,2608,"ws(const TTable* srcTable, Long_t srcRow = 0, Long_t dstRow = 0, Long_t nRows = 0, Bool_t expand = kFALSE); virtual voidTTable::CopySet(TTable& array); virtual voidTTable::DeleteRows(Long_t indx, UInt_t nRows = 1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTable::Draw(Option_t* opt); virtual TH1*TTable::Draw(TCut varexp, TCut selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual TH1*TTable::Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; TGenericTable::iteratorTGenericTable::end(); TGenericTable::iteratorTGenericTable::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; static Int_tFindResponseLocation(TTableDescriptor& dsc); virtual TDataSet*TDataSet::First() const; virtual voidTTable::Fit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000",MatchSource.WIKI,root/html602/TResponseTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TResponseTable.html
https://root.cern/root/html602/TResponseTable.html:2692,Availability,error,error,2692,"ool_t expand = kFALSE); virtual voidTTable::CopySet(TTable& array); virtual voidTTable::DeleteRows(Long_t indx, UInt_t nRows = 1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTable::Draw(Option_t* opt); virtual TH1*TTable::Draw(TCut varexp, TCut selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual TH1*TTable::Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; TGenericTable::iteratorTGenericTable::end(); TGenericTable::iteratorTGenericTable::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; static Int_tFindResponseLocation(TTableDescriptor& dsc); virtual TDataSet*TDataSet::First() const; virtual voidTTable::Fit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000000000, Int_t firstentry = 0)MENU ; void*TTable::GetArray() const; virtual TSeqColle",MatchSource.WIKI,root/html602/TResponseTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TResponseTable.html
https://root.cern/root/html602/TResponseTable.html:11342,Deployability,Update,Update,11342,"on = """") constMENU ; virtual voidTTable::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTable::Set(Int_t n); virtual voidTTable::Set(Int_t n, Char_t* array); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDataSet::SetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTable::SetNRows(Int_t n); virtual voidTDataSet::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDataSet::SetParent(TDataSet* parent = 0); voidSetResponse(int track, int* nvl, float* response); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDataSet::SetWrite(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTDataSet::Shunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidTDataSet::Sort(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; static const char*TTable::TableDictionary(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TResponseTable(); TResponseTable(const TResponseTable&); TResponseTable(const char* name, const char* volumepath, const char* responseDefintion, Int_t allocSize); voidTDataSet::UnMark()MENU ; voidTDataSet::UnMarkAll()MENU ; virtual voidTTable::Update(); virtual voidTTable::Update(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TResponseTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TResponseTable.html
https://root.cern/root/html602/TResponseTable.html:11372,Deployability,Update,Update,11372,"on = """") constMENU ; virtual voidTTable::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTable::Set(Int_t n); virtual voidTTable::Set(Int_t n, Char_t* array); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDataSet::SetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTable::SetNRows(Int_t n); virtual voidTDataSet::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDataSet::SetParent(TDataSet* parent = 0); voidSetResponse(int track, int* nvl, float* response); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDataSet::SetWrite(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTDataSet::Shunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidTDataSet::Sort(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; static const char*TTable::TableDictionary(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TResponseTable(); TResponseTable(const TResponseTable&); TResponseTable(const char* name, const char* volumepath, const char* responseDefintion, Int_t allocSize); voidTDataSet::UnMark()MENU ; voidTDataSet::UnMarkAll()MENU ; virtual voidTTable::Update(); virtual voidTTable::Update(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TResponseTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TResponseTable.html
https://root.cern/root/html602/TResponseTable.html:120,Modifiability,inherit,inheritance,120,". TResponseTable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MISC; » TABLE; » TResponseTable. class TResponseTable: public TGenericTable. TResponseTable is an example of the custom version of the TGenericTable class. Function Members (Methods); public:. virtual~TResponseTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDataSet::Add(TDataSet* dataset); virtual Int_tTTable::AddAt(const void* c); virtual voidTTable::AddAt(const void* c, Int_t i); virtual voidTTable::AddAt(TDataSet* dataset, Int_t idx = 0); virtual voidTDataSet::AddAtAndExpand(TDataSet* dataset, Int_t idx = 0); virtual voidTDataSet::AddFirst(TDataSet* dataset); virtual voidTDataSet::AddLast(TDataSet* dataset); virtual voidTTable::Adopt(Int_t n, void* array); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Long_tTTable::AppendRows(const void* row, UInt_t nRows); virtual voidTTable::AsString(void* buf, TTable::EColumnType type, Int_t width, ostream& out) const; const void*TTable::At(Int_t i) const; TGenericTable::iteratorTGenericTable::begin(); TGenericTable::iteratorTGenericTable::begin() const; virtual voidTTable::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual TObject*TDataSet::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tTTable::CopyRows(const TTable* srcTable, Long_t srcRow = 0, Long_t dstRow = 0, Long_t nRows = 0, Bool_t expand = kFALSE); virtual voidTTable::CopySet(TTable& array); virtual voidTTable::DeleteRows(Long_t indx, UInt_t nRows = 1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTable::Draw(Option_t* opt); virtual TH1*TTable::Draw(TCut varexp, TCut selection, Option_t* option ",MatchSource.WIKI,root/html602/TResponseTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TResponseTable.html
https://root.cern/root/html602/TResponseTable.html:6235,Modifiability,Inherit,InheritsFrom,6235,"TDataSet::GetParent() const; virtual TClass*TTable::GetRowClass() const; virtual TTableDescriptor*TGenericTable::GetRowDescriptors() const; virtual Long_tTTable::GetRowSize() const; Int_tTTable::GetSize() const; char*TGenericTable::GetTable(Int_t i = 0) const; virtual TTableDescriptor*TGenericTable::GetTableDescriptors() const; virtual Long_tTTable::GetTableSize() const; virtual const char*TNamed::GetTitle() const; virtual const Char_t*TTable::GetType() const; static TTable::EColumnTypeTTable::GetTypeId(const char* typeName); static const char*TTable::GetTypeName(TTable::EColumnType type); virtual UInt_tTTable::GetTypeSize(Int_t columnIndex) const; virtual Int_tTTable::GetTypeSize(const Char_t* columnName = 0) const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Long_tTTable::HasData() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Long_tTTable::InsertRows(const void* rows, Long_t indx, UInt_t nRows = 1); virtual voidTObject::Inspect() constMENU ; virtual TDataSet*TDataSet::Instance() const; static TDataSet*TDataSet::instance(); voidTDataSet::InvertAllMarks()MENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTDataSet::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTTable::IsFolder() const; virtual Bool_tTDataSet::IsMarked() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDataSet::IsThisDir(const char* dirname, int len = -1, int ignorecase = 0) const; Bool_tTObject::IsZombie() const; virtual TDataSet*TDataSet::Last() const; virtual voidTDataSet::ls(Option_t* option = """") const; virtual voidTDataSet::ls(Int_t depth) const; virtual Char_t*TTable::MakeExpression(const Char_t*[] expressions, In",MatchSource.WIKI,root/html602/TResponseTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TResponseTable.html
https://root.cern/root/html602/TResponseTable.html:6301,Modifiability,Inherit,InheritsFrom,6301,"const; virtual TTableDescriptor*TGenericTable::GetRowDescriptors() const; virtual Long_tTTable::GetRowSize() const; Int_tTTable::GetSize() const; char*TGenericTable::GetTable(Int_t i = 0) const; virtual TTableDescriptor*TGenericTable::GetTableDescriptors() const; virtual Long_tTTable::GetTableSize() const; virtual const char*TNamed::GetTitle() const; virtual const Char_t*TTable::GetType() const; static TTable::EColumnTypeTTable::GetTypeId(const char* typeName); static const char*TTable::GetTypeName(TTable::EColumnType type); virtual UInt_tTTable::GetTypeSize(Int_t columnIndex) const; virtual Int_tTTable::GetTypeSize(const Char_t* columnName = 0) const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Long_tTTable::HasData() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Long_tTTable::InsertRows(const void* rows, Long_t indx, UInt_t nRows = 1); virtual voidTObject::Inspect() constMENU ; virtual TDataSet*TDataSet::Instance() const; static TDataSet*TDataSet::instance(); voidTDataSet::InvertAllMarks()MENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTDataSet::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTTable::IsFolder() const; virtual Bool_tTDataSet::IsMarked() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDataSet::IsThisDir(const char* dirname, int len = -1, int ignorecase = 0) const; Bool_tTObject::IsZombie() const; virtual TDataSet*TDataSet::Last() const; virtual voidTDataSet::ls(Option_t* option = """") const; virtual voidTDataSet::ls(Int_t depth) const; virtual Char_t*TTable::MakeExpression(const Char_t*[] expressions, Int_t nExpressions); voidTDataSet::Mark()MENU ; voidTDataSet::Mark(U",MatchSource.WIKI,root/html602/TResponseTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TResponseTable.html
https://root.cern/root/html602/TResponseTable.html:15932,Modifiability,Inherit,Inheritance,15932,"aSet::EDataSetPassTDataSet::kStop; static TDataSet::EDataSetPassTDataSet::kStruct; static TTable::EColumnTypeTTable::kUChar; static TTable::EColumnTypeTTable::kUInt; static TTable::EColumnTypeTTable::kULong; static TTable::EColumnTypeTTable::kUShort; static TDataSet::EDataSetPassTDataSet::kUp; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TTableDescriptor*TGenericTable::fColDescriptors; TSeqCollection*TDataSet::fListList of the the the objects included into this dataset; Long_tTTable::fMaxIndexThe used capacity of this array; Int_tTTable::fNNumber of array elements; TStringTNamed::fNameobject identifier; TDataSet*TDataSet::fParentpointer to mother of the directory; Long_tTTable::fSizeSize of the one element (row) of the table; Char_t*TTable::fTableArray of (fN*fSize) longs; TStringTNamed::fTitleobject title; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. private:. Int_tfResponseLocation. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TDataSet. ←; TTable. ←; TGenericTable. ←; TResponseTable. Function documentation; TResponseTable(); to be documented. TResponseTable(const char* name, const char* volumepath, const char* responseDefintion, Int_t allocSize); Set an empty descriptor. void AddVolumePath(const char* path); to be documented. void AddResponse(const char* chit); to be documented. void AddElement(const char* path, TTable::EColumnType type); to be documented. void SetResponse(int track, int* nvl, float* response); Add one extra his/digit to the table; Reallocate the table if needed. Int_t FindResponseLocation(TTableDescriptor& dsc); Look up the table descriptor to find the; first respnse value location; TResponsetable layout:; offset; +0 int TRACK; +1; ... int <volume path description>; +nVl.; +nVl+1 <---- fResponseLocation; ... response values; RowSize. TResponseTable(). virtual ~TResponseTable(); {}. » Last changed: root/table:$Id$ » Last generated: 2015-06-30 15:29; This pag",MatchSource.WIKI,root/html602/TResponseTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TResponseTable.html
https://root.cern/root/html602/TResponseTable.html:6125,Security,Hash,Hash,6125,"ble::GetOffset(const Char_t* columnName = 0) const; virtual Option_t*TObject::GetOption() const; virtual TDataSet*TDataSet::GetParent() const; virtual TClass*TTable::GetRowClass() const; virtual TTableDescriptor*TGenericTable::GetRowDescriptors() const; virtual Long_tTTable::GetRowSize() const; Int_tTTable::GetSize() const; char*TGenericTable::GetTable(Int_t i = 0) const; virtual TTableDescriptor*TGenericTable::GetTableDescriptors() const; virtual Long_tTTable::GetTableSize() const; virtual const char*TNamed::GetTitle() const; virtual const Char_t*TTable::GetType() const; static TTable::EColumnTypeTTable::GetTypeId(const char* typeName); static const char*TTable::GetTypeName(TTable::EColumnType type); virtual UInt_tTTable::GetTypeSize(Int_t columnIndex) const; virtual Int_tTTable::GetTypeSize(const Char_t* columnName = 0) const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Long_tTTable::HasData() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Long_tTTable::InsertRows(const void* rows, Long_t indx, UInt_t nRows = 1); virtual voidTObject::Inspect() constMENU ; virtual TDataSet*TDataSet::Instance() const; static TDataSet*TDataSet::instance(); voidTDataSet::InvertAllMarks()MENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTDataSet::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTTable::IsFolder() const; virtual Bool_tTDataSet::IsMarked() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDataSet::IsThisDir(const char* dirname, int len = -1, int ignorecase = 0) const; Bool_tTObject::IsZombie() const; virtual TDataSet*TDataSet::Last() const; virtual voidTDataSet::ls(Option_t* option = """") const; ",MatchSource.WIKI,root/html602/TResponseTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TResponseTable.html
https://root.cern/root/html602/TResponseTable.html:11033,Testability,Test,TestBit,11033,"on = """") constMENU ; virtual voidTTable::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTable::Set(Int_t n); virtual voidTTable::Set(Int_t n, Char_t* array); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDataSet::SetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTable::SetNRows(Int_t n); virtual voidTDataSet::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDataSet::SetParent(TDataSet* parent = 0); voidSetResponse(int track, int* nvl, float* response); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDataSet::SetWrite(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTDataSet::Shunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidTDataSet::Sort(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; static const char*TTable::TableDictionary(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TResponseTable(); TResponseTable(const TResponseTable&); TResponseTable(const char* name, const char* volumepath, const char* responseDefintion, Int_t allocSize); voidTDataSet::UnMark()MENU ; voidTDataSet::UnMarkAll()MENU ; virtual voidTTable::Update(); virtual voidTTable::Update(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TResponseTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TResponseTable.html
https://root.cern/root/html602/TResponseTable.html:11072,Testability,Test,TestBits,11072,"on = """") constMENU ; virtual voidTTable::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTable::Set(Int_t n); virtual voidTTable::Set(Int_t n, Char_t* array); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDataSet::SetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTable::SetNRows(Int_t n); virtual voidTDataSet::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDataSet::SetParent(TDataSet* parent = 0); voidSetResponse(int track, int* nvl, float* response); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDataSet::SetWrite(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTDataSet::Shunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidTDataSet::Sort(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; static const char*TTable::TableDictionary(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TResponseTable(); TResponseTable(const TResponseTable&); TResponseTable(const char* name, const char* volumepath, const char* responseDefintion, Int_t allocSize); voidTDataSet::UnMark()MENU ; voidTDataSet::UnMarkAll()MENU ; virtual voidTTable::Update(); virtual voidTTable::Update(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TResponseTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TResponseTable.html
https://root.cern/root/html602/TResponseTable.html:11972,Usability,Clear,Clear,11972,"DataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidAddElement(const char* path, TTable::EColumnType type); voidTDataSet::AddMain(TDataSet* set); voidAddResponse(const char* chit); voidAddVolumePath(const char* path); Bool_tTTable::BoundsOk(const char* where, Int_t at) const; virtual voidTTable::Clear(Option_t* opt = """"); voidTTable::CopyStruct(Char_t* dest, const Char_t* src); Char_t*TTable::Create(); virtual voidTTable::Delete(Option_t* opt = """"); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tTTable::EntryLoop(const Char_t* exprFileName, Int_t& action, TObject* obj, Int_t nentries = 1000000000, Int_t firstentry = 0, Option_t* option = """"); virtual TTableDescriptor*TGenericTable::GetDescriptorPointer() const; TDataSet*TDataSet::GetRealParent(); voidTDataSet::MakeCollection(); voidTObject::MakeZombie(); Bool_tTTable::OutOfBoundsError(const char* where, Int_t i) const; voidTTable::ReAlloc(Int_t newsize); virtual voidTGenericTable::SetDescriptorPointer(TTableDescriptor* list); Int_tTTable::SetfN(Long_t len); voidTGenericTable::SetGenericType(); virtual voidTDataSet::SetMother(TObject* mother); voidTTable::SetTablePointer(void* table); virtual voidTTable::SetType(const char*const type); voidTTable::SetUsedRows(Int_t n); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user); voidTTable::StreamerHeader(TBuffer& b, Version_t version = 3); voidTTable::StreamerTable(TBuffer& b, Version_t version = 3); static const char*TTable::TableDictionary(const char* className, const char* structName, TTableDescriptor*& ColDescriptors). Data Members; public:. static const char*TTable::fgTypeName[13]; static TDataSet::EDataSetPassTDataSet::kAll; static TDataSet::ESetBitsTDataSet::kArray; static TObject::(anonymous)",MatchSource.WIKI,root/html602/TResponseTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TResponseTable.html
https://root.cern/root/html602/TRint.html:3671,Availability,Error,Error,3671,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*TApplicat",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:3800,Availability,error,error,3800," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*TApplication::GetIdleCommand() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*T",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:3884,Availability,error,error,3884,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*TApplication::GetIdleCommand() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virt",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:4028,Availability,error,error,4028,"; voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*TApplication::GetIdleCommand() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; v",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:7849,Availability,error,error,7849," voidTApplication::NeedGraphicsLibs(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPrintLogo(Bool_t lite = kFALSE); virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidRun(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTO",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:7970,Availability,error,error,7970,"al Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPrintLogo(Bool_t lite = kFALSE); virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidRun(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTObject::SetObjectStat(Bool_t stat); virtual const char*SetPrompt(const char* newPrompt); voidTApplication::SetReturnFromRu",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:11318,Availability,error,error,11318,"TQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTApplication::Help(const char* line); virtual voidTApplication::LoadGraphicsLibs(); virtual voidTApplication::MakeBatch(); voidTObject::MakeZombie(); static TApplication*TApplication::Open(const char* url, Int_t debug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); voidTApplication::SetSignalHandler(TSignalHandler* sh). private:. voidExecLogon(); TRint&operator=(const TRint&); Long_tProcessLineNr(const char* filestem, const char* line, Int_t* error = 0); virtual Long_tProcessRemote(const char* line, Int_t* error = 0); TRint(const TRint&). Data Members; public:. static TApplication::EExitOnExceptionTApplication::kAbort; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TApplication::EStatusBitsTApplication::kDefaultApplication; static TApplication::EExitOnExceptionTApplication::kDontExit; static TApplication::EExitOnExceptionTApplication::kExit; static TApplication::EFileBitsTApplication::kExpression; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:11383,Availability,error,error,11383,"TQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTApplication::Help(const char* line); virtual voidTApplication::LoadGraphicsLibs(); virtual voidTApplication::MakeBatch(); voidTObject::MakeZombie(); static TApplication*TApplication::Open(const char* url, Int_t debug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); voidTApplication::SetSignalHandler(TSignalHandler* sh). private:. voidExecLogon(); TRint&operator=(const TRint&); Long_tProcessLineNr(const char* filestem, const char* line, Int_t* error = 0); virtual Long_tProcessRemote(const char* line, Int_t* error = 0); TRint(const TRint&). Data Members; public:. static TApplication::EExitOnExceptionTApplication::kAbort; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TApplication::EStatusBitsTApplication::kDefaultApplication; static TApplication::EExitOnExceptionTApplication::kDontExit; static TApplication::EExitOnExceptionTApplication::kExit; static TApplication::EFileBitsTApplication::kExpression; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:12968,Availability,avail,available,12968," static TApplication::EExitOnExceptionTApplication::kExit; static TApplication::EFileBitsTApplication::kExpression; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TApplication::EStatusBitsTApplication::kProcessRemotely; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. TStringfDefaultPromptdefault prompt: ""root [%d] ""; TFileHandler*fInputHandlerterminal input handler; Bool_tfInterruptif true macro execution will be stopped; Int_tfNcmdcommand history number; charfPrompt[64]interpreter prompt. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TApplication. ←; TRint. Function documentation; TRint(const char* appClassName, int* argc, char** argv, void* options = 0, int numOptions = 0, Bool_t noLogo = kFALSE); Create an application environment. The TRint environment provides an; interface to the WM manager functionality and eventloop via inheritance; of TApplication and in addition provides interactive access to; the CINT C++ interpreter via the command line. ~TRint(); Destructor. void ExecLogon(); Execute logon macro's. ",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:14559,Availability,error,error,14559,"op via inheritance; of TApplication and in addition provides interactive access to; the CINT C++ interpreter via the command line. ~TRint(); Destructor. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. void Run(Bool_t retrn = kFALSE); Main application eventloop. First process files given on the command; line and then go into the main application event loop, unless the -q; command line option was specfied in which case the program terminates.; When retrun is true this method returns even when -q was specified. When QuitOpt is true and retrn is false, terminate the application with; an error code equal to either the ProcessLine error (if any) or the; return value of the command casted to a long. void PrintLogo(Bool_t lite = kFALSE); Print the ROOT logo on standard output. char * GetPrompt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will be replaced by the commend; number. The default prompt is ""root [%d] "". The maximum length of; the prompt is 55 characters. To set the prompt in an interactive; session do:; root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> ""); aap>. Bool_t HandleTermInput(); Handle input coming from terminal. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Terminate(int status); Terminate the application. Res",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:14602,Availability,error,error,14602,"op via inheritance; of TApplication and in addition provides interactive access to; the CINT C++ interpreter via the command line. ~TRint(); Destructor. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. void Run(Bool_t retrn = kFALSE); Main application eventloop. First process files given on the command; line and then go into the main application event loop, unless the -q; command line option was specfied in which case the program terminates.; When retrun is true this method returns even when -q was specified. When QuitOpt is true and retrn is false, terminate the application with; an error code equal to either the ProcessLine error (if any) or the; return value of the command casted to a long. void PrintLogo(Bool_t lite = kFALSE); Print the ROOT logo on standard output. char * GetPrompt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will be replaced by the commend; number. The default prompt is ""root [%d] "". The maximum length of; the prompt is 55 characters. To set the prompt in an interactive; session do:; root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> ""); aap>. Bool_t HandleTermInput(); Handle input coming from terminal. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Terminate(int status); Terminate the application. Res",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:15743,Availability,echo,echo,15743,"pt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will be replaced by the commend; number. The default prompt is ""root [%d] "". The maximum length of; the prompt is 55 characters. To set the prompt in an interactive; session do:; root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> ""); aap>. Bool_t HandleTermInput(); Handle input coming from terminal. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Terminate(int status); Terminate the application. Reset the terminal to sane mode and call; the logoff macro defined via Rint.Logoff environment variable. void SetEchoMode(Bool_t mode); Set console mode:. mode = kTRUE - echo input symbols; mode = kFALSE - noecho input symbols. Long_t ProcessRemote(const char* line, Int_t* error = 0); Process the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script]; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. Long_t ProcessLineNr(const char* filestem, const char* line, Int_t* error = 0); Calls ProcessLine() possibly prepending a #line directive for; better diagnostics. Must be called after fNcmd has been increased for; the next line. Int_t TabCompletionHook(char* buf, int* pLoc, ostream& out); Forward tab completion request to our TTabCom::Hook(). TRint(const TRint& ). TRint& operator=(const TRint& ). void Interrupt(); { fInterrupt = kTRUE; }. » Author: ",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:15847,Availability,error,error,15847,"rompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will be replaced by the commend; number. The default prompt is ""root [%d] "". The maximum length of; the prompt is 55 characters. To set the prompt in an interactive; session do:; root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> ""); aap>. Bool_t HandleTermInput(); Handle input coming from terminal. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Terminate(int status); Terminate the application. Reset the terminal to sane mode and call; the logoff macro defined via Rint.Logoff environment variable. void SetEchoMode(Bool_t mode); Set console mode:. mode = kTRUE - echo input symbols; mode = kFALSE - noecho input symbols. Long_t ProcessRemote(const char* line, Int_t* error = 0); Process the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script]; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. Long_t ProcessLineNr(const char* filestem, const char* line, Int_t* error = 0); Calls ProcessLine() possibly prepending a #line directive for; better diagnostics. Must be called after fNcmd has been increased for; the next line. Int_t TabCompletionHook(char* buf, int* pLoc, ostream& out); Forward tab completion request to our TTabCom::Hook(). TRint(const TRint& ). TRint& operator=(const TRint& ). void Interrupt(); { fInterrupt = kTRUE; }. » Author: Rene Brun 17/02/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last ch",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:16379,Availability,error,error,16379,"ngth of; the prompt is 55 characters. To set the prompt in an interactive; session do:; root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> ""); aap>. Bool_t HandleTermInput(); Handle input coming from terminal. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Terminate(int status); Terminate the application. Reset the terminal to sane mode and call; the logoff macro defined via Rint.Logoff environment variable. void SetEchoMode(Bool_t mode); Set console mode:. mode = kTRUE - echo input symbols; mode = kFALSE - noecho input symbols. Long_t ProcessRemote(const char* line, Int_t* error = 0); Process the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script]; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. Long_t ProcessLineNr(const char* filestem, const char* line, Int_t* error = 0); Calls ProcessLine() possibly prepending a #line directive for; better diagnostics. Must be called after fNcmd has been increased for; the next line. Int_t TabCompletionHook(char* buf, int* pLoc, ostream& out); Forward tab completion request to our TTabCom::Hook(). TRint(const TRint& ). TRint& operator=(const TRint& ). void Interrupt(); { fInterrupt = kTRUE; }. » Author: Rene Brun 17/02/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:340,Integrability,Interface,Interface,340,". TRint. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » RINT; » TRint. class TRint: public TApplication. Rint. Rint is the ROOT Interactive Interface. It allows interactive access; to the ROOT system via the CINT C/C++ interpreter. Function Members (Methods); public:. virtual~TRint(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TApplication::ApplicationName() const; static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Int_tTApplication::Argc() const; char**TApplication::Argv() const; char*TApplication::Argv(Int_t index) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTApplication::ClearInputFiles(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; static voidTApplication::CreateApplication(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTQObject::Destroyed()SIGNAL",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:6813,Integrability,Message,Message,6813,"const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::InitializeGraphics(); TObjArray*TApplication::InputFiles() const; virtual voidTObject::Inspect() constMENU ; voidInterrupt(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTApplication::IsCmdThread(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTApplication::IsRunning() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTApplication::KeyPressed(Int_t key)SIGNAL ; virtual voidTApplication::LineProcessed(const char* line)SIGNAL ; virtual voidTApplication::Lower(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static voidTApplication::NeedGraphicsLibs(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPrintLogo(Bool_t lite = kFALSE); virtual Long_tTApplication::Proce",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:13523,Integrability,interface,interface,13523,"mote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. TStringfDefaultPromptdefault prompt: ""root [%d] ""; TFileHandler*fInputHandlerterminal input handler; Bool_tfInterruptif true macro execution will be stopped; Int_tfNcmdcommand history number; charfPrompt[64]interpreter prompt. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TApplication. ←; TRint. Function documentation; TRint(const char* appClassName, int* argc, char** argv, void* options = 0, int numOptions = 0, Bool_t noLogo = kFALSE); Create an application environment. The TRint environment provides an; interface to the WM manager functionality and eventloop via inheritance; of TApplication and in addition provides interactive access to; the CINT C++ interpreter via the command line. ~TRint(); Destructor. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. void Run(Bool_t retrn = kFALSE); Main application eventloop. First process files given on the command; line and then go into the main application event loop, unless the -q; command line option was specfied in which case the program terminates.; When retrun is true this method returns even when -q was specified. When QuitOpt is true and retrn is false, terminate the application with; an error code equal to either the Process",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:111,Modifiability,inherit,inheritance,111,". TRint. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » RINT; » TRint. class TRint: public TApplication. Rint. Rint is the ROOT Interactive Interface. It allows interactive access; to the ROOT system via the CINT C/C++ interpreter. Function Members (Methods); public:. virtual~TRint(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TApplication::ApplicationName() const; static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Int_tTApplication::Argc() const; char**TApplication::Argv() const; char*TApplication::Argv(Int_t index) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTApplication::ClearInputFiles(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; static voidTApplication::CreateApplication(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTQObject::Destroyed()SIGNAL",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:5804,Modifiability,Inherit,InheritsFrom,5804,"::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual voidTApplication::GetOptions(Int_t* argc, char** argv); virtual char*GetPrompt(); TSignalHandler*TApplication::GetSignalHandler() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual voidHandleException(Int_t sig); virtual voidTApplication::HandleIdleTimer()SIGNAL ; virtual Bool_tHandleTermInput(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTApplication::Hide(); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::InitializeGraphics(); TObjArray*TApplication::InputFiles() const; virtual voidTObject::Inspect() constMENU ; voidInterrupt(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTApplication::IsCmdThread(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTApplication::IsRunning() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTApplication::KeyPressed(Int_t key)SIGNAL ; virtual voidTApplication::LineProcessed(const char* line)SIGNAL ; virtual voidTApplication::Lower(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:5870,Modifiability,Inherit,InheritsFrom,5870,"const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual voidTApplication::GetOptions(Int_t* argc, char** argv); virtual char*GetPrompt(); TSignalHandler*TApplication::GetSignalHandler() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual voidHandleException(Int_t sig); virtual voidTApplication::HandleIdleTimer()SIGNAL ; virtual Bool_tHandleTermInput(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTApplication::Hide(); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::InitializeGraphics(); TObjArray*TApplication::InputFiles() const; virtual voidTObject::Inspect() constMENU ; voidInterrupt(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTApplication::IsCmdThread(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTApplication::IsRunning() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTApplication::KeyPressed(Int_t key)SIGNAL ; virtual voidTApplication::LineProcessed(const char* line)SIGNAL ; virtual voidTApplication::Lower(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static voidTApplication::NeedGr",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:13243,Modifiability,Inherit,Inheritance,13243,"tusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TApplication::EStatusBitsTApplication::kProcessRemotely; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. TStringfDefaultPromptdefault prompt: ""root [%d] ""; TFileHandler*fInputHandlerterminal input handler; Bool_tfInterruptif true macro execution will be stopped; Int_tfNcmdcommand history number; charfPrompt[64]interpreter prompt. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TApplication. ←; TRint. Function documentation; TRint(const char* appClassName, int* argc, char** argv, void* options = 0, int numOptions = 0, Bool_t noLogo = kFALSE); Create an application environment. The TRint environment provides an; interface to the WM manager functionality and eventloop via inheritance; of TApplication and in addition provides interactive access to; the CINT C++ interpreter via the command line. ~TRint(); Destructor. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. void Run(Bool_t retrn = kFALSE); Main application eventloop. First process files g",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:13583,Modifiability,inherit,inheritance,13583,"mote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. TStringfDefaultPromptdefault prompt: ""root [%d] ""; TFileHandler*fInputHandlerterminal input handler; Bool_tfInterruptif true macro execution will be stopped; Int_tfNcmdcommand history number; charfPrompt[64]interpreter prompt. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TApplication. ←; TRint. Function documentation; TRint(const char* appClassName, int* argc, char** argv, void* options = 0, int numOptions = 0, Bool_t noLogo = kFALSE); Create an application environment. The TRint environment provides an; interface to the WM manager functionality and eventloop via inheritance; of TApplication and in addition provides interactive access to; the CINT C++ interpreter via the command line. ~TRint(); Destructor. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. void Run(Bool_t retrn = kFALSE); Main application eventloop. First process files given on the command; line and then go into the main application event loop, unless the -q; command line option was specfied in which case the program terminates.; When retrun is true this method returns even when -q was specified. When QuitOpt is true and retrn is false, terminate the application with; an error code equal to either the Process",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:15668,Modifiability,variab,variable,15668,"a long. void PrintLogo(Bool_t lite = kFALSE); Print the ROOT logo on standard output. char * GetPrompt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will be replaced by the commend; number. The default prompt is ""root [%d] "". The maximum length of; the prompt is 55 characters. To set the prompt in an interactive; session do:; root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> ""); aap>. Bool_t HandleTermInput(); Handle input coming from terminal. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Terminate(int status); Terminate the application. Reset the terminal to sane mode and call; the logoff macro defined via Rint.Logoff environment variable. void SetEchoMode(Bool_t mode); Set console mode:. mode = kTRUE - echo input symbols; mode = kFALSE - noecho input symbols. Long_t ProcessRemote(const char* line, Int_t* error = 0); Process the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script]; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. Long_t ProcessLineNr(const char* filestem, const char* line, Int_t* error = 0); Calls ProcessLine() possibly prepending a #line directive for; better diagnostics. Must be called after fNcmd has been increased for; the next line. Int_t TabCompletionHook(char* buf, int* pLoc, ostream& out); Forward tab completion request to our TTabCom::Hook(). TRint(c",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:15998,Modifiability,variab,variable,15998,"eplaced by the commend; number. The default prompt is ""root [%d] "". The maximum length of; the prompt is 55 characters. To set the prompt in an interactive; session do:; root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> ""); aap>. Bool_t HandleTermInput(); Handle input coming from terminal. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Terminate(int status); Terminate the application. Reset the terminal to sane mode and call; the logoff macro defined via Rint.Logoff environment variable. void SetEchoMode(Bool_t mode); Set console mode:. mode = kTRUE - echo input symbols; mode = kFALSE - noecho input symbols. Long_t ProcessRemote(const char* line, Int_t* error = 0); Process the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script]; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. Long_t ProcessLineNr(const char* filestem, const char* line, Int_t* error = 0); Calls ProcessLine() possibly prepending a #line directive for; better diagnostics. Must be called after fNcmd has been increased for; the next line. Int_t TabCompletionHook(char* buf, int* pLoc, ostream& out); Forward tab completion request to our TTabCom::Hook(). TRint(const TRint& ). TRint& operator=(const TRint& ). void Interrupt(); { fInterrupt = kTRUE; }. » Author: Rene Brun 17/02/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions r",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:10840,Performance,Load,LoadGraphicsLibs,10840,"oid* options = 0, int numOptions = 0, Bool_t noLogo = kFALSE); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static voidTApplication::Close(TApplication* app); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTApplication::Help(const char* line); virtual voidTApplication::LoadGraphicsLibs(); virtual voidTApplication::MakeBatch(); voidTObject::MakeZombie(); static TApplication*TApplication::Open(const char* url, Int_t debug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); voidTApplication::SetSignalHandler(TSignalHandler* sh). private:. voidExecLogon(); TRint&operator=(const TRint&); Long_tProcessLineNr(const char* filestem, const char* line, Int_t* error = 0); virtual Long_tProcessRemote(const char* line, Int_t* error = 0); TRint(const TRint&). Data Members; public:. static TApplication::EExitOnExceptionTApplication::kAbort; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatus",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:373,Security,access,access,373,". TRint. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » RINT; » TRint. class TRint: public TApplication. Rint. Rint is the ROOT Interactive Interface. It allows interactive access; to the ROOT system via the CINT C/C++ interpreter. Function Members (Methods); public:. virtual~TRint(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TApplication::ApplicationName() const; static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Int_tTApplication::Argc() const; char**TApplication::Argv() const; char*TApplication::Argv(Int_t index) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTApplication::ClearInputFiles(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; static voidTApplication::CreateApplication(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTQObject::Destroyed()SIGNAL",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:5535,Security,Hash,Hash,5535,"Object::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*TApplication::GetIdleCommand() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual voidTApplication::GetOptions(Int_t* argc, char** argv); virtual char*GetPrompt(); TSignalHandler*TApplication::GetSignalHandler() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual voidHandleException(Int_t sig); virtual voidTApplication::HandleIdleTimer()SIGNAL ; virtual Bool_tHandleTermInput(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTApplication::Hide(); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::InitializeGraphics(); TObjArray*TApplication::InputFiles() const; virtual voidTObject::Inspect() constMENU ; voidInterrupt(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTApplication::IsCmdThread(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTApplication::IsRunning() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTApplication::KeyPressed(Int_t key)SIGNAL ; virtual voidTApplication::LineProcessed(cons",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:13649,Security,access,access,13649,"mote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. TStringfDefaultPromptdefault prompt: ""root [%d] ""; TFileHandler*fInputHandlerterminal input handler; Bool_tfInterruptif true macro execution will be stopped; Int_tfNcmdcommand history number; charfPrompt[64]interpreter prompt. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TApplication. ←; TRint. Function documentation; TRint(const char* appClassName, int* argc, char** argv, void* options = 0, int numOptions = 0, Bool_t noLogo = kFALSE); Create an application environment. The TRint environment provides an; interface to the WM manager functionality and eventloop via inheritance; of TApplication and in addition provides interactive access to; the CINT C++ interpreter via the command line. ~TRint(); Destructor. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. void Run(Bool_t retrn = kFALSE); Main application eventloop. First process files given on the command; line and then go into the main application event loop, unless the -q; command line option was specfied in which case the program terminates.; When retrun is true this method returns even when -q was specified. When QuitOpt is true and retrn is false, terminate the application with; an error code equal to either the Process",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:9493,Testability,Test,TestBit,9493,"l voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidRun(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTObject::SetObjectStat(Bool_t stat); virtual const char*SetPrompt(const char* newPrompt); voidTApplication::SetReturnFromRun(Bool_t ret); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTApplication::Show(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTApplication::StartIdleing(); virtual voidTApplication::StopIdleing(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Int_tTabCompletionHook(char* buf, int* pLoc, ostream& out); virtual voidTerminate(int status); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRint(const char* appClassName, int* argc, char** argv, void* options = 0, int numOptions = 0, Bool_t noLogo = kFALSE); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:9532,Testability,Test,TestBits,9532,"l voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidRun(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTObject::SetObjectStat(Bool_t stat); virtual const char*SetPrompt(const char* newPrompt); voidTApplication::SetReturnFromRun(Bool_t ret); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTApplication::Show(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTApplication::StartIdleing(); virtual voidTApplication::StopIdleing(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Int_tTabCompletionHook(char* buf, int* pLoc, ostream& out); virtual voidTerminate(int status); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRint(const char* appClassName, int* argc, char** argv, void* options = 0, int numOptions = 0, Bool_t noLogo = kFALSE); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:13755,Testability,log,logon,13755,"om this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. TStringfDefaultPromptdefault prompt: ""root [%d] ""; TFileHandler*fInputHandlerterminal input handler; Bool_tfInterruptif true macro execution will be stopped; Int_tfNcmdcommand history number; charfPrompt[64]interpreter prompt. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TApplication. ←; TRint. Function documentation; TRint(const char* appClassName, int* argc, char** argv, void* options = 0, int numOptions = 0, Bool_t noLogo = kFALSE); Create an application environment. The TRint environment provides an; interface to the WM manager functionality and eventloop via inheritance; of TApplication and in addition provides interactive access to; the CINT C++ interpreter via the command line. ~TRint(); Destructor. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. void Run(Bool_t retrn = kFALSE); Main application eventloop. First process files given on the command; line and then go into the main application event loop, unless the -q; command line option was specfied in which case the program terminates.; When retrun is true this method returns even when -q was specified. When QuitOpt is true and retrn is false, terminate the application with; an error code equal to either the ProcessLine error (if any) or the; return value of the command casted to a long. void PrintLogo(Bool_t lite = kFALSE); Print the ROOT logo on standard output. ",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:13796,Testability,log,logon,13796,"ression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. TStringfDefaultPromptdefault prompt: ""root [%d] ""; TFileHandler*fInputHandlerterminal input handler; Bool_tfInterruptif true macro execution will be stopped; Int_tfNcmdcommand history number; charfPrompt[64]interpreter prompt. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TApplication. ←; TRint. Function documentation; TRint(const char* appClassName, int* argc, char** argv, void* options = 0, int numOptions = 0, Bool_t noLogo = kFALSE); Create an application environment. The TRint environment provides an; interface to the WM manager functionality and eventloop via inheritance; of TApplication and in addition provides interactive access to; the CINT C++ interpreter via the command line. ~TRint(); Destructor. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. void Run(Bool_t retrn = kFALSE); Main application eventloop. First process files given on the command; line and then go into the main application event loop, unless the -q; command line option was specfied in which case the program terminates.; When retrun is true this method returns even when -q was specified. When QuitOpt is true and retrn is false, terminate the application with; an error code equal to either the ProcessLine error (if any) or the; return value of the command casted to a long. void PrintLogo(Bool_t lite = kFALSE); Print the ROOT logo on standard output. char * GetPrompt(); Get prompt from interpreter. Either ""root [n]""",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:13844,Testability,log,logon,13844,"ression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. TStringfDefaultPromptdefault prompt: ""root [%d] ""; TFileHandler*fInputHandlerterminal input handler; Bool_tfInterruptif true macro execution will be stopped; Int_tfNcmdcommand history number; charfPrompt[64]interpreter prompt. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TApplication. ←; TRint. Function documentation; TRint(const char* appClassName, int* argc, char** argv, void* options = 0, int numOptions = 0, Bool_t noLogo = kFALSE); Create an application environment. The TRint environment provides an; interface to the WM manager functionality and eventloop via inheritance; of TApplication and in addition provides interactive access to; the CINT C++ interpreter via the command line. ~TRint(); Destructor. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. void Run(Bool_t retrn = kFALSE); Main application eventloop. First process files given on the command; line and then go into the main application event loop, unless the -q; command line option was specfied in which case the program terminates.; When retrun is true this method returns even when -q was specified. When QuitOpt is true and retrn is false, terminate the application with; an error code equal to either the ProcessLine error (if any) or the; return value of the command casted to a long. void PrintLogo(Bool_t lite = kFALSE); Print the ROOT logo on standard output. char * GetPrompt(); Get prompt from interpreter. Either ""root [n]""",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:13891,Testability,log,logon,13891,"d for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. TStringfDefaultPromptdefault prompt: ""root [%d] ""; TFileHandler*fInputHandlerterminal input handler; Bool_tfInterruptif true macro execution will be stopped; Int_tfNcmdcommand history number; charfPrompt[64]interpreter prompt. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TApplication. ←; TRint. Function documentation; TRint(const char* appClassName, int* argc, char** argv, void* options = 0, int numOptions = 0, Bool_t noLogo = kFALSE); Create an application environment. The TRint environment provides an; interface to the WM manager functionality and eventloop via inheritance; of TApplication and in addition provides interactive access to; the CINT C++ interpreter via the command line. ~TRint(); Destructor. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. void Run(Bool_t retrn = kFALSE); Main application eventloop. First process files given on the command; line and then go into the main application event loop, unless the -q; command line option was specfied in which case the program terminates.; When retrun is true this method returns even when -q was specified. When QuitOpt is true and retrn is false, terminate the application with; an error code equal to either the ProcessLine error (if any) or the; return value of the command casted to a long. void PrintLogo(Bool_t lite = kFALSE); Print the ROOT logo on standard output. char * GetPrompt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set ",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:13979,Testability,log,logon,13979,"applications. private:. TStringfDefaultPromptdefault prompt: ""root [%d] ""; TFileHandler*fInputHandlerterminal input handler; Bool_tfInterruptif true macro execution will be stopped; Int_tfNcmdcommand history number; charfPrompt[64]interpreter prompt. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TApplication. ←; TRint. Function documentation; TRint(const char* appClassName, int* argc, char** argv, void* options = 0, int numOptions = 0, Bool_t noLogo = kFALSE); Create an application environment. The TRint environment provides an; interface to the WM manager functionality and eventloop via inheritance; of TApplication and in addition provides interactive access to; the CINT C++ interpreter via the command line. ~TRint(); Destructor. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. void Run(Bool_t retrn = kFALSE); Main application eventloop. First process files given on the command; line and then go into the main application event loop, unless the -q; command line option was specfied in which case the program terminates.; When retrun is true this method returns even when -q was specified. When QuitOpt is true and retrn is false, terminate the application with; an error code equal to either the ProcessLine error (if any) or the; return value of the command casted to a long. void PrintLogo(Bool_t lite = kFALSE); Print the ROOT logo on standard output. char * GetPrompt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:14016,Testability,Log,Logon,14016,"t: ""root [%d] ""; TFileHandler*fInputHandlerterminal input handler; Bool_tfInterruptif true macro execution will be stopped; Int_tfNcmdcommand history number; charfPrompt[64]interpreter prompt. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TApplication. ←; TRint. Function documentation; TRint(const char* appClassName, int* argc, char** argv, void* options = 0, int numOptions = 0, Bool_t noLogo = kFALSE); Create an application environment. The TRint environment provides an; interface to the WM manager functionality and eventloop via inheritance; of TApplication and in addition provides interactive access to; the CINT C++ interpreter via the command line. ~TRint(); Destructor. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. void Run(Bool_t retrn = kFALSE); Main application eventloop. First process files given on the command; line and then go into the main application event loop, unless the -q; command line option was specfied in which case the program terminates.; When retrun is true this method returns even when -q was specified. When QuitOpt is true and retrn is false, terminate the application with; an error code equal to either the ProcessLine error (if any) or the; return value of the command casted to a long. void PrintLogo(Bool_t lite = kFALSE); Print the ROOT logo on standard output. char * GetPrompt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will be replaced by the commend; number. The default prompt i",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:14092,Testability,log,logon,14092,"acro execution will be stopped; Int_tfNcmdcommand history number; charfPrompt[64]interpreter prompt. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TApplication. ←; TRint. Function documentation; TRint(const char* appClassName, int* argc, char** argv, void* options = 0, int numOptions = 0, Bool_t noLogo = kFALSE); Create an application environment. The TRint environment provides an; interface to the WM manager functionality and eventloop via inheritance; of TApplication and in addition provides interactive access to; the CINT C++ interpreter via the command line. ~TRint(); Destructor. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. void Run(Bool_t retrn = kFALSE); Main application eventloop. First process files given on the command; line and then go into the main application event loop, unless the -q; command line option was specfied in which case the program terminates.; When retrun is true this method returns even when -q was specified. When QuitOpt is true and retrn is false, terminate the application with; an error code equal to either the ProcessLine error (if any) or the; return value of the command casted to a long. void PrintLogo(Bool_t lite = kFALSE); Print the ROOT logo on standard output. char * GetPrompt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will be replaced by the commend; number. The default prompt is ""root [%d] "". The maximum length of; the prompt is 55 characters. To set the prompt in an ",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:14724,Testability,log,logo,14724,"Rint(); Destructor. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. void Run(Bool_t retrn = kFALSE); Main application eventloop. First process files given on the command; line and then go into the main application event loop, unless the -q; command line option was specfied in which case the program terminates.; When retrun is true this method returns even when -q was specified. When QuitOpt is true and retrn is false, terminate the application with; an error code equal to either the ProcessLine error (if any) or the; return value of the command casted to a long. void PrintLogo(Bool_t lite = kFALSE); Print the ROOT logo on standard output. char * GetPrompt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will be replaced by the commend; number. The default prompt is ""root [%d] "". The maximum length of; the prompt is 55 characters. To set the prompt in an interactive; session do:; root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> ""); aap>. Bool_t HandleTermInput(); Handle input coming from terminal. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Terminate(int status); Terminate the application. Reset the terminal to sane mode and call; the logoff macro defined via Rint.Logoff environment variable. void SetEchoMode(Bool_t mode); ",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:15619,Testability,log,logoff,15619,"f any) or the; return value of the command casted to a long. void PrintLogo(Bool_t lite = kFALSE); Print the ROOT logo on standard output. char * GetPrompt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will be replaced by the commend; number. The default prompt is ""root [%d] "". The maximum length of; the prompt is 55 characters. To set the prompt in an interactive; session do:; root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> ""); aap>. Bool_t HandleTermInput(); Handle input coming from terminal. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Terminate(int status); Terminate the application. Reset the terminal to sane mode and call; the logoff macro defined via Rint.Logoff environment variable. void SetEchoMode(Bool_t mode); Set console mode:. mode = kTRUE - echo input symbols; mode = kFALSE - noecho input symbols. Long_t ProcessRemote(const char* line, Int_t* error = 0); Process the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script]; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. Long_t ProcessLineNr(const char* filestem, const char* line, Int_t* error = 0); Calls ProcessLine() possibly prepending a #line directive for; better diagnostics. Must be called after fNcmd has been increased for; the next line. Int_t TabCompletionHook(char* buf, int* pLoc, ostream& out); Forward ta",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:15649,Testability,Log,Logoff,15649,"a long. void PrintLogo(Bool_t lite = kFALSE); Print the ROOT logo on standard output. char * GetPrompt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will be replaced by the commend; number. The default prompt is ""root [%d] "". The maximum length of; the prompt is 55 characters. To set the prompt in an interactive; session do:; root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> ""); aap>. Bool_t HandleTermInput(); Handle input coming from terminal. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Terminate(int status); Terminate the application. Reset the terminal to sane mode and call; the logoff macro defined via Rint.Logoff environment variable. void SetEchoMode(Bool_t mode); Set console mode:. mode = kTRUE - echo input symbols; mode = kFALSE - noecho input symbols. Long_t ProcessRemote(const char* line, Int_t* error = 0); Process the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script]; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. Long_t ProcessLineNr(const char* filestem, const char* line, Int_t* error = 0); Calls ProcessLine() possibly prepending a #line directive for; better diagnostics. Must be called after fNcmd has been increased for; the next line. Int_t TabCompletionHook(char* buf, int* pLoc, ostream& out); Forward tab completion request to our TTabCom::Hook(). TRint(c",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:1138,Usability,Clear,Clear,1138," virtual~TRint(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TApplication::ApplicationName() const; static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Int_tTApplication::Argc() const; char**TApplication::Argv() const; char*TApplication::Argv(Int_t index) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTApplication::ClearInputFiles(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; static voidTApplication::CreateApplication(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTQObject::Destroyed()SIGNAL",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRint.html:1179,Usability,Clear,ClearInputFiles,1179," virtual~TRint(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TApplication::ApplicationName() const; static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Int_tTApplication::Argc() const; char**TApplication::Argv() const; char*TApplication::Argv(Int_t index) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTApplication::ClearInputFiles(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; static voidTApplication::CreateApplication(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTQObject::Destroyed()SIGNAL",MatchSource.WIKI,root/html602/TRint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRint.html
https://root.cern/root/html602/TRobustEstimator.html:591,Availability,robust,robust,591,". TRobustEstimator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » PHYSICS; » TRobustEstimator. class TRobustEstimator: public TObject. TRobustEstimator. Minimum Covariance Determinant Estimator - a Fast Algorithm; invented by Peter J.Rousseeuw and Katrien Van Dreissen; ""A Fast Algorithm for the Minimum covariance Determinant Estimator""; Technometrics, August 1999, Vol.41, NO.3. What are robust estimators?; ""An important property of an estimator is its robustness. An estimator; is called robust if it is insensitive to measurements that deviate; from the expected behaviour. There are 2 ways to treat such deviating; measurements: one may either try to recongize them and then remove; them from the data sample; or one may leave them in the sample, taking; care that they do not influence the estimate unduly. In both cases robust; estimators are needed...Robust procedures compensate for systematic errors; as much as possible, and indicate any situation in which a danger of not being; able to operate reliably is detected.""; R.Fruhwirth, M.Regler, R.K.Bock, H.Grote, D.Notz; ""Data Analysis Techniques for High-Energy Physics"", 2nd edition. What does this algorithm do?; It computes a highly robust estimator of multivariate location and scatter.; Then, it takes those estimates to compute robust distances of all the; data vectors. Those with large robust distances are considered outliers.; Robust distances can then be plotted for better visualization of the data. How does this algorithm do it?; The MCD objective is to find h observations(out of n) whose classical; covariance matrix has the lowest determinant. The MCD estimator of location; is then the average of those h points and the MCD estimate of scatter; is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:657,Availability,robust,robustness,657,". TRobustEstimator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » PHYSICS; » TRobustEstimator. class TRobustEstimator: public TObject. TRobustEstimator. Minimum Covariance Determinant Estimator - a Fast Algorithm; invented by Peter J.Rousseeuw and Katrien Van Dreissen; ""A Fast Algorithm for the Minimum covariance Determinant Estimator""; Technometrics, August 1999, Vol.41, NO.3. What are robust estimators?; ""An important property of an estimator is its robustness. An estimator; is called robust if it is insensitive to measurements that deviate; from the expected behaviour. There are 2 ways to treat such deviating; measurements: one may either try to recongize them and then remove; them from the data sample; or one may leave them in the sample, taking; care that they do not influence the estimate unduly. In both cases robust; estimators are needed...Robust procedures compensate for systematic errors; as much as possible, and indicate any situation in which a danger of not being; able to operate reliably is detected.""; R.Fruhwirth, M.Regler, R.K.Bock, H.Grote, D.Notz; ""Data Analysis Techniques for High-Energy Physics"", 2nd edition. What does this algorithm do?; It computes a highly robust estimator of multivariate location and scatter.; Then, it takes those estimates to compute robust distances of all the; data vectors. Those with large robust distances are considered outliers.; Robust distances can then be plotted for better visualization of the data. How does this algorithm do it?; The MCD objective is to find h observations(out of n) whose classical; covariance matrix has the lowest determinant. The MCD estimator of location; is then the average of those h points and the MCD estimate of scatter; is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:693,Availability,robust,robust,693,". TRobustEstimator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » PHYSICS; » TRobustEstimator. class TRobustEstimator: public TObject. TRobustEstimator. Minimum Covariance Determinant Estimator - a Fast Algorithm; invented by Peter J.Rousseeuw and Katrien Van Dreissen; ""A Fast Algorithm for the Minimum covariance Determinant Estimator""; Technometrics, August 1999, Vol.41, NO.3. What are robust estimators?; ""An important property of an estimator is its robustness. An estimator; is called robust if it is insensitive to measurements that deviate; from the expected behaviour. There are 2 ways to treat such deviating; measurements: one may either try to recongize them and then remove; them from the data sample; or one may leave them in the sample, taking; care that they do not influence the estimate unduly. In both cases robust; estimators are needed...Robust procedures compensate for systematic errors; as much as possible, and indicate any situation in which a danger of not being; able to operate reliably is detected.""; R.Fruhwirth, M.Regler, R.K.Bock, H.Grote, D.Notz; ""Data Analysis Techniques for High-Energy Physics"", 2nd edition. What does this algorithm do?; It computes a highly robust estimator of multivariate location and scatter.; Then, it takes those estimates to compute robust distances of all the; data vectors. Those with large robust distances are considered outliers.; Robust distances can then be plotted for better visualization of the data. How does this algorithm do it?; The MCD objective is to find h observations(out of n) whose classical; covariance matrix has the lowest determinant. The MCD estimator of location; is then the average of those h points and the MCD estimate of scatter; is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:1029,Availability,robust,robust,1029,"OT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » PHYSICS; » TRobustEstimator. class TRobustEstimator: public TObject. TRobustEstimator. Minimum Covariance Determinant Estimator - a Fast Algorithm; invented by Peter J.Rousseeuw and Katrien Van Dreissen; ""A Fast Algorithm for the Minimum covariance Determinant Estimator""; Technometrics, August 1999, Vol.41, NO.3. What are robust estimators?; ""An important property of an estimator is its robustness. An estimator; is called robust if it is insensitive to measurements that deviate; from the expected behaviour. There are 2 ways to treat such deviating; measurements: one may either try to recongize them and then remove; them from the data sample; or one may leave them in the sample, taking; care that they do not influence the estimate unduly. In both cases robust; estimators are needed...Robust procedures compensate for systematic errors; as much as possible, and indicate any situation in which a danger of not being; able to operate reliably is detected.""; R.Fruhwirth, M.Regler, R.K.Bock, H.Grote, D.Notz; ""Data Analysis Techniques for High-Energy Physics"", 2nd edition. What does this algorithm do?; It computes a highly robust estimator of multivariate location and scatter.; Then, it takes those estimates to compute robust distances of all the; data vectors. Those with large robust distances are considered outliers.; Robust distances can then be plotted for better visualization of the data. How does this algorithm do it?; The MCD objective is to find h observations(out of n) whose classical; covariance matrix has the lowest determinant. The MCD estimator of location; is then the average of those h points and the MCD estimate of scatter; is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2; so the algorithm is effective when",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:1061,Availability,Robust,Robust,1061," viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » PHYSICS; » TRobustEstimator. class TRobustEstimator: public TObject. TRobustEstimator. Minimum Covariance Determinant Estimator - a Fast Algorithm; invented by Peter J.Rousseeuw and Katrien Van Dreissen; ""A Fast Algorithm for the Minimum covariance Determinant Estimator""; Technometrics, August 1999, Vol.41, NO.3. What are robust estimators?; ""An important property of an estimator is its robustness. An estimator; is called robust if it is insensitive to measurements that deviate; from the expected behaviour. There are 2 ways to treat such deviating; measurements: one may either try to recongize them and then remove; them from the data sample; or one may leave them in the sample, taking; care that they do not influence the estimate unduly. In both cases robust; estimators are needed...Robust procedures compensate for systematic errors; as much as possible, and indicate any situation in which a danger of not being; able to operate reliably is detected.""; R.Fruhwirth, M.Regler, R.K.Bock, H.Grote, D.Notz; ""Data Analysis Techniques for High-Energy Physics"", 2nd edition. What does this algorithm do?; It computes a highly robust estimator of multivariate location and scatter.; Then, it takes those estimates to compute robust distances of all the; data vectors. Those with large robust distances are considered outliers.; Robust distances can then be plotted for better visualization of the data. How does this algorithm do it?; The MCD objective is to find h observations(out of n) whose classical; covariance matrix has the lowest determinant. The MCD estimator of location; is then the average of those h points and the MCD estimate of scatter; is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2; so the algorithm is effective when less than (n+nvar+1)/2 variables are outliers.; The algorithm also allows for exact fit situations - that is",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:1105,Availability,error,errors,1105," viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » PHYSICS; » TRobustEstimator. class TRobustEstimator: public TObject. TRobustEstimator. Minimum Covariance Determinant Estimator - a Fast Algorithm; invented by Peter J.Rousseeuw and Katrien Van Dreissen; ""A Fast Algorithm for the Minimum covariance Determinant Estimator""; Technometrics, August 1999, Vol.41, NO.3. What are robust estimators?; ""An important property of an estimator is its robustness. An estimator; is called robust if it is insensitive to measurements that deviate; from the expected behaviour. There are 2 ways to treat such deviating; measurements: one may either try to recongize them and then remove; them from the data sample; or one may leave them in the sample, taking; care that they do not influence the estimate unduly. In both cases robust; estimators are needed...Robust procedures compensate for systematic errors; as much as possible, and indicate any situation in which a danger of not being; able to operate reliably is detected.""; R.Fruhwirth, M.Regler, R.K.Bock, H.Grote, D.Notz; ""Data Analysis Techniques for High-Energy Physics"", 2nd edition. What does this algorithm do?; It computes a highly robust estimator of multivariate location and scatter.; Then, it takes those estimates to compute robust distances of all the; data vectors. Those with large robust distances are considered outliers.; Robust distances can then be plotted for better visualization of the data. How does this algorithm do it?; The MCD objective is to find h observations(out of n) whose classical; covariance matrix has the lowest determinant. The MCD estimator of location; is then the average of those h points and the MCD estimate of scatter; is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2; so the algorithm is effective when less than (n+nvar+1)/2 variables are outliers.; The algorithm also allows for exact fit situations - that is",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:1209,Availability,reliab,reliably,1209," viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » PHYSICS; » TRobustEstimator. class TRobustEstimator: public TObject. TRobustEstimator. Minimum Covariance Determinant Estimator - a Fast Algorithm; invented by Peter J.Rousseeuw and Katrien Van Dreissen; ""A Fast Algorithm for the Minimum covariance Determinant Estimator""; Technometrics, August 1999, Vol.41, NO.3. What are robust estimators?; ""An important property of an estimator is its robustness. An estimator; is called robust if it is insensitive to measurements that deviate; from the expected behaviour. There are 2 ways to treat such deviating; measurements: one may either try to recongize them and then remove; them from the data sample; or one may leave them in the sample, taking; care that they do not influence the estimate unduly. In both cases robust; estimators are needed...Robust procedures compensate for systematic errors; as much as possible, and indicate any situation in which a danger of not being; able to operate reliably is detected.""; R.Fruhwirth, M.Regler, R.K.Bock, H.Grote, D.Notz; ""Data Analysis Techniques for High-Energy Physics"", 2nd edition. What does this algorithm do?; It computes a highly robust estimator of multivariate location and scatter.; Then, it takes those estimates to compute robust distances of all the; data vectors. Those with large robust distances are considered outliers.; Robust distances can then be plotted for better visualization of the data. How does this algorithm do it?; The MCD objective is to find h observations(out of n) whose classical; covariance matrix has the lowest determinant. The MCD estimator of location; is then the average of those h points and the MCD estimate of scatter; is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2; so the algorithm is effective when less than (n+nvar+1)/2 variables are outliers.; The algorithm also allows for exact fit situations - that is",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:1399,Availability,robust,robust,1399,"ast Algorithm; invented by Peter J.Rousseeuw and Katrien Van Dreissen; ""A Fast Algorithm for the Minimum covariance Determinant Estimator""; Technometrics, August 1999, Vol.41, NO.3. What are robust estimators?; ""An important property of an estimator is its robustness. An estimator; is called robust if it is insensitive to measurements that deviate; from the expected behaviour. There are 2 ways to treat such deviating; measurements: one may either try to recongize them and then remove; them from the data sample; or one may leave them in the sample, taking; care that they do not influence the estimate unduly. In both cases robust; estimators are needed...Robust procedures compensate for systematic errors; as much as possible, and indicate any situation in which a danger of not being; able to operate reliably is detected.""; R.Fruhwirth, M.Regler, R.K.Bock, H.Grote, D.Notz; ""Data Analysis Techniques for High-Energy Physics"", 2nd edition. What does this algorithm do?; It computes a highly robust estimator of multivariate location and scatter.; Then, it takes those estimates to compute robust distances of all the; data vectors. Those with large robust distances are considered outliers.; Robust distances can then be plotted for better visualization of the data. How does this algorithm do it?; The MCD objective is to find h observations(out of n) whose classical; covariance matrix has the lowest determinant. The MCD estimator of location; is then the average of those h points and the MCD estimate of scatter; is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2; so the algorithm is effective when less than (n+nvar+1)/2 variables are outliers.; The algorithm also allows for exact fit situations - that is, when h or more; observations lie on a hyperplane. Then the algorithm still yields the MCD location T; and scatter matrix S, the latter being singular as it should be. From (T,S) the; program then computes the equation of the hyperplane. How can this al",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:1497,Availability,robust,robust,1497," Minimum covariance Determinant Estimator""; Technometrics, August 1999, Vol.41, NO.3. What are robust estimators?; ""An important property of an estimator is its robustness. An estimator; is called robust if it is insensitive to measurements that deviate; from the expected behaviour. There are 2 ways to treat such deviating; measurements: one may either try to recongize them and then remove; them from the data sample; or one may leave them in the sample, taking; care that they do not influence the estimate unduly. In both cases robust; estimators are needed...Robust procedures compensate for systematic errors; as much as possible, and indicate any situation in which a danger of not being; able to operate reliably is detected.""; R.Fruhwirth, M.Regler, R.K.Bock, H.Grote, D.Notz; ""Data Analysis Techniques for High-Energy Physics"", 2nd edition. What does this algorithm do?; It computes a highly robust estimator of multivariate location and scatter.; Then, it takes those estimates to compute robust distances of all the; data vectors. Those with large robust distances are considered outliers.; Robust distances can then be plotted for better visualization of the data. How does this algorithm do it?; The MCD objective is to find h observations(out of n) whose classical; covariance matrix has the lowest determinant. The MCD estimator of location; is then the average of those h points and the MCD estimate of scatter; is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2; so the algorithm is effective when less than (n+nvar+1)/2 variables are outliers.; The algorithm also allows for exact fit situations - that is, when h or more; observations lie on a hyperplane. Then the algorithm still yields the MCD location T; and scatter matrix S, the latter being singular as it should be. From (T,S) the; program then computes the equation of the hyperplane. How can this algorithm be used?; In any case, when contamination of data is suspected, that might influence; th",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:1557,Availability,robust,robust,1557,"Vol.41, NO.3. What are robust estimators?; ""An important property of an estimator is its robustness. An estimator; is called robust if it is insensitive to measurements that deviate; from the expected behaviour. There are 2 ways to treat such deviating; measurements: one may either try to recongize them and then remove; them from the data sample; or one may leave them in the sample, taking; care that they do not influence the estimate unduly. In both cases robust; estimators are needed...Robust procedures compensate for systematic errors; as much as possible, and indicate any situation in which a danger of not being; able to operate reliably is detected.""; R.Fruhwirth, M.Regler, R.K.Bock, H.Grote, D.Notz; ""Data Analysis Techniques for High-Energy Physics"", 2nd edition. What does this algorithm do?; It computes a highly robust estimator of multivariate location and scatter.; Then, it takes those estimates to compute robust distances of all the; data vectors. Those with large robust distances are considered outliers.; Robust distances can then be plotted for better visualization of the data. How does this algorithm do it?; The MCD objective is to find h observations(out of n) whose classical; covariance matrix has the lowest determinant. The MCD estimator of location; is then the average of those h points and the MCD estimate of scatter; is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2; so the algorithm is effective when less than (n+nvar+1)/2 variables are outliers.; The algorithm also allows for exact fit situations - that is, when h or more; observations lie on a hyperplane. Then the algorithm still yields the MCD location T; and scatter matrix S, the latter being singular as it should be. From (T,S) the; program then computes the equation of the hyperplane. How can this algorithm be used?; In any case, when contamination of data is suspected, that might influence; the classical estimates.; Also, robust estimation of location and scatter i",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:1600,Availability,Robust,Robust,1600," an estimator is its robustness. An estimator; is called robust if it is insensitive to measurements that deviate; from the expected behaviour. There are 2 ways to treat such deviating; measurements: one may either try to recongize them and then remove; them from the data sample; or one may leave them in the sample, taking; care that they do not influence the estimate unduly. In both cases robust; estimators are needed...Robust procedures compensate for systematic errors; as much as possible, and indicate any situation in which a danger of not being; able to operate reliably is detected.""; R.Fruhwirth, M.Regler, R.K.Bock, H.Grote, D.Notz; ""Data Analysis Techniques for High-Energy Physics"", 2nd edition. What does this algorithm do?; It computes a highly robust estimator of multivariate location and scatter.; Then, it takes those estimates to compute robust distances of all the; data vectors. Those with large robust distances are considered outliers.; Robust distances can then be plotted for better visualization of the data. How does this algorithm do it?; The MCD objective is to find h observations(out of n) whose classical; covariance matrix has the lowest determinant. The MCD estimator of location; is then the average of those h points and the MCD estimate of scatter; is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2; so the algorithm is effective when less than (n+nvar+1)/2 variables are outliers.; The algorithm also allows for exact fit situations - that is, when h or more; observations lie on a hyperplane. Then the algorithm still yields the MCD location T; and scatter matrix S, the latter being singular as it should be. From (T,S) the; program then computes the equation of the hyperplane. How can this algorithm be used?; In any case, when contamination of data is suspected, that might influence; the classical estimates.; Also, robust estimation of location and scatter is a tool to robustify; other multivariate techniques such as, for e",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:2526,Availability,robust,robust,2526,"stances can then be plotted for better visualization of the data. How does this algorithm do it?; The MCD objective is to find h observations(out of n) whose classical; covariance matrix has the lowest determinant. The MCD estimator of location; is then the average of those h points and the MCD estimate of scatter; is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2; so the algorithm is effective when less than (n+nvar+1)/2 variables are outliers.; The algorithm also allows for exact fit situations - that is, when h or more; observations lie on a hyperplane. Then the algorithm still yields the MCD location T; and scatter matrix S, the latter being singular as it should be. From (T,S) the; program then computes the equation of the hyperplane. How can this algorithm be used?; In any case, when contamination of data is suspected, that might influence; the classical estimates.; Also, robust estimation of location and scatter is a tool to robustify; other multivariate techniques such as, for example, principal-component analysis; and discriminant analysis. Technical details of the algorithm:; 0.The default h = (n+nvariables+1)/2, but the user may choose any interger h with; (n+nvariables+1)/2<=h<=n. The program then reports the MCD's breakdown value; (n-h+1)/n. If you are sure that the dataset contains less than 25% contamination; which is usually the case, a good compromise between breakdown value and; efficiency is obtained by putting h=[.75*n].; 1.If h=n,the MCD location estimate is the average of the whole dataset, and; the MCD scatter estimate is its covariance matrix. Report this and stop; 2.If nvariables=1 (univariate data), compute the MCD estimate by the exact; algorithm of Rousseeuw and Leroy (1987, pp.171-172) in O(nlogn)time and stop; 3.From here on, h<n and nvariables>=2.; 3a.If n is small:; - repeat (say) 500 times:; -- construct an initial h-subset, starting from a random (nvar+1)-subset; -- carry out 2 C-steps (described in the com",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:2581,Availability,robust,robustify,2581,"stances can then be plotted for better visualization of the data. How does this algorithm do it?; The MCD objective is to find h observations(out of n) whose classical; covariance matrix has the lowest determinant. The MCD estimator of location; is then the average of those h points and the MCD estimate of scatter; is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2; so the algorithm is effective when less than (n+nvar+1)/2 variables are outliers.; The algorithm also allows for exact fit situations - that is, when h or more; observations lie on a hyperplane. Then the algorithm still yields the MCD location T; and scatter matrix S, the latter being singular as it should be. From (T,S) the; program then computes the equation of the hyperplane. How can this algorithm be used?; In any case, when contamination of data is suspected, that might influence; the classical estimates.; Also, robust estimation of location and scatter is a tool to robustify; other multivariate techniques such as, for example, principal-component analysis; and discriminant analysis. Technical details of the algorithm:; 0.The default h = (n+nvariables+1)/2, but the user may choose any interger h with; (n+nvariables+1)/2<=h<=n. The program then reports the MCD's breakdown value; (n-h+1)/n. If you are sure that the dataset contains less than 25% contamination; which is usually the case, a good compromise between breakdown value and; efficiency is obtained by putting h=[.75*n].; 1.If h=n,the MCD location estimate is the average of the whole dataset, and; the MCD scatter estimate is its covariance matrix. Report this and stop; 2.If nvariables=1 (univariate data), compute the MCD estimate by the exact; algorithm of Rousseeuw and Leroy (1987, pp.171-172) in O(nlogn)time and stop; 3.From here on, h<n and nvariables>=2.; 3a.If n is small:; - repeat (say) 500 times:; -- construct an initial h-subset, starting from a random (nvar+1)-subset; -- carry out 2 C-steps (described in the com",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:4522,Availability,Robust,Robust,4522,"tion); - for the 10 results with lowest det(S):; -- carry out C-steps until convergence; - report the solution (T, S) with the lowest det(S); 3b.If n is larger (say, n>600), then; - construct up to 5 disjoint random subsets of size nsub (say, nsub=300); - inside each subset repeat 500/5 times:; -- construct an initial subset of size hsub=[nsub*h/n]; -- carry out 2 C-steps; -- keep the best 10 results (Tsub, Ssub); - pool the subsets, yielding the merged set (say, of size nmerged=1500); - in the merged set, repeat for each of the 50 solutions (Tsub, Ssub); -- carry out 2 C-steps; -- keep the 10 best results; - in the full dataset, repeat for those best results:; -- take several C-steps, using n and h; -- report the best final result (T, S); 4.To obtain consistency when the data comes from a multivariate normal; distribution, covariance matrix is multiplied by a correction factor; 5.Robust distances for all elements, using the final (T, S) are calculated; Then the very final mean and covariance estimates are calculated only for; values, whose robust distances are less than a cutoff value (0.975 quantile; of chi2 distribution with nvariables degrees of freedom). Function Members (Methods); public:. virtual~TRobustEstimator(); voidTObject::AbstractMethod(const char* method) const; voidAddColumn(Double_t* col); voidAddRow(Double_t* row); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* opt",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:4685,Availability,robust,robust,4685,"tion); - for the 10 results with lowest det(S):; -- carry out C-steps until convergence; - report the solution (T, S) with the lowest det(S); 3b.If n is larger (say, n>600), then; - construct up to 5 disjoint random subsets of size nsub (say, nsub=300); - inside each subset repeat 500/5 times:; -- construct an initial subset of size hsub=[nsub*h/n]; -- carry out 2 C-steps; -- keep the best 10 results (Tsub, Ssub); - pool the subsets, yielding the merged set (say, of size nmerged=1500); - in the merged set, repeat for each of the 50 solutions (Tsub, Ssub); -- carry out 2 C-steps; -- keep the 10 best results; - in the full dataset, repeat for those best results:; -- take several C-steps, using n and h; -- report the best final result (T, S); 4.To obtain consistency when the data comes from a multivariate normal; distribution, covariance matrix is multiplied by a correction factor; 5.Robust distances for all elements, using the final (T, S) are calculated; Then the very final mean and covariance estimates are calculated only for; values, whose robust distances are less than a cutoff value (0.975 quantile; of chi2 distribution with nvariables degrees of freedom). Function Members (Methods); public:. virtual~TRobustEstimator(); voidTObject::AbstractMethod(const char* method) const; voidAddColumn(Double_t* col); voidAddRow(Double_t* row); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* opt",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:5711,Availability,Error,Error,5711,,MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:5952,Availability,error,error,5952," voidAddRow(Double_t* row); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidEvaluate(); voidEvaluateUni(Int_t nvectors, Double_t* data, Double_t& mean, Double_t& sigma, Int_t hh = 0); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetBDPoint(); Double_tGetChiQuant(Int_t i) const; const TMatrixDSym*GetCorrelation() const; voidGetCorrelation(TMatrixDSym& matr); const TMatrixDSym*GetCovariance() const; voidGetCovariance(TMatrixDSym& matr); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TVectorD*GetHyperplane() const; voidGetHyperplane(TVectorD& vec); virtual const char*TObject::GetIconName() const; const TVectorD*GetMean() const; voidGetMean(TVectorD& means); virtual const char*TObject::GetName() const; Int_tGetNHyp(); Int_tGetNOut(); Int_tGetNumberObservations() const; Int_tGetNvar() const; virtual char*TObject::",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:6036,Availability,error,error,6036,"irtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidEvaluate(); voidEvaluateUni(Int_t nvectors, Double_t* data, Double_t& mean, Double_t& sigma, Int_t hh = 0); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetBDPoint(); Double_tGetChiQuant(Int_t i) const; const TMatrixDSym*GetCorrelation() const; voidGetCorrelation(TMatrixDSym& matr); const TMatrixDSym*GetCovariance() const; voidGetCovariance(TMatrixDSym& matr); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TVectorD*GetHyperplane() const; voidGetHyperplane(TVectorD& vec); virtual const char*TObject::GetIconName() const; const TVectorD*GetMean() const; voidGetMean(TVectorD& means); virtual const char*TObject::GetName() const; Int_tGetNHyp(); Int_tGetNOut(); Int_tGetNumberObservations() const; Int_tGetNvar() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virt",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:12371,Availability,robust,robust,12371,"tsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMatrixDSymfCorrelationcorrelation matrix; TMatrixDSymfCovariancecovariance matrix estimate; TMatrixDfDatathe original data; Int_tfExactif there was an exact fit, stores the number of points on a hyperplane; Int_tfHalgorithm parameter, determining the subsample size; TVectorDfHyperplanein case more than fH observations lie on a hyperplane; TMatrixDSymfInvcovarianceinverse of the covariance matrix; TVectorDfMeanlocation estimate (mean values); Int_tfNnumber of observations; Int_tfNvarnumber of variables; TArrayIfOutarray of indexes of ouliers, size <0.5*n; TVectorDfRdarray of robust distances, size n; TVectorDfSdarray of standard deviations; Int_tfVarTempnumber of variables already added to the data matrix; Int_tfVecTempnumber of observations already added to the data matrix. Class Charts. Inheritance Chart:. TObject. ←; TRobustEstimator. Function documentation; TRobustEstimator(); this constructor should be used in a univariate case:; first call this constructor, then - the EvaluateUni(..) function. TRobustEstimator(Int_t nvectors, Int_t nvariables, Int_t hh = 0); constructor. void AddColumn(Double_t* col); adds a column to the data matrix; it is assumed that the column has size fN; variable fVarTemp keeps the number of columns l; already added. void AddRow(Double_t* row); adds a vector to the data matrix; it is supposed that the vector is of size fNvar. void Evaluate(); Finds the estimate of multivariate mean and variance. void EvaluateUni(Int_t nvectors, Double_t* data, Double_t& mean, Double_t& sigma, Int_t hh = 0); for the univariate case; estimates of location and scatter are returned in mean and sigma parameters; the algorithm works on t",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:14184,Availability,robust,robust,14184,"); Finds the estimate of multivariate mean and variance. void EvaluateUni(Int_t nvectors, Double_t* data, Double_t& mean, Double_t& sigma, Int_t hh = 0); for the univariate case; estimates of location and scatter are returned in mean and sigma parameters; the algorithm works on the same principle as in multivariate case -; it finds a subset of size hh with smallest sigma, and then returns mean and; sigma of this subset. Int_t GetBDPoint(); returns the breakdown point of the algorithm. Double_t GetChiQuant(Int_t i) const; returns the chi2 quantiles. void GetCovariance(TMatrixDSym& matr); returns the covariance matrix. void GetCorrelation(TMatrixDSym& matr); returns the correlation matrix. const TVectorD* GetHyperplane() const; if the points are on a hyperplane, returns this hyperplane. void GetHyperplane(TVectorD& vec); if the points are on a hyperplane, returns this hyperplane. void GetMean(TVectorD& means); return the estimate of the mean. void GetRDistances(TVectorD& rdist); returns the robust distances (helps to find outliers). Int_t GetNOut(); returns the number of outliers. void AddToSscp(TMatrixD& sscp, TVectorD& vec); update the sscp matrix with vector vec. void ClearSscp(TMatrixD& sscp); clear the sscp matrix, used for covariance and mean calculation. void Classic(); called when h=n. Returns classic covariance matrix; and mean. void Covar(TMatrixD& sscp, TVectorD& m, TMatrixDSym& cov, TVectorD& sd, Int_t nvec); calculates mean and covariance. void Correl(); transforms covariance matrix into correlation matrix. void CreateSubset(Int_t ntotal, Int_t htotal, Int_t p, Int_t* index, TMatrixD& data, TMatrixD& sscp, Double_t* ndist); creates a subset of htotal elements from ntotal elements; first, p+1 elements are drawn randomly(without repetitions); if their covariance matrix is singular, more elements are; added one by one, until their covariance matrix becomes regular; or it becomes clear that htotal observations lie on a hyperplane; If covariance matrix determi",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:17179,Availability,robust,robust,17179,"d S_inv - the inverse of its covariance matrix, then; htotal elements with smallest distances will have covariance matrix with determinant; less or equal to the determinant of the input subset covariance matrix. determinant for this htotal-subset with smallest distances is returned. Int_t Exact(Double_t* ndist); for the exact fit situaions; returns number of observations on the hyperplane. Int_t Exact2(TMatrixD& mstockbig, TMatrixD& cstockbig, TMatrixD& hyperplane, Double_t* deti, Int_t nbest, Int_t kgroup, TMatrixD& sscp, Double_t* ndist); This function is called if determinant of the covariance matrix of a subset=0. If there are more then fH vectors on a hyperplane,; returns this hyperplane and stops; else stores the hyperplane coordinates in hyperplane matrix. Int_t Partition(Int_t nmini, Int_t* indsubdat); divides the elements into approximately equal subgroups; number of elements in each subgroup is stored in indsubdat; number of subgroups is returned. Int_t RDist(TMatrixD& sscp); Calculates robust distances.Then the samples with robust distances; greater than a cutoff value (0.975 quantile of chi2 distribution with; fNvar degrees of freedom, multiplied by a correction factor), are given; weiht=0, and new, reweighted estimates of location and scatter are calculated; The function returns the number of outliers. void RDraw(Int_t* subdat, Int_t ngroup, Int_t* indsubdat); Draws ngroup nonoverlapping subdatasets out of a dataset of size n; such that the selected case numbers are uniformly distributed from 1 to n. Double_t KOrdStat(Int_t ntotal, Double_t* arr, Int_t k, Int_t* work); because I need an Int_t work array. TRobustEstimator(). virtual ~TRobustEstimator(); {;}. void GetCovariance(TMatrixDSym& matr). void GetCorrelation(TMatrixDSym& matr). Int_t GetNHyp(); {return fExact;}. void GetMean(TVectorD& means). void GetRDistances(TVectorD& rdist). Int_t GetNumberObservations() const; {return fN;}. Int_t GetNvar() const; {return fNvar;}. const TArrayI* GetOuliers() ",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:17218,Availability,robust,robust,17218,"ments with smallest distances will have covariance matrix with determinant; less or equal to the determinant of the input subset covariance matrix. determinant for this htotal-subset with smallest distances is returned. Int_t Exact(Double_t* ndist); for the exact fit situaions; returns number of observations on the hyperplane. Int_t Exact2(TMatrixD& mstockbig, TMatrixD& cstockbig, TMatrixD& hyperplane, Double_t* deti, Int_t nbest, Int_t kgroup, TMatrixD& sscp, Double_t* ndist); This function is called if determinant of the covariance matrix of a subset=0. If there are more then fH vectors on a hyperplane,; returns this hyperplane and stops; else stores the hyperplane coordinates in hyperplane matrix. Int_t Partition(Int_t nmini, Int_t* indsubdat); divides the elements into approximately equal subgroups; number of elements in each subgroup is stored in indsubdat; number of subgroups is returned. Int_t RDist(TMatrixD& sscp); Calculates robust distances.Then the samples with robust distances; greater than a cutoff value (0.975 quantile of chi2 distribution with; fNvar degrees of freedom, multiplied by a correction factor), are given; weiht=0, and new, reweighted estimates of location and scatter are calculated; The function returns the number of outliers. void RDraw(Int_t* subdat, Int_t ngroup, Int_t* indsubdat); Draws ngroup nonoverlapping subdatasets out of a dataset of size n; such that the selected case numbers are uniformly distributed from 1 to n. Double_t KOrdStat(Int_t ntotal, Double_t* arr, Int_t k, Int_t* work); because I need an Int_t work array. TRobustEstimator(). virtual ~TRobustEstimator(); {;}. void GetCovariance(TMatrixDSym& matr). void GetCorrelation(TMatrixDSym& matr). Int_t GetNHyp(); {return fExact;}. void GetMean(TVectorD& means). void GetRDistances(TVectorD& rdist). Int_t GetNumberObservations() const; {return fN;}. Int_t GetNvar() const; {return fNvar;}. const TArrayI* GetOuliers() const; {return &fOut;}. » Last changed: root/physics:$Id$ » Last ",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:14323,Deployability,update,update,14323," Int_t hh = 0); for the univariate case; estimates of location and scatter are returned in mean and sigma parameters; the algorithm works on the same principle as in multivariate case -; it finds a subset of size hh with smallest sigma, and then returns mean and; sigma of this subset. Int_t GetBDPoint(); returns the breakdown point of the algorithm. Double_t GetChiQuant(Int_t i) const; returns the chi2 quantiles. void GetCovariance(TMatrixDSym& matr); returns the covariance matrix. void GetCorrelation(TMatrixDSym& matr); returns the correlation matrix. const TVectorD* GetHyperplane() const; if the points are on a hyperplane, returns this hyperplane. void GetHyperplane(TVectorD& vec); if the points are on a hyperplane, returns this hyperplane. void GetMean(TVectorD& means); return the estimate of the mean. void GetRDistances(TVectorD& rdist); returns the robust distances (helps to find outliers). Int_t GetNOut(); returns the number of outliers. void AddToSscp(TMatrixD& sscp, TVectorD& vec); update the sscp matrix with vector vec. void ClearSscp(TMatrixD& sscp); clear the sscp matrix, used for covariance and mean calculation. void Classic(); called when h=n. Returns classic covariance matrix; and mean. void Covar(TMatrixD& sscp, TVectorD& m, TMatrixDSym& cov, TVectorD& sd, Int_t nvec); calculates mean and covariance. void Correl(); transforms covariance matrix into correlation matrix. void CreateSubset(Int_t ntotal, Int_t htotal, Int_t p, Int_t* index, TMatrixD& data, TMatrixD& sscp, Double_t* ndist); creates a subset of htotal elements from ntotal elements; first, p+1 elements are drawn randomly(without repetitions); if their covariance matrix is singular, more elements are; added one by one, until their covariance matrix becomes regular; or it becomes clear that htotal observations lie on a hyperplane; If covariance matrix determinant!=0, distances of all ntotal elements; are calculated, using formula d_i=Sqrt((x_i-M)*S_inv*(x_i-M)), where; M is mean and S_inv is the",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:1318,Energy Efficiency,Energy,Energy,1318,"imator: public TObject. TRobustEstimator. Minimum Covariance Determinant Estimator - a Fast Algorithm; invented by Peter J.Rousseeuw and Katrien Van Dreissen; ""A Fast Algorithm for the Minimum covariance Determinant Estimator""; Technometrics, August 1999, Vol.41, NO.3. What are robust estimators?; ""An important property of an estimator is its robustness. An estimator; is called robust if it is insensitive to measurements that deviate; from the expected behaviour. There are 2 ways to treat such deviating; measurements: one may either try to recongize them and then remove; them from the data sample; or one may leave them in the sample, taking; care that they do not influence the estimate unduly. In both cases robust; estimators are needed...Robust procedures compensate for systematic errors; as much as possible, and indicate any situation in which a danger of not being; able to operate reliably is detected.""; R.Fruhwirth, M.Regler, R.K.Bock, H.Grote, D.Notz; ""Data Analysis Techniques for High-Energy Physics"", 2nd edition. What does this algorithm do?; It computes a highly robust estimator of multivariate location and scatter.; Then, it takes those estimates to compute robust distances of all the; data vectors. Those with large robust distances are considered outliers.; Robust distances can then be plotted for better visualization of the data. How does this algorithm do it?; The MCD objective is to find h observations(out of n) whose classical; covariance matrix has the lowest determinant. The MCD estimator of location; is then the average of those h points and the MCD estimate of scatter; is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2; so the algorithm is effective when less than (n+nvar+1)/2 variables are outliers.; The algorithm also allows for exact fit situations - that is, when h or more; observations lie on a hyperplane. Then the algorithm still yields the MCD location T; and scatter matrix S, the latter being singular as it should b",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:122,Modifiability,inherit,inheritance,122,". TRobustEstimator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » PHYSICS; » TRobustEstimator. class TRobustEstimator: public TObject. TRobustEstimator. Minimum Covariance Determinant Estimator - a Fast Algorithm; invented by Peter J.Rousseeuw and Katrien Van Dreissen; ""A Fast Algorithm for the Minimum covariance Determinant Estimator""; Technometrics, August 1999, Vol.41, NO.3. What are robust estimators?; ""An important property of an estimator is its robustness. An estimator; is called robust if it is insensitive to measurements that deviate; from the expected behaviour. There are 2 ways to treat such deviating; measurements: one may either try to recongize them and then remove; them from the data sample; or one may leave them in the sample, taking; care that they do not influence the estimate unduly. In both cases robust; estimators are needed...Robust procedures compensate for systematic errors; as much as possible, and indicate any situation in which a danger of not being; able to operate reliably is detected.""; R.Fruhwirth, M.Regler, R.K.Bock, H.Grote, D.Notz; ""Data Analysis Techniques for High-Energy Physics"", 2nd edition. What does this algorithm do?; It computes a highly robust estimator of multivariate location and scatter.; Then, it takes those estimates to compute robust distances of all the; data vectors. Those with large robust distances are considered outliers.; Robust distances can then be plotted for better visualization of the data. How does this algorithm do it?; The MCD objective is to find h observations(out of n) whose classical; covariance matrix has the lowest determinant. The MCD estimator of location; is then the average of those h points and the MCD estimate of scatter; is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:2061,Modifiability,variab,variables,2061,"both cases robust; estimators are needed...Robust procedures compensate for systematic errors; as much as possible, and indicate any situation in which a danger of not being; able to operate reliably is detected.""; R.Fruhwirth, M.Regler, R.K.Bock, H.Grote, D.Notz; ""Data Analysis Techniques for High-Energy Physics"", 2nd edition. What does this algorithm do?; It computes a highly robust estimator of multivariate location and scatter.; Then, it takes those estimates to compute robust distances of all the; data vectors. Those with large robust distances are considered outliers.; Robust distances can then be plotted for better visualization of the data. How does this algorithm do it?; The MCD objective is to find h observations(out of n) whose classical; covariance matrix has the lowest determinant. The MCD estimator of location; is then the average of those h points and the MCD estimate of scatter; is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2; so the algorithm is effective when less than (n+nvar+1)/2 variables are outliers.; The algorithm also allows for exact fit situations - that is, when h or more; observations lie on a hyperplane. Then the algorithm still yields the MCD location T; and scatter matrix S, the latter being singular as it should be. From (T,S) the; program then computes the equation of the hyperplane. How can this algorithm be used?; In any case, when contamination of data is suspected, that might influence; the classical estimates.; Also, robust estimation of location and scatter is a tool to robustify; other multivariate techniques such as, for example, principal-component analysis; and discriminant analysis. Technical details of the algorithm:; 0.The default h = (n+nvariables+1)/2, but the user may choose any interger h with; (n+nvariables+1)/2<=h<=n. The program then reports the MCD's breakdown value; (n-h+1)/n. If you are sure that the dataset contains less than 25% contamination; which is usually the case, a good comp",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:7463,Modifiability,Inherit,InheritsFrom,7463,"etCovariance() const; voidGetCovariance(TMatrixDSym& matr); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TVectorD*GetHyperplane() const; voidGetHyperplane(TVectorD& vec); virtual const char*TObject::GetIconName() const; const TVectorD*GetMean() const; voidGetMean(TVectorD& means); virtual const char*TObject::GetName() const; Int_tGetNHyp(); Int_tGetNOut(); Int_tGetNumberObservations() const; Int_tGetNvar() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TArrayI*GetOuliers() const; const TVectorD*GetRDistances() const; voidGetRDistances(TVectorD& rdist); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:7529,Modifiability,Inherit,InheritsFrom,7529,"l Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TVectorD*GetHyperplane() const; voidGetHyperplane(TVectorD& vec); virtual const char*TObject::GetIconName() const; const TVectorD*GetMean() const; voidGetMean(TVectorD& means); virtual const char*TObject::GetName() const; Int_tGetNHyp(); Int_tGetNOut(); Int_tGetNumberObservations() const; Int_tGetNvar() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TArrayI*GetOuliers() const; const TVectorD*GetRDistances() const; voidGetRDistances(TVectorD& rdist); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRobustEstimator&operator=(const TRobustEstimator&)",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:12287,Modifiability,variab,variables,12287,"ymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMatrixDSymfCorrelationcorrelation matrix; TMatrixDSymfCovariancecovariance matrix estimate; TMatrixDfDatathe original data; Int_tfExactif there was an exact fit, stores the number of points on a hyperplane; Int_tfHalgorithm parameter, determining the subsample size; TVectorDfHyperplanein case more than fH observations lie on a hyperplane; TMatrixDSymfInvcovarianceinverse of the covariance matrix; TVectorDfMeanlocation estimate (mean values); Int_tfNnumber of observations; Int_tfNvarnumber of variables; TArrayIfOutarray of indexes of ouliers, size <0.5*n; TVectorDfRdarray of robust distances, size n; TVectorDfSdarray of standard deviations; Int_tfVarTempnumber of variables already added to the data matrix; Int_tfVecTempnumber of observations already added to the data matrix. Class Charts. Inheritance Chart:. TObject. ←; TRobustEstimator. Function documentation; TRobustEstimator(); this constructor should be used in a univariate case:; first call this constructor, then - the EvaluateUni(..) function. TRobustEstimator(Int_t nvectors, Int_t nvariables, Int_t hh = 0); constructor. void AddColumn(Double_t* col); adds a column to the data matrix; it is assumed that the column has size fN; variable fVarTemp keeps the number of columns l; already added. void AddRow(",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:12461,Modifiability,variab,variables,12461,"tsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMatrixDSymfCorrelationcorrelation matrix; TMatrixDSymfCovariancecovariance matrix estimate; TMatrixDfDatathe original data; Int_tfExactif there was an exact fit, stores the number of points on a hyperplane; Int_tfHalgorithm parameter, determining the subsample size; TVectorDfHyperplanein case more than fH observations lie on a hyperplane; TMatrixDSymfInvcovarianceinverse of the covariance matrix; TVectorDfMeanlocation estimate (mean values); Int_tfNnumber of observations; Int_tfNvarnumber of variables; TArrayIfOutarray of indexes of ouliers, size <0.5*n; TVectorDfRdarray of robust distances, size n; TVectorDfSdarray of standard deviations; Int_tfVarTempnumber of variables already added to the data matrix; Int_tfVecTempnumber of observations already added to the data matrix. Class Charts. Inheritance Chart:. TObject. ←; TRobustEstimator. Function documentation; TRobustEstimator(); this constructor should be used in a univariate case:; first call this constructor, then - the EvaluateUni(..) function. TRobustEstimator(Int_t nvectors, Int_t nvariables, Int_t hh = 0); constructor. void AddColumn(Double_t* col); adds a column to the data matrix; it is assumed that the column has size fN; variable fVarTemp keeps the number of columns l; already added. void AddRow(Double_t* row); adds a vector to the data matrix; it is supposed that the vector is of size fNvar. void Evaluate(); Finds the estimate of multivariate mean and variance. void EvaluateUni(Int_t nvectors, Double_t* data, Double_t& mean, Double_t& sigma, Int_t hh = 0); for the univariate case; estimates of location and scatter are returned in mean and sigma parameters; the algorithm works on t",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:12589,Modifiability,Inherit,Inheritance,12589,"ct::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMatrixDSymfCorrelationcorrelation matrix; TMatrixDSymfCovariancecovariance matrix estimate; TMatrixDfDatathe original data; Int_tfExactif there was an exact fit, stores the number of points on a hyperplane; Int_tfHalgorithm parameter, determining the subsample size; TVectorDfHyperplanein case more than fH observations lie on a hyperplane; TMatrixDSymfInvcovarianceinverse of the covariance matrix; TVectorDfMeanlocation estimate (mean values); Int_tfNnumber of observations; Int_tfNvarnumber of variables; TArrayIfOutarray of indexes of ouliers, size <0.5*n; TVectorDfRdarray of robust distances, size n; TVectorDfSdarray of standard deviations; Int_tfVarTempnumber of variables already added to the data matrix; Int_tfVecTempnumber of observations already added to the data matrix. Class Charts. Inheritance Chart:. TObject. ←; TRobustEstimator. Function documentation; TRobustEstimator(); this constructor should be used in a univariate case:; first call this constructor, then - the EvaluateUni(..) function. TRobustEstimator(Int_t nvectors, Int_t nvariables, Int_t hh = 0); constructor. void AddColumn(Double_t* col); adds a column to the data matrix; it is assumed that the column has size fN; variable fVarTemp keeps the number of columns l; already added. void AddRow(Double_t* row); adds a vector to the data matrix; it is supposed that the vector is of size fNvar. void Evaluate(); Finds the estimate of multivariate mean and variance. void EvaluateUni(Int_t nvectors, Double_t* data, Double_t& mean, Double_t& sigma, Int_t hh = 0); for the univariate case; estimates of location and scatter are returned in mean and sigma parameters; the algorithm works on the same principle as in multivariate case -; it finds a subset of size hh with smallest sigma, and then returns mean and; sigma of this su",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:12991,Modifiability,variab,variable,12991,"r of points on a hyperplane; Int_tfHalgorithm parameter, determining the subsample size; TVectorDfHyperplanein case more than fH observations lie on a hyperplane; TMatrixDSymfInvcovarianceinverse of the covariance matrix; TVectorDfMeanlocation estimate (mean values); Int_tfNnumber of observations; Int_tfNvarnumber of variables; TArrayIfOutarray of indexes of ouliers, size <0.5*n; TVectorDfRdarray of robust distances, size n; TVectorDfSdarray of standard deviations; Int_tfVarTempnumber of variables already added to the data matrix; Int_tfVecTempnumber of observations already added to the data matrix. Class Charts. Inheritance Chart:. TObject. ←; TRobustEstimator. Function documentation; TRobustEstimator(); this constructor should be used in a univariate case:; first call this constructor, then - the EvaluateUni(..) function. TRobustEstimator(Int_t nvectors, Int_t nvariables, Int_t hh = 0); constructor. void AddColumn(Double_t* col); adds a column to the data matrix; it is assumed that the column has size fN; variable fVarTemp keeps the number of columns l; already added. void AddRow(Double_t* row); adds a vector to the data matrix; it is supposed that the vector is of size fNvar. void Evaluate(); Finds the estimate of multivariate mean and variance. void EvaluateUni(Int_t nvectors, Double_t* data, Double_t& mean, Double_t& sigma, Int_t hh = 0); for the univariate case; estimates of location and scatter are returned in mean and sigma parameters; the algorithm works on the same principle as in multivariate case -; it finds a subset of size hh with smallest sigma, and then returns mean and; sigma of this subset. Int_t GetBDPoint(); returns the breakdown point of the algorithm. Double_t GetChiQuant(Int_t i) const; returns the chi2 quantiles. void GetCovariance(TMatrixDSym& matr); returns the covariance matrix. void GetCorrelation(TMatrixDSym& matr); returns the correlation matrix. const TVectorD* GetHyperplane() const; if the points are on a hyperplane, returns this hype",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:1221,Safety,detect,detected,1221," viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » PHYSICS; » TRobustEstimator. class TRobustEstimator: public TObject. TRobustEstimator. Minimum Covariance Determinant Estimator - a Fast Algorithm; invented by Peter J.Rousseeuw and Katrien Van Dreissen; ""A Fast Algorithm for the Minimum covariance Determinant Estimator""; Technometrics, August 1999, Vol.41, NO.3. What are robust estimators?; ""An important property of an estimator is its robustness. An estimator; is called robust if it is insensitive to measurements that deviate; from the expected behaviour. There are 2 ways to treat such deviating; measurements: one may either try to recongize them and then remove; them from the data sample; or one may leave them in the sample, taking; care that they do not influence the estimate unduly. In both cases robust; estimators are needed...Robust procedures compensate for systematic errors; as much as possible, and indicate any situation in which a danger of not being; able to operate reliably is detected.""; R.Fruhwirth, M.Regler, R.K.Bock, H.Grote, D.Notz; ""Data Analysis Techniques for High-Energy Physics"", 2nd edition. What does this algorithm do?; It computes a highly robust estimator of multivariate location and scatter.; Then, it takes those estimates to compute robust distances of all the; data vectors. Those with large robust distances are considered outliers.; Robust distances can then be plotted for better visualization of the data. How does this algorithm do it?; The MCD objective is to find h observations(out of n) whose classical; covariance matrix has the lowest determinant. The MCD estimator of location; is then the average of those h points and the MCD estimate of scatter; is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2; so the algorithm is effective when less than (n+nvar+1)/2 variables are outliers.; The algorithm also allows for exact fit situations - that is",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:7353,Security,Hash,Hash,7353,"t_t i) const; const TMatrixDSym*GetCorrelation() const; voidGetCorrelation(TMatrixDSym& matr); const TMatrixDSym*GetCovariance() const; voidGetCovariance(TMatrixDSym& matr); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TVectorD*GetHyperplane() const; voidGetHyperplane(TVectorD& vec); virtual const char*TObject::GetIconName() const; const TVectorD*GetMean() const; voidGetMean(TVectorD& means); virtual const char*TObject::GetName() const; Int_tGetNHyp(); Int_tGetNOut(); Int_tGetNumberObservations() const; Int_tGetNvar() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TArrayI*GetOuliers() const; const TVectorD*GetRDistances() const; voidGetRDistances(TVectorD& rdist); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:9483,Testability,Test,TestBit,9483,"od) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRobustEstimator&operator=(const TRobustEstimator&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRobustEstimator(); TRobustEstimator(const TRobustEstimator&); TRobustEstimator(Int_t nvectors, Int_t nvariables, Int_t hh = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:9522,Testability,Test,TestBits,9522,"od) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRobustEstimator&operator=(const TRobustEstimator&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRobustEstimator(); TRobustEstimator(const TRobustEstimator&); TRobustEstimator(Int_t nvectors, Int_t nvariables, Int_t hh = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:5171,Usability,Clear,Clear,5171,,MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:14368,Usability,Clear,ClearSscp,14368,"ean and sigma parameters; the algorithm works on the same principle as in multivariate case -; it finds a subset of size hh with smallest sigma, and then returns mean and; sigma of this subset. Int_t GetBDPoint(); returns the breakdown point of the algorithm. Double_t GetChiQuant(Int_t i) const; returns the chi2 quantiles. void GetCovariance(TMatrixDSym& matr); returns the covariance matrix. void GetCorrelation(TMatrixDSym& matr); returns the correlation matrix. const TVectorD* GetHyperplane() const; if the points are on a hyperplane, returns this hyperplane. void GetHyperplane(TVectorD& vec); if the points are on a hyperplane, returns this hyperplane. void GetMean(TVectorD& means); return the estimate of the mean. void GetRDistances(TVectorD& rdist); returns the robust distances (helps to find outliers). Int_t GetNOut(); returns the number of outliers. void AddToSscp(TMatrixD& sscp, TVectorD& vec); update the sscp matrix with vector vec. void ClearSscp(TMatrixD& sscp); clear the sscp matrix, used for covariance and mean calculation. void Classic(); called when h=n. Returns classic covariance matrix; and mean. void Covar(TMatrixD& sscp, TVectorD& m, TMatrixDSym& cov, TVectorD& sd, Int_t nvec); calculates mean and covariance. void Correl(); transforms covariance matrix into correlation matrix. void CreateSubset(Int_t ntotal, Int_t htotal, Int_t p, Int_t* index, TMatrixD& data, TMatrixD& sscp, Double_t* ndist); creates a subset of htotal elements from ntotal elements; first, p+1 elements are drawn randomly(without repetitions); if their covariance matrix is singular, more elements are; added one by one, until their covariance matrix becomes regular; or it becomes clear that htotal observations lie on a hyperplane; If covariance matrix determinant!=0, distances of all ntotal elements; are calculated, using formula d_i=Sqrt((x_i-M)*S_inv*(x_i-M)), where; M is mean and S_inv is the inverse of the covariance matrix; htotal points with smallest distances are included in the",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:14395,Usability,clear,clear,14395,"ean and sigma parameters; the algorithm works on the same principle as in multivariate case -; it finds a subset of size hh with smallest sigma, and then returns mean and; sigma of this subset. Int_t GetBDPoint(); returns the breakdown point of the algorithm. Double_t GetChiQuant(Int_t i) const; returns the chi2 quantiles. void GetCovariance(TMatrixDSym& matr); returns the covariance matrix. void GetCorrelation(TMatrixDSym& matr); returns the correlation matrix. const TVectorD* GetHyperplane() const; if the points are on a hyperplane, returns this hyperplane. void GetHyperplane(TVectorD& vec); if the points are on a hyperplane, returns this hyperplane. void GetMean(TVectorD& means); return the estimate of the mean. void GetRDistances(TVectorD& rdist); returns the robust distances (helps to find outliers). Int_t GetNOut(); returns the number of outliers. void AddToSscp(TMatrixD& sscp, TVectorD& vec); update the sscp matrix with vector vec. void ClearSscp(TMatrixD& sscp); clear the sscp matrix, used for covariance and mean calculation. void Classic(); called when h=n. Returns classic covariance matrix; and mean. void Covar(TMatrixD& sscp, TVectorD& m, TMatrixDSym& cov, TVectorD& sd, Int_t nvec); calculates mean and covariance. void Correl(); transforms covariance matrix into correlation matrix. void CreateSubset(Int_t ntotal, Int_t htotal, Int_t p, Int_t* index, TMatrixD& data, TMatrixD& sscp, Double_t* ndist); creates a subset of htotal elements from ntotal elements; first, p+1 elements are drawn randomly(without repetitions); if their covariance matrix is singular, more elements are; added one by one, until their covariance matrix becomes regular; or it becomes clear that htotal observations lie on a hyperplane; If covariance matrix determinant!=0, distances of all ntotal elements; are calculated, using formula d_i=Sqrt((x_i-M)*S_inv*(x_i-M)), where; M is mean and S_inv is the inverse of the covariance matrix; htotal points with smallest distances are included in the",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRobustEstimator.html:15100,Usability,clear,clear,15100," GetMean(TVectorD& means); return the estimate of the mean. void GetRDistances(TVectorD& rdist); returns the robust distances (helps to find outliers). Int_t GetNOut(); returns the number of outliers. void AddToSscp(TMatrixD& sscp, TVectorD& vec); update the sscp matrix with vector vec. void ClearSscp(TMatrixD& sscp); clear the sscp matrix, used for covariance and mean calculation. void Classic(); called when h=n. Returns classic covariance matrix; and mean. void Covar(TMatrixD& sscp, TVectorD& m, TMatrixDSym& cov, TVectorD& sd, Int_t nvec); calculates mean and covariance. void Correl(); transforms covariance matrix into correlation matrix. void CreateSubset(Int_t ntotal, Int_t htotal, Int_t p, Int_t* index, TMatrixD& data, TMatrixD& sscp, Double_t* ndist); creates a subset of htotal elements from ntotal elements; first, p+1 elements are drawn randomly(without repetitions); if their covariance matrix is singular, more elements are; added one by one, until their covariance matrix becomes regular; or it becomes clear that htotal observations lie on a hyperplane; If covariance matrix determinant!=0, distances of all ntotal elements; are calculated, using formula d_i=Sqrt((x_i-M)*S_inv*(x_i-M)), where; M is mean and S_inv is the inverse of the covariance matrix; htotal points with smallest distances are included in the returned subset. void CreateOrtSubset(TMatrixD& dat, Int_t* index, Int_t hmerged, Int_t nmerged, TMatrixD& sscp, Double_t* ndist); creates a subset of hmerged vectors with smallest orthogonal distances to the hyperplane; hyp[1]*(x1-mean[1])+...+hyp[nvar]*(xnvar-mean[nvar])=0; This function is called in case when less than fH samples lie on a hyperplane. Double_t CStep(Int_t ntotal, Int_t htotal, Int_t* index, TMatrixD& data, TMatrixD& sscp, Double_t* ndist); from the input htotal-subset constructs another htotal subset with lower determinant. As proven by Peter J.Rousseeuw and Katrien Van Driessen, if distances for all elements; are calculated, using the f",MatchSource.WIKI,root/html602/TRobustEstimator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRobustEstimator.html
https://root.cern/root/html602/TRolke.html:6338,Availability,Error,Error,6338,"self a Bayesian. Function Members (Methods); public:. virtual~TRolke(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tCalculateInterval(Int_t x, Int_t y, Int_t z, Double_t bm, Double_t em, Double_t e, Int_t mid, Double_t sde, Double_t sdb, Double_t tau, Double_t b, Int_t m); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; boolGetBounding() const; Double_tGetCL() const; boolGetCriticalNumber(Int_t& ncrit, Int_t maxtry = -1); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; boolGetLimits(Double_t& low, Double_t& high); boolGetLimitsML(Double_t& low, Double_t& high, Int_t& out_x); boolGetLimitsQuantile(Double_t& low, Double_t& high, Int_t& out_x, Double_t integral = 0.5); Double_tGetLowerLimit(); virtual const char*TObje",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:6467,Availability,error,error,6467,"self a Bayesian. Function Members (Methods); public:. virtual~TRolke(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tCalculateInterval(Int_t x, Int_t y, Int_t z, Double_t bm, Double_t em, Double_t e, Int_t mid, Double_t sde, Double_t sdb, Double_t tau, Double_t b, Int_t m); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; boolGetBounding() const; Double_tGetCL() const; boolGetCriticalNumber(Int_t& ncrit, Int_t maxtry = -1); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; boolGetLimits(Double_t& low, Double_t& high); boolGetLimitsML(Double_t& low, Double_t& high, Int_t& out_x); boolGetLimitsQuantile(Double_t& low, Double_t& high, Int_t& out_x, Double_t integral = 0.5); Double_tGetLowerLimit(); virtual const char*TObje",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:6551,Availability,error,error,6551,"self a Bayesian. Function Members (Methods); public:. virtual~TRolke(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tCalculateInterval(Int_t x, Int_t y, Int_t z, Double_t bm, Double_t em, Double_t e, Int_t mid, Double_t sde, Double_t sdb, Double_t tau, Double_t b, Int_t m); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; boolGetBounding() const; Double_tGetCL() const; boolGetCriticalNumber(Int_t& ncrit, Int_t maxtry = -1); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; boolGetLimits(Double_t& low, Double_t& high); boolGetLimitsML(Double_t& low, Double_t& high, Int_t& out_x); boolGetLimitsQuantile(Double_t& low, Double_t& high, Int_t& out_x, Double_t integral = 0.5); Double_tGetLowerLimit(); virtual const char*TObje",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:19182,Availability,error,error,19182,"s gives the median limits; in repeated experiments. The returned out_x is the corresponding; (e.g. median) value of x.; No uncertainties are considered for the Poisson weights when calculating; the Poisson integral . bool GetLimitsML(Double_t& low, Double_t& high, Int_t& out_x); get the upper and lower limits for the most likely outcome.; The returned out_x is the corresponding value of x; No uncertainties are considered for the Poisson weights when finding ML . bool GetCriticalNumber(Int_t& ncrit, Int_t maxtry = -1); get the value of x corresponding to rejection of the null hypothesis.; This means a lower limit >0 with the pre-specified Confidence Level.; Optionally give maxtry; the maximum value of x to try. Of not, or if; maxtry<0 an automatic mode is used. void SetSwitch(bool bnd); Deprecated name for SetBounding. void Print(Option_t* ) const; Dump internals. Print members. Double_t CalculateInterval(Int_t x, Int_t y, Int_t z, Double_t bm, Double_t em, Double_t e, Int_t mid, Double_t sde, Double_t sdb, Double_t tau, Double_t b, Int_t m); Deprecated and error prone model selection interface.; It's use is trongly discouraged. 'mid' is the model ID (1 to 7).; This method is provided for backwards compatibility/developer use only. ; x : number of observed events in the experiment; y : number of observed events in background region; z : number of MC events observed; bm : estimate of the background; em : estimate of the efficiency; e : true efficiency (considered known); mid : internal model id (really, you should not use this method at all); sde : efficiency estimate's standard deviation; sdb : background estimate's standard deviation; tau : ratio parameter (read TRolke.cxx for details); b : background expectation value (considered known); m : number of MC events generated. void SetModelParameters(Int_t x, Int_t y, Int_t z, Double_t bm, Double_t em, Double_t e, Int_t mid, Double_t sde, Double_t sdb, Double_t tau, Double_t b, Int_t m). x : number of observed events in ",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:610,Deployability,Update,Updated,610,". TRolke. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » PHYSICS; » TRolke. class TRolke: public TObject. TRolke. This class computes confidence intervals for the rate of a Poisson; process in the presence of uncertain background and/or efficiency. The treatment and the resulting limits are fully frequentist. The; limit calculations make use of the profile likelihood method. Author: Jan Conrad (CERN) 2004; Updated: Johan Lundberg (CERN) 2009. Copyright CERN 2004,2009 Jan.Conrad@cern.ch,; Johan.Lundberg@cern.ch. For a full list of methods and their syntax, and build instructions,; consult the header file TRolke.h. Examples/tutorials are found in the separate file Rolke.C. TRolke implements the following Models. The signal is always assumed to be Poisson, with the following; combinations of models of background and detection efficiency:. If unsure, first consider model 3, 4 or 5. 1: SetPoissonBkgBinomEff(x,y,z,tau,m). Background: Poisson; Efficiency: Binomial. when the background is simultaneously measured; from sidebands (or MC), and; the signal efficiency was determined from Monte Carlo. 2: SetPoissonBkgGaussEff(x,y,em,sde,tau). Background: Poisson; Efficiency: Gaussian. when the background is simultaneously measured; from sidebands (or MC), and; the efficiency is modeled as Gaussian. 3: SetGaussBkgGaussEff(x,bm,em,sde,sdb). Background: Gaussian; Efficiency: Gaussian. when background and efficiency can both be; modeled as Gaussian. 4: SetPoissonBkgKnownEff(x,y,tau,e). Background: Poisson; Efficiency: Known. when the background is simultaneously measured; from sidebands (or MC). 5: SetGaussBkgKnownEff(x,bm,sdb,e). Background: Gaussian; Efficiency: Known. when background is Gaussian. 6: SetKnownBkgBinomEff(x,z,b,m). Background: Known; Efficiency: Binomial. when signal effi",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:19210,Integrability,interface,interface,19210,"s gives the median limits; in repeated experiments. The returned out_x is the corresponding; (e.g. median) value of x.; No uncertainties are considered for the Poisson weights when calculating; the Poisson integral . bool GetLimitsML(Double_t& low, Double_t& high, Int_t& out_x); get the upper and lower limits for the most likely outcome.; The returned out_x is the corresponding value of x; No uncertainties are considered for the Poisson weights when finding ML . bool GetCriticalNumber(Int_t& ncrit, Int_t maxtry = -1); get the value of x corresponding to rejection of the null hypothesis.; This means a lower limit >0 with the pre-specified Confidence Level.; Optionally give maxtry; the maximum value of x to try. Of not, or if; maxtry<0 an automatic mode is used. void SetSwitch(bool bnd); Deprecated name for SetBounding. void Print(Option_t* ) const; Dump internals. Print members. Double_t CalculateInterval(Int_t x, Int_t y, Int_t z, Double_t bm, Double_t em, Double_t e, Int_t mid, Double_t sde, Double_t sdb, Double_t tau, Double_t b, Int_t m); Deprecated and error prone model selection interface.; It's use is trongly discouraged. 'mid' is the model ID (1 to 7).; This method is provided for backwards compatibility/developer use only. ; x : number of observed events in the experiment; y : number of observed events in background region; z : number of MC events observed; bm : estimate of the background; em : estimate of the efficiency; e : true efficiency (considered known); mid : internal model id (really, you should not use this method at all); sde : efficiency estimate's standard deviation; sdb : background estimate's standard deviation; tau : ratio parameter (read TRolke.cxx for details); b : background expectation value (considered known); m : number of MC events generated. void SetModelParameters(Int_t x, Int_t y, Int_t z, Double_t bm, Double_t em, Double_t e, Int_t mid, Double_t sde, Double_t sdb, Double_t tau, Double_t b, Int_t m). x : number of observed events in ",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:112,Modifiability,inherit,inheritance,112,". TRolke. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » PHYSICS; » TRolke. class TRolke: public TObject. TRolke. This class computes confidence intervals for the rate of a Poisson; process in the presence of uncertain background and/or efficiency. The treatment and the resulting limits are fully frequentist. The; limit calculations make use of the profile likelihood method. Author: Jan Conrad (CERN) 2004; Updated: Johan Lundberg (CERN) 2009. Copyright CERN 2004,2009 Jan.Conrad@cern.ch,; Johan.Lundberg@cern.ch. For a full list of methods and their syntax, and build instructions,; consult the header file TRolke.h. Examples/tutorials are found in the separate file Rolke.C. TRolke implements the following Models. The signal is always assumed to be Poisson, with the following; combinations of models of background and detection efficiency:. If unsure, first consider model 3, 4 or 5. 1: SetPoissonBkgBinomEff(x,y,z,tau,m). Background: Poisson; Efficiency: Binomial. when the background is simultaneously measured; from sidebands (or MC), and; the signal efficiency was determined from Monte Carlo. 2: SetPoissonBkgGaussEff(x,y,em,sde,tau). Background: Poisson; Efficiency: Gaussian. when the background is simultaneously measured; from sidebands (or MC), and; the efficiency is modeled as Gaussian. 3: SetGaussBkgGaussEff(x,bm,em,sde,sdb). Background: Gaussian; Efficiency: Gaussian. when background and efficiency can both be; modeled as Gaussian. 4: SetPoissonBkgKnownEff(x,y,tau,e). Background: Poisson; Efficiency: Known. when the background is simultaneously measured; from sidebands (or MC). 5: SetGaussBkgKnownEff(x,bm,sdb,e). Background: Gaussian; Efficiency: Known. when background is Gaussian. 6: SetKnownBkgBinomEff(x,z,b,m). Background: Known; Efficiency: Binomial. when signal effi",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:7882,Modifiability,Inherit,InheritsFrom,7882,,MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:7948,Modifiability,Inherit,InheritsFrom,7948,,MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:14690,Modifiability,Inherit,Inheritance,14690,"bject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. boolfBoundingfalse for unbounded likelihood; Double_tfCLconfidence level as a fraction [0.9 for 90% ]; Double_tfLowerLimitthe calculated lower limit; Int_tfNumWarningsDeprecated1; Int_tfNumWarningsDeprecated2; Double_tfUpperLimitthe calculated upper limit; Double_tf_b; Double_tf_bm; Double_tf_e; Double_tf_em; Int_tf_m; Int_tf_mid; Double_tf_sdb; Double_tf_sde; Double_tf_tau; Int_tf_x; Int_tf_y; Int_tf_z. Class Charts. Inheritance Chart:. TObject. ←; TRolke. Function documentation; TRolke(Double_t CL = 0.90000000000000002, Option_t* option = """"); constructor with optional Confidence Level argument.; 'option' is not used. ~TRolke(). void SetPoissonBkgBinomEff(Int_t x, Int_t y, Int_t z, Double_t tau, Int_t m); Model 1: Background - Poisson, Efficiency - Binomial; x : number of observed events in the experiment; y : number of observed events in background region; z : number of MC events observed; tau : ratio parameter (read TRolke.cxx for details); m : number of MC events generated. void SetPoissonBkgGaussEff(Int_t x, Int_t y, Double_t em, Double_t tau, Double_t sde); Model 2: Background - Poisson, Efficiency - Gaussian; x : number of observed events in the experiment; y : number of observed events in background region; em : estimate of the efficiency; tau : ratio parameter (read TRolke.cxx for details); sde : efficiency estimate's standard deviation. void SetGaussBkgGaussEff(Int_t x, Double_t bm, Double_t em, D",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:1025,Safety,detect,detection,1025,". TRolke. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » PHYSICS; » TRolke. class TRolke: public TObject. TRolke. This class computes confidence intervals for the rate of a Poisson; process in the presence of uncertain background and/or efficiency. The treatment and the resulting limits are fully frequentist. The; limit calculations make use of the profile likelihood method. Author: Jan Conrad (CERN) 2004; Updated: Johan Lundberg (CERN) 2009. Copyright CERN 2004,2009 Jan.Conrad@cern.ch,; Johan.Lundberg@cern.ch. For a full list of methods and their syntax, and build instructions,; consult the header file TRolke.h. Examples/tutorials are found in the separate file Rolke.C. TRolke implements the following Models. The signal is always assumed to be Poisson, with the following; combinations of models of background and detection efficiency:. If unsure, first consider model 3, 4 or 5. 1: SetPoissonBkgBinomEff(x,y,z,tau,m). Background: Poisson; Efficiency: Binomial. when the background is simultaneously measured; from sidebands (or MC), and; the signal efficiency was determined from Monte Carlo. 2: SetPoissonBkgGaussEff(x,y,em,sde,tau). Background: Poisson; Efficiency: Gaussian. when the background is simultaneously measured; from sidebands (or MC), and; the efficiency is modeled as Gaussian. 3: SetGaussBkgGaussEff(x,bm,em,sde,sdb). Background: Gaussian; Efficiency: Gaussian. when background and efficiency can both be; modeled as Gaussian. 4: SetPoissonBkgKnownEff(x,y,tau,e). Background: Poisson; Efficiency: Known. when the background is simultaneously measured; from sidebands (or MC). 5: SetGaussBkgKnownEff(x,bm,sdb,e). Background: Gaussian; Efficiency: Known. when background is Gaussian. 6: SetKnownBkgBinomEff(x,z,b,m). Background: Known; Efficiency: Binomial. when signal effi",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:2298,Safety,detect,detection,2298,"rlo. 2: SetPoissonBkgGaussEff(x,y,em,sde,tau). Background: Poisson; Efficiency: Gaussian. when the background is simultaneously measured; from sidebands (or MC), and; the efficiency is modeled as Gaussian. 3: SetGaussBkgGaussEff(x,bm,em,sde,sdb). Background: Gaussian; Efficiency: Gaussian. when background and efficiency can both be; modeled as Gaussian. 4: SetPoissonBkgKnownEff(x,y,tau,e). Background: Poisson; Efficiency: Known. when the background is simultaneously measured; from sidebands (or MC). 5: SetGaussBkgKnownEff(x,bm,sdb,e). Background: Gaussian; Efficiency: Known. when background is Gaussian. 6: SetKnownBkgBinomEff(x,z,b,m). Background: Known; Efficiency: Binomial. when signal efficiency was determined from Monte Carlo. 7: SetKnownBkgGaussEff(x,em,sde,b). Background: Known; Efficiency: Gaussian. when background is known and efficiency Gaussian. Parameters and further explanation. For all models:. x = number of observed events in the experiment. Efficiency (e or em) is the detection probability for signal.; A low efficiency hence generally means weaker limits.; If the efficiency of an experiment (with analysis cuts) is; dealt with elsewhere, em or e can be set to one. For Poisson background measurements (sideband or MC):. y = number of observed events in background region; tau =; Either: the ratio between signal and background region; in case background is observed.; Or: the ratio between observed and simulated live-time; in case background is determined from MC. For Gaussian efficiency or background:. bm = estimate of the background; sdb = corresponding standard deviation. em = estimate of the efficiency; sde = corresponding standard deviation. If the efficiency scale of dealt with elsewhere,; set em to 1 and sde to the relative uncertainty. For Binomial signal efficiency:. m = number of MC events generated; z = number of MC events observed. For the case of known background expectation or known efficiency:. e = true efficiency (considered known); b = back",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:7772,Security,Hash,Hash,7772,,MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:10511,Testability,Test,TestBit,10511,"* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRolke&operator=(const TRolke&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t*) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBounding(const bool bnd); voidSetCL(Double_t CL); voidSetCLSigmas(Double_t CLsigmas); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetGaussBkgGaussEff(Int_t x, Double_t bm, Double_t em, Double_t sde, Double_t sdb); voidSetGaussBkgKnownEff(Int_t x, Double_t bm, Double_t sdb, Double_t e); voidSetKnownBkgBinomEff(Int_t x, Int_t z, Int_t m, Double_t b); voidSetKnownBkgGaussEff(Int_t x, Double_t em, Double_t sde, Double_t b); static voidTObject::SetObjectStat(Bool_t stat); voidSetPoissonBkgBinomEff(Int_t x, Int_t y, Int_t z, Double_t tau, Int_t m); voidSetPoissonBkgGaussEff(Int_t x, Int_t y, Double_t em, Double_t tau, Double_t sde); voidSetPoissonBkgKnownEff(Int_t x, Int_t y, Double_t tau, Double_t e); voidSetSwitch(bool bnd); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRolke(const TRolke&); TRolke(Double_t CL = 0.",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:10550,Testability,Test,TestBits,10550,"* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRolke&operator=(const TRolke&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t*) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBounding(const bool bnd); voidSetCL(Double_t CL); voidSetCLSigmas(Double_t CLsigmas); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetGaussBkgGaussEff(Int_t x, Double_t bm, Double_t em, Double_t sde, Double_t sdb); voidSetGaussBkgKnownEff(Int_t x, Double_t bm, Double_t sdb, Double_t e); voidSetKnownBkgBinomEff(Int_t x, Int_t z, Int_t m, Double_t b); voidSetKnownBkgGaussEff(Int_t x, Double_t em, Double_t sde, Double_t b); static voidTObject::SetObjectStat(Bool_t stat); voidSetPoissonBkgBinomEff(Int_t x, Int_t y, Int_t z, Double_t tau, Int_t m); voidSetPoissonBkgGaussEff(Int_t x, Int_t y, Double_t em, Double_t tau, Double_t sde); voidSetPoissonBkgKnownEff(Int_t x, Int_t y, Double_t tau, Double_t e); voidSetSwitch(bool bnd); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRolke(const TRolke&); TRolke(Double_t CL = 0.",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:22817,Testability,Test,Test,22817,"you should not use this method at all); sde : efficiency estimate's standard deviation; sdb : background estimate's standard deviation; tau : ratio parameter (read TRolke.cxx for details); b : background expectation value (considered known); m : number of MC events generated. Double_t Likelihood(Double_t mu, Int_t x, Int_t y, Int_t z, Double_t bm, Double_t em, Int_t mid, Double_t sde, Double_t sdb, Double_t tau, Double_t b, Int_t m, Int_t what). Internal helper function; Chooses between the different profile likelihood functions to use for the; different models.; Returns evaluation of the profile likelihood functions. Double_t EvalLikeMod1(Double_t mu, Int_t x, Int_t y, Int_t z, Double_t tau, Int_t m, Int_t what). Calculates the Profile Likelihood for MODEL 1:; Poisson background/ Binomial Efficiency; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod1(Double_t mu, Double_t b, Double_t e, Int_t x, Int_t y, Int_t z, Double_t tau, Int_t m). Profile Likelihood function for MODEL 1:; Poisson background/ Binomial Efficiency. void ProfLikeMod1(Double_t mu, Double_t& b, Double_t& e, Int_t x, Int_t y, Int_t z, Double_t tau, Int_t m). Helper for calculation of estimates of efficiency and background for model 1. Double_t LikeGradMod1(Double_t e, Double_t mu, Int_t x, Int_t y, Int_t z, Double_t tau, Int_t m); gradient model likelihood. Double_t EvalLikeMod2(Double_t mu, Int_t x, Int_t y, Double_t em, Double_t sde, Double_t tau, Int_t what); Calculates the Profile Likelihood for MODEL 2:; Poisson background/ Gauss Efficiency; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of th",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:23762,Testability,Test,Test,23762,"3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod1(Double_t mu, Double_t b, Double_t e, Int_t x, Int_t y, Int_t z, Double_t tau, Int_t m). Profile Likelihood function for MODEL 1:; Poisson background/ Binomial Efficiency. void ProfLikeMod1(Double_t mu, Double_t& b, Double_t& e, Int_t x, Int_t y, Int_t z, Double_t tau, Int_t m). Helper for calculation of estimates of efficiency and background for model 1. Double_t LikeGradMod1(Double_t e, Double_t mu, Int_t x, Int_t y, Int_t z, Double_t tau, Int_t m); gradient model likelihood. Double_t EvalLikeMod2(Double_t mu, Int_t x, Int_t y, Double_t em, Double_t sde, Double_t tau, Int_t what); Calculates the Profile Likelihood for MODEL 2:; Poisson background/ Gauss Efficiency; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod2(Double_t mu, Double_t b, Double_t e, Int_t x, Int_t y, Double_t em, Double_t tau, Double_t v); Profile Likelihood function for MODEL 2:; Poisson background/Gauss Efficiency. Double_t EvalLikeMod3(Double_t mu, Int_t x, Double_t bm, Double_t em, Double_t sde, Double_t sdb, Int_t what); Calculates the Profile Likelihood for MODEL 3:; Gauss background/ Gauss Efficiency; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod3(Double_t mu, Double_t b, Double_t e, Int_t x, Double_t bm, Double_t em, Double_t u, Double_t v); Profile Likelihood function for MODEL 3:; Gauss background/Gauss Efficiency. Double_t EvalLikeMod4(Double_t mu, Int_t x, Int_t y, Double_t tau, Int_t what); Calculates the Profile L",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:24401,Testability,Test,Test,24401,"d2(Double_t mu, Int_t x, Int_t y, Double_t em, Double_t sde, Double_t tau, Int_t what); Calculates the Profile Likelihood for MODEL 2:; Poisson background/ Gauss Efficiency; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod2(Double_t mu, Double_t b, Double_t e, Int_t x, Int_t y, Double_t em, Double_t tau, Double_t v); Profile Likelihood function for MODEL 2:; Poisson background/Gauss Efficiency. Double_t EvalLikeMod3(Double_t mu, Int_t x, Double_t bm, Double_t em, Double_t sde, Double_t sdb, Int_t what); Calculates the Profile Likelihood for MODEL 3:; Gauss background/ Gauss Efficiency; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod3(Double_t mu, Double_t b, Double_t e, Int_t x, Double_t bm, Double_t em, Double_t u, Double_t v); Profile Likelihood function for MODEL 3:; Gauss background/Gauss Efficiency. Double_t EvalLikeMod4(Double_t mu, Int_t x, Int_t y, Double_t tau, Int_t what); Calculates the Profile Likelihood for MODEL 4:; Poiss background/Efficiency known; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod4(Double_t mu, Double_t b, Int_t x, Int_t y, Double_t tau); Profile Likelihood function for MODEL 4:; Poiss background/Efficiency known. Double_t EvalLikeMod5(Double_t mu, Int_t x, Double_t bm, Double_t sdb, Int_t what); Calculates the Profile Likelihood for MODEL 5:; Gauss background/Efficiency known; what = 1",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:25008,Testability,Test,Test,25008,"fficiency. Double_t EvalLikeMod3(Double_t mu, Int_t x, Double_t bm, Double_t em, Double_t sde, Double_t sdb, Int_t what); Calculates the Profile Likelihood for MODEL 3:; Gauss background/ Gauss Efficiency; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod3(Double_t mu, Double_t b, Double_t e, Int_t x, Double_t bm, Double_t em, Double_t u, Double_t v); Profile Likelihood function for MODEL 3:; Gauss background/Gauss Efficiency. Double_t EvalLikeMod4(Double_t mu, Int_t x, Int_t y, Double_t tau, Int_t what); Calculates the Profile Likelihood for MODEL 4:; Poiss background/Efficiency known; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod4(Double_t mu, Double_t b, Int_t x, Int_t y, Double_t tau); Profile Likelihood function for MODEL 4:; Poiss background/Efficiency known. Double_t EvalLikeMod5(Double_t mu, Int_t x, Double_t bm, Double_t sdb, Int_t what); Calculates the Profile Likelihood for MODEL 5:; Gauss background/Efficiency known; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod5(Double_t mu, Double_t b, Int_t x, Double_t bm, Double_t u); Profile Likelihood function for MODEL 5:; Gauss background/Efficiency known. Double_t EvalLikeMod6(Double_t mu, Int_t x, Int_t z, Double_t b, Int_t m, Int_t what); Calculates the Profile Likelihood for MODEL 6:; Background known/Efficiency binomial; what = 1: Maximum likelihood estima",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:25580,Testability,Test,Test,25580," Profile Likelihood function for MODEL 3:; Gauss background/Gauss Efficiency. Double_t EvalLikeMod4(Double_t mu, Int_t x, Int_t y, Double_t tau, Int_t what); Calculates the Profile Likelihood for MODEL 4:; Poiss background/Efficiency known; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod4(Double_t mu, Double_t b, Int_t x, Int_t y, Double_t tau); Profile Likelihood function for MODEL 4:; Poiss background/Efficiency known. Double_t EvalLikeMod5(Double_t mu, Int_t x, Double_t bm, Double_t sdb, Int_t what); Calculates the Profile Likelihood for MODEL 5:; Gauss background/Efficiency known; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod5(Double_t mu, Double_t b, Int_t x, Double_t bm, Double_t u); Profile Likelihood function for MODEL 5:; Gauss background/Efficiency known. Double_t EvalLikeMod6(Double_t mu, Int_t x, Int_t z, Double_t b, Int_t m, Int_t what); Calculates the Profile Likelihood for MODEL 6:; Background known/Efficiency binomial; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod6(Double_t mu, Double_t b, Double_t e, Int_t x, Int_t z, Int_t m); Profile Likelihood function for MODEL 6:; background known/ Efficiency binomial. Double_t EvalLikeMod7(Double_t mu, Int_t x, Double_t em, Double_t sde, Double_t b, Int_t what); Calculates the Profile Likelihood for MODEL 7:; background known/Efficiency Gauss; what = 1: Ma",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:26160,Testability,Test,Test,26160,"elihood function for MODEL 4:; Poiss background/Efficiency known. Double_t EvalLikeMod5(Double_t mu, Int_t x, Double_t bm, Double_t sdb, Int_t what); Calculates the Profile Likelihood for MODEL 5:; Gauss background/Efficiency known; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod5(Double_t mu, Double_t b, Int_t x, Double_t bm, Double_t u); Profile Likelihood function for MODEL 5:; Gauss background/Efficiency known. Double_t EvalLikeMod6(Double_t mu, Int_t x, Int_t z, Double_t b, Int_t m, Int_t what); Calculates the Profile Likelihood for MODEL 6:; Background known/Efficiency binomial; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod6(Double_t mu, Double_t b, Double_t e, Int_t x, Int_t z, Int_t m); Profile Likelihood function for MODEL 6:; background known/ Efficiency binomial. Double_t EvalLikeMod7(Double_t mu, Int_t x, Double_t em, Double_t sde, Double_t b, Int_t what); Calculates the Profile Likelihood for MODEL 7:; background known/Efficiency Gauss; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod7(Double_t mu, Double_t b, Double_t e, Int_t x, Double_t em, Double_t v); Profile Likelihood function for MODEL 6:; background known/ Efficiency gaussian. Double_t EvalPolynomial(Double_t x, const Int_t[] coef, Int_t N); evaluate polynomial. Double_t EvalMonomial(Double_t x, const Int_t[] coef, Int_t N); evaluate mononomia",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:26755,Testability,Test,Test,26755,"MODEL 5:; Gauss background/Efficiency known. Double_t EvalLikeMod6(Double_t mu, Int_t x, Int_t z, Double_t b, Int_t m, Int_t what); Calculates the Profile Likelihood for MODEL 6:; Background known/Efficiency binomial; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod6(Double_t mu, Double_t b, Double_t e, Int_t x, Int_t z, Int_t m); Profile Likelihood function for MODEL 6:; background known/ Efficiency binomial. Double_t EvalLikeMod7(Double_t mu, Int_t x, Double_t em, Double_t sde, Double_t b, Int_t what); Calculates the Profile Likelihood for MODEL 7:; background known/Efficiency Gauss; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod7(Double_t mu, Double_t b, Double_t e, Int_t x, Double_t em, Double_t v); Profile Likelihood function for MODEL 6:; background known/ Efficiency gaussian. Double_t EvalPolynomial(Double_t x, const Int_t[] coef, Int_t N); evaluate polynomial. Double_t EvalMonomial(Double_t x, const Int_t[] coef, Int_t N); evaluate mononomial. Double_t LogFactorial(Int_t n); LogFactorial function (use the logGamma function via the relation Gamma(n+1) = n!. TRolke(Double_t CL = 0.90000000000000002, Option_t* option = """"); Constructor. Double_t GetCL() const; Get and set the Confidence Level. void SetCL(Double_t CL). void SetCLSigmas(Double_t CLsigmas); Set the Confidence Level in terms of Sigmas. bool GetBounding() const; Get the bounding mode flag. True activates bounded mode. Read; TRolke.cxx and the references therein for details. . void SetBounding(const bool bnd); Get the bounding mode flag. True activates bounded mode. ",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:27202,Testability,Log,LogFactorial,27202,"lihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod6(Double_t mu, Double_t b, Double_t e, Int_t x, Int_t z, Int_t m); Profile Likelihood function for MODEL 6:; background known/ Efficiency binomial. Double_t EvalLikeMod7(Double_t mu, Int_t x, Double_t em, Double_t sde, Double_t b, Int_t what); Calculates the Profile Likelihood for MODEL 7:; background known/Efficiency Gauss; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod7(Double_t mu, Double_t b, Double_t e, Int_t x, Double_t em, Double_t v); Profile Likelihood function for MODEL 6:; background known/ Efficiency gaussian. Double_t EvalPolynomial(Double_t x, const Int_t[] coef, Int_t N); evaluate polynomial. Double_t EvalMonomial(Double_t x, const Int_t[] coef, Int_t N); evaluate mononomial. Double_t LogFactorial(Int_t n); LogFactorial function (use the logGamma function via the relation Gamma(n+1) = n!. TRolke(Double_t CL = 0.90000000000000002, Option_t* option = """"); Constructor. Double_t GetCL() const; Get and set the Confidence Level. void SetCL(Double_t CL). void SetCLSigmas(Double_t CLsigmas); Set the Confidence Level in terms of Sigmas. bool GetBounding() const; Get the bounding mode flag. True activates bounded mode. Read; TRolke.cxx and the references therein for details. . void SetBounding(const bool bnd); Get the bounding mode flag. True activates bounded mode. Read; TRolke.cxx and the references therein for details. . » Last changed: Tue Jun 30 15:29:35 2015 » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:27225,Testability,Log,LogFactorial,27225,"lihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod6(Double_t mu, Double_t b, Double_t e, Int_t x, Int_t z, Int_t m); Profile Likelihood function for MODEL 6:; background known/ Efficiency binomial. Double_t EvalLikeMod7(Double_t mu, Int_t x, Double_t em, Double_t sde, Double_t b, Int_t what); Calculates the Profile Likelihood for MODEL 7:; background known/Efficiency Gauss; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod7(Double_t mu, Double_t b, Double_t e, Int_t x, Double_t em, Double_t v); Profile Likelihood function for MODEL 6:; background known/ Efficiency gaussian. Double_t EvalPolynomial(Double_t x, const Int_t[] coef, Int_t N); evaluate polynomial. Double_t EvalMonomial(Double_t x, const Int_t[] coef, Int_t N); evaluate mononomial. Double_t LogFactorial(Int_t n); LogFactorial function (use the logGamma function via the relation Gamma(n+1) = n!. TRolke(Double_t CL = 0.90000000000000002, Option_t* option = """"); Constructor. Double_t GetCL() const; Get and set the Confidence Level. void SetCL(Double_t CL). void SetCLSigmas(Double_t CLsigmas); Set the Confidence Level in terms of Sigmas. bool GetBounding() const; Get the bounding mode flag. True activates bounded mode. Read; TRolke.cxx and the references therein for details. . void SetBounding(const bool bnd); Get the bounding mode flag. True activates bounded mode. Read; TRolke.cxx and the references therein for details. . » Last changed: Tue Jun 30 15:29:35 2015 » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:27256,Testability,log,logGamma,27256,"lihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod6(Double_t mu, Double_t b, Double_t e, Int_t x, Int_t z, Int_t m); Profile Likelihood function for MODEL 6:; background known/ Efficiency binomial. Double_t EvalLikeMod7(Double_t mu, Int_t x, Double_t em, Double_t sde, Double_t b, Int_t what); Calculates the Profile Likelihood for MODEL 7:; background known/Efficiency Gauss; what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned; otherwise parameters as described in the beginning of the class). Double_t LikeMod7(Double_t mu, Double_t b, Double_t e, Int_t x, Double_t em, Double_t v); Profile Likelihood function for MODEL 6:; background known/ Efficiency gaussian. Double_t EvalPolynomial(Double_t x, const Int_t[] coef, Int_t N); evaluate polynomial. Double_t EvalMonomial(Double_t x, const Int_t[] coef, Int_t N); evaluate mononomial. Double_t LogFactorial(Int_t n); LogFactorial function (use the logGamma function via the relation Gamma(n+1) = n!. TRolke(Double_t CL = 0.90000000000000002, Option_t* option = """"); Constructor. Double_t GetCL() const; Get and set the Confidence Level. void SetCL(Double_t CL). void SetCLSigmas(Double_t CLsigmas); Set the Confidence Level in terms of Sigmas. bool GetBounding() const; Get the bounding mode flag. True activates bounded mode. Read; TRolke.cxx and the references therein for details. . void SetBounding(const bool bnd); Get the bounding mode flag. True activates bounded mode. Read; TRolke.cxx and the references therein for details. . » Last changed: Tue Jun 30 15:29:35 2015 » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:5798,Usability,Clear,Clear,5798,"self a Bayesian. Function Members (Methods); public:. virtual~TRolke(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tCalculateInterval(Int_t x, Int_t y, Int_t z, Double_t bm, Double_t em, Double_t e, Int_t mid, Double_t sde, Double_t sdb, Double_t tau, Double_t b, Int_t m); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; boolGetBounding() const; Double_tGetCL() const; boolGetCriticalNumber(Int_t& ncrit, Int_t maxtry = -1); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; boolGetLimits(Double_t& low, Double_t& high); boolGetLimitsML(Double_t& low, Double_t& high, Int_t& out_x); boolGetLimitsQuantile(Double_t& low, Double_t& high, Int_t& out_x, Double_t integral = 0.5); Double_tGetLowerLimit(); virtual const char*TObje",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:17594,Usability,simpl,simple,17594," true efficiency (considered known). void SetKnownBkgBinomEff(Int_t x, Int_t z, Int_t m, Double_t b); Model 6: Background - known, Efficiency - Binomial (x,z,m,b); x : number of observed events in the experiment; z : number of MC events observed; m : number of MC events generated; b : background expectation value (considered known). void SetKnownBkgGaussEff(Int_t x, Double_t em, Double_t sde, Double_t b); Model 7: Background - known, Efficiency - Gaussian (x,em,sde,b); x : number of observed events in the experiment; em : estimate of the efficiency; sde : efficiency estimate's standard deviation; b : background expectation value (considered known). bool GetLimits(Double_t& low, Double_t& high); Calculate and get the upper and lower limits for the pre-specified model. Double_t GetUpperLimit(); Calculate and get upper limit for the pre-specified model. Double_t GetLowerLimit(); Calculate and get lower limit for the pre-specified model. Double_t GetBackground(); Return a simple background value (estimate/truth) given the pre-specified model. bool GetSensitivity(Double_t& low, Double_t& high, Double_t pPrecision = 1.0000000000000001E-5); get the upper and lower average limits based on the specified model.; No uncertainties are considered for the Poisson weights in the averaging sum. bool GetLimitsQuantile(Double_t& low, Double_t& high, Int_t& out_x, Double_t integral = 0.5); get the upper and lower limits for the outcome corresponding to; a given quantile.; For integral=0.5 this gives the median limits; in repeated experiments. The returned out_x is the corresponding; (e.g. median) value of x.; No uncertainties are considered for the Poisson weights when calculating; the Poisson integral . bool GetLimitsML(Double_t& low, Double_t& high, Int_t& out_x); get the upper and lower limits for the most likely outcome.; The returned out_x is the corresponding value of x; No uncertainties are considered for the Poisson weights when finding ML . bool GetCriticalNumber(Int_t& ncrit,",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TRolke.html:20607,Usability,Clear,Clear,20607,"mid : internal model id (really, you should not use this method at all); sde : efficiency estimate's standard deviation; sdb : background estimate's standard deviation; tau : ratio parameter (read TRolke.cxx for details); b : background expectation value (considered known); m : number of MC events generated. void SetModelParameters(Int_t x, Int_t y, Int_t z, Double_t bm, Double_t em, Double_t e, Int_t mid, Double_t sde, Double_t sdb, Double_t tau, Double_t b, Int_t m). x : number of observed events in the experiment; y : number of observed events in background region; z : number of MC events observed; bm : estimate of the background; em : estimate of the efficiency; e : true efficiency (considered known); mid : internal model id; sde : efficiency estimate's standard deviation; sdb : background estimate's standard deviation; tau : ratio parameter (read TRolke.cxx for details); b : background expectation value (considered known); m : number of MC events generated. void SetModelParameters(); Clear internal model. Double_t ComputeInterval(Int_t x, Int_t y, Int_t z, Double_t bm, Double_t em, Double_t e, Int_t mid, Double_t sde, Double_t sdb, Double_t tau, Double_t b, Int_t m). ComputeInterval, the internals.; x : number of observed events in the experiment; y : number of observed events in background region; z : number of MC events observed; bm : estimate of the background; em : estimate of the efficiency; e : true efficiency (considered known); mid : internal model id (really, you should not use this method at all); sde : efficiency estimate's standard deviation; sdb : background estimate's standard deviation; tau : ratio parameter (read TRolke.cxx for details); b : background expectation value (considered known); m : number of MC events generated. Double_t Interval(Int_t x, Int_t y, Int_t z, Double_t bm, Double_t em, Double_t e, Int_t mid, Double_t sde, Double_t sdb, Double_t tau, Double_t b, Int_t m). Internal helper function 'Interval'. x : number of observed events i",MatchSource.WIKI,root/html602/TRolke.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRolke.html
https://root.cern/root/html602/TROOT.html:3746,Availability,Error,Error,3746,"E); virtual voidTDirectory::Close(Option_t* option = """"); voidCloseFiles(); virtual Int_tTNamed::Compare(const TObject* obj) const; static Int_tConvertVersionCode2Int(Int_t code); static Int_tConvertVersionInt2Code(Int_t v); virtual voidTDirectory::Copy(TObject&) const; static TDirectory*&TDirectory::CurrentDirectory(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle, const size_t namesize = 0); static Int_tDecreaseDirLevel(); virtual voidTDirectory::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTDirectory::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); voidEndOfProcessCleanups(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TKey*TDirectory::FindKey(const char*) const; virtual TKey*TDirectory::FindKeyAny(const char*) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*FindObjectAny(const char* name) const; virtual TObject*FindObjectAnyFile(const char* name) const; const char*FindObjectClassName(const char* name) const; const char*FindObjectPathName(const TObject* obj) const; TObject*FindSpecialObject(const char* name, void*& where); TClass*FindSTLClass(const char* name, Bool_t load, Bool_t silent = kFALSE) const; voidFo",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:3875,Availability,error,error,3875,"t; static Int_tConvertVersionCode2Int(Int_t code); static Int_tConvertVersionInt2Code(Int_t v); virtual voidTDirectory::Copy(TObject&) const; static TDirectory*&TDirectory::CurrentDirectory(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle, const size_t namesize = 0); static Int_tDecreaseDirLevel(); virtual voidTDirectory::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTDirectory::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); voidEndOfProcessCleanups(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TKey*TDirectory::FindKey(const char*) const; virtual TKey*TDirectory::FindKeyAny(const char*) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*FindObjectAny(const char* name) const; virtual TObject*FindObjectAnyFile(const char* name) const; const char*FindObjectClassName(const char* name) const; const char*FindObjectPathName(const TObject* obj) const; TObject*FindSpecialObject(const char* name, void*& where); TClass*FindSTLClass(const char* name, Bool_t load, Bool_t silent = kFALSE) const; voidForceStyle(Bool_t force = kTRUE); Bool_tFromPopUp() const; virtual TObject*TDirectory::Get(const char* namecycle); TApplication*Get",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:3959,Availability,error,error,3959,"e(Int_t v); virtual voidTDirectory::Copy(TObject&) const; static TDirectory*&TDirectory::CurrentDirectory(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle, const size_t namesize = 0); static Int_tDecreaseDirLevel(); virtual voidTDirectory::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTDirectory::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); voidEndOfProcessCleanups(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TKey*TDirectory::FindKey(const char*) const; virtual TKey*TDirectory::FindKeyAny(const char*) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*FindObjectAny(const char* name) const; virtual TObject*FindObjectAnyFile(const char* name) const; const char*FindObjectClassName(const char* name) const; const char*FindObjectPathName(const TObject* obj) const; TObject*FindSpecialObject(const char* name, void*& where); TClass*FindSTLClass(const char* name, Bool_t load, Bool_t silent = kFALSE) const; voidForceStyle(Bool_t force = kTRUE); Bool_tFromPopUp() const; virtual TObject*TDirectory::Get(const char* namecycle); TApplication*GetApplication() const; virtual Int_tTDirectory::GetBufferSize() const; Int_tGetBuiltDa",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:10724,Availability,error,error,10724,"har* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; static Bool_tInitialized(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsBatch() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tIsEscaped() const; Bool_tIsExecutingMacro() const; virtual Bool_tIsFolder() const; Bool_tIsInterrupted() const; Bool_tIsLineProcessing() const; virtual Bool_tTDirectory::IsModified() const; Bool_tTObject::IsOnHeap() const; Bool_tIsProofServ() const; Bool_tIsRootFile(const char* filename) const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDirectory::IsWritable() const; Bool_tTObject::IsZombie() const; TClass*LoadClass(const char* name, Bool_t silent = kFALSE) const; Int_tLoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Int_tLoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); virtual voidls(Option_t* option = """") const; Long_tMacro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); TCanvas*MakeDefCanvas() const; voidTObject::MayNotUse(const char* method) const; static Bool_tMemCheck(); voidMessage(Int_t id, const TObject* obj); virtual TDirectory*TDirectory::mkdir(const char* name, const char* title = """"); Bool_tMustClean() const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual TFile*TDirectory::OpenFile(const char*, Option_t* = """", const char* = """", Int_t = 1, Int_t = 0); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTDirectory::Paint(Option_t* option = """"); virtual voidTObjec",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:10845,Availability,error,error,10845,"Object::InheritsFrom(const TClass* cl) const; static Bool_tInitialized(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsBatch() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tIsEscaped() const; Bool_tIsExecutingMacro() const; virtual Bool_tIsFolder() const; Bool_tIsInterrupted() const; Bool_tIsLineProcessing() const; virtual Bool_tTDirectory::IsModified() const; Bool_tTObject::IsOnHeap() const; Bool_tIsProofServ() const; Bool_tIsRootFile(const char* filename) const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDirectory::IsWritable() const; Bool_tTObject::IsZombie() const; TClass*LoadClass(const char* name, Bool_t silent = kFALSE) const; Int_tLoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Int_tLoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); virtual voidls(Option_t* option = """") const; Long_tMacro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); TCanvas*MakeDefCanvas() const; voidTObject::MayNotUse(const char* method) const; static Bool_tMemCheck(); voidMessage(Int_t id, const TObject* obj); virtual TDirectory*TDirectory::mkdir(const char* name, const char* title = """"); Bool_tMustClean() const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual TFile*TDirectory::OpenFile(const char*, Option_t* = """", const char* = """", Int_t = 1, Int_t = 0); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTDirectory::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTDirectory::Print(Option_t* option = """") const; Long_tProcessLine(const char* line, Int_t* error = ",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:11840,Availability,error,error,11840,"* error = 0, Bool_t padUpdate = kTRUE); TCanvas*MakeDefCanvas() const; voidTObject::MayNotUse(const char* method) const; static Bool_tMemCheck(); voidMessage(Int_t id, const TObject* obj); virtual TDirectory*TDirectory::mkdir(const char* name, const char* title = """"); Bool_tMustClean() const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual TFile*TDirectory::OpenFile(const char*, Option_t* = """", const char* = """", Int_t = 1, Int_t = 0); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTDirectory::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTDirectory::Print(Option_t* option = """") const; Long_tProcessLine(const char* line, Int_t* error = 0); Long_tProcessLineFast(const char* line, Int_t* error = 0); Long_tProcessLineSync(const char* line, Int_t* error = 0); virtual voidTDirectory::Purge(Short_t = 1); virtual voidTDirectory::pwd() const; virtual Int_tTObject::Read(const char* name); virtual voidTDirectory::ReadAll(Option_t* = """"); Bool_tReadingObject() const; virtual Int_tTDirectory::ReadKeys(Bool_t = kTRUE); virtual Int_tTDirectory::ReadTObject(TObject*, const char*); virtual voidTDirectory::RecursiveRemove(TObject* obj); voidRefreshBrowsers(); static voidRegisterModule(const char* modulename, const char** headers, const char** includePaths, const char* payLoadCode, const char* fwdDeclCode, void(*)() triggerFunc, const TROOT::FwdDeclArgsToKeepCollection_t& fwdDeclsArgToSkip, const char** classesHeaders); virtual TObject*TDirectory::Remove(TObject*); voidRemoveClass(TClass*); voidReset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTDirectory::rmdir(const char* name); static Int_tRootVersionCo",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:11899,Availability,error,error,11899,"as() const; voidTObject::MayNotUse(const char* method) const; static Bool_tMemCheck(); voidMessage(Int_t id, const TObject* obj); virtual TDirectory*TDirectory::mkdir(const char* name, const char* title = """"); Bool_tMustClean() const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual TFile*TDirectory::OpenFile(const char*, Option_t* = """", const char* = """", Int_t = 1, Int_t = 0); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTDirectory::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTDirectory::Print(Option_t* option = """") const; Long_tProcessLine(const char* line, Int_t* error = 0); Long_tProcessLineFast(const char* line, Int_t* error = 0); Long_tProcessLineSync(const char* line, Int_t* error = 0); virtual voidTDirectory::Purge(Short_t = 1); virtual voidTDirectory::pwd() const; virtual Int_tTObject::Read(const char* name); virtual voidTDirectory::ReadAll(Option_t* = """"); Bool_tReadingObject() const; virtual Int_tTDirectory::ReadKeys(Bool_t = kTRUE); virtual Int_tTDirectory::ReadTObject(TObject*, const char*); virtual voidTDirectory::RecursiveRemove(TObject* obj); voidRefreshBrowsers(); static voidRegisterModule(const char* modulename, const char** headers, const char** includePaths, const char* payLoadCode, const char* fwdDeclCode, void(*)() triggerFunc, const TROOT::FwdDeclArgsToKeepCollection_t& fwdDeclsArgToSkip, const char** classesHeaders); virtual TObject*TDirectory::Remove(TObject*); voidRemoveClass(TClass*); voidReset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTDirectory::rmdir(const char* name); static Int_tRootVersionCode(); virtual voidTDirectory::Save(); virtual voidTObject::",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:11958,Availability,error,error,11958,"t; static Bool_tMemCheck(); voidMessage(Int_t id, const TObject* obj); virtual TDirectory*TDirectory::mkdir(const char* name, const char* title = """"); Bool_tMustClean() const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual TFile*TDirectory::OpenFile(const char*, Option_t* = """", const char* = """", Int_t = 1, Int_t = 0); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTDirectory::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTDirectory::Print(Option_t* option = """") const; Long_tProcessLine(const char* line, Int_t* error = 0); Long_tProcessLineFast(const char* line, Int_t* error = 0); Long_tProcessLineSync(const char* line, Int_t* error = 0); virtual voidTDirectory::Purge(Short_t = 1); virtual voidTDirectory::pwd() const; virtual Int_tTObject::Read(const char* name); virtual voidTDirectory::ReadAll(Option_t* = """"); Bool_tReadingObject() const; virtual Int_tTDirectory::ReadKeys(Bool_t = kTRUE); virtual Int_tTDirectory::ReadTObject(TObject*, const char*); virtual voidTDirectory::RecursiveRemove(TObject* obj); voidRefreshBrowsers(); static voidRegisterModule(const char* modulename, const char** headers, const char** includePaths, const char* payLoadCode, const char* fwdDeclCode, void(*)() triggerFunc, const TROOT::FwdDeclArgsToKeepCollection_t& fwdDeclsArgToSkip, const char** classesHeaders); virtual TObject*TDirectory::Remove(TObject*); voidRemoveClass(TClass*); voidReset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTDirectory::rmdir(const char* name); static Int_tRootVersionCode(); virtual voidTDirectory::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") co",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:31317,Availability,error,error,31317,"on attempts to load the dictionary for 'classname'; either from the TClassTable or from the list of generator.; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members). The 'requestedname' is expected to be already normalized. Int_t LoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Check if class ""classname"" is known to the interpreter (in fact,; this check is not needed anymore, so classname is ignored). If; not it will load library ""libname"". If the library name does; not start with ""lib"", ""lib"" will be prepended and a search will; be made in the DynamicPath (see .rootrc). If not found a search; will be made on libname (without ""lib"" prepended) and if not found; a direct try of libname will be made (in case it contained an; absolute path).; If check is true it will only check if libname exists and is; readable.; Returns 0 on successful loading, -1 in case libname does not; exist or in case of error and -2 in case of version mismatch. Bool_t IsRootFile(const char* filename) const; Return true if the file is local and is (likely) to be a ROOT file. void ls(Option_t* option = """") const; To list all objects of the application.; Loop on all objects created in the ROOT linked lists.; Objects may be files and windows or any other object directly; attached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, In",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:31750,Availability,error,error,31750,"eck is not needed anymore, so classname is ignored). If; not it will load library ""libname"". If the library name does; not start with ""lib"", ""lib"" will be prepended and a search will; be made in the DynamicPath (see .rootrc). If not found a search; will be made on libname (without ""lib"" prepended) and if not found; a direct try of libname will be made (in case it contained an; absolute path).; If check is true it will only check if libname exists and is; readable.; Returns 0 on successful loading, -1 in case libname does not; exist or in case of error and -2 in case of version mismatch. Bool_t IsRootFile(const char* filename) const; Return true if the file is local and is (likely) to be a ROOT file. void ls(Option_t* option = """") const; To list all objects of the application.; Loop on all objects created in the ROOT linked lists.; Objects may be files and windows or any other object directly; attached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const ",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:32038,Availability,error,error,32038,"pended) and if not found; a direct try of libname will be made (in case it contained an; absolute path).; If check is true it will only check if libname exists and is; readable.; Returns 0 on successful loading, -1 in case libname does not; exist or in case of error and -2 in case of version mismatch. Bool_t IsRootFile(const char* filename) const; Return true if the file is local and is (likely) to be a ROOT file. void ls(Option_t* option = """") const; To list all objects of the application.; Loop on all objects created in the ROOT linked lists.; Objects may be files and windows or any other object directly; attached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const TObject* obj); Process message id called by obj. Long_t ProcessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous pr",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:32252,Availability,error,error,32252,"ists and is; readable.; Returns 0 on successful loading, -1 in case libname does not; exist or in case of error and -2 in case of version mismatch. Bool_t IsRootFile(const char* filename) const; Return true if the file is local and is (likely) to be a ROOT file. void ls(Option_t* option = """") const; To list all objects of the application.; Loop on all objects created in the ROOT linked lists.; Objects may be files and windows or any other object directly; attached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const TObject* obj); Process message id called by obj. Long_t ProcessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:32301,Availability,error,error,32301," error and -2 in case of version mismatch. Bool_t IsRootFile(const char* filename) const; Return true if the file is local and is (likely) to be a ROOT file. void ls(Option_t* option = """") const; To list all objects of the application.; Loop on all objects created in the ROOT linked lists.; Objects may be files and windows or any other object directly; attached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const TObject* obj); Process message id called by obj. Long_t ProcessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:32594,Availability,error,error,32594,"cts may be files and windows or any other object directly; attached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const TObject* obj); Process message id called by obj. Long_t ProcessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:32858,Availability,error,error,32858,"filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const TObject* obj); Process message id called by obj. Long_t ProcessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it will; only return when the CINT interpreter thread has finished executing; the line). On non-Win32 platforms there is no difference between; ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode.; Returns the ",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:33196,Availability,error,error,33196,"ilename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const TObject* obj); Process message id called by obj. Long_t ProcessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it will; only return when the CINT interpreter thread has finished executing; the line). On non-Win32 platforms there is no difference between; ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineFast(const char* line, Int_t* error = 0); Process interpreter command directly via CINT interpreter.; Only executable statements are allowed (no variable declarations),; In all other cases use TROOT::ProcessLine().; The possible error codes are defined by TInterpreter::EErrorCode. vo",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:33265,Availability,error,error,33265,"ool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const TObject* obj); Process message id called by obj. Long_t ProcessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it will; only return when the CINT interpreter thread has finished executing; the line). On non-Win32 platforms there is no difference between; ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineFast(const char* line, Int_t* error = 0); Process interpreter command directly via CINT interpreter.; Only executable statements are allowed (no variable declarations),; In all other cases use TROOT::ProcessLine().; The possible error codes are defined by TInterpreter::EErrorCode. void ReadGitInfo(); Read Git commit information and branch name from the; etc/gitinfo.txt file. Bool",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:33481,Availability,error,error,33481,"mpiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const TObject* obj); Process message id called by obj. Long_t ProcessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it will; only return when the CINT interpreter thread has finished executing; the line). On non-Win32 platforms there is no difference between; ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineFast(const char* line, Int_t* error = 0); Process interpreter command directly via CINT interpreter.; Only executable statements are allowed (no variable declarations),; In all other cases use TROOT::ProcessLine().; The possible error codes are defined by TInterpreter::EErrorCode. void ReadGitInfo(); Read Git commit information and branch name from the; etc/gitinfo.txt file. Bool_t ReadingObject() const; Deprecated (will be removed in next release). void SetReadingObject(Bool_t flag = kTRUE). const char * GetGitDate(); Return date/time make was run. void R",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:33806,Availability,error,error,33806,"cessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it will; only return when the CINT interpreter thread has finished executing; the line). On non-Win32 platforms there is no difference between; ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineFast(const char* line, Int_t* error = 0); Process interpreter command directly via CINT interpreter.; Only executable statements are allowed (no variable declarations),; In all other cases use TROOT::ProcessLine().; The possible error codes are defined by TInterpreter::EErrorCode. void ReadGitInfo(); Read Git commit information and branch name from the; etc/gitinfo.txt file. Bool_t ReadingObject() const; Deprecated (will be removed in next release). void SetReadingObject(Bool_t flag = kTRUE). const char * GetGitDate(); Return date/time make was run. void RefreshBrowsers(); Refresh all browsers. Call this method when some command line; command or script has changed the browser contents. Not needed; for objects that have the kMustCleanup bit set. Most useful to; update browsers that show the file system or other objects external; to the running ROOT session. void RegisterModule(const",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:33961,Availability,error,error,33961,"nchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it will; only return when the CINT interpreter thread has finished executing; the line). On non-Win32 platforms there is no difference between; ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineFast(const char* line, Int_t* error = 0); Process interpreter command directly via CINT interpreter.; Only executable statements are allowed (no variable declarations),; In all other cases use TROOT::ProcessLine().; The possible error codes are defined by TInterpreter::EErrorCode. void ReadGitInfo(); Read Git commit information and branch name from the; etc/gitinfo.txt file. Bool_t ReadingObject() const; Deprecated (will be removed in next release). void SetReadingObject(Bool_t flag = kTRUE). const char * GetGitDate(); Return date/time make was run. void RefreshBrowsers(); Refresh all browsers. Call this method when some command line; command or script has changed the browser contents. Not needed; for objects that have the kMustCleanup bit set. Most useful to; update browsers that show the file system or other objects external; to the running ROOT session. void RegisterModule(const char* modulename, const char** headers, const char** includePaths, const char* payLoadCode, const char* fwdDeclCode, void(*)() triggerFunc, const ",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:34160,Availability,error,error,34160,"().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it will; only return when the CINT interpreter thread has finished executing; the line). On non-Win32 platforms there is no difference between; ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineFast(const char* line, Int_t* error = 0); Process interpreter command directly via CINT interpreter.; Only executable statements are allowed (no variable declarations),; In all other cases use TROOT::ProcessLine().; The possible error codes are defined by TInterpreter::EErrorCode. void ReadGitInfo(); Read Git commit information and branch name from the; etc/gitinfo.txt file. Bool_t ReadingObject() const; Deprecated (will be removed in next release). void SetReadingObject(Bool_t flag = kTRUE). const char * GetGitDate(); Return date/time make was run. void RefreshBrowsers(); Refresh all browsers. Call this method when some command line; command or script has changed the browser contents. Not needed; for objects that have the kMustCleanup bit set. Most useful to; update browsers that show the file system or other objects external; to the running ROOT session. void RegisterModule(const char* modulename, const char** headers, const char** includePaths, const char* payLoadCode, const char* fwdDeclCode, void(*)() triggerFunc, const TROOT::FwdDeclArgsToKeepCollection_t& fwdDeclsArgToSkip, const char** classesHeaders); Called by static dictionary initialization to register clang modules; for headers. Calls TCling::RegisterModule() unless",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:19979,Deployability,release,release,19979,croTrue while executing a TMacro; TSeqCollection*fFilesList of files; Bool_tfForceStyleForce setting of current style when reading objects; Bool_tfFromPopUpTrue if command executed from a popup menu; TListOfFunctionTemplates*fFuncTemplateList of global function templates; TCollection*fFunctionsList of analytic functions; TSeqCollection*fGeometriesList of geometries; TStringfGitBranchGit branch; TStringfGitCommitGit commit SHA1 of built; TStringfGitDateDate and time when make was run; TListOfFunctions*fGlobalFunctionsList of global functions; TListOfDataMembers*fGlobalsList of global variables; TInterpreter*fInterpreterCommand interpreter; Bool_tfInterruptTrue if macro should be interrupted; TList*TDirectory::fListList of objects in memory; TSeqCollection*fMappedFilesList of memory mapped files; TSeqCollection*fMessageHandlersList of message handlers; TObject*TDirectory::fMotherpointer to mother of the directory; Bool_tfMustCleanTrue if object destructor scans canvases; TStringTNamed::fNameobject identifier; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; TPluginManager*fPluginManagerKeeps track of plugin library handlers; const TObject*fPrimitiveCurrently selected primitive; TSeqCollection*fProofsList of proof sessions; Bool_tfReadingObjectTrue while reading an object [Deprecated (will be removed in next release); TFolder*fRootFoldertop level folder //root; TSeqCollection*fSecContextsList of security contexts (TSecContext); TVirtualPad*fSelectPadCurrently selected pad; TSeqCollection*fSocketsList of network sockets; TSeqCollection*fSpecialsList of special objects; TSeqCollection*fStreamerInfoList of active StreamerInfo classes; TSeqCollection*fStylesList of styles; TSeqCollection*fTasksList of tasks; Int_tfTimerTimer flag; TStringTNamed::fTitleobject title; TCollection*fTypesList of data types definition; TUUIDTDirectory::fUUIDUnique identifier; TProcessUUID*fUUIDsPointer to TProcessID managing TUUIDs; TStringfVersionROOT version (from CMZ VERSQQ) ex 0.,MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:28404,Deployability,update,update,28404,"to global function by name.; If params != 0 it will also resolve overloading other it returns the first; name match.; If params == 0 and load is true force reading of all currently defined; global functions from Cling.; The param string must be of the form: ""3189,\""aap\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); Return pointer to global function by name. If proto != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more expensive).; The proto string must be of the form: ""int, char*, float"". TObject * GetGeometry(const char* name) const; Return pointer to Geometry with name. TCollection * GetListOfEnums(Bool_t load = kFALSE). TCollection * GetListOfFunctionTemplates(). TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfTypes(Bool_t load = kFALSE); Return a dynamic list giving access to all TDataTypes (typedefs); currently defined. The list is populated on demand. Calling; gROOT->GetListOfTypes()->FindObject(nameoftype);; will return the TDataType corresponding to 'nameoftype'. If the; TDataType is not already in the list itself and the type does exist,; a new TDataType will",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:28808,Deployability,update,update,28808,"lobal function by name. If proto != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more expensive).; The proto string must be of the form: ""int, char*, float"". TObject * GetGeometry(const char* name) const; Return pointer to Geometry with name. TCollection * GetListOfEnums(Bool_t load = kFALSE). TCollection * GetListOfFunctionTemplates(). TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfTypes(Bool_t load = kFALSE); Return a dynamic list giving access to all TDataTypes (typedefs); currently defined. The list is populated on demand. Calling; gROOT->GetListOfTypes()->FindObject(nameoftype);; will return the TDataType corresponding to 'nameoftype'. If the; TDataType is not already in the list itself and the type does exist,; a new TDataType will be created and added to the list. Calling; gROOT->GetListOfTypes()->ls(); // or Print(); list only the typedefs that have been previously accessed throught the; list (plus the builtins types). void Idle(UInt_t idleTimeInSec, const char* command = 0); Execute command when system has been idle for idleTimeInSec seconds. Int_t IgnoreInclude(const char* fname, const char* expandedfname); Return 1 if the ",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:32679,Deployability,update,update,32679,"ached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const TObject* obj); Process message id called by obj. Long_t ProcessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it will; only return when the CINT interpreter thread has finis",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:34375,Deployability,release,release,34375,"has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it will; only return when the CINT interpreter thread has finished executing; the line). On non-Win32 platforms there is no difference between; ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineFast(const char* line, Int_t* error = 0); Process interpreter command directly via CINT interpreter.; Only executable statements are allowed (no variable declarations),; In all other cases use TROOT::ProcessLine().; The possible error codes are defined by TInterpreter::EErrorCode. void ReadGitInfo(); Read Git commit information and branch name from the; etc/gitinfo.txt file. Bool_t ReadingObject() const; Deprecated (will be removed in next release). void SetReadingObject(Bool_t flag = kTRUE). const char * GetGitDate(); Return date/time make was run. void RefreshBrowsers(); Refresh all browsers. Call this method when some command line; command or script has changed the browser contents. Not needed; for objects that have the kMustCleanup bit set. Most useful to; update browsers that show the file system or other objects external; to the running ROOT session. void RegisterModule(const char* modulename, const char** headers, const char** includePaths, const char* payLoadCode, const char* fwdDeclCode, void(*)() triggerFunc, const TROOT::FwdDeclArgsToKeepCollection_t& fwdDeclsArgToSkip, const char** classesHeaders); Called by static dictionary initialization to register clang modules; for headers. Calls TCling::RegisterModule() unless gCling; is NULL, i.e. during startup, where the information is buffered in; the static GetModuleHeaderInfoBuffer(). void RemoveClass(TClass* ); Remove a class from th",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:34702,Deployability,update,update,34702,"nce between; ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineFast(const char* line, Int_t* error = 0); Process interpreter command directly via CINT interpreter.; Only executable statements are allowed (no variable declarations),; In all other cases use TROOT::ProcessLine().; The possible error codes are defined by TInterpreter::EErrorCode. void ReadGitInfo(); Read Git commit information and branch name from the; etc/gitinfo.txt file. Bool_t ReadingObject() const; Deprecated (will be removed in next release). void SetReadingObject(Bool_t flag = kTRUE). const char * GetGitDate(); Return date/time make was run. void RefreshBrowsers(); Refresh all browsers. Call this method when some command line; command or script has changed the browser contents. Not needed; for objects that have the kMustCleanup bit set. Most useful to; update browsers that show the file system or other objects external; to the running ROOT session. void RegisterModule(const char* modulename, const char** headers, const char** includePaths, const char* payLoadCode, const char* fwdDeclCode, void(*)() triggerFunc, const TROOT::FwdDeclArgsToKeepCollection_t& fwdDeclsArgToSkip, const char** classesHeaders); Called by static dictionary initialization to register clang modules; for headers. Calls TCling::RegisterModule() unless gCling; is NULL, i.e. during startup, where the information is buffered in; the static GetModuleHeaderInfoBuffer(). void RemoveClass(TClass* ); Remove a class from the list and map of classes.; This routine is deprecated, use TClass::RemoveClass directly. void Reset(Option_t* option = """"); Delete all global interpreter objects created since the last call to Reset. If option=""a"" is set reset to startup context (i.e. unload also; all loaded files, classes, structs, typedefs, etc.). This function is typically used at the beginning (or end) of an unnamed macro",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:37742,Deployability,install,installtion,37742,"GetDirLevel(); return directory level. const char * GetMacroPath(); Get macro search path. Static utility function. void SetMacroPath(const char* newpath); Set or extend the macro search path. Static utility function.; If newpath=0 or """" reset to value specified in the rootrc file. Int_t IncreaseDirLevel(); Increase the indentation level for ls(). void IndentLevel(); Functions used by ls() to indent an object hierarchy. Bool_t Initialized(); Return kTRUE if the TROOT object has been initialized. Bool_t MemCheck(); Return kTRUE if the memory leak checker is on. void SetDirLevel(Int_t level = 0); Return Indentation level for ls(). Int_t ConvertVersionCode2Int(Int_t code); Convert version code to an integer, i.e. 331527 -> 51507. Int_t ConvertVersionInt2Code(Int_t v); Convert version as an integer to version code as used in RVersion.h. Int_t RootVersionCode(); Return ROOT version code as defined in RVersion.h. const char**& GetExtraInterpreterArgs(). const char * GetTutorialsDir(); Get the tuorials directory in the installtion. Static utility function. TROOT(const TROOT& ). TROOT& operator=(const TROOT& ). void * operator new(size_t l); { return TObject::operator new(l); }. void * operator new(size_t l, void* ptr); { return TObject::operator new(l,ptr); }. void ForceStyle(Bool_t force = kTRUE); { fForceStyle = force; }. Bool_t FromPopUp() const; { return fFromPopUp; }. TPluginManager * GetPluginManager() const; { return fPluginManager; }. TApplication * GetApplication() const; { return fApplication; }. TInterpreter * GetInterpreter() const; { return fInterpreter; }. const char * GetConfigOptions() const; { return fConfigOptions; }. const char * GetConfigFeatures() const; { return fConfigFeatures; }. const char * GetCutClassName() const; { return fCutClassName; }. const char * GetDefCanvasName() const; { return fDefCanvasName; }. Bool_t GetEditHistograms() const; { return fEditHistograms; }. Int_t GetEditorMode() const; { return fEditorMode; }. Bool_t GetForceStyle() con",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:19484,Integrability,message,message,19484,ouse; Int_tfEditorModeCurrent Editor mode; TROOT::AListOfEnums_tfEnumsList of enum types; Bool_tfEscapeTrue if ESC has been pressed; Bool_tfExecutingMacroTrue while executing a TMacro; TSeqCollection*fFilesList of files; Bool_tfForceStyleForce setting of current style when reading objects; Bool_tfFromPopUpTrue if command executed from a popup menu; TListOfFunctionTemplates*fFuncTemplateList of global function templates; TCollection*fFunctionsList of analytic functions; TSeqCollection*fGeometriesList of geometries; TStringfGitBranchGit branch; TStringfGitCommitGit commit SHA1 of built; TStringfGitDateDate and time when make was run; TListOfFunctions*fGlobalFunctionsList of global functions; TListOfDataMembers*fGlobalsList of global variables; TInterpreter*fInterpreterCommand interpreter; Bool_tfInterruptTrue if macro should be interrupted; TList*TDirectory::fListList of objects in memory; TSeqCollection*fMappedFilesList of memory mapped files; TSeqCollection*fMessageHandlersList of message handlers; TObject*TDirectory::fMotherpointer to mother of the directory; Bool_tfMustCleanTrue if object destructor scans canvases; TStringTNamed::fNameobject identifier; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; TPluginManager*fPluginManagerKeeps track of plugin library handlers; const TObject*fPrimitiveCurrently selected primitive; TSeqCollection*fProofsList of proof sessions; Bool_tfReadingObjectTrue while reading an object [Deprecated (will be removed in next release); TFolder*fRootFoldertop level folder //root; TSeqCollection*fSecContextsList of security contexts (TSecContext); TVirtualPad*fSelectPadCurrently selected pad; TSeqCollection*fSocketsList of network sockets; TSeqCollection*fSpecialsList of special objects; TSeqCollection*fStreamerInfoList of active StreamerInfo classes; TSeqCollection*fStylesList of styles; TSeqCollection*fTasksList of tasks; Int_tfTimerTimer flag; TStringTNamed::fTitleobject title; TCollection*fTypesList of data types definition,MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:20987,Integrability,synchroniz,synchronize,20987,"of security contexts (TSecContext); TVirtualPad*fSelectPadCurrently selected pad; TSeqCollection*fSocketsList of network sockets; TSeqCollection*fSpecialsList of special objects; TSeqCollection*fStreamerInfoList of active StreamerInfo classes; TSeqCollection*fStylesList of styles; TSeqCollection*fTasksList of tasks; Int_tfTimerTimer flag; TStringTNamed::fTitleobject title; TCollection*fTypesList of data types definition; TUUIDTDirectory::fUUIDUnique identifier; TProcessUUID*fUUIDsPointer to TProcessID managing TUUIDs; TStringfVersionROOT version (from CMZ VERSQQ) ex 0.05/01; Int_tfVersionCodeROOT version code as used in RVersion.h; Int_tfVersionDateDate of ROOT version (ex 951226); Int_tfVersionIntROOT version in integer format (501); Int_tfVersionTimeTime of ROOT version (ex 1152); static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. private:. Int_tfLineIsProcessingTo synchronize multi-threads; static Int_tfgDirLevelIndentation level for ls(); static Bool_tfgMemCheckTurn on memory leak checker; static Bool_tfgRootInitSingleton initialization flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TDirectory. ←; TROOT. Function documentation; TROOT(); Default ctor. TROOT(const char* name, const char* title, VoidFuncPtr_t* initfunc = 0); Initialize the ROOT system. The creation of the TROOT object initializes; the ROOT system. It must be the first ROOT related action that is; performed by a program. The TROOT object must be created on the stack; (can not be called via new since ""operator new"" is protected). The; TROOT object is either created as a global object (outside the main(); program), or it is one of the first objects created in main().; Make sure that the TROOT object stays in scope for as long as ROOT; related actions are performed. TROOT is a so called singleton so; only one instance of it can be created. The single TROOT object can; always be accessed via the global pointer gROOT.; The name and title arguments",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:22341,Integrability,depend,dependencies,22341,"* name, const char* title, VoidFuncPtr_t* initfunc = 0); Initialize the ROOT system. The creation of the TROOT object initializes; the ROOT system. It must be the first ROOT related action that is; performed by a program. The TROOT object must be created on the stack; (can not be called via new since ""operator new"" is protected). The; TROOT object is either created as a global object (outside the main(); program), or it is one of the first objects created in main().; Make sure that the TROOT object stays in scope for as long as ROOT; related actions are performed. TROOT is a so called singleton so; only one instance of it can be created. The single TROOT object can; always be accessed via the global pointer gROOT.; The name and title arguments can be used to identify the running; application. The initfunc argument can contain an array of; function pointers (last element must be 0). These functions are; executed at the end of the constructor. This way one can easily; extend the ROOT system without adding permanent dependencies; (e.g. the graphics system is initialized via such a function). ~TROOT(); Clean up and free resources used by ROOT (files, network sockets,; shared memory segments, etc.). void AddClass(TClass* cl); Add a class to the list and map of classes.; This routine is deprecated, use TClass::AddClass directly. void AddClassGenerator(TClassGenerator* gen); Add a class generator. This generator will be called by TClass::GetClass; in case its does not find a loaded rootcint dictionary to request the; creation of a TClass object. void Browse(TBrowser* b); Add browsable objects to TBrowser. Bool_t ClassSaved(TClass* cl); return class status bit kClassSaved for class cl; This function is called by the SavePrimitive functions writing; the C++ code for an object. void CloseFiles(); Close any files and sockets that gROOT knows about.; This can be used to insures that the files and sockets are closed before any library is unloaded!. void EndOfProcessCleanups(); Ex",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:22603,Integrability,rout,routine,22603,"w"" is protected). The; TROOT object is either created as a global object (outside the main(); program), or it is one of the first objects created in main().; Make sure that the TROOT object stays in scope for as long as ROOT; related actions are performed. TROOT is a so called singleton so; only one instance of it can be created. The single TROOT object can; always be accessed via the global pointer gROOT.; The name and title arguments can be used to identify the running; application. The initfunc argument can contain an array of; function pointers (last element must be 0). These functions are; executed at the end of the constructor. This way one can easily; extend the ROOT system without adding permanent dependencies; (e.g. the graphics system is initialized via such a function). ~TROOT(); Clean up and free resources used by ROOT (files, network sockets,; shared memory segments, etc.). void AddClass(TClass* cl); Add a class to the list and map of classes.; This routine is deprecated, use TClass::AddClass directly. void AddClassGenerator(TClassGenerator* gen); Add a class generator. This generator will be called by TClass::GetClass; in case its does not find a loaded rootcint dictionary to request the; creation of a TClass object. void Browse(TBrowser* b); Add browsable objects to TBrowser. Bool_t ClassSaved(TClass* cl); return class status bit kClassSaved for class cl; This function is called by the SavePrimitive functions writing; the C++ code for an object. void CloseFiles(); Close any files and sockets that gROOT knows about.; This can be used to insures that the files and sockets are closed before any library is unloaded!. void EndOfProcessCleanups(); Execute the cleanups necessary at the end of the process, in particular; those that must be executed before the library start being unloaded. TObject * FindObject(const TObject* obj) const; Find an object in one Root folder. TObject * FindObject(const char* name) const; Returns address of a ROOT object if it exist",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:27091,Integrability,rout,routine,27091,"from its name. Obsolete, use TClass::GetClass directly; See TClass::GetClass. TColor * GetColor(Int_t color) const; Return address of color with index color. TCanvas * MakeDefCanvas() const; Return a default canvas. TDataType * GetType(const char* name, Bool_t load = kFALSE) const; Return pointer to type with name. TFile * GetFile(const char* name) const; Return pointer to file with name. TStyle * GetStyle(const char* name) const; Return pointer to style with name. TObject * GetFunction(const char* name) const; Return pointer to function with name. TFunctionTemplate * GetFunctionTemplate(const char* name). TGlobal * GetGlobal(const char* name, Bool_t load = kFALSE) const; Return pointer to global variable by name. If load is true force; reading of all currently defined globals from CINT (more expensive). TGlobal * GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; Return pointer to global variable with address addr. TListOfFunctions * GetGlobalFunctions(); Internal routine returning, and creating if necessary, the list; of global function. TCollection * GetListOfFunctionOverloads(const char* name) const; Return the collection of functions named ""name"". TFunction * GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); Return pointer to global function by name.; If params != 0 it will also resolve overloading other it returns the first; name match.; If params == 0 and load is true force reading of all currently defined; global functions from Cling.; The param string must be of the form: ""3189,\""aap\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); Return pointer to global function by name. If proto != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more expensive).; The proto string must be of the form: ""int, char*, float"". TObject * GetGeometry(const char* name) const; Return pointer to Geometry",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:29969,Integrability,interface,interface,29969,"ymbols will be created; you can set load=kFALSE (default). TCollection * GetListOfTypes(Bool_t load = kFALSE); Return a dynamic list giving access to all TDataTypes (typedefs); currently defined. The list is populated on demand. Calling; gROOT->GetListOfTypes()->FindObject(nameoftype);; will return the TDataType corresponding to 'nameoftype'. If the; TDataType is not already in the list itself and the type does exist,; a new TDataType will be created and added to the list. Calling; gROOT->GetListOfTypes()->ls(); // or Print(); list only the typedefs that have been previously accessed throught the; list (plus the builtins types). void Idle(UInt_t idleTimeInSec, const char* command = 0); Execute command when system has been idle for idleTimeInSec seconds. Int_t IgnoreInclude(const char* fname, const char* expandedfname); Return 1 if the name of the given include file corresponds to a class that; is known to ROOT, e.g. ""TLorentzVector.h"" versus TLorentzVector. void InitSystem(); Initialize operating system interface. void InitThreads(); Load and initialize thread library. void InitInterpreter(); Initialize the interpreter. Should be called only after main(),; to make sure LLVM/Clang is fully initialized. TClass * LoadClass(const char* name, Bool_t silent = kFALSE) const; Helper function used by TClass::GetClass().; This function attempts to load the dictionary for 'classname'; either from the TClassTable or from the list of generator.; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members). The 'requestedname' is expected to be already normalized. Int_t LoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Check if class ""classname"" is known to the interpreter (in fact,; this check is not needed anymore, so classname is ignored). If; not it will load library ""libname"". If the library name does; not start with ""lib"", ""lib"" will be prepended and a search will; b",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:32741,Integrability,Message,Message,32741,"= kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const TObject* obj); Process message id called by obj. Long_t ProcessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it will; only return when the CINT interpreter thread has finished executing; the line). On non-Win32 platforms there is no difference between; ProcessLine() and P",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:32788,Integrability,message,message,32788,"= kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const TObject* obj); Process message id called by obj. Long_t ProcessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it will; only return when the CINT interpreter thread has finished executing; the line). On non-Win32 platforms there is no difference between; ProcessLine() and P",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:35379,Integrability,rout,routine,35379,"ect(Bool_t flag = kTRUE). const char * GetGitDate(); Return date/time make was run. void RefreshBrowsers(); Refresh all browsers. Call this method when some command line; command or script has changed the browser contents. Not needed; for objects that have the kMustCleanup bit set. Most useful to; update browsers that show the file system or other objects external; to the running ROOT session. void RegisterModule(const char* modulename, const char** headers, const char** includePaths, const char* payLoadCode, const char* fwdDeclCode, void(*)() triggerFunc, const TROOT::FwdDeclArgsToKeepCollection_t& fwdDeclsArgToSkip, const char** classesHeaders); Called by static dictionary initialization to register clang modules; for headers. Calls TCling::RegisterModule() unless gCling; is NULL, i.e. during startup, where the information is buffered in; the static GetModuleHeaderInfoBuffer(). void RemoveClass(TClass* ); Remove a class from the list and map of classes.; This routine is deprecated, use TClass::RemoveClass directly. void Reset(Option_t* option = """"); Delete all global interpreter objects created since the last call to Reset. If option=""a"" is set reset to startup context (i.e. unload also; all loaded files, classes, structs, typedefs, etc.). This function is typically used at the beginning (or end) of an unnamed macro; to clean the environment. IMPORTANT WARNING:; Do not use this call from within any function (neither compiled nor; interpreted. This should only be used from a unnamed macro; (which starts with a { (curly braces) ). For example, using TROOT::Reset; from within an interpreted function will lead to the unloading of the; dictionary and source file, including the one defining the function being; executed. void SaveContext(); Save the current interpreter context. void SetCutClassName(const char* name = ""TCutG""); Set the default graphical cut class name for the graphics editor; By default the graphics editor creates an instance of a class TCutG.; This functi",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:111,Modifiability,inherit,inheritance,111,". TROOT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TROOT. class TROOT: public TDirectory. R O O T top level object description. The TROOT object is the entry point to the ROOT system.; The single instance of TROOT is accessible via the global gROOT.; Using the gROOT pointer one has access to basically every object; created in a ROOT based program. The TROOT object is essentially a; container of several lists pointing to the main ROOT objects. The following lists are accessible from gROOT object:; gROOT->GetListOfClasses; gROOT->GetListOfColors; gROOT->GetListOfTypes; gROOT->GetListOfGlobals; gROOT->GetListOfGlobalFunctions; gROOT->GetListOfFiles; gROOT->GetListOfMappedFiles; gROOT->GetListOfSockets; gROOT->GetListOfSecContexts; gROOT->GetListOfCanvases; gROOT->GetListOfStyles; gROOT->GetListOfFunctions; gROOT->GetListOfSpecials (for example graphical cuts); gROOT->GetListOfGeometries; gROOT->GetListOfBrowsers; gROOT->GetListOfCleanups; gROOT->GetListOfMessageHandlers. The TROOT class provides also many useful services:; - Get pointer to an object in any of the lists above; - Time utilities TROOT::Time. The ROOT object must be created as a static object. An example; of a main program creating an interactive version is shown below:. Example of a main program. #include ""TRint.h"". int main(int argc, char **argv); {; TRint *theApp = new TRint(""ROOT example"", &argc, argv);. // Init Intrinsics, build all windows, and enter event loop; theApp->Run();. return(0);; }; End of Main program. Function Members (Methods); public:. virtual~TROOT(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectory::Add(TObject* obj, Bool_t replace = kFALSE); voidAddClass(TClass* cl); voidAddClassGenerator(TClassGenerator* gen); static voidTDirectory::AddDirectory(",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:9790,Modifiability,Inherit,InheritsFrom,9790,"onst; virtual Long64_tTDirectory::GetSeekKeys() const; virtual Long64_tTDirectory::GetSeekParent() const; TVirtualPad*GetSelectedPad() const; const TObject*GetSelectedPrimitive() const; TStyle*GetStyle(const char* name) const; virtual const char*TNamed::GetTitle() const; static const char*GetTutorialsDir(); TDataType*GetType(const char* name, Bool_t load = kFALSE) const; virtual UInt_tTObject::GetUniqueID() const; TUUIDTDirectory::GetUUID() const; TProcessUUID*GetUUIDs() const; const char*GetVersion() const; Int_tGetVersionCode() const; Int_tGetVersionDate() const; Int_tGetVersionInt() const; Int_tGetVersionTime() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; voidIdle(UInt_t idleTimeInSec, const char* command = 0); Int_tIgnoreInclude(const char* fname, const char* expandedfname); static Int_tIncreaseDirLevel(); static voidIndentLevel(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; static Bool_tInitialized(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsBatch() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tIsEscaped() const; Bool_tIsExecutingMacro() const; virtual Bool_tIsFolder() const; Bool_tIsInterrupted() const; Bool_tIsLineProcessing() const; virtual Bool_tTDirectory::IsModified() const; Bool_tTObject::IsOnHeap() const; Bool_tIsProofServ() const; Bool_tIsRootFile(const char* filename) const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDirectory::IsWritable() const; Bool_tTObject::IsZombie() const; TClass*LoadClass(const char* name, Bool_t silent = kFALSE) const; Int_tLoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Int_tLoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); virtual voidls(Option_t* option = """") ",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:9856,Modifiability,Inherit,InheritsFrom,9856,"g64_tTDirectory::GetSeekParent() const; TVirtualPad*GetSelectedPad() const; const TObject*GetSelectedPrimitive() const; TStyle*GetStyle(const char* name) const; virtual const char*TNamed::GetTitle() const; static const char*GetTutorialsDir(); TDataType*GetType(const char* name, Bool_t load = kFALSE) const; virtual UInt_tTObject::GetUniqueID() const; TUUIDTDirectory::GetUUID() const; TProcessUUID*GetUUIDs() const; const char*GetVersion() const; Int_tGetVersionCode() const; Int_tGetVersionDate() const; Int_tGetVersionInt() const; Int_tGetVersionTime() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; voidIdle(UInt_t idleTimeInSec, const char* command = 0); Int_tIgnoreInclude(const char* fname, const char* expandedfname); static Int_tIncreaseDirLevel(); static voidIndentLevel(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; static Bool_tInitialized(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsBatch() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tIsEscaped() const; Bool_tIsExecutingMacro() const; virtual Bool_tIsFolder() const; Bool_tIsInterrupted() const; Bool_tIsLineProcessing() const; virtual Bool_tTDirectory::IsModified() const; Bool_tTObject::IsOnHeap() const; Bool_tIsProofServ() const; Bool_tIsRootFile(const char* filename) const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDirectory::IsWritable() const; Bool_tTObject::IsZombie() const; TClass*LoadClass(const char* name, Bool_t silent = kFALSE) const; Int_tLoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Int_tLoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); virtual voidls(Option_t* option = """") const; Long_tMacro(const char* filename, Int_t* error = 0, Bool_t ",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:18051,Modifiability,config,configure,18051,"ic TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. atomic<TApplication*>fApplicationPointer to current application; Bool_tfBatchTrue if session without graphics; TList*fBrowsablesList of browsables; TSeqCollection*fBrowsersList of browsers; Int_tfBuiltDateDate of ROOT built; Int_tfBuiltTimeTime of ROOT built; TSeqCollection*fCanvasesList of canvases; TCollection*fClassGeneratorsList of user defined class generators;; TCollection*fClassesList of classes definition; TSeqCollection*fCleanupsList of recursiveRemove collections; TSeqCollection*fClipboardList of clipbard objects; TSeqCollection*fClosedObjectsList of closed objects from the list of files and sockets, so we can delete them if neededCl.; TSeqCollection*fColorsList of colors; TStringfConfigFeaturesROOT ./configure detected build features; TStringfConfigOptionsROOT ./configure set build options; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; TStringfCutClassNameName of default CutG class in graphics editor; TSeqCollection*fDataSetsList of data sets (TDSet or TChain); TStringfDefCanvasNameName of default canvas; Bool_tfEditHistogramsTrue if histograms can be edited with the mouse; Int_tfEditorModeCurrent Editor mode; TROOT::AListOfEnums_tfEnumsList of enum types; Bool_tfEscapeTrue if ESC has been pressed; Bool_tfExecutingMacroTrue while executing a TMacro; TSeqCollection*fFilesList of files; Bool_tfForceStyleForce setting of current style when reading objects; Bool_tfFromPopUpTrue if command executed from a popup menu; TListOfFunctionTemplates*fFuncTemplateList of global function templates; TCollection*fFunctionsList of analytic functions; TSeqCollection*fGeometriesList of geometries; TStringfGitBranchGit branch; TStringfGitCommitGit commit SHA1 of built; TS",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:18114,Modifiability,config,configure,18114,,MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:19229,Modifiability,variab,variables,19229,this TDirectory; TStringfCutClassNameName of default CutG class in graphics editor; TSeqCollection*fDataSetsList of data sets (TDSet or TChain); TStringfDefCanvasNameName of default canvas; Bool_tfEditHistogramsTrue if histograms can be edited with the mouse; Int_tfEditorModeCurrent Editor mode; TROOT::AListOfEnums_tfEnumsList of enum types; Bool_tfEscapeTrue if ESC has been pressed; Bool_tfExecutingMacroTrue while executing a TMacro; TSeqCollection*fFilesList of files; Bool_tfForceStyleForce setting of current style when reading objects; Bool_tfFromPopUpTrue if command executed from a popup menu; TListOfFunctionTemplates*fFuncTemplateList of global function templates; TCollection*fFunctionsList of analytic functions; TSeqCollection*fGeometriesList of geometries; TStringfGitBranchGit branch; TStringfGitCommitGit commit SHA1 of built; TStringfGitDateDate and time when make was run; TListOfFunctions*fGlobalFunctionsList of global functions; TListOfDataMembers*fGlobalsList of global variables; TInterpreter*fInterpreterCommand interpreter; Bool_tfInterruptTrue if macro should be interrupted; TList*TDirectory::fListList of objects in memory; TSeqCollection*fMappedFilesList of memory mapped files; TSeqCollection*fMessageHandlersList of message handlers; TObject*TDirectory::fMotherpointer to mother of the directory; Bool_tfMustCleanTrue if object destructor scans canvases; TStringTNamed::fNameobject identifier; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; TPluginManager*fPluginManagerKeeps track of plugin library handlers; const TObject*fPrimitiveCurrently selected primitive; TSeqCollection*fProofsList of proof sessions; Bool_tfReadingObjectTrue while reading an object [Deprecated (will be removed in next release); TFolder*fRootFoldertop level folder //root; TSeqCollection*fSecContextsList of security contexts (TSecContext); TVirtualPad*fSelectPadCurrently selected pad; TSeqCollection*fSocketsList of network sockets; TSeqCollection*fSpecialsList of special,MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:19768,Modifiability,plugin,plugin,19768,croTrue while executing a TMacro; TSeqCollection*fFilesList of files; Bool_tfForceStyleForce setting of current style when reading objects; Bool_tfFromPopUpTrue if command executed from a popup menu; TListOfFunctionTemplates*fFuncTemplateList of global function templates; TCollection*fFunctionsList of analytic functions; TSeqCollection*fGeometriesList of geometries; TStringfGitBranchGit branch; TStringfGitCommitGit commit SHA1 of built; TStringfGitDateDate and time when make was run; TListOfFunctions*fGlobalFunctionsList of global functions; TListOfDataMembers*fGlobalsList of global variables; TInterpreter*fInterpreterCommand interpreter; Bool_tfInterruptTrue if macro should be interrupted; TList*TDirectory::fListList of objects in memory; TSeqCollection*fMappedFilesList of memory mapped files; TSeqCollection*fMessageHandlersList of message handlers; TObject*TDirectory::fMotherpointer to mother of the directory; Bool_tfMustCleanTrue if object destructor scans canvases; TStringTNamed::fNameobject identifier; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; TPluginManager*fPluginManagerKeeps track of plugin library handlers; const TObject*fPrimitiveCurrently selected primitive; TSeqCollection*fProofsList of proof sessions; Bool_tfReadingObjectTrue while reading an object [Deprecated (will be removed in next release); TFolder*fRootFoldertop level folder //root; TSeqCollection*fSecContextsList of security contexts (TSecContext); TVirtualPad*fSelectPadCurrently selected pad; TSeqCollection*fSocketsList of network sockets; TSeqCollection*fSpecialsList of special objects; TSeqCollection*fStreamerInfoList of active StreamerInfo classes; TSeqCollection*fStylesList of styles; TSeqCollection*fTasksList of tasks; Int_tfTimerTimer flag; TStringTNamed::fTitleobject title; TCollection*fTypesList of data types definition; TUUIDTDirectory::fUUIDUnique identifier; TProcessUUID*fUUIDsPointer to TProcessID managing TUUIDs; TStringfVersionROOT version (from CMZ VERSQQ) ex 0.,MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:21184,Modifiability,Inherit,Inheritance,21184,"; TSeqCollection*fSpecialsList of special objects; TSeqCollection*fStreamerInfoList of active StreamerInfo classes; TSeqCollection*fStylesList of styles; TSeqCollection*fTasksList of tasks; Int_tfTimerTimer flag; TStringTNamed::fTitleobject title; TCollection*fTypesList of data types definition; TUUIDTDirectory::fUUIDUnique identifier; TProcessUUID*fUUIDsPointer to TProcessID managing TUUIDs; TStringfVersionROOT version (from CMZ VERSQQ) ex 0.05/01; Int_tfVersionCodeROOT version code as used in RVersion.h; Int_tfVersionDateDate of ROOT version (ex 951226); Int_tfVersionIntROOT version in integer format (501); Int_tfVersionTimeTime of ROOT version (ex 1152); static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. private:. Int_tfLineIsProcessingTo synchronize multi-threads; static Int_tfgDirLevelIndentation level for ls(); static Bool_tfgMemCheckTurn on memory leak checker; static Bool_tfgRootInitSingleton initialization flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TDirectory. ←; TROOT. Function documentation; TROOT(); Default ctor. TROOT(const char* name, const char* title, VoidFuncPtr_t* initfunc = 0); Initialize the ROOT system. The creation of the TROOT object initializes; the ROOT system. It must be the first ROOT related action that is; performed by a program. The TROOT object must be created on the stack; (can not be called via new since ""operator new"" is protected). The; TROOT object is either created as a global object (outside the main(); program), or it is one of the first objects created in main().; Make sure that the TROOT object stays in scope for as long as ROOT; related actions are performed. TROOT is a so called singleton so; only one instance of it can be created. The single TROOT object can; always be accessed via the global pointer gROOT.; The name and title arguments can be used to identify the running; application. The initfunc argument can contain an array of; function pointers (last elemen",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:22293,Modifiability,extend,extend,22293,"* name, const char* title, VoidFuncPtr_t* initfunc = 0); Initialize the ROOT system. The creation of the TROOT object initializes; the ROOT system. It must be the first ROOT related action that is; performed by a program. The TROOT object must be created on the stack; (can not be called via new since ""operator new"" is protected). The; TROOT object is either created as a global object (outside the main(); program), or it is one of the first objects created in main().; Make sure that the TROOT object stays in scope for as long as ROOT; related actions are performed. TROOT is a so called singleton so; only one instance of it can be created. The single TROOT object can; always be accessed via the global pointer gROOT.; The name and title arguments can be used to identify the running; application. The initfunc argument can contain an array of; function pointers (last element must be 0). These functions are; executed at the end of the constructor. This way one can easily; extend the ROOT system without adding permanent dependencies; (e.g. the graphics system is initialized via such a function). ~TROOT(); Clean up and free resources used by ROOT (files, network sockets,; shared memory segments, etc.). void AddClass(TClass* cl); Add a class to the list and map of classes.; This routine is deprecated, use TClass::AddClass directly. void AddClassGenerator(TClassGenerator* gen); Add a class generator. This generator will be called by TClass::GetClass; in case its does not find a loaded rootcint dictionary to request the; creation of a TClass object. void Browse(TBrowser* b); Add browsable objects to TBrowser. Bool_t ClassSaved(TClass* cl); return class status bit kClassSaved for class cl; This function is called by the SavePrimitive functions writing; the C++ code for an object. void CloseFiles(); Close any files and sockets that gROOT knows about.; This can be used to insures that the files and sockets are closed before any library is unloaded!. void EndOfProcessCleanups(); Ex",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:26809,Modifiability,variab,variable,26809," typedefs template arguments, typedefed name). TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; Return pointer to class with name. Obsolete, use TClass::GetClass directly. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; Return pointer to class from its name. Obsolete, use TClass::GetClass directly; See TClass::GetClass. TColor * GetColor(Int_t color) const; Return address of color with index color. TCanvas * MakeDefCanvas() const; Return a default canvas. TDataType * GetType(const char* name, Bool_t load = kFALSE) const; Return pointer to type with name. TFile * GetFile(const char* name) const; Return pointer to file with name. TStyle * GetStyle(const char* name) const; Return pointer to style with name. TObject * GetFunction(const char* name) const; Return pointer to function with name. TFunctionTemplate * GetFunctionTemplate(const char* name). TGlobal * GetGlobal(const char* name, Bool_t load = kFALSE) const; Return pointer to global variable by name. If load is true force; reading of all currently defined globals from CINT (more expensive). TGlobal * GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; Return pointer to global variable with address addr. TListOfFunctions * GetGlobalFunctions(); Internal routine returning, and creating if necessary, the list; of global function. TCollection * GetListOfFunctionOverloads(const char* name) const; Return the collection of functions named ""name"". TFunction * GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); Return pointer to global function by name.; If params != 0 it will also resolve overloading other it returns the first; name match.; If params == 0 and load is true force reading of all currently defined; global functions from Cling.; The param string must be of the form: ""3189,\""aap\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFA",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:27013,Modifiability,variab,variable,27013,"y. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; Return pointer to class from its name. Obsolete, use TClass::GetClass directly; See TClass::GetClass. TColor * GetColor(Int_t color) const; Return address of color with index color. TCanvas * MakeDefCanvas() const; Return a default canvas. TDataType * GetType(const char* name, Bool_t load = kFALSE) const; Return pointer to type with name. TFile * GetFile(const char* name) const; Return pointer to file with name. TStyle * GetStyle(const char* name) const; Return pointer to style with name. TObject * GetFunction(const char* name) const; Return pointer to function with name. TFunctionTemplate * GetFunctionTemplate(const char* name). TGlobal * GetGlobal(const char* name, Bool_t load = kFALSE) const; Return pointer to global variable by name. If load is true force; reading of all currently defined globals from CINT (more expensive). TGlobal * GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; Return pointer to global variable with address addr. TListOfFunctions * GetGlobalFunctions(); Internal routine returning, and creating if necessary, the list; of global function. TCollection * GetListOfFunctionOverloads(const char* name) const; Return the collection of functions named ""name"". TFunction * GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); Return pointer to global function by name.; If params != 0 it will also resolve overloading other it returns the first; name match.; If params == 0 and load is true force reading of all currently defined; global functions from Cling.; The param string must be of the form: ""3189,\""aap\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); Return pointer to global function by name. If proto != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more expensive).; The prot",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:34076,Modifiability,variab,variable,34076,". On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode. In; particular, error will equal to TInterpreter::kProcessing until the; CINT interpreted thread has finished executing the line.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineSync(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed synchronously (i.e. it will; only return when the CINT interpreter thread has finished executing; the line). On non-Win32 platforms there is no difference between; ProcessLine() and ProcessLineSync().; The possible error codes are defined by TInterpreter::EErrorCode.; Returns the result of the command, cast to a Long_t. Long_t ProcessLineFast(const char* line, Int_t* error = 0); Process interpreter command directly via CINT interpreter.; Only executable statements are allowed (no variable declarations),; In all other cases use TROOT::ProcessLine().; The possible error codes are defined by TInterpreter::EErrorCode. void ReadGitInfo(); Read Git commit information and branch name from the; etc/gitinfo.txt file. Bool_t ReadingObject() const; Deprecated (will be removed in next release). void SetReadingObject(Bool_t flag = kTRUE). const char * GetGitDate(); Return date/time make was run. void RefreshBrowsers(); Refresh all browsers. Call this method when some command line; command or script has changed the browser contents. Not needed; for objects that have the kMustCleanup bit set. Most useful to; update browsers that show the file system or other objects external; to the running ROOT session. void RegisterModule(const char* modulename, const char** headers, const char** includePaths, const char* payLoadCode, const char* fwdDeclCode, void(*)() triggerFunc, const TROOT::FwdDeclArgsToKeepCollection_t& fwdDeclsArgToSkip, const char** classesHeaders); Called by static dictionary i",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:36877,Modifiability,extend,extend,36877,"ted. This should only be used from a unnamed macro; (which starts with a { (curly braces) ). For example, using TROOT::Reset; from within an interpreted function will lead to the unloading of the; dictionary and source file, including the one defining the function being; executed. void SaveContext(); Save the current interpreter context. void SetCutClassName(const char* name = ""TCutG""); Set the default graphical cut class name for the graphics editor; By default the graphics editor creates an instance of a class TCutG.; This function may be called to specify a different class that MUST; derive from TCutG. void SetEditorMode(const char* mode = """"); Set editor mode. void SetStyle(const char* stylename = ""Default""); Change current style to style with name stylename. Int_t DecreaseDirLevel(); Decrease the indentation level for ls(). Int_t GetDirLevel(); return directory level. const char * GetMacroPath(); Get macro search path. Static utility function. void SetMacroPath(const char* newpath); Set or extend the macro search path. Static utility function.; If newpath=0 or """" reset to value specified in the rootrc file. Int_t IncreaseDirLevel(); Increase the indentation level for ls(). void IndentLevel(); Functions used by ls() to indent an object hierarchy. Bool_t Initialized(); Return kTRUE if the TROOT object has been initialized. Bool_t MemCheck(); Return kTRUE if the memory leak checker is on. void SetDirLevel(Int_t level = 0); Return Indentation level for ls(). Int_t ConvertVersionCode2Int(Int_t code); Convert version code to an integer, i.e. 331527 -> 51507. Int_t ConvertVersionInt2Code(Int_t v); Convert version as an integer to version code as used in RVersion.h. Int_t RootVersionCode(); Return ROOT version code as defined in RVersion.h. const char**& GetExtraInterpreterArgs(). const char * GetTutorialsDir(); Get the tuorials directory in the installtion. Static utility function. TROOT(const TROOT& ). TROOT& operator=(const TROOT& ). void * operator new(size_t l); { ",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:4706,Performance,load,load,4706,"ocessCleanups(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TKey*TDirectory::FindKey(const char*) const; virtual TKey*TDirectory::FindKeyAny(const char*) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*FindObjectAny(const char* name) const; virtual TObject*FindObjectAnyFile(const char* name) const; const char*FindObjectClassName(const char* name) const; const char*FindObjectPathName(const TObject* obj) const; TObject*FindSpecialObject(const char* name, void*& where); TClass*FindSTLClass(const char* name, Bool_t load, Bool_t silent = kFALSE) const; voidForceStyle(Bool_t force = kTRUE); Bool_tFromPopUp() const; virtual TObject*TDirectory::Get(const char* namecycle); TApplication*GetApplication() const; virtual Int_tTDirectory::GetBufferSize() const; Int_tGetBuiltDate() const; Int_tGetBuiltTime() const; TClass*GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; TClass*GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; TSeqCollection*GetClipboard() const; TColor*GetColor(Int_t color) const; const char*GetConfigFeatures() const; const char*GetConfigOptions() const; const char*GetCutClassName() const; const char*GetDefCanvasName() const; virtual TDirectory*TDirectory::GetDirectory(const char* namecycle, Bool_t printError = false, const char* funcname = ""GetDirectory""); static Int_tGetDirLevel(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetEditHistograms() const; Int_tGetEditorMode() const",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:5042,Performance,load,load,5042,"al voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TKey*TDirectory::FindKey(const char*) const; virtual TKey*TDirectory::FindKeyAny(const char*) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*FindObjectAny(const char* name) const; virtual TObject*FindObjectAnyFile(const char* name) const; const char*FindObjectClassName(const char* name) const; const char*FindObjectPathName(const TObject* obj) const; TObject*FindSpecialObject(const char* name, void*& where); TClass*FindSTLClass(const char* name, Bool_t load, Bool_t silent = kFALSE) const; voidForceStyle(Bool_t force = kTRUE); Bool_tFromPopUp() const; virtual TObject*TDirectory::Get(const char* namecycle); TApplication*GetApplication() const; virtual Int_tTDirectory::GetBufferSize() const; Int_tGetBuiltDate() const; Int_tGetBuiltTime() const; TClass*GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; TClass*GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; TSeqCollection*GetClipboard() const; TColor*GetColor(Int_t color) const; const char*GetConfigFeatures() const; const char*GetConfigOptions() const; const char*GetCutClassName() const; const char*GetDefCanvasName() const; virtual TDirectory*TDirectory::GetDirectory(const char* namecycle, Bool_t printError = false, const char* funcname = ""GetDirectory""); static Int_tGetDirLevel(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetEditHistograms() const; Int_tGetEditorMode() const; static const char**&GetExtraInterpreterArgs(); virtual TFile*GetFile() const; TFile*GetFile(const char* name) const; Bool_tGetForceStyle() const; TObject*GetFunction(const char* name) const; TFunctionTemplate*GetFunctionTemplate(const char* name); TObject*GetGeometry(const char* name) const; const char*GetGitBranch() const; const ch",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:5137,Performance,load,load,5137,"ffer(char*& buffer); virtual TKey*TDirectory::FindKey(const char*) const; virtual TKey*TDirectory::FindKeyAny(const char*) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*FindObjectAny(const char* name) const; virtual TObject*FindObjectAnyFile(const char* name) const; const char*FindObjectClassName(const char* name) const; const char*FindObjectPathName(const TObject* obj) const; TObject*FindSpecialObject(const char* name, void*& where); TClass*FindSTLClass(const char* name, Bool_t load, Bool_t silent = kFALSE) const; voidForceStyle(Bool_t force = kTRUE); Bool_tFromPopUp() const; virtual TObject*TDirectory::Get(const char* namecycle); TApplication*GetApplication() const; virtual Int_tTDirectory::GetBufferSize() const; Int_tGetBuiltDate() const; Int_tGetBuiltTime() const; TClass*GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; TClass*GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; TSeqCollection*GetClipboard() const; TColor*GetColor(Int_t color) const; const char*GetConfigFeatures() const; const char*GetConfigOptions() const; const char*GetCutClassName() const; const char*GetDefCanvasName() const; virtual TDirectory*TDirectory::GetDirectory(const char* namecycle, Bool_t printError = false, const char* funcname = ""GetDirectory""); static Int_tGetDirLevel(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetEditHistograms() const; Int_tGetEditorMode() const; static const char**&GetExtraInterpreterArgs(); virtual TFile*GetFile() const; TFile*GetFile(const char* name) const; Bool_tGetForceStyle() const; TObject*GetFunction(const char* name) const; TFunctionTemplate*GetFunctionTemplate(const char* name); TObject*GetGeometry(const char* name) const; const char*GetGitBranch() const; const char*GetGitCommit() const; const char*GetGitDate(); TGlobal*GetGlobal(const char* name, Bool_t lo",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:6138,Performance,load,load,6138,"d = kTRUE, Bool_t silent = kFALSE) const; TSeqCollection*GetClipboard() const; TColor*GetColor(Int_t color) const; const char*GetConfigFeatures() const; const char*GetConfigOptions() const; const char*GetCutClassName() const; const char*GetDefCanvasName() const; virtual TDirectory*TDirectory::GetDirectory(const char* namecycle, Bool_t printError = false, const char* funcname = ""GetDirectory""); static Int_tGetDirLevel(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetEditHistograms() const; Int_tGetEditorMode() const; static const char**&GetExtraInterpreterArgs(); virtual TFile*GetFile() const; TFile*GetFile(const char* name) const; Bool_tGetForceStyle() const; TObject*GetFunction(const char* name) const; TFunctionTemplate*GetFunctionTemplate(const char* name); TObject*GetGeometry(const char* name) const; const char*GetGitBranch() const; const char*GetGitCommit() const; const char*GetGitDate(); TGlobal*GetGlobal(const char* name, Bool_t load = kFALSE) const; TGlobal*GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; TFunction*GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); TFunction*GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); virtual const char*TObject::GetIconName() const; TInterpreter*GetInterpreter() const; virtual TKey*TDirectory::GetKey(const char*, Short_t = 9999) const; virtual TList*TDirectory::GetList() const; TList*GetListOfBrowsables() const; TSeqCollection*GetListOfBrowsers() const; TSeqCollection*GetListOfCanvases() const; TCollection*GetListOfClasses() const; TCollection*GetListOfClassGenerators() const; TSeqCollection*GetListOfCleanups() const; TSeqCollection*GetListOfClosedObjects() const; TSeqCollection*GetListOfColors() const; TSeqCollection*GetListOfDataSets() const; TCollection*GetListOfEnums(Bool_t load = kFALSE); TSeqCollection*GetListOfFiles() const; TCollection*GetListOfFunctionOverloads(const char* name)",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:6205,Performance,load,load,6205,"rd() const; TColor*GetColor(Int_t color) const; const char*GetConfigFeatures() const; const char*GetConfigOptions() const; const char*GetCutClassName() const; const char*GetDefCanvasName() const; virtual TDirectory*TDirectory::GetDirectory(const char* namecycle, Bool_t printError = false, const char* funcname = ""GetDirectory""); static Int_tGetDirLevel(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetEditHistograms() const; Int_tGetEditorMode() const; static const char**&GetExtraInterpreterArgs(); virtual TFile*GetFile() const; TFile*GetFile(const char* name) const; Bool_tGetForceStyle() const; TObject*GetFunction(const char* name) const; TFunctionTemplate*GetFunctionTemplate(const char* name); TObject*GetGeometry(const char* name) const; const char*GetGitBranch() const; const char*GetGitCommit() const; const char*GetGitDate(); TGlobal*GetGlobal(const char* name, Bool_t load = kFALSE) const; TGlobal*GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; TFunction*GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); TFunction*GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); virtual const char*TObject::GetIconName() const; TInterpreter*GetInterpreter() const; virtual TKey*TDirectory::GetKey(const char*, Short_t = 9999) const; virtual TList*TDirectory::GetList() const; TList*GetListOfBrowsables() const; TSeqCollection*GetListOfBrowsers() const; TSeqCollection*GetListOfCanvases() const; TCollection*GetListOfClasses() const; TCollection*GetListOfClassGenerators() const; TSeqCollection*GetListOfCleanups() const; TSeqCollection*GetListOfClosedObjects() const; TSeqCollection*GetListOfColors() const; TSeqCollection*GetListOfDataSets() const; TCollection*GetListOfEnums(Bool_t load = kFALSE); TSeqCollection*GetListOfFiles() const; TCollection*GetListOfFunctionOverloads(const char* name) const; TCollection*GetListOfFunctions() const; TCollection*GetList",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:6304,Performance,load,load,6304,"tConfigOptions() const; const char*GetCutClassName() const; const char*GetDefCanvasName() const; virtual TDirectory*TDirectory::GetDirectory(const char* namecycle, Bool_t printError = false, const char* funcname = ""GetDirectory""); static Int_tGetDirLevel(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetEditHistograms() const; Int_tGetEditorMode() const; static const char**&GetExtraInterpreterArgs(); virtual TFile*GetFile() const; TFile*GetFile(const char* name) const; Bool_tGetForceStyle() const; TObject*GetFunction(const char* name) const; TFunctionTemplate*GetFunctionTemplate(const char* name); TObject*GetGeometry(const char* name) const; const char*GetGitBranch() const; const char*GetGitCommit() const; const char*GetGitDate(); TGlobal*GetGlobal(const char* name, Bool_t load = kFALSE) const; TGlobal*GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; TFunction*GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); TFunction*GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); virtual const char*TObject::GetIconName() const; TInterpreter*GetInterpreter() const; virtual TKey*TDirectory::GetKey(const char*, Short_t = 9999) const; virtual TList*TDirectory::GetList() const; TList*GetListOfBrowsables() const; TSeqCollection*GetListOfBrowsers() const; TSeqCollection*GetListOfCanvases() const; TCollection*GetListOfClasses() const; TCollection*GetListOfClassGenerators() const; TSeqCollection*GetListOfCleanups() const; TSeqCollection*GetListOfClosedObjects() const; TSeqCollection*GetListOfColors() const; TSeqCollection*GetListOfDataSets() const; TCollection*GetListOfEnums(Bool_t load = kFALSE); TSeqCollection*GetListOfFiles() const; TCollection*GetListOfFunctionOverloads(const char* name) const; TCollection*GetListOfFunctions() const; TCollection*GetListOfFunctionTemplates(); TSeqCollection*GetListOfGeometries() const; TCollection*GetListOfGlobalFunct",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:6409,Performance,load,load,6409,"TDirectory*TDirectory::GetDirectory(const char* namecycle, Bool_t printError = false, const char* funcname = ""GetDirectory""); static Int_tGetDirLevel(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetEditHistograms() const; Int_tGetEditorMode() const; static const char**&GetExtraInterpreterArgs(); virtual TFile*GetFile() const; TFile*GetFile(const char* name) const; Bool_tGetForceStyle() const; TObject*GetFunction(const char* name) const; TFunctionTemplate*GetFunctionTemplate(const char* name); TObject*GetGeometry(const char* name) const; const char*GetGitBranch() const; const char*GetGitCommit() const; const char*GetGitDate(); TGlobal*GetGlobal(const char* name, Bool_t load = kFALSE) const; TGlobal*GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; TFunction*GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); TFunction*GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); virtual const char*TObject::GetIconName() const; TInterpreter*GetInterpreter() const; virtual TKey*TDirectory::GetKey(const char*, Short_t = 9999) const; virtual TList*TDirectory::GetList() const; TList*GetListOfBrowsables() const; TSeqCollection*GetListOfBrowsers() const; TSeqCollection*GetListOfCanvases() const; TCollection*GetListOfClasses() const; TCollection*GetListOfClassGenerators() const; TSeqCollection*GetListOfCleanups() const; TSeqCollection*GetListOfClosedObjects() const; TSeqCollection*GetListOfColors() const; TSeqCollection*GetListOfDataSets() const; TCollection*GetListOfEnums(Bool_t load = kFALSE); TSeqCollection*GetListOfFiles() const; TCollection*GetListOfFunctionOverloads(const char* name) const; TCollection*GetListOfFunctions() const; TCollection*GetListOfFunctionTemplates(); TSeqCollection*GetListOfGeometries() const; TCollection*GetListOfGlobalFunctions(Bool_t load = kFALSE); TCollection*GetListOfGlobals(Bool_t load = kFALSE); virtual TList*TDirectory:",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:7030,Performance,load,load,7030,"nst; const char*GetGitCommit() const; const char*GetGitDate(); TGlobal*GetGlobal(const char* name, Bool_t load = kFALSE) const; TGlobal*GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; TFunction*GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); TFunction*GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); virtual const char*TObject::GetIconName() const; TInterpreter*GetInterpreter() const; virtual TKey*TDirectory::GetKey(const char*, Short_t = 9999) const; virtual TList*TDirectory::GetList() const; TList*GetListOfBrowsables() const; TSeqCollection*GetListOfBrowsers() const; TSeqCollection*GetListOfCanvases() const; TCollection*GetListOfClasses() const; TCollection*GetListOfClassGenerators() const; TSeqCollection*GetListOfCleanups() const; TSeqCollection*GetListOfClosedObjects() const; TSeqCollection*GetListOfColors() const; TSeqCollection*GetListOfDataSets() const; TCollection*GetListOfEnums(Bool_t load = kFALSE); TSeqCollection*GetListOfFiles() const; TCollection*GetListOfFunctionOverloads(const char* name) const; TCollection*GetListOfFunctions() const; TCollection*GetListOfFunctionTemplates(); TSeqCollection*GetListOfGeometries() const; TCollection*GetListOfGlobalFunctions(Bool_t load = kFALSE); TCollection*GetListOfGlobals(Bool_t load = kFALSE); virtual TList*TDirectory::GetListOfKeys() const; TSeqCollection*GetListOfMappedFiles() const; TSeqCollection*GetListOfMessageHandlers() const; TSeqCollection*GetListOfProofs() const; TSeqCollection*GetListOfSecContexts() const; TSeqCollection*GetListOfSockets() const; TSeqCollection*GetListOfSpecials() const; TSeqCollection*GetListOfStreamerInfo() const; TSeqCollection*GetListOfStyles() const; TSeqCollection*GetListOfTasks() const; TCollection*GetListOfTypes(Bool_t load = kFALSE); static const char*GetMacroPath(); virtual TObject*TDirectory::GetMother() const; virtual TDirectory*TDirectory::GetMotherDir() const; virtual const char*TNamed:",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:7319,Performance,load,load,7319,"Function*GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); virtual const char*TObject::GetIconName() const; TInterpreter*GetInterpreter() const; virtual TKey*TDirectory::GetKey(const char*, Short_t = 9999) const; virtual TList*TDirectory::GetList() const; TList*GetListOfBrowsables() const; TSeqCollection*GetListOfBrowsers() const; TSeqCollection*GetListOfCanvases() const; TCollection*GetListOfClasses() const; TCollection*GetListOfClassGenerators() const; TSeqCollection*GetListOfCleanups() const; TSeqCollection*GetListOfClosedObjects() const; TSeqCollection*GetListOfColors() const; TSeqCollection*GetListOfDataSets() const; TCollection*GetListOfEnums(Bool_t load = kFALSE); TSeqCollection*GetListOfFiles() const; TCollection*GetListOfFunctionOverloads(const char* name) const; TCollection*GetListOfFunctions() const; TCollection*GetListOfFunctionTemplates(); TSeqCollection*GetListOfGeometries() const; TCollection*GetListOfGlobalFunctions(Bool_t load = kFALSE); TCollection*GetListOfGlobals(Bool_t load = kFALSE); virtual TList*TDirectory::GetListOfKeys() const; TSeqCollection*GetListOfMappedFiles() const; TSeqCollection*GetListOfMessageHandlers() const; TSeqCollection*GetListOfProofs() const; TSeqCollection*GetListOfSecContexts() const; TSeqCollection*GetListOfSockets() const; TSeqCollection*GetListOfSpecials() const; TSeqCollection*GetListOfStreamerInfo() const; TSeqCollection*GetListOfStyles() const; TSeqCollection*GetListOfTasks() const; TCollection*GetListOfTypes(Bool_t load = kFALSE); static const char*GetMacroPath(); virtual TObject*TDirectory::GetMother() const; virtual TDirectory*TDirectory::GetMotherDir() const; virtual const char*TNamed::GetName() const; virtual Int_tTDirectory::GetNbytesKeys() const; Int_tGetNclasses() const; virtual Int_tTDirectory::GetNkeys() const; Int_tGetNtypes() const; virtual void*TDirectory::GetObjectChecked(const char* namecycle, const char* classname); virtual void*TDirectory::GetObjectChecked",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:7371,Performance,load,load,7371,"name, const char* proto = 0, Bool_t load = kFALSE); virtual const char*TObject::GetIconName() const; TInterpreter*GetInterpreter() const; virtual TKey*TDirectory::GetKey(const char*, Short_t = 9999) const; virtual TList*TDirectory::GetList() const; TList*GetListOfBrowsables() const; TSeqCollection*GetListOfBrowsers() const; TSeqCollection*GetListOfCanvases() const; TCollection*GetListOfClasses() const; TCollection*GetListOfClassGenerators() const; TSeqCollection*GetListOfCleanups() const; TSeqCollection*GetListOfClosedObjects() const; TSeqCollection*GetListOfColors() const; TSeqCollection*GetListOfDataSets() const; TCollection*GetListOfEnums(Bool_t load = kFALSE); TSeqCollection*GetListOfFiles() const; TCollection*GetListOfFunctionOverloads(const char* name) const; TCollection*GetListOfFunctions() const; TCollection*GetListOfFunctionTemplates(); TSeqCollection*GetListOfGeometries() const; TCollection*GetListOfGlobalFunctions(Bool_t load = kFALSE); TCollection*GetListOfGlobals(Bool_t load = kFALSE); virtual TList*TDirectory::GetListOfKeys() const; TSeqCollection*GetListOfMappedFiles() const; TSeqCollection*GetListOfMessageHandlers() const; TSeqCollection*GetListOfProofs() const; TSeqCollection*GetListOfSecContexts() const; TSeqCollection*GetListOfSockets() const; TSeqCollection*GetListOfSpecials() const; TSeqCollection*GetListOfStreamerInfo() const; TSeqCollection*GetListOfStyles() const; TSeqCollection*GetListOfTasks() const; TCollection*GetListOfTypes(Bool_t load = kFALSE); static const char*GetMacroPath(); virtual TObject*TDirectory::GetMother() const; virtual TDirectory*TDirectory::GetMotherDir() const; virtual const char*TNamed::GetName() const; virtual Int_tTDirectory::GetNbytesKeys() const; Int_tGetNclasses() const; virtual Int_tTDirectory::GetNkeys() const; Int_tGetNtypes() const; virtual void*TDirectory::GetObjectChecked(const char* namecycle, const char* classname); virtual void*TDirectory::GetObjectChecked(const char* namecycle, const TClass* cl); virtual c",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:7857,Performance,load,load,7857," const; TSeqCollection*GetListOfClosedObjects() const; TSeqCollection*GetListOfColors() const; TSeqCollection*GetListOfDataSets() const; TCollection*GetListOfEnums(Bool_t load = kFALSE); TSeqCollection*GetListOfFiles() const; TCollection*GetListOfFunctionOverloads(const char* name) const; TCollection*GetListOfFunctions() const; TCollection*GetListOfFunctionTemplates(); TSeqCollection*GetListOfGeometries() const; TCollection*GetListOfGlobalFunctions(Bool_t load = kFALSE); TCollection*GetListOfGlobals(Bool_t load = kFALSE); virtual TList*TDirectory::GetListOfKeys() const; TSeqCollection*GetListOfMappedFiles() const; TSeqCollection*GetListOfMessageHandlers() const; TSeqCollection*GetListOfProofs() const; TSeqCollection*GetListOfSecContexts() const; TSeqCollection*GetListOfSockets() const; TSeqCollection*GetListOfSpecials() const; TSeqCollection*GetListOfStreamerInfo() const; TSeqCollection*GetListOfStyles() const; TSeqCollection*GetListOfTasks() const; TCollection*GetListOfTypes(Bool_t load = kFALSE); static const char*GetMacroPath(); virtual TObject*TDirectory::GetMother() const; virtual TDirectory*TDirectory::GetMotherDir() const; virtual const char*TNamed::GetName() const; virtual Int_tTDirectory::GetNbytesKeys() const; Int_tGetNclasses() const; virtual Int_tTDirectory::GetNkeys() const; Int_tGetNtypes() const; virtual void*TDirectory::GetObjectChecked(const char* namecycle, const char* classname); virtual void*TDirectory::GetObjectChecked(const char* namecycle, const TClass* cl); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual void*TDirectory::GetObjectUnchecked(const char* namecycle); virtual Option_t*TObject::GetOption() const; virtual const char*TDirectory::GetPath() const; virtual const char*TDirectory::GetPathStatic() const; TPluginManager*GetPluginManager() const; TFolder*GetRootFolder() const; virtual Long64_tTDirectory::GetSeekDir() const; virtual Long64_tTDirectory::GetSeekKeys() const; virtual L",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:9148,Performance,load,load,9148,"GetNkeys() const; Int_tGetNtypes() const; virtual void*TDirectory::GetObjectChecked(const char* namecycle, const char* classname); virtual void*TDirectory::GetObjectChecked(const char* namecycle, const TClass* cl); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual void*TDirectory::GetObjectUnchecked(const char* namecycle); virtual Option_t*TObject::GetOption() const; virtual const char*TDirectory::GetPath() const; virtual const char*TDirectory::GetPathStatic() const; TPluginManager*GetPluginManager() const; TFolder*GetRootFolder() const; virtual Long64_tTDirectory::GetSeekDir() const; virtual Long64_tTDirectory::GetSeekKeys() const; virtual Long64_tTDirectory::GetSeekParent() const; TVirtualPad*GetSelectedPad() const; const TObject*GetSelectedPrimitive() const; TStyle*GetStyle(const char* name) const; virtual const char*TNamed::GetTitle() const; static const char*GetTutorialsDir(); TDataType*GetType(const char* name, Bool_t load = kFALSE) const; virtual UInt_tTObject::GetUniqueID() const; TUUIDTDirectory::GetUUID() const; TProcessUUID*GetUUIDs() const; const char*GetVersion() const; Int_tGetVersionCode() const; Int_tGetVersionDate() const; Int_tGetVersionInt() const; Int_tGetVersionTime() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; voidIdle(UInt_t idleTimeInSec, const char* command = 0); Int_tIgnoreInclude(const char* fname, const char* expandedfname); static Int_tIncreaseDirLevel(); static voidIndentLevel(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; static Bool_tInitialized(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsBatch() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tIsEscaped() const; Bool_tIsExecutingM",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:10538,Performance,Load,LoadClass,10538," const char* command = 0); Int_tIgnoreInclude(const char* fname, const char* expandedfname); static Int_tIncreaseDirLevel(); static voidIndentLevel(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; static Bool_tInitialized(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsBatch() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tIsEscaped() const; Bool_tIsExecutingMacro() const; virtual Bool_tIsFolder() const; Bool_tIsInterrupted() const; Bool_tIsLineProcessing() const; virtual Bool_tTDirectory::IsModified() const; Bool_tTObject::IsOnHeap() const; Bool_tIsProofServ() const; Bool_tIsRootFile(const char* filename) const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDirectory::IsWritable() const; Bool_tTObject::IsZombie() const; TClass*LoadClass(const char* name, Bool_t silent = kFALSE) const; Int_tLoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Int_tLoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); virtual voidls(Option_t* option = """") const; Long_tMacro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); TCanvas*MakeDefCanvas() const; voidTObject::MayNotUse(const char* method) const; static Bool_tMemCheck(); voidMessage(Int_t id, const TObject* obj); virtual TDirectory*TDirectory::mkdir(const char* name, const char* title = """"); Bool_tMustClean() const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual TFile*TDirectory::OpenFile(const char*, Option_t* = """", const char* = """", Int_t = 1, Int_t = 0); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](vo",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:20999,Performance,multi-thread,multi-threads,20999,"of security contexts (TSecContext); TVirtualPad*fSelectPadCurrently selected pad; TSeqCollection*fSocketsList of network sockets; TSeqCollection*fSpecialsList of special objects; TSeqCollection*fStreamerInfoList of active StreamerInfo classes; TSeqCollection*fStylesList of styles; TSeqCollection*fTasksList of tasks; Int_tfTimerTimer flag; TStringTNamed::fTitleobject title; TCollection*fTypesList of data types definition; TUUIDTDirectory::fUUIDUnique identifier; TProcessUUID*fUUIDsPointer to TProcessID managing TUUIDs; TStringfVersionROOT version (from CMZ VERSQQ) ex 0.05/01; Int_tfVersionCodeROOT version code as used in RVersion.h; Int_tfVersionDateDate of ROOT version (ex 951226); Int_tfVersionIntROOT version in integer format (501); Int_tfVersionTimeTime of ROOT version (ex 1152); static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. private:. Int_tfLineIsProcessingTo synchronize multi-threads; static Int_tfgDirLevelIndentation level for ls(); static Bool_tfgMemCheckTurn on memory leak checker; static Bool_tfgRootInitSingleton initialization flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TDirectory. ←; TROOT. Function documentation; TROOT(); Default ctor. TROOT(const char* name, const char* title, VoidFuncPtr_t* initfunc = 0); Initialize the ROOT system. The creation of the TROOT object initializes; the ROOT system. It must be the first ROOT related action that is; performed by a program. The TROOT object must be created on the stack; (can not be called via new since ""operator new"" is protected). The; TROOT object is either created as a global object (outside the main(); program), or it is one of the first objects created in main().; Make sure that the TROOT object stays in scope for as long as ROOT; related actions are performed. TROOT is a so called singleton so; only one instance of it can be created. The single TROOT object can; always be accessed via the global pointer gROOT.; The name and title arguments",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:21510,Performance,perform,performed,21510,"Directory::fUUIDUnique identifier; TProcessUUID*fUUIDsPointer to TProcessID managing TUUIDs; TStringfVersionROOT version (from CMZ VERSQQ) ex 0.05/01; Int_tfVersionCodeROOT version code as used in RVersion.h; Int_tfVersionDateDate of ROOT version (ex 951226); Int_tfVersionIntROOT version in integer format (501); Int_tfVersionTimeTime of ROOT version (ex 1152); static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. private:. Int_tfLineIsProcessingTo synchronize multi-threads; static Int_tfgDirLevelIndentation level for ls(); static Bool_tfgMemCheckTurn on memory leak checker; static Bool_tfgRootInitSingleton initialization flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TDirectory. ←; TROOT. Function documentation; TROOT(); Default ctor. TROOT(const char* name, const char* title, VoidFuncPtr_t* initfunc = 0); Initialize the ROOT system. The creation of the TROOT object initializes; the ROOT system. It must be the first ROOT related action that is; performed by a program. The TROOT object must be created on the stack; (can not be called via new since ""operator new"" is protected). The; TROOT object is either created as a global object (outside the main(); program), or it is one of the first objects created in main().; Make sure that the TROOT object stays in scope for as long as ROOT; related actions are performed. TROOT is a so called singleton so; only one instance of it can be created. The single TROOT object can; always be accessed via the global pointer gROOT.; The name and title arguments can be used to identify the running; application. The initfunc argument can contain an array of; function pointers (last element must be 0). These functions are; executed at the end of the constructor. This way one can easily; extend the ROOT system without adding permanent dependencies; (e.g. the graphics system is initialized via such a function). ~TROOT(); Clean up and free resources used by ROOT (files, network sockets,; s",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:21872,Performance,perform,performed,21872,"of ROOT version (ex 1152); static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. private:. Int_tfLineIsProcessingTo synchronize multi-threads; static Int_tfgDirLevelIndentation level for ls(); static Bool_tfgMemCheckTurn on memory leak checker; static Bool_tfgRootInitSingleton initialization flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TDirectory. ←; TROOT. Function documentation; TROOT(); Default ctor. TROOT(const char* name, const char* title, VoidFuncPtr_t* initfunc = 0); Initialize the ROOT system. The creation of the TROOT object initializes; the ROOT system. It must be the first ROOT related action that is; performed by a program. The TROOT object must be created on the stack; (can not be called via new since ""operator new"" is protected). The; TROOT object is either created as a global object (outside the main(); program), or it is one of the first objects created in main().; Make sure that the TROOT object stays in scope for as long as ROOT; related actions are performed. TROOT is a so called singleton so; only one instance of it can be created. The single TROOT object can; always be accessed via the global pointer gROOT.; The name and title arguments can be used to identify the running; application. The initfunc argument can contain an array of; function pointers (last element must be 0). These functions are; executed at the end of the constructor. This way one can easily; extend the ROOT system without adding permanent dependencies; (e.g. the graphics system is initialized via such a function). ~TROOT(); Clean up and free resources used by ROOT (files, network sockets,; shared memory segments, etc.). void AddClass(TClass* cl); Add a class to the list and map of classes.; This routine is deprecated, use TClass::AddClass directly. void AddClassGenerator(TClassGenerator* gen); Add a class generator. This generator will be called by TClass::GetClass; in case its does not find a loaded rootcint dictionary ",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:22805,Performance,load,loaded,22805,"he TROOT object stays in scope for as long as ROOT; related actions are performed. TROOT is a so called singleton so; only one instance of it can be created. The single TROOT object can; always be accessed via the global pointer gROOT.; The name and title arguments can be used to identify the running; application. The initfunc argument can contain an array of; function pointers (last element must be 0). These functions are; executed at the end of the constructor. This way one can easily; extend the ROOT system without adding permanent dependencies; (e.g. the graphics system is initialized via such a function). ~TROOT(); Clean up and free resources used by ROOT (files, network sockets,; shared memory segments, etc.). void AddClass(TClass* cl); Add a class to the list and map of classes.; This routine is deprecated, use TClass::AddClass directly. void AddClassGenerator(TClassGenerator* gen); Add a class generator. This generator will be called by TClass::GetClass; in case its does not find a loaded rootcint dictionary to request the; creation of a TClass object. void Browse(TBrowser* b); Add browsable objects to TBrowser. Bool_t ClassSaved(TClass* cl); return class status bit kClassSaved for class cl; This function is called by the SavePrimitive functions writing; the C++ code for an object. void CloseFiles(); Close any files and sockets that gROOT knows about.; This can be used to insures that the files and sockets are closed before any library is unloaded!. void EndOfProcessCleanups(); Execute the cleanups necessary at the end of the process, in particular; those that must be executed before the library start being unloaded. TObject * FindObject(const TObject* obj) const; Find an object in one Root folder. TObject * FindObject(const char* name) const; Returns address of a ROOT object if it exists. If name contains at least one ""/"" the function calls FindObjectany; else; This function looks in the following order in the ROOT lists:; - List of files; - List of memory m",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:25569,Performance,load,load,25569,"rent geometry; - Current Directory in memory; - Current Directory on file. TObject * FindObjectAny(const char* name) const; Return a pointer to the first object with name starting at //root.; This function scans the list of all folders.; if no object found in folders, it scans the memory list of all files. TObject * FindObjectAnyFile(const char* name) const; Scan the memory lists of all files for an object with name. const char * FindObjectClassName(const char* name) const; Returns class name of a ROOT object including CINT globals. const char * FindObjectPathName(const TObject* obj) const; Return path name of obj somewhere in the //root/... path.; The function returns the first occurence of the object in the list; of folders. The returned string points to a static char array in TROOT.; If this function is called in a loop or recursively, it is the; user's responsability to copy this string in their area. TClass * FindSTLClass(const char* name, Bool_t load, Bool_t silent = kFALSE) const; return a TClass object corresponding to 'name' assuming it is an STL container.; In particular we looking for possible alternative name (default template; parameter, typedefs template arguments, typedefed name). TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; Return pointer to class with name. Obsolete, use TClass::GetClass directly. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; Return pointer to class from its name. Obsolete, use TClass::GetClass directly; See TClass::GetClass. TColor * GetColor(Int_t color) const; Return address of color with index color. TCanvas * MakeDefCanvas() const; Return a default canvas. TDataType * GetType(const char* name, Bool_t load = kFALSE) const; Return pointer to type with name. TFile * GetFile(const char* name) const; Return pointer to file with name. TStyle * GetStyle(const char* name) const; Return pointer to style with name. TObject * GetFunction(const ch",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:25861,Performance,load,load,25861,"ns the memory list of all files. TObject * FindObjectAnyFile(const char* name) const; Scan the memory lists of all files for an object with name. const char * FindObjectClassName(const char* name) const; Returns class name of a ROOT object including CINT globals. const char * FindObjectPathName(const TObject* obj) const; Return path name of obj somewhere in the //root/... path.; The function returns the first occurence of the object in the list; of folders. The returned string points to a static char array in TROOT.; If this function is called in a loop or recursively, it is the; user's responsability to copy this string in their area. TClass * FindSTLClass(const char* name, Bool_t load, Bool_t silent = kFALSE) const; return a TClass object corresponding to 'name' assuming it is an STL container.; In particular we looking for possible alternative name (default template; parameter, typedefs template arguments, typedefed name). TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; Return pointer to class with name. Obsolete, use TClass::GetClass directly. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; Return pointer to class from its name. Obsolete, use TClass::GetClass directly; See TClass::GetClass. TColor * GetColor(Int_t color) const; Return address of color with index color. TCanvas * MakeDefCanvas() const; Return a default canvas. TDataType * GetType(const char* name, Bool_t load = kFALSE) const; Return pointer to type with name. TFile * GetFile(const char* name) const; Return pointer to file with name. TStyle * GetStyle(const char* name) const; Return pointer to style with name. TObject * GetFunction(const char* name) const; Return pointer to function with name. TFunctionTemplate * GetFunctionTemplate(const char* name). TGlobal * GetGlobal(const char* name, Bool_t load = kFALSE) const; Return pointer to global variable by name. If load is true force; reading of all currently defi",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:26034,Performance,load,load,26034,"assName(const char* name) const; Returns class name of a ROOT object including CINT globals. const char * FindObjectPathName(const TObject* obj) const; Return path name of obj somewhere in the //root/... path.; The function returns the first occurence of the object in the list; of folders. The returned string points to a static char array in TROOT.; If this function is called in a loop or recursively, it is the; user's responsability to copy this string in their area. TClass * FindSTLClass(const char* name, Bool_t load, Bool_t silent = kFALSE) const; return a TClass object corresponding to 'name' assuming it is an STL container.; In particular we looking for possible alternative name (default template; parameter, typedefs template arguments, typedefed name). TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; Return pointer to class with name. Obsolete, use TClass::GetClass directly. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; Return pointer to class from its name. Obsolete, use TClass::GetClass directly; See TClass::GetClass. TColor * GetColor(Int_t color) const; Return address of color with index color. TCanvas * MakeDefCanvas() const; Return a default canvas. TDataType * GetType(const char* name, Bool_t load = kFALSE) const; Return pointer to type with name. TFile * GetFile(const char* name) const; Return pointer to file with name. TStyle * GetStyle(const char* name) const; Return pointer to style with name. TObject * GetFunction(const char* name) const; Return pointer to function with name. TFunctionTemplate * GetFunctionTemplate(const char* name). TGlobal * GetGlobal(const char* name, Bool_t load = kFALSE) const; Return pointer to global variable by name. If load is true force; reading of all currently defined globals from CINT (more expensive). TGlobal * GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; Return pointer to global variable with address addr. TListOfF",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:26364,Performance,load,load,26364,"o a static char array in TROOT.; If this function is called in a loop or recursively, it is the; user's responsability to copy this string in their area. TClass * FindSTLClass(const char* name, Bool_t load, Bool_t silent = kFALSE) const; return a TClass object corresponding to 'name' assuming it is an STL container.; In particular we looking for possible alternative name (default template; parameter, typedefs template arguments, typedefed name). TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; Return pointer to class with name. Obsolete, use TClass::GetClass directly. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; Return pointer to class from its name. Obsolete, use TClass::GetClass directly; See TClass::GetClass. TColor * GetColor(Int_t color) const; Return address of color with index color. TCanvas * MakeDefCanvas() const; Return a default canvas. TDataType * GetType(const char* name, Bool_t load = kFALSE) const; Return pointer to type with name. TFile * GetFile(const char* name) const; Return pointer to file with name. TStyle * GetStyle(const char* name) const; Return pointer to style with name. TObject * GetFunction(const char* name) const; Return pointer to function with name. TFunctionTemplate * GetFunctionTemplate(const char* name). TGlobal * GetGlobal(const char* name, Bool_t load = kFALSE) const; Return pointer to global variable by name. If load is true force; reading of all currently defined globals from CINT (more expensive). TGlobal * GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; Return pointer to global variable with address addr. TListOfFunctions * GetGlobalFunctions(); Internal routine returning, and creating if necessary, the list; of global function. TCollection * GetListOfFunctionOverloads(const char* name) const; Return the collection of functions named ""name"". TFunction * GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = k",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:26762,Performance,load,load,26762," typedefs template arguments, typedefed name). TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; Return pointer to class with name. Obsolete, use TClass::GetClass directly. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; Return pointer to class from its name. Obsolete, use TClass::GetClass directly; See TClass::GetClass. TColor * GetColor(Int_t color) const; Return address of color with index color. TCanvas * MakeDefCanvas() const; Return a default canvas. TDataType * GetType(const char* name, Bool_t load = kFALSE) const; Return pointer to type with name. TFile * GetFile(const char* name) const; Return pointer to file with name. TStyle * GetStyle(const char* name) const; Return pointer to style with name. TObject * GetFunction(const char* name) const; Return pointer to function with name. TFunctionTemplate * GetFunctionTemplate(const char* name). TGlobal * GetGlobal(const char* name, Bool_t load = kFALSE) const; Return pointer to global variable by name. If load is true force; reading of all currently defined globals from CINT (more expensive). TGlobal * GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; Return pointer to global variable with address addr. TListOfFunctions * GetGlobalFunctions(); Internal routine returning, and creating if necessary, the list; of global function. TCollection * GetListOfFunctionOverloads(const char* name) const; Return the collection of functions named ""name"". TFunction * GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); Return pointer to global function by name.; If params != 0 it will also resolve overloading other it returns the first; name match.; If params == 0 and load is true force reading of all currently defined; global functions from Cling.; The param string must be of the form: ""3189,\""aap\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFA",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:26830,Performance,load,load,26830,"E, Bool_t silent = kFALSE) const; Return pointer to class with name. Obsolete, use TClass::GetClass directly. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; Return pointer to class from its name. Obsolete, use TClass::GetClass directly; See TClass::GetClass. TColor * GetColor(Int_t color) const; Return address of color with index color. TCanvas * MakeDefCanvas() const; Return a default canvas. TDataType * GetType(const char* name, Bool_t load = kFALSE) const; Return pointer to type with name. TFile * GetFile(const char* name) const; Return pointer to file with name. TStyle * GetStyle(const char* name) const; Return pointer to style with name. TObject * GetFunction(const char* name) const; Return pointer to function with name. TFunctionTemplate * GetFunctionTemplate(const char* name). TGlobal * GetGlobal(const char* name, Bool_t load = kFALSE) const; Return pointer to global variable by name. If load is true force; reading of all currently defined globals from CINT (more expensive). TGlobal * GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; Return pointer to global variable with address addr. TListOfFunctions * GetGlobalFunctions(); Internal routine returning, and creating if necessary, the list; of global function. TCollection * GetListOfFunctionOverloads(const char* name) const; Return the collection of functions named ""name"". TFunction * GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); Return pointer to global function by name.; If params != 0 it will also resolve overloading other it returns the first; name match.; If params == 0 and load is true force reading of all currently defined; global functions from Cling.; The param string must be of the form: ""3189,\""aap\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); Return pointer to global function by name. If proto != 0; it will also resolve overloading. If ",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:26966,Performance,load,load,26966,"y. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; Return pointer to class from its name. Obsolete, use TClass::GetClass directly; See TClass::GetClass. TColor * GetColor(Int_t color) const; Return address of color with index color. TCanvas * MakeDefCanvas() const; Return a default canvas. TDataType * GetType(const char* name, Bool_t load = kFALSE) const; Return pointer to type with name. TFile * GetFile(const char* name) const; Return pointer to file with name. TStyle * GetStyle(const char* name) const; Return pointer to style with name. TObject * GetFunction(const char* name) const; Return pointer to function with name. TFunctionTemplate * GetFunctionTemplate(const char* name). TGlobal * GetGlobal(const char* name, Bool_t load = kFALSE) const; Return pointer to global variable by name. If load is true force; reading of all currently defined globals from CINT (more expensive). TGlobal * GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; Return pointer to global variable with address addr. TListOfFunctions * GetGlobalFunctions(); Internal routine returning, and creating if necessary, the list; of global function. TCollection * GetListOfFunctionOverloads(const char* name) const; Return the collection of functions named ""name"". TFunction * GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); Return pointer to global function by name.; If params != 0 it will also resolve overloading other it returns the first; name match.; If params == 0 and load is true force reading of all currently defined; global functions from Cling.; The param string must be of the form: ""3189,\""aap\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); Return pointer to global function by name. If proto != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more expensive).; The prot",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:27361,Performance,load,load,27361," name, Bool_t load = kFALSE) const; Return pointer to type with name. TFile * GetFile(const char* name) const; Return pointer to file with name. TStyle * GetStyle(const char* name) const; Return pointer to style with name. TObject * GetFunction(const char* name) const; Return pointer to function with name. TFunctionTemplate * GetFunctionTemplate(const char* name). TGlobal * GetGlobal(const char* name, Bool_t load = kFALSE) const; Return pointer to global variable by name. If load is true force; reading of all currently defined globals from CINT (more expensive). TGlobal * GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; Return pointer to global variable with address addr. TListOfFunctions * GetGlobalFunctions(); Internal routine returning, and creating if necessary, the list; of global function. TCollection * GetListOfFunctionOverloads(const char* name) const; Return the collection of functions named ""name"". TFunction * GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); Return pointer to global function by name.; If params != 0 it will also resolve overloading other it returns the first; name match.; If params == 0 and load is true force reading of all currently defined; global functions from Cling.; The param string must be of the form: ""3189,\""aap\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); Return pointer to global function by name. If proto != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more expensive).; The proto string must be of the form: ""int, char*, float"". TObject * GetGeometry(const char* name) const; Return pointer to Geometry with name. TCollection * GetListOfEnums(Bool_t load = kFALSE). TCollection * GetListOfFunctionTemplates(). TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:27529,Performance,load,load,27529,"le with name. TObject * GetFunction(const char* name) const; Return pointer to function with name. TFunctionTemplate * GetFunctionTemplate(const char* name). TGlobal * GetGlobal(const char* name, Bool_t load = kFALSE) const; Return pointer to global variable by name. If load is true force; reading of all currently defined globals from CINT (more expensive). TGlobal * GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; Return pointer to global variable with address addr. TListOfFunctions * GetGlobalFunctions(); Internal routine returning, and creating if necessary, the list; of global function. TCollection * GetListOfFunctionOverloads(const char* name) const; Return the collection of functions named ""name"". TFunction * GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); Return pointer to global function by name.; If params != 0 it will also resolve overloading other it returns the first; name match.; If params == 0 and load is true force reading of all currently defined; global functions from Cling.; The param string must be of the form: ""3189,\""aap\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); Return pointer to global function by name. If proto != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more expensive).; The proto string must be of the form: ""int, char*, float"". TObject * GetGeometry(const char* name) const; Return pointer to Geometry with name. TCollection * GetListOfEnums(Bool_t load = kFALSE). TCollection * GetListOfFunctionTemplates(). TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be ",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:27761,Performance,load,load,27761,"har* name, Bool_t load = kFALSE) const; Return pointer to global variable by name. If load is true force; reading of all currently defined globals from CINT (more expensive). TGlobal * GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; Return pointer to global variable with address addr. TListOfFunctions * GetGlobalFunctions(); Internal routine returning, and creating if necessary, the list; of global function. TCollection * GetListOfFunctionOverloads(const char* name) const; Return the collection of functions named ""name"". TFunction * GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); Return pointer to global function by name.; If params != 0 it will also resolve overloading other it returns the first; name match.; If params == 0 and load is true force reading of all currently defined; global functions from Cling.; The param string must be of the form: ""3189,\""aap\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); Return pointer to global function by name. If proto != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more expensive).; The proto string must be of the form: ""int, char*, float"". TObject * GetGeometry(const char* name) const; Return pointer to Geometry with name. TCollection * GetListOfEnums(Bool_t load = kFALSE). TCollection * GetListOfFunctionTemplates(). TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are c",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:27872,Performance,load,load,27872," TGlobal * GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; Return pointer to global variable with address addr. TListOfFunctions * GetGlobalFunctions(); Internal routine returning, and creating if necessary, the list; of global function. TCollection * GetListOfFunctionOverloads(const char* name) const; Return the collection of functions named ""name"". TFunction * GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); Return pointer to global function by name.; If params != 0 it will also resolve overloading other it returns the first; name match.; If params == 0 and load is true force reading of all currently defined; global functions from Cling.; The param string must be of the form: ""3189,\""aap\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); Return pointer to global function by name. If proto != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more expensive).; The proto string must be of the form: ""int, char*, float"". TObject * GetGeometry(const char* name) const; Return pointer to Geometry with name. TCollection * GetListOfEnums(Bool_t load = kFALSE). TCollection * GetListOfFunctionTemplates(). TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tig",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:28151,Performance,load,load,28151," list; of global function. TCollection * GetListOfFunctionOverloads(const char* name) const; Return the collection of functions named ""name"". TFunction * GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); Return pointer to global function by name.; If params != 0 it will also resolve overloading other it returns the first; name match.; If params == 0 and load is true force reading of all currently defined; global functions from Cling.; The param string must be of the form: ""3189,\""aap\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); Return pointer to global function by name. If proto != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more expensive).; The proto string must be of the form: ""int, char*, float"". TObject * GetGeometry(const char* name) const; Return pointer to Geometry with name. TCollection * GetListOfEnums(Bool_t load = kFALSE). TCollection * GetListOfFunctionTemplates(). TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfTypes(Bool_t load = kFALSE); Return a dynamic list giving access to all TDataTypes (typedefs); currently def",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:28249,Performance,load,load,28249,"ons named ""name"". TFunction * GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); Return pointer to global function by name.; If params != 0 it will also resolve overloading other it returns the first; name match.; If params == 0 and load is true force reading of all currently defined; global functions from Cling.; The param string must be of the form: ""3189,\""aap\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); Return pointer to global function by name. If proto != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more expensive).; The proto string must be of the form: ""int, char*, float"". TObject * GetGeometry(const char* name) const; Return pointer to Geometry with name. TCollection * GetListOfEnums(Bool_t load = kFALSE). TCollection * GetListOfFunctionTemplates(). TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfTypes(Bool_t load = kFALSE); Return a dynamic list giving access to all TDataTypes (typedefs); currently defined. The list is populated on demand. Calling; gROOT->GetListOfTypes()->FindObject(nameoftype);; will return the TDataType c",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:28580,Performance,load,load,28580,"is true force reading of all currently defined; global functions from Cling.; The param string must be of the form: ""3189,\""aap\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); Return pointer to global function by name. If proto != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more expensive).; The proto string must be of the form: ""int, char*, float"". TObject * GetGeometry(const char* name) const; Return pointer to Geometry with name. TCollection * GetListOfEnums(Bool_t load = kFALSE). TCollection * GetListOfFunctionTemplates(). TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfTypes(Bool_t load = kFALSE); Return a dynamic list giving access to all TDataTypes (typedefs); currently defined. The list is populated on demand. Calling; gROOT->GetListOfTypes()->FindObject(nameoftype);; will return the TDataType corresponding to 'nameoftype'. If the; TDataType is not already in the list itself and the type does exist,; a new TDataType will be created and added to the list. Calling; gROOT->GetListOfTypes()->ls(); // or Print(); list only the typedefs that have been previously ac",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:28649,Performance,load,load,28649,"\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); Return pointer to global function by name. If proto != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more expensive).; The proto string must be of the form: ""int, char*, float"". TObject * GetGeometry(const char* name) const; Return pointer to Geometry with name. TCollection * GetListOfEnums(Bool_t load = kFALSE). TCollection * GetListOfFunctionTemplates(). TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfTypes(Bool_t load = kFALSE); Return a dynamic list giving access to all TDataTypes (typedefs); currently defined. The list is populated on demand. Calling; gROOT->GetListOfTypes()->FindObject(nameoftype);; will return the TDataType corresponding to 'nameoftype'. If the; TDataType is not already in the list itself and the type does exist,; a new TDataType will be created and added to the list. Calling; gROOT->GetListOfTypes()->ls(); // or Print(); list only the typedefs that have been previously accessed throught the; list (plus the builtins types). void Idle(UInt_t idleTimeInSec, const char* command = 0); Execute command w",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:28986,Performance,load,load,28986,"s from CINT (more expensive).; The proto string must be of the form: ""int, char*, float"". TObject * GetGeometry(const char* name) const; Return pointer to Geometry with name. TCollection * GetListOfEnums(Bool_t load = kFALSE). TCollection * GetListOfFunctionTemplates(). TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfTypes(Bool_t load = kFALSE); Return a dynamic list giving access to all TDataTypes (typedefs); currently defined. The list is populated on demand. Calling; gROOT->GetListOfTypes()->FindObject(nameoftype);; will return the TDataType corresponding to 'nameoftype'. If the; TDataType is not already in the list itself and the type does exist,; a new TDataType will be created and added to the list. Calling; gROOT->GetListOfTypes()->ls(); // or Print(); list only the typedefs that have been previously accessed throught the; list (plus the builtins types). void Idle(UInt_t idleTimeInSec, const char* command = 0); Execute command when system has been idle for idleTimeInSec seconds. Int_t IgnoreInclude(const char* fname, const char* expandedfname); Return 1 if the name of the given include file corresponds to a class that; is known to ROOT, e.g. ""TLorentzVector.h"" versus TLorentzVector. void InitSystem();",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:29045,Performance,load,load,29045," Return pointer to Geometry with name. TCollection * GetListOfEnums(Bool_t load = kFALSE). TCollection * GetListOfFunctionTemplates(). TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfTypes(Bool_t load = kFALSE); Return a dynamic list giving access to all TDataTypes (typedefs); currently defined. The list is populated on demand. Calling; gROOT->GetListOfTypes()->FindObject(nameoftype);; will return the TDataType corresponding to 'nameoftype'. If the; TDataType is not already in the list itself and the type does exist,; a new TDataType will be created and added to the list. Calling; gROOT->GetListOfTypes()->ls(); // or Print(); list only the typedefs that have been previously accessed throught the; list (plus the builtins types). void Idle(UInt_t idleTimeInSec, const char* command = 0); Execute command when system has been idle for idleTimeInSec seconds. Int_t IgnoreInclude(const char* fname, const char* expandedfname); Return 1 if the name of the given include file corresponds to a class that; is known to ROOT, e.g. ""TLorentzVector.h"" versus TLorentzVector. void InitSystem(); Initialize operating system interface. void InitThreads(); Load and initialize thread library. void InitInterpreter(); Initialize the in",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:30000,Performance,Load,Load,30000,". TCollection * GetListOfTypes(Bool_t load = kFALSE); Return a dynamic list giving access to all TDataTypes (typedefs); currently defined. The list is populated on demand. Calling; gROOT->GetListOfTypes()->FindObject(nameoftype);; will return the TDataType corresponding to 'nameoftype'. If the; TDataType is not already in the list itself and the type does exist,; a new TDataType will be created and added to the list. Calling; gROOT->GetListOfTypes()->ls(); // or Print(); list only the typedefs that have been previously accessed throught the; list (plus the builtins types). void Idle(UInt_t idleTimeInSec, const char* command = 0); Execute command when system has been idle for idleTimeInSec seconds. Int_t IgnoreInclude(const char* fname, const char* expandedfname); Return 1 if the name of the given include file corresponds to a class that; is known to ROOT, e.g. ""TLorentzVector.h"" versus TLorentzVector. void InitSystem(); Initialize operating system interface. void InitThreads(); Load and initialize thread library. void InitInterpreter(); Initialize the interpreter. Should be called only after main(),; to make sure LLVM/Clang is fully initialized. TClass * LoadClass(const char* name, Bool_t silent = kFALSE) const; Helper function used by TClass::GetClass().; This function attempts to load the dictionary for 'classname'; either from the TClassTable or from the list of generator.; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members). The 'requestedname' is expected to be already normalized. Int_t LoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Check if class ""classname"" is known to the interpreter (in fact,; this check is not needed anymore, so classname is ignored). If; not it will load library ""libname"". If the library name does; not start with ""lib"", ""lib"" will be prepended and a search will; be made in the DynamicPath (see .rootrc). If not found a s",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:30180,Performance,Load,LoadClass,30180,"meoftype);; will return the TDataType corresponding to 'nameoftype'. If the; TDataType is not already in the list itself and the type does exist,; a new TDataType will be created and added to the list. Calling; gROOT->GetListOfTypes()->ls(); // or Print(); list only the typedefs that have been previously accessed throught the; list (plus the builtins types). void Idle(UInt_t idleTimeInSec, const char* command = 0); Execute command when system has been idle for idleTimeInSec seconds. Int_t IgnoreInclude(const char* fname, const char* expandedfname); Return 1 if the name of the given include file corresponds to a class that; is known to ROOT, e.g. ""TLorentzVector.h"" versus TLorentzVector. void InitSystem(); Initialize operating system interface. void InitThreads(); Load and initialize thread library. void InitInterpreter(); Initialize the interpreter. Should be called only after main(),; to make sure LLVM/Clang is fully initialized. TClass * LoadClass(const char* name, Bool_t silent = kFALSE) const; Helper function used by TClass::GetClass().; This function attempts to load the dictionary for 'classname'; either from the TClassTable or from the list of generator.; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members). The 'requestedname' is expected to be already normalized. Int_t LoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Check if class ""classname"" is known to the interpreter (in fact,; this check is not needed anymore, so classname is ignored). If; not it will load library ""libname"". If the library name does; not start with ""lib"", ""lib"" will be prepended and a search will; be made in the DynamicPath (see .rootrc). If not found a search; will be made on libname (without ""lib"" prepended) and if not found; a direct try of libname will be made (in case it contained an; absolute path).; If check is true it will only check if libname exists and is; re",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:30310,Performance,load,load,30310,"elf and the type does exist,; a new TDataType will be created and added to the list. Calling; gROOT->GetListOfTypes()->ls(); // or Print(); list only the typedefs that have been previously accessed throught the; list (plus the builtins types). void Idle(UInt_t idleTimeInSec, const char* command = 0); Execute command when system has been idle for idleTimeInSec seconds. Int_t IgnoreInclude(const char* fname, const char* expandedfname); Return 1 if the name of the given include file corresponds to a class that; is known to ROOT, e.g. ""TLorentzVector.h"" versus TLorentzVector. void InitSystem(); Initialize operating system interface. void InitThreads(); Load and initialize thread library. void InitInterpreter(); Initialize the interpreter. Should be called only after main(),; to make sure LLVM/Clang is fully initialized. TClass * LoadClass(const char* name, Bool_t silent = kFALSE) const; Helper function used by TClass::GetClass().; This function attempts to load the dictionary for 'classname'; either from the TClassTable or from the list of generator.; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members). The 'requestedname' is expected to be already normalized. Int_t LoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Check if class ""classname"" is known to the interpreter (in fact,; this check is not needed anymore, so classname is ignored). If; not it will load library ""libname"". If the library name does; not start with ""lib"", ""lib"" will be prepended and a search will; be made in the DynamicPath (see .rootrc). If not found a search; will be made on libname (without ""lib"" prepended) and if not found; a direct try of libname will be made (in case it contained an; absolute path).; If check is true it will only check if libname exists and is; readable.; Returns 0 on successful loading, -1 in case libname does not; exist or in case of error and -2 in case of ver",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:30614,Performance,Load,LoadClass,30614,". Int_t IgnoreInclude(const char* fname, const char* expandedfname); Return 1 if the name of the given include file corresponds to a class that; is known to ROOT, e.g. ""TLorentzVector.h"" versus TLorentzVector. void InitSystem(); Initialize operating system interface. void InitThreads(); Load and initialize thread library. void InitInterpreter(); Initialize the interpreter. Should be called only after main(),; to make sure LLVM/Clang is fully initialized. TClass * LoadClass(const char* name, Bool_t silent = kFALSE) const; Helper function used by TClass::GetClass().; This function attempts to load the dictionary for 'classname'; either from the TClassTable or from the list of generator.; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members). The 'requestedname' is expected to be already normalized. Int_t LoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Check if class ""classname"" is known to the interpreter (in fact,; this check is not needed anymore, so classname is ignored). If; not it will load library ""libname"". If the library name does; not start with ""lib"", ""lib"" will be prepended and a search will; be made in the DynamicPath (see .rootrc). If not found a search; will be made on libname (without ""lib"" prepended) and if not found; a direct try of libname will be made (in case it contained an; absolute path).; If check is true it will only check if libname exists and is; readable.; Returns 0 on successful loading, -1 in case libname does not; exist or in case of error and -2 in case of version mismatch. Bool_t IsRootFile(const char* filename) const; Return true if the file is local and is (likely) to be a ROOT file. void ls(Option_t* option = """") const; To list all objects of the application.; Loop on all objects created in the ROOT linked lists.; Objects may be files and windows or any other object directly; attached to the ROOT linked list. Int_t L",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:30834,Performance,load,load,30834,"ds to a class that; is known to ROOT, e.g. ""TLorentzVector.h"" versus TLorentzVector. void InitSystem(); Initialize operating system interface. void InitThreads(); Load and initialize thread library. void InitInterpreter(); Initialize the interpreter. Should be called only after main(),; to make sure LLVM/Clang is fully initialized. TClass * LoadClass(const char* name, Bool_t silent = kFALSE) const; Helper function used by TClass::GetClass().; This function attempts to load the dictionary for 'classname'; either from the TClassTable or from the list of generator.; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members). The 'requestedname' is expected to be already normalized. Int_t LoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Check if class ""classname"" is known to the interpreter (in fact,; this check is not needed anymore, so classname is ignored). If; not it will load library ""libname"". If the library name does; not start with ""lib"", ""lib"" will be prepended and a search will; be made in the DynamicPath (see .rootrc). If not found a search; will be made on libname (without ""lib"" prepended) and if not found; a direct try of libname will be made (in case it contained an; absolute path).; If check is true it will only check if libname exists and is; readable.; Returns 0 on successful loading, -1 in case libname does not; exist or in case of error and -2 in case of version mismatch. Bool_t IsRootFile(const char* filename) const; Return true if the file is local and is (likely) to be a ROOT file. void ls(Option_t* option = """") const; To list all objects of the application.; Loop on all objects created in the ROOT linked lists.; Objects may be files and windows or any other object directly; attached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:31259,Performance,load,loading,31259,"on attempts to load the dictionary for 'classname'; either from the TClassTable or from the list of generator.; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members). The 'requestedname' is expected to be already normalized. Int_t LoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Check if class ""classname"" is known to the interpreter (in fact,; this check is not needed anymore, so classname is ignored). If; not it will load library ""libname"". If the library name does; not start with ""lib"", ""lib"" will be prepended and a search will; be made in the DynamicPath (see .rootrc). If not found a search; will be made on libname (without ""lib"" prepended) and if not found; a direct try of libname will be made (in case it contained an; absolute path).; If check is true it will only check if libname exists and is; readable.; Returns 0 on successful loading, -1 in case libname does not; exist or in case of error and -2 in case of version mismatch. Bool_t IsRootFile(const char* filename) const; Return true if the file is local and is (likely) to be a ROOT file. void ls(Option_t* option = """") const; To list all objects of the application.; Loop on all objects created in the ROOT linked lists.; Objects may be files and windows or any other object directly; attached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, In",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:31711,Performance,Load,LoadMacro,31711,"eck is not needed anymore, so classname is ignored). If; not it will load library ""libname"". If the library name does; not start with ""lib"", ""lib"" will be prepended and a search will; be made in the DynamicPath (see .rootrc). If not found a search; will be made on libname (without ""lib"" prepended) and if not found; a direct try of libname will be made (in case it contained an; absolute path).; If check is true it will only check if libname exists and is; readable.; Returns 0 on successful loading, -1 in case libname does not; exist or in case of error and -2 in case of version mismatch. Bool_t IsRootFile(const char* filename) const; Return true if the file is local and is (likely) to be a ROOT file. void ls(Option_t* option = """") const; To list all objects of the application.; Loop on all objects created in the ROOT linked lists.; Objects may be files and windows or any other object directly; attached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const ",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:31785,Performance,Load,Load,31785,"eck is not needed anymore, so classname is ignored). If; not it will load library ""libname"". If the library name does; not start with ""lib"", ""lib"" will be prepended and a search will; be made in the DynamicPath (see .rootrc). If not found a search; will be made on libname (without ""lib"" prepended) and if not found; a direct try of libname will be made (in case it contained an; absolute path).; If check is true it will only check if libname exists and is; readable.; Returns 0 on successful loading, -1 in case libname does not; exist or in case of error and -2 in case of version mismatch. Bool_t IsRootFile(const char* filename) const; Return true if the file is local and is (likely) to be a ROOT file. void ls(Option_t* option = """") const; To list all objects of the application.; Loop on all objects created in the ROOT linked lists.; Objects may be files and windows or any other object directly; attached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const ",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:32190,Performance,load,loading,32190,"ists and is; readable.; Returns 0 on successful loading, -1 in case libname does not; exist or in case of error and -2 in case of version mismatch. Bool_t IsRootFile(const char* filename) const; Return true if the file is local and is (likely) to be a ROOT file. void ls(Option_t* option = """") const; To list all objects of the application.; Loop on all objects created in the ROOT linked lists.; Objects may be files and windows or any other object directly; attached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const TObject* obj); Process message id called by obj. Long_t ProcessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous processing; use ProcessLineSync(). On non-Win32 platforms there is no difference; between ProcessLine() and ProcessLineSync().; The possible error codes are",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:35616,Performance,load,loaded,35616,"needed; for objects that have the kMustCleanup bit set. Most useful to; update browsers that show the file system or other objects external; to the running ROOT session. void RegisterModule(const char* modulename, const char** headers, const char** includePaths, const char* payLoadCode, const char* fwdDeclCode, void(*)() triggerFunc, const TROOT::FwdDeclArgsToKeepCollection_t& fwdDeclsArgToSkip, const char** classesHeaders); Called by static dictionary initialization to register clang modules; for headers. Calls TCling::RegisterModule() unless gCling; is NULL, i.e. during startup, where the information is buffered in; the static GetModuleHeaderInfoBuffer(). void RemoveClass(TClass* ); Remove a class from the list and map of classes.; This routine is deprecated, use TClass::RemoveClass directly. void Reset(Option_t* option = """"); Delete all global interpreter objects created since the last call to Reset. If option=""a"" is set reset to startup context (i.e. unload also; all loaded files, classes, structs, typedefs, etc.). This function is typically used at the beginning (or end) of an unnamed macro; to clean the environment. IMPORTANT WARNING:; Do not use this call from within any function (neither compiled nor; interpreted. This should only be used from a unnamed macro; (which starts with a { (curly braces) ). For example, using TROOT::Reset; from within an interpreted function will lead to the unloading of the; dictionary and source file, including the one defining the function being; executed. void SaveContext(); Save the current interpreter context. void SetCutClassName(const char* name = ""TCutG""); Set the default graphical cut class name for the graphics editor; By default the graphics editor creates an instance of a class TCutG.; This function may be called to specify a different class that MUST; derive from TCutG. void SetEditorMode(const char* mode = """"); Set editor mode. void SetStyle(const char* stylename = ""Default""); Change current style to style with name ",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:18061,Safety,detect,detected,18061,"ic TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. atomic<TApplication*>fApplicationPointer to current application; Bool_tfBatchTrue if session without graphics; TList*fBrowsablesList of browsables; TSeqCollection*fBrowsersList of browsers; Int_tfBuiltDateDate of ROOT built; Int_tfBuiltTimeTime of ROOT built; TSeqCollection*fCanvasesList of canvases; TCollection*fClassGeneratorsList of user defined class generators;; TCollection*fClassesList of classes definition; TSeqCollection*fCleanupsList of recursiveRemove collections; TSeqCollection*fClipboardList of clipbard objects; TSeqCollection*fClosedObjectsList of closed objects from the list of files and sockets, so we can delete them if neededCl.; TSeqCollection*fColorsList of colors; TStringfConfigFeaturesROOT ./configure detected build features; TStringfConfigOptionsROOT ./configure set build options; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; TStringfCutClassNameName of default CutG class in graphics editor; TSeqCollection*fDataSetsList of data sets (TDSet or TChain); TStringfDefCanvasNameName of default canvas; Bool_tfEditHistogramsTrue if histograms can be edited with the mouse; Int_tfEditorModeCurrent Editor mode; TROOT::AListOfEnums_tfEnumsList of enum types; Bool_tfEscapeTrue if ESC has been pressed; Bool_tfExecutingMacroTrue while executing a TMacro; TSeqCollection*fFilesList of files; Bool_tfForceStyleForce setting of current style when reading objects; Bool_tfFromPopUpTrue if command executed from a popup menu; TListOfFunctionTemplates*fFuncTemplateList of global function templates; TCollection*fFunctionsList of analytic functions; TSeqCollection*fGeometriesList of geometries; TStringfGitBranchGit branch; TStringfGitCommitGit commit SHA1 of built; TS",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:430,Security,access,accessible,430,". TROOT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TROOT. class TROOT: public TDirectory. R O O T top level object description. The TROOT object is the entry point to the ROOT system.; The single instance of TROOT is accessible via the global gROOT.; Using the gROOT pointer one has access to basically every object; created in a ROOT based program. The TROOT object is essentially a; container of several lists pointing to the main ROOT objects. The following lists are accessible from gROOT object:; gROOT->GetListOfClasses; gROOT->GetListOfColors; gROOT->GetListOfTypes; gROOT->GetListOfGlobals; gROOT->GetListOfGlobalFunctions; gROOT->GetListOfFiles; gROOT->GetListOfMappedFiles; gROOT->GetListOfSockets; gROOT->GetListOfSecContexts; gROOT->GetListOfCanvases; gROOT->GetListOfStyles; gROOT->GetListOfFunctions; gROOT->GetListOfSpecials (for example graphical cuts); gROOT->GetListOfGeometries; gROOT->GetListOfBrowsers; gROOT->GetListOfCleanups; gROOT->GetListOfMessageHandlers. The TROOT class provides also many useful services:; - Get pointer to an object in any of the lists above; - Time utilities TROOT::Time. The ROOT object must be created as a static object. An example; of a main program creating an interactive version is shown below:. Example of a main program. #include ""TRint.h"". int main(int argc, char **argv); {; TRint *theApp = new TRint(""ROOT example"", &argc, argv);. // Init Intrinsics, build all windows, and enter event loop; theApp->Run();. return(0);; }; End of Main program. Function Members (Methods); public:. virtual~TROOT(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectory::Add(TObject* obj, Bool_t replace = kFALSE); voidAddClass(TClass* cl); voidAddClassGenerator(TClassGenerator* gen); static voidTDirectory::AddDirectory(",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:496,Security,access,access,496,". TROOT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TROOT. class TROOT: public TDirectory. R O O T top level object description. The TROOT object is the entry point to the ROOT system.; The single instance of TROOT is accessible via the global gROOT.; Using the gROOT pointer one has access to basically every object; created in a ROOT based program. The TROOT object is essentially a; container of several lists pointing to the main ROOT objects. The following lists are accessible from gROOT object:; gROOT->GetListOfClasses; gROOT->GetListOfColors; gROOT->GetListOfTypes; gROOT->GetListOfGlobals; gROOT->GetListOfGlobalFunctions; gROOT->GetListOfFiles; gROOT->GetListOfMappedFiles; gROOT->GetListOfSockets; gROOT->GetListOfSecContexts; gROOT->GetListOfCanvases; gROOT->GetListOfStyles; gROOT->GetListOfFunctions; gROOT->GetListOfSpecials (for example graphical cuts); gROOT->GetListOfGeometries; gROOT->GetListOfBrowsers; gROOT->GetListOfCleanups; gROOT->GetListOfMessageHandlers. The TROOT class provides also many useful services:; - Get pointer to an object in any of the lists above; - Time utilities TROOT::Time. The ROOT object must be created as a static object. An example; of a main program creating an interactive version is shown below:. Example of a main program. #include ""TRint.h"". int main(int argc, char **argv); {; TRint *theApp = new TRint(""ROOT example"", &argc, argv);. // Init Intrinsics, build all windows, and enter event loop; theApp->Run();. return(0);; }; End of Main program. Function Members (Methods); public:. virtual~TROOT(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectory::Add(TObject* obj, Bool_t replace = kFALSE); voidAddClass(TClass* cl); voidAddClassGenerator(TClassGenerator* gen); static voidTDirectory::AddDirectory(",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:684,Security,access,accessible,684,". TROOT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TROOT. class TROOT: public TDirectory. R O O T top level object description. The TROOT object is the entry point to the ROOT system.; The single instance of TROOT is accessible via the global gROOT.; Using the gROOT pointer one has access to basically every object; created in a ROOT based program. The TROOT object is essentially a; container of several lists pointing to the main ROOT objects. The following lists are accessible from gROOT object:; gROOT->GetListOfClasses; gROOT->GetListOfColors; gROOT->GetListOfTypes; gROOT->GetListOfGlobals; gROOT->GetListOfGlobalFunctions; gROOT->GetListOfFiles; gROOT->GetListOfMappedFiles; gROOT->GetListOfSockets; gROOT->GetListOfSecContexts; gROOT->GetListOfCanvases; gROOT->GetListOfStyles; gROOT->GetListOfFunctions; gROOT->GetListOfSpecials (for example graphical cuts); gROOT->GetListOfGeometries; gROOT->GetListOfBrowsers; gROOT->GetListOfCleanups; gROOT->GetListOfMessageHandlers. The TROOT class provides also many useful services:; - Get pointer to an object in any of the lists above; - Time utilities TROOT::Time. The ROOT object must be created as a static object. An example; of a main program creating an interactive version is shown below:. Example of a main program. #include ""TRint.h"". int main(int argc, char **argv); {; TRint *theApp = new TRint(""ROOT example"", &argc, argv);. // Init Intrinsics, build all windows, and enter event loop; theApp->Run();. return(0);; }; End of Main program. Function Members (Methods); public:. virtual~TROOT(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectory::Add(TObject* obj, Bool_t replace = kFALSE); voidAddClass(TClass* cl); voidAddClassGenerator(TClassGenerator* gen); static voidTDirectory::AddDirectory(",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:9499,Security,Hash,Hash,9499,"Unchecked(const char* namecycle); virtual Option_t*TObject::GetOption() const; virtual const char*TDirectory::GetPath() const; virtual const char*TDirectory::GetPathStatic() const; TPluginManager*GetPluginManager() const; TFolder*GetRootFolder() const; virtual Long64_tTDirectory::GetSeekDir() const; virtual Long64_tTDirectory::GetSeekKeys() const; virtual Long64_tTDirectory::GetSeekParent() const; TVirtualPad*GetSelectedPad() const; const TObject*GetSelectedPrimitive() const; TStyle*GetStyle(const char* name) const; virtual const char*TNamed::GetTitle() const; static const char*GetTutorialsDir(); TDataType*GetType(const char* name, Bool_t load = kFALSE) const; virtual UInt_tTObject::GetUniqueID() const; TUUIDTDirectory::GetUUID() const; TProcessUUID*GetUUIDs() const; const char*GetVersion() const; Int_tGetVersionCode() const; Int_tGetVersionDate() const; Int_tGetVersionInt() const; Int_tGetVersionTime() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; voidIdle(UInt_t idleTimeInSec, const char* command = 0); Int_tIgnoreInclude(const char* fname, const char* expandedfname); static Int_tIncreaseDirLevel(); static voidIndentLevel(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; static Bool_tInitialized(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsBatch() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tIsEscaped() const; Bool_tIsExecutingMacro() const; virtual Bool_tIsFolder() const; Bool_tIsInterrupted() const; Bool_tIsLineProcessing() const; virtual Bool_tTDirectory::IsModified() const; Bool_tTObject::IsOnHeap() const; Bool_tIsProofServ() const; Bool_tIsRootFile(const char* filename) const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDirectory::IsWritable() const; Bool",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:20068,Security,secur,security,20068,croTrue while executing a TMacro; TSeqCollection*fFilesList of files; Bool_tfForceStyleForce setting of current style when reading objects; Bool_tfFromPopUpTrue if command executed from a popup menu; TListOfFunctionTemplates*fFuncTemplateList of global function templates; TCollection*fFunctionsList of analytic functions; TSeqCollection*fGeometriesList of geometries; TStringfGitBranchGit branch; TStringfGitCommitGit commit SHA1 of built; TStringfGitDateDate and time when make was run; TListOfFunctions*fGlobalFunctionsList of global functions; TListOfDataMembers*fGlobalsList of global variables; TInterpreter*fInterpreterCommand interpreter; Bool_tfInterruptTrue if macro should be interrupted; TList*TDirectory::fListList of objects in memory; TSeqCollection*fMappedFilesList of memory mapped files; TSeqCollection*fMessageHandlersList of message handlers; TObject*TDirectory::fMotherpointer to mother of the directory; Bool_tfMustCleanTrue if object destructor scans canvases; TStringTNamed::fNameobject identifier; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; TPluginManager*fPluginManagerKeeps track of plugin library handlers; const TObject*fPrimitiveCurrently selected primitive; TSeqCollection*fProofsList of proof sessions; Bool_tfReadingObjectTrue while reading an object [Deprecated (will be removed in next release); TFolder*fRootFoldertop level folder //root; TSeqCollection*fSecContextsList of security contexts (TSecContext); TVirtualPad*fSelectPadCurrently selected pad; TSeqCollection*fSocketsList of network sockets; TSeqCollection*fSpecialsList of special objects; TSeqCollection*fStreamerInfoList of active StreamerInfo classes; TSeqCollection*fStylesList of styles; TSeqCollection*fTasksList of tasks; Int_tfTimerTimer flag; TStringTNamed::fTitleobject title; TCollection*fTypesList of data types definition; TUUIDTDirectory::fUUIDUnique identifier; TProcessUUID*fUUIDsPointer to TProcessID managing TUUIDs; TStringfVersionROOT version (from CMZ VERSQQ) ex 0.,MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:21997,Security,access,accessed,21997,"ze multi-threads; static Int_tfgDirLevelIndentation level for ls(); static Bool_tfgMemCheckTurn on memory leak checker; static Bool_tfgRootInitSingleton initialization flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TDirectory. ←; TROOT. Function documentation; TROOT(); Default ctor. TROOT(const char* name, const char* title, VoidFuncPtr_t* initfunc = 0); Initialize the ROOT system. The creation of the TROOT object initializes; the ROOT system. It must be the first ROOT related action that is; performed by a program. The TROOT object must be created on the stack; (can not be called via new since ""operator new"" is protected). The; TROOT object is either created as a global object (outside the main(); program), or it is one of the first objects created in main().; Make sure that the TROOT object stays in scope for as long as ROOT; related actions are performed. TROOT is a so called singleton so; only one instance of it can be created. The single TROOT object can; always be accessed via the global pointer gROOT.; The name and title arguments can be used to identify the running; application. The initfunc argument can contain an array of; function pointers (last element must be 0). These functions are; executed at the end of the constructor. This way one can easily; extend the ROOT system without adding permanent dependencies; (e.g. the graphics system is initialized via such a function). ~TROOT(); Clean up and free resources used by ROOT (files, network sockets,; shared memory segments, etc.). void AddClass(TClass* cl); Add a class to the list and map of classes.; This routine is deprecated, use TClass::AddClass directly. void AddClassGenerator(TClassGenerator* gen); Add a class generator. This generator will be called by TClass::GetClass; in case its does not find a loaded rootcint dictionary to request the; creation of a TClass object. void Browse(TBrowser* b); Add browsable objects to TBrowser. Bool_t ClassSaved(TClass* cl); return class status bit kCl",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:29090,Security,access,access,29090," Return pointer to Geometry with name. TCollection * GetListOfEnums(Bool_t load = kFALSE). TCollection * GetListOfFunctionTemplates(). TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfTypes(Bool_t load = kFALSE); Return a dynamic list giving access to all TDataTypes (typedefs); currently defined. The list is populated on demand. Calling; gROOT->GetListOfTypes()->FindObject(nameoftype);; will return the TDataType corresponding to 'nameoftype'. If the; TDataType is not already in the list itself and the type does exist,; a new TDataType will be created and added to the list. Calling; gROOT->GetListOfTypes()->ls(); // or Print(); list only the typedefs that have been previously accessed throught the; list (plus the builtins types). void Idle(UInt_t idleTimeInSec, const char* command = 0); Execute command when system has been idle for idleTimeInSec seconds. Int_t IgnoreInclude(const char* fname, const char* expandedfname); Return 1 if the name of the given include file corresponds to a class that; is known to ROOT, e.g. ""TLorentzVector.h"" versus TLorentzVector. void InitSystem(); Initialize operating system interface. void InitThreads(); Load and initialize thread library. void InitInterpreter(); Initialize the in",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:29532,Security,access,accessed,29532," a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfTypes(Bool_t load = kFALSE); Return a dynamic list giving access to all TDataTypes (typedefs); currently defined. The list is populated on demand. Calling; gROOT->GetListOfTypes()->FindObject(nameoftype);; will return the TDataType corresponding to 'nameoftype'. If the; TDataType is not already in the list itself and the type does exist,; a new TDataType will be created and added to the list. Calling; gROOT->GetListOfTypes()->ls(); // or Print(); list only the typedefs that have been previously accessed throught the; list (plus the builtins types). void Idle(UInt_t idleTimeInSec, const char* command = 0); Execute command when system has been idle for idleTimeInSec seconds. Int_t IgnoreInclude(const char* fname, const char* expandedfname); Return 1 if the name of the given include file corresponds to a class that; is known to ROOT, e.g. ""TLorentzVector.h"" versus TLorentzVector. void InitSystem(); Initialize operating system interface. void InitThreads(); Load and initialize thread library. void InitInterpreter(); Initialize the interpreter. Should be called only after main(),; to make sure LLVM/Clang is fully initialized. TClass * LoadClass(const char* name, Bool_t silent = kFALSE) const; Helper function used by TClass::GetClass().; This function attempts to load the dictionary for 'classname'; either from the TClassTable or from the list of generator.; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class ",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:15011,Testability,Test,TestBit,15011,"errupt(Bool_t flag = kTRUE); voidSetLineHasBeenProcessed(); voidSetLineIsProcessing(); static voidSetMacroPath(const char* newpath); virtual voidTDirectory::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); voidSetMustClean(Bool_t flag = kTRUE); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetReadingObject(Bool_t flag = kTRUE); virtual voidTDirectory::SetSeekDir(Long64_t); voidSetSelectedPad(TVirtualPad* pad); voidSetSelectedPrimitive(const TObject* obj); voidSetStyle(const char* stylename = ""Default""); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectory::SetTRefAction(TObject*, TObject*); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDirectory::SetWritable(Bool_t); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTDirectory::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTime(Int_t casetime = 1); Int_tTimer() const; TROOT(const char* name, const char* title, VoidFuncPtr_t* initfunc = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDirectory::Write(const char* = 0, Int_t = 0, Int_t = 0); virtual Int_tTDirectory::Write(const char* = 0, Int_t = 0, Int_t = 0) const; virtual voidTDirectory::WriteDirHeader(); virtual voidTDirectory::WriteKeys(); virtual Int_tTDirectory::WriteObjectAny(const void*, const char*, const char*, Option_t* = """", Int_t = 0); virtual Int_tTDirectory::WriteObjectAny(const void*, const TClass*, const char*, Option_t* = """", Int_t = 0); virtual Int_tTDirectory::WriteTObject(const TObject* obj, const char* name = 0, Option_t* = """", Int_t = 0).",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:15050,Testability,Test,TestBits,15050,"errupt(Bool_t flag = kTRUE); voidSetLineHasBeenProcessed(); voidSetLineIsProcessing(); static voidSetMacroPath(const char* newpath); virtual voidTDirectory::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); voidSetMustClean(Bool_t flag = kTRUE); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetReadingObject(Bool_t flag = kTRUE); virtual voidTDirectory::SetSeekDir(Long64_t); voidSetSelectedPad(TVirtualPad* pad); voidSetSelectedPrimitive(const TObject* obj); voidSetStyle(const char* stylename = ""Default""); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectory::SetTRefAction(TObject*, TObject*); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDirectory::SetWritable(Bool_t); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTDirectory::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTime(Int_t casetime = 1); Int_tTimer() const; TROOT(const char* name, const char* title, VoidFuncPtr_t* initfunc = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDirectory::Write(const char* = 0, Int_t = 0, Int_t = 0); virtual Int_tTDirectory::Write(const char* = 0, Int_t = 0, Int_t = 0) const; virtual voidTDirectory::WriteDirHeader(); virtual voidTDirectory::WriteKeys(); virtual Int_tTDirectory::WriteObjectAny(const void*, const char*, const char*, Option_t* = """", Int_t = 0); virtual Int_tTDirectory::WriteObjectAny(const void*, const TClass*, const char*, Option_t* = """", Int_t = 0); virtual Int_tTDirectory::WriteTObject(const TObject* obj, const char* name = 0, Option_t* = """", Int_t = 0).",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TROOT.html:2575,Usability,Clear,Clear,2575," virtual~TROOT(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectory::Add(TObject* obj, Bool_t replace = kFALSE); voidAddClass(TClass* cl); voidAddClassGenerator(TClassGenerator* gen); static voidTDirectory::AddDirectory(",MatchSource.WIKI,root/html602/TROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TROOT.html
https://root.cern/root/html602/TRootApplication.html:122,Modifiability,inherit,inheritance,122,". TRootApplication. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TRootApplication. class TRootApplication: public TApplicationImp. TRootApplication. This class create the ROOT native GUI version of the ROOT; application environment. This in contrast to the Win32 version.; Once the native widgets work on Win32 this class can be folded into; the TApplication class (since all graphic will go via TVirtualX). Function Members (Methods); public:. virtual~TRootApplication(); virtual const char*TApplicationImp::ApplicationName() const; static TClass*Class(); TGClient*Client() const; virtual Int_tTApplicationImp::ExecCommand(TGWin32Command* code, Bool_t synch); virtual voidHide(); virtual voidIconify(); virtual voidInit(); virtual TClass*IsA() const; virtual Bool_tIsCmdThread(); virtual voidLower(); virtual voidOpen(); TRootApplication&operator=(const TRootApplication&); virtual voidRaise(); virtual voidShow(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRootApplication(const TRootApplication&); TRootApplication(const char* appClassName, Int_t* argc, char** argv). private:. voidGetOptions(Int_t* argc, char** argv); TRootApplication(). Data Members; protected:. TStringTApplicationImp::fApplicationNameapplication name. private:. TGClient*fClientpointer to the client environment; char*fDisplaydisplay server to connect to. Class Charts. Inheritance Chart:. TApplicationImp. ←; TRootApplication. Function documentation; TRootApplication(const char* appClassName, Int_t* argc, char** argv); Create ROOT application environment. ~TRootApplication(); Delete ROOT application environment. Bool_t IsCmdThread(); By default (for UNIX) ROOT is a single thread application; For win32gdk re",MatchSource.WIKI,root/html602/TRootApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootApplication.html
https://root.cern/root/html602/TRootApplication.html:1658,Modifiability,Inherit,Inheritance,1658,"pplication(); virtual const char*TApplicationImp::ApplicationName() const; static TClass*Class(); TGClient*Client() const; virtual Int_tTApplicationImp::ExecCommand(TGWin32Command* code, Bool_t synch); virtual voidHide(); virtual voidIconify(); virtual voidInit(); virtual TClass*IsA() const; virtual Bool_tIsCmdThread(); virtual voidLower(); virtual voidOpen(); TRootApplication&operator=(const TRootApplication&); virtual voidRaise(); virtual voidShow(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRootApplication(const TRootApplication&); TRootApplication(const char* appClassName, Int_t* argc, char** argv). private:. voidGetOptions(Int_t* argc, char** argv); TRootApplication(). Data Members; protected:. TStringTApplicationImp::fApplicationNameapplication name. private:. TGClient*fClientpointer to the client environment; char*fDisplaydisplay server to connect to. Class Charts. Inheritance Chart:. TApplicationImp. ←; TRootApplication. Function documentation; TRootApplication(const char* appClassName, Int_t* argc, char** argv); Create ROOT application environment. ~TRootApplication(); Delete ROOT application environment. Bool_t IsCmdThread(); By default (for UNIX) ROOT is a single thread application; For win32gdk returns kTRUE if it's called from inside of server/cmd thread. void GetOptions(Int_t* argc, char** argv); Handle command line arguments. Arguments handled are removed from the; argument array. Currently only option ""-display xserver"" is considered. TRootApplication(); { fClient = 0; fDisplay = 0; }. TRootApplication(const char* appClassName, Int_t* argc, char** argv). void Show(); { }. void Hide(); { }. void Iconify(); { }. void Init(); { }. void Open(); { }. void Raise(); { }. void Lower(); { }. » Author: Fons Rademakers 15/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 15:29; This",MatchSource.WIKI,root/html602/TRootApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootApplication.html
https://root.cern/root/html602/TRootAuth.html:1245,Availability,failure,failure,1245,". TRootAuth. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » AUTH; » TRootAuth. class TRootAuth: public TVirtualAuth. TRootAuth. TVirtualAuth implementation based on the old client authentication; code. Function Members (Methods); public:. virtual~TRootAuth(); virtual TSecContext*Authenticate(TSocket*, const char* host, const char* user, Option_t* options = """"); static TClass*Class(); virtual Int_tClientVersion(); virtual voidErrorMsg(const char* where, Int_t ecode = -1); virtual TClass*IsA() const; virtual const char*Name(); TRootAuth&operator=(const TRootAuth&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRootAuth(); TRootAuth(const TRootAuth&). Class Charts. Inheritance Chart:. TVirtualAuth. ←; TRootAuth. Function documentation; TSecContext * Authenticate(TSocket* , const char* host, const char* user, Option_t* options = """"); Runs authentication on socket s.; Invoked when dynamic loading is needed.; Returns 1 on success, 0 on failure. Int_t ClientVersion(); Return client version;. void ErrorMsg(const char* where, Int_t ecode = -1); Print error string corresponding to ecode, prepending location. TRootAuth(); { }. virtual ~TRootAuth(); { }. const char * Name(); { return ""Root""; }. » Author: Gerardo Ganis 08/07/05 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/auth:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootAuth.html
https://root.cern/root/html602/TRootAuth.html:1306,Availability,Error,ErrorMsg,1306,". TRootAuth. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » AUTH; » TRootAuth. class TRootAuth: public TVirtualAuth. TRootAuth. TVirtualAuth implementation based on the old client authentication; code. Function Members (Methods); public:. virtual~TRootAuth(); virtual TSecContext*Authenticate(TSocket*, const char* host, const char* user, Option_t* options = """"); static TClass*Class(); virtual Int_tClientVersion(); virtual voidErrorMsg(const char* where, Int_t ecode = -1); virtual TClass*IsA() const; virtual const char*Name(); TRootAuth&operator=(const TRootAuth&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRootAuth(); TRootAuth(const TRootAuth&). Class Charts. Inheritance Chart:. TVirtualAuth. ←; TRootAuth. Function documentation; TSecContext * Authenticate(TSocket* , const char* host, const char* user, Option_t* options = """"); Runs authentication on socket s.; Invoked when dynamic loading is needed.; Returns 1 on success, 0 on failure. Int_t ClientVersion(); Return client version;. void ErrorMsg(const char* where, Int_t ecode = -1); Print error string corresponding to ecode, prepending location. TRootAuth(); { }. virtual ~TRootAuth(); { }. const char * Name(); { return ""Root""; }. » Author: Gerardo Ganis 08/07/05 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/auth:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootAuth.html
https://root.cern/root/html602/TRootAuth.html:1359,Availability,error,error,1359,". TRootAuth. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » AUTH; » TRootAuth. class TRootAuth: public TVirtualAuth. TRootAuth. TVirtualAuth implementation based on the old client authentication; code. Function Members (Methods); public:. virtual~TRootAuth(); virtual TSecContext*Authenticate(TSocket*, const char* host, const char* user, Option_t* options = """"); static TClass*Class(); virtual Int_tClientVersion(); virtual voidErrorMsg(const char* where, Int_t ecode = -1); virtual TClass*IsA() const; virtual const char*Name(); TRootAuth&operator=(const TRootAuth&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRootAuth(); TRootAuth(const TRootAuth&). Class Charts. Inheritance Chart:. TVirtualAuth. ←; TRootAuth. Function documentation; TSecContext * Authenticate(TSocket* , const char* host, const char* user, Option_t* options = """"); Runs authentication on socket s.; Invoked when dynamic loading is needed.; Returns 1 on success, 0 on failure. Int_t ClientVersion(); Return client version;. void ErrorMsg(const char* where, Int_t ecode = -1); Print error string corresponding to ecode, prepending location. TRootAuth(); { }. virtual ~TRootAuth(); { }. const char * Name(); { return ""Root""; }. » Author: Gerardo Ganis 08/07/05 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/auth:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootAuth.html
https://root.cern/root/html602/TRootAuth.html:115,Modifiability,inherit,inheritance,115,". TRootAuth. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » AUTH; » TRootAuth. class TRootAuth: public TVirtualAuth. TRootAuth. TVirtualAuth implementation based on the old client authentication; code. Function Members (Methods); public:. virtual~TRootAuth(); virtual TSecContext*Authenticate(TSocket*, const char* host, const char* user, Option_t* options = """"); static TClass*Class(); virtual Int_tClientVersion(); virtual voidErrorMsg(const char* where, Int_t ecode = -1); virtual TClass*IsA() const; virtual const char*Name(); TRootAuth&operator=(const TRootAuth&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRootAuth(); TRootAuth(const TRootAuth&). Class Charts. Inheritance Chart:. TVirtualAuth. ←; TRootAuth. Function documentation; TSecContext * Authenticate(TSocket* , const char* host, const char* user, Option_t* options = """"); Runs authentication on socket s.; Invoked when dynamic loading is needed.; Returns 1 on success, 0 on failure. Int_t ClientVersion(); Return client version;. void ErrorMsg(const char* where, Int_t ecode = -1); Print error string corresponding to ecode, prepending location. TRootAuth(); { }. virtual ~TRootAuth(); { }. const char * Name(); { return ""Root""; }. » Author: Gerardo Ganis 08/07/05 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/auth:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootAuth.html
https://root.cern/root/html602/TRootAuth.html:972,Modifiability,Inherit,Inheritance,972,". TRootAuth. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » AUTH; » TRootAuth. class TRootAuth: public TVirtualAuth. TRootAuth. TVirtualAuth implementation based on the old client authentication; code. Function Members (Methods); public:. virtual~TRootAuth(); virtual TSecContext*Authenticate(TSocket*, const char* host, const char* user, Option_t* options = """"); static TClass*Class(); virtual Int_tClientVersion(); virtual voidErrorMsg(const char* where, Int_t ecode = -1); virtual TClass*IsA() const; virtual const char*Name(); TRootAuth&operator=(const TRootAuth&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRootAuth(); TRootAuth(const TRootAuth&). Class Charts. Inheritance Chart:. TVirtualAuth. ←; TRootAuth. Function documentation; TSecContext * Authenticate(TSocket* , const char* host, const char* user, Option_t* options = """"); Runs authentication on socket s.; Invoked when dynamic loading is needed.; Returns 1 on success, 0 on failure. Int_t ClientVersion(); Return client version;. void ErrorMsg(const char* where, Int_t ecode = -1); Print error string corresponding to ecode, prepending location. TRootAuth(); { }. virtual ~TRootAuth(); { }. const char * Name(); { return ""Root""; }. » Author: Gerardo Ganis 08/07/05 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/auth:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootAuth.html
https://root.cern/root/html602/TRootAuth.html:1198,Performance,load,loading,1198,". TRootAuth. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » AUTH; » TRootAuth. class TRootAuth: public TVirtualAuth. TRootAuth. TVirtualAuth implementation based on the old client authentication; code. Function Members (Methods); public:. virtual~TRootAuth(); virtual TSecContext*Authenticate(TSocket*, const char* host, const char* user, Option_t* options = """"); static TClass*Class(); virtual Int_tClientVersion(); virtual voidErrorMsg(const char* where, Int_t ecode = -1); virtual TClass*IsA() const; virtual const char*Name(); TRootAuth&operator=(const TRootAuth&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRootAuth(); TRootAuth(const TRootAuth&). Class Charts. Inheritance Chart:. TVirtualAuth. ←; TRootAuth. Function documentation; TSecContext * Authenticate(TSocket* , const char* host, const char* user, Option_t* options = """"); Runs authentication on socket s.; Invoked when dynamic loading is needed.; Returns 1 on success, 0 on failure. Int_t ClientVersion(); Return client version;. void ErrorMsg(const char* where, Int_t ecode = -1); Print error string corresponding to ecode, prepending location. TRootAuth(); { }. virtual ~TRootAuth(); { }. const char * Name(); { return ""Root""; }. » Author: Gerardo Ganis 08/07/05 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/auth:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootAuth.html
https://root.cern/root/html602/TRootAuth.html:379,Security,authenticat,authentication,379,". TRootAuth. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » AUTH; » TRootAuth. class TRootAuth: public TVirtualAuth. TRootAuth. TVirtualAuth implementation based on the old client authentication; code. Function Members (Methods); public:. virtual~TRootAuth(); virtual TSecContext*Authenticate(TSocket*, const char* host, const char* user, Option_t* options = """"); static TClass*Class(); virtual Int_tClientVersion(); virtual voidErrorMsg(const char* where, Int_t ecode = -1); virtual TClass*IsA() const; virtual const char*Name(); TRootAuth&operator=(const TRootAuth&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRootAuth(); TRootAuth(const TRootAuth&). Class Charts. Inheritance Chart:. TVirtualAuth. ←; TRootAuth. Function documentation; TSecContext * Authenticate(TSocket* , const char* host, const char* user, Option_t* options = """"); Runs authentication on socket s.; Invoked when dynamic loading is needed.; Returns 1 on success, 0 on failure. Int_t ClientVersion(); Return client version;. void ErrorMsg(const char* where, Int_t ecode = -1); Print error string corresponding to ecode, prepending location. TRootAuth(); { }. virtual ~TRootAuth(); { }. const char * Name(); { return ""Root""; }. » Author: Gerardo Ganis 08/07/05 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/auth:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootAuth.html
https://root.cern/root/html602/TRootAuth.html:479,Security,Authenticat,Authenticate,479,". TRootAuth. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » AUTH; » TRootAuth. class TRootAuth: public TVirtualAuth. TRootAuth. TVirtualAuth implementation based on the old client authentication; code. Function Members (Methods); public:. virtual~TRootAuth(); virtual TSecContext*Authenticate(TSocket*, const char* host, const char* user, Option_t* options = """"); static TClass*Class(); virtual Int_tClientVersion(); virtual voidErrorMsg(const char* where, Int_t ecode = -1); virtual TClass*IsA() const; virtual const char*Name(); TRootAuth&operator=(const TRootAuth&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRootAuth(); TRootAuth(const TRootAuth&). Class Charts. Inheritance Chart:. TVirtualAuth. ←; TRootAuth. Function documentation; TSecContext * Authenticate(TSocket* , const char* host, const char* user, Option_t* options = """"); Runs authentication on socket s.; Invoked when dynamic loading is needed.; Returns 1 on success, 0 on failure. Int_t ClientVersion(); Return client version;. void ErrorMsg(const char* where, Int_t ecode = -1); Print error string corresponding to ecode, prepending location. TRootAuth(); { }. virtual ~TRootAuth(); { }. const char * Name(); { return ""Root""; }. » Author: Gerardo Ganis 08/07/05 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/auth:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootAuth.html
https://root.cern/root/html602/TRootAuth.html:1058,Security,Authenticat,Authenticate,1058,". TRootAuth. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » AUTH; » TRootAuth. class TRootAuth: public TVirtualAuth. TRootAuth. TVirtualAuth implementation based on the old client authentication; code. Function Members (Methods); public:. virtual~TRootAuth(); virtual TSecContext*Authenticate(TSocket*, const char* host, const char* user, Option_t* options = """"); static TClass*Class(); virtual Int_tClientVersion(); virtual voidErrorMsg(const char* where, Int_t ecode = -1); virtual TClass*IsA() const; virtual const char*Name(); TRootAuth&operator=(const TRootAuth&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRootAuth(); TRootAuth(const TRootAuth&). Class Charts. Inheritance Chart:. TVirtualAuth. ←; TRootAuth. Function documentation; TSecContext * Authenticate(TSocket* , const char* host, const char* user, Option_t* options = """"); Runs authentication on socket s.; Invoked when dynamic loading is needed.; Returns 1 on success, 0 on failure. Int_t ClientVersion(); Return client version;. void ErrorMsg(const char* where, Int_t ecode = -1); Print error string corresponding to ecode, prepending location. TRootAuth(); { }. virtual ~TRootAuth(); { }. const char * Name(); { return ""Root""; }. » Author: Gerardo Ganis 08/07/05 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/auth:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootAuth.html
https://root.cern/root/html602/TRootAuth.html:1148,Security,authenticat,authentication,1148,". TRootAuth. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » AUTH; » TRootAuth. class TRootAuth: public TVirtualAuth. TRootAuth. TVirtualAuth implementation based on the old client authentication; code. Function Members (Methods); public:. virtual~TRootAuth(); virtual TSecContext*Authenticate(TSocket*, const char* host, const char* user, Option_t* options = """"); static TClass*Class(); virtual Int_tClientVersion(); virtual voidErrorMsg(const char* where, Int_t ecode = -1); virtual TClass*IsA() const; virtual const char*Name(); TRootAuth&operator=(const TRootAuth&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRootAuth(); TRootAuth(const TRootAuth&). Class Charts. Inheritance Chart:. TVirtualAuth. ←; TRootAuth. Function documentation; TSecContext * Authenticate(TSocket* , const char* host, const char* user, Option_t* options = """"); Runs authentication on socket s.; Invoked when dynamic loading is needed.; Returns 1 on success, 0 on failure. Int_t ClientVersion(); Return client version;. void ErrorMsg(const char* where, Int_t ecode = -1); Print error string corresponding to ecode, prepending location. TRootAuth(); { }. virtual ~TRootAuth(); { }. const char * Name(); { return ""Root""; }. » Author: Gerardo Ganis 08/07/05 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/auth:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootAuth.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootAuth.html
https://root.cern/root/html602/TRootBrowser.html:4661,Availability,Error,Error,4661,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidEventInfo(Int_t event, Int_t px, Int_t py, TObject* selected); virtual Long_tExecPlugin(const char* name = 0, const char* fname = 0, const char* cmd = 0, Int_t pos = kRight, Int_t subpos = -1); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteDefaultAction(TObject* obj)SIGNAL ; virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGFrame*GetActFrame() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFram",MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:4988,Availability,error,error,4988,"st char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidEventInfo(Int_t event, Int_t px, Int_t py, TObject* selected); virtual Long_tExecPlugin(const char* name = 0, const char* fname = 0, const char* cmd = 0, Int_t pos = kRight, Int_t subpos = -1); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteDefaultAction(TObject* obj)SIGNAL ; virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGFrame*GetActFrame() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; virtual TBrowser*TBrowserImp::GetBrowser() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFra",MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:5072,Availability,error,error,5072,"; voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidEventInfo(Int_t event, Int_t px, Int_t py, TObject* selected); virtual Long_tExecPlugin(const char* name = 0, const char* fname = 0, const char* cmd = 0, Int_t pos = kRight, Int_t subpos = -1); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteDefaultAction(TObject* obj)SIGNAL ; virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGFrame*GetActFrame() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; virtual TBrowser*TBrowserImp::GetBrowser() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() ",MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:23239,Availability,mask,mask,23239,,MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:12013,Integrability,Message,Message,12013,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; static TBrowserImp*NewBrowser(TBrowser* b = 0, const char* title = ""ROOT Browser"", UInt_t width = 800, UInt_t height = 500, Option_t* opt = """"); static TBrowserImp*NewBrowser(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """"); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObjec",MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:118,Modifiability,inherit,inheritance,118,". TRootBrowser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TRootBrowser. class TRootBrowser: public TGMainFrame, public TBrowserImp. TRootBrowser. The main ROOT object browser. Function Members (Methods); public:. virtual~TRootBrowser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidAdd(TObject* obj, const char* name = 0, Int_t check = -1); virtual voidTBrowserImp::AddCheckBox(TObject*, Bool_t = kFALSE); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBrowseObj(TObject* obj)SIGNAL ; TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); virtual voidChecked(TObject* obj, Bool_t check)SIGNAL ; virtual voidTBrowserImp::CheckObjectItem(TObject*, Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidCloneBrowser(); virtual voidCloseTab(Int_t id); virtual voidCloseTabs(); virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); vi",MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:10520,Modifiability,Inherit,InheritsFrom,10520,"tual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tHandleKey(Event_t* event); voidHandleMenu(Int_t id); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTBrowserImp::Iconify(); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInitPlugins(Option_t* opt = """"); virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tIsCloseTabShown() const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompos",MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:10586,Modifiability,Inherit,InheritsFrom,10586,"indow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tHandleKey(Event_t* event); voidHandleMenu(Int_t id); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTBrowserImp::Iconify(); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInitPlugins(Option_t* opt = """"); virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tIsCloseTabShown() const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZ",MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:24681,Modifiability,Plugin,Plugin,24681,"nt_tfEditSubPosId of subtab in ""Edit"" mode; TGTab*fEditTabTab in ""Edit"" mode; UInt_tTGFrame::fEventMaskcurrenty active event mask; TGFrameElement*TGFrame::fFEpointer to frame element; TGHorizontalFrame*fH1Horizontal frame; TGHorizontalFrame*fH2Horizontal frame; TGHSplitter*fHSplitterHorizontal splitter; UInt_tTGFrame::fHeightframe height; TGHorizontalFrame*fHfHorizontal frame; TStringTGMainFrame::fIconNameicon name; const TGPicture*fIconPicicon picture; TStringTGMainFrame::fIconPixmapicon pixmap name; Handle_tTGObject::fIdX11/Win32 Window identifier; TGLayoutHints*fLH0Layout hints, part 1; TGLayoutHints*fLH1Layout hints, part 1; TGLayoutHints*fLH2Layout hints, part 1; TGLayoutHints*fLH3Layout hints, part 1; TGLayoutHints*fLH4Layout hints, part 2; TGLayoutHints*fLH5Layout hints, part 2; TGLayoutHints*fLH6Layout hints, part 2; TGLayoutHints*fLH7Layout hints, part 2; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; UInt_tTGMainFrame::fMWMFuncsMWM functions; UInt_tTGMainFrame::fMWMInputMWM input modes; UInt_tTGMainFrame::fMWMValueMWM decoration hints; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; TGMenuBar*fMenuBarMain (owned) menu bar; TGPopupMenu*fMenuExecPlugin""Exec Plugin"" popup menu; TGPopupMenu*fMenuFile""File"" popup menu; TGHorizontalFrame*fMenuFrameShared menu frame; TGPopupMenu*fMenuHelp""Browser Help"" popup menu; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Int_tfNbInitPluginsNumber of initial plugins (from .",MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:25100,Modifiability,plugin,plugins,25100,"nt_tfEditSubPosId of subtab in ""Edit"" mode; TGTab*fEditTabTab in ""Edit"" mode; UInt_tTGFrame::fEventMaskcurrenty active event mask; TGFrameElement*TGFrame::fFEpointer to frame element; TGHorizontalFrame*fH1Horizontal frame; TGHorizontalFrame*fH2Horizontal frame; TGHSplitter*fHSplitterHorizontal splitter; UInt_tTGFrame::fHeightframe height; TGHorizontalFrame*fHfHorizontal frame; TStringTGMainFrame::fIconNameicon name; const TGPicture*fIconPicicon picture; TStringTGMainFrame::fIconPixmapicon pixmap name; Handle_tTGObject::fIdX11/Win32 Window identifier; TGLayoutHints*fLH0Layout hints, part 1; TGLayoutHints*fLH1Layout hints, part 1; TGLayoutHints*fLH2Layout hints, part 1; TGLayoutHints*fLH3Layout hints, part 1; TGLayoutHints*fLH4Layout hints, part 2; TGLayoutHints*fLH5Layout hints, part 2; TGLayoutHints*fLH6Layout hints, part 2; TGLayoutHints*fLH7Layout hints, part 2; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; UInt_tTGMainFrame::fMWMFuncsMWM functions; UInt_tTGMainFrame::fMWMInputMWM input modes; UInt_tTGMainFrame::fMWMValueMWM decoration hints; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; TGMenuBar*fMenuBarMain (owned) menu bar; TGPopupMenu*fMenuExecPlugin""Exec Plugin"" popup menu; TGPopupMenu*fMenuFile""File"" popup menu; TGHorizontalFrame*fMenuFrameShared menu frame; TGPopupMenu*fMenuHelp""Browser Help"" popup menu; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Int_tfNbInitPluginsNumber of initial plugins (from .",MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:25376,Modifiability,plugin,plugins,25376,,MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:27650,Modifiability,Inherit,Inheritance,27650,":fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. TBrowserImp. ←; TRootBrowser. ←. TEveBrowser. Function documentation; TRootBrowser(TBrowser* b = 0, const char* name = ""ROOT Browser"", UInt_t width = 800, UInt_t height = 500, Option_t* opt = """", Bool_t initshow = kTRUE); Create browser with a specified width and height. TRootBrowser(TBrowser* b, const char* name, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """", Bool_t initshow = kTRUE); Create browser with a specified width and height and at position x, y. void CreateBrowser(const char* name). ~TRootBrowser(); Clean up all widgets, frames and layouthints that were used. void Add(TObject* obj, const char* name = 0, Int_t check = -1); Add items to the actual browser. This function has to be called; by the Browse() member function of objects when they are; called by a browser. If check < 0 (default) no check box is drawn,; if 0 then unchecked checkbox is added, if 1 ",MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:28960,Modifiability,plugin,plugins,28960,"= """", Bool_t initshow = kTRUE); Create browser with a specified width and height. TRootBrowser(TBrowser* b, const char* name, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """", Bool_t initshow = kTRUE); Create browser with a specified width and height and at position x, y. void CreateBrowser(const char* name). ~TRootBrowser(); Clean up all widgets, frames and layouthints that were used. void Add(TObject* obj, const char* name = 0, Int_t check = -1); Add items to the actual browser. This function has to be called; by the Browse() member function of objects when they are; called by a browser. If check < 0 (default) no check box is drawn,; if 0 then unchecked checkbox is added, if 1 checked checkbox is added. void BrowseObj(TObject* obj); Browse object. This, in turn, will trigger the calling of; TRootBrowser::Add() which will fill the IconBox and the tree.; Emits signal ""BrowseObj(TObject*)"". void CloneBrowser(); Clone the browser. A new Browser will be created, with the same; plugins executed in the current one. void CloseTab(Int_t id); Remove tab element id from right tab. void CloseTabs(); Properly close the mainframes embedded in the different tabs. void CloseWindow(); Called when window is closed via the window manager. void DoTab(Int_t id); Handle Tab navigation. void EventInfo(Int_t event, Int_t px, Int_t py, TObject* selected); Display a tooltip with infos about the primitive below the cursor. Long_t ExecPlugin(const char* name = 0, const char* fname = 0, const char* cmd = 0, Int_t pos = kRight, Int_t subpos = -1); Execute a macro and embed the created frame in the tab ""pos""; and tab element ""subpos"". Option_t * GetDrawOption() const; Returns drawing option. TGTab* GetTab(Int_t pos) const; Returns the TGTab at position pos. Bool_t HandleKey(Event_t* event); Handle keyboard events. void HandleMenu(Int_t id); Handle menu entries events. void InitPlugins(Option_t* opt = """"); Initialize default plugins. Could be also of the form:; StartEmbedding(0);",MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:29900,Modifiability,plugin,plugins,29900,"oid CloneBrowser(); Clone the browser. A new Browser will be created, with the same; plugins executed in the current one. void CloseTab(Int_t id); Remove tab element id from right tab. void CloseTabs(); Properly close the mainframes embedded in the different tabs. void CloseWindow(); Called when window is closed via the window manager. void DoTab(Int_t id); Handle Tab navigation. void EventInfo(Int_t event, Int_t px, Int_t py, TObject* selected); Display a tooltip with infos about the primitive below the cursor. Long_t ExecPlugin(const char* name = 0, const char* fname = 0, const char* cmd = 0, Int_t pos = kRight, Int_t subpos = -1); Execute a macro and embed the created frame in the tab ""pos""; and tab element ""subpos"". Option_t * GetDrawOption() const; Returns drawing option. TGTab* GetTab(Int_t pos) const; Returns the TGTab at position pos. Bool_t HandleKey(Event_t* event); Handle keyboard events. void HandleMenu(Int_t id); Handle menu entries events. void InitPlugins(Option_t* opt = """"); Initialize default plugins. Could be also of the form:; StartEmbedding(0);; TPluginHandler *ph;; ph = gROOT->GetPluginManager()->FindHandler(""TGClassBrowser"");; if (ph && ph->LoadPlugin() != -1) {; ph->ExecPlugin(3, gClient->GetRoot(), 200, 500);; }; StopEmbedding();. void ReallyDelete(); Really delete the browser and the this GUI. void RecursiveRemove(TObject* obj); Recursively remove object from browser. void RecursiveReparent(TGPopupMenu* popup); Recursively reparent TGPopupMenu to gClient->GetDefaultRoot(). void Refresh(Bool_t force = kFALSE); Refresh the actual browser contents. void RemoveTab(Int_t pos, Int_t subpos); Remove tab element ""subpos"" from tab ""pos"". void SetTab(Int_t pos = kRight, Int_t subpos = -1); Switch to Tab ""subpos"" in TGTab ""pos"". void SetTabTitle(const char* title, Int_t pos = kRight, Int_t subpos = -1); Set text ""title"" of Tab ""subpos"" in TGTab ""pos"". void SetStatusText(const char* txt, Int_t col); Set text in culumn col in status bar. void ShowMenu(TG",MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:31805,Modifiability,plugin,plugin,31805,"pos = -1); Set text ""title"" of Tab ""subpos"" in TGTab ""pos"". void SetStatusText(const char* txt, Int_t col); Set text in culumn col in status bar. void ShowMenu(TGCompositeFrame* menu); Show the selected frame's menu and hide previous one. void StartEmbedding(Int_t pos = kRight, Int_t subpos = -1); Start embedding external frame in the tab ""pos"" and tab element ""subpos"". void StopEmbedding(const char* name, TGLayoutHints* layout); Stop embedding external frame in the current editable frame. void SwitchMenus(TGCompositeFrame* from); Move the menu from original frame to our TGMenuFrame, or display the; menu associated to the current tab. void DoubleClicked(TObject* obj); Emits signal when double clicking on icon. void Checked(TObject* obj, Bool_t check); Emits signal when double clicking on icon. void ExecuteDefaultAction(TObject* obj); Emits signal ""ExecuteDefaultAction(TObject*)"". TBrowserImp * NewBrowser(TBrowser* b = 0, const char* title = ""ROOT Browser"", UInt_t width = 800, UInt_t height = 500, Option_t* opt = """"); static contructor returning TBrowserImp,; as needed by the plugin mechanism. TBrowserImp * NewBrowser(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """"); static contructor returning TBrowserImp,; as needed by the plugin mechanism. TRootBrowser(const TRootBrowser& ). TRootBrowser& operator=(const TRootBrowser& ). TGFrame * GetActFrame() const; { return (TGFrame *)fEditFrame; }. TGFrame * GetToolbarFrame() const; { return (TGFrame *)fToolbarFrame; }. TGStatusBar * GetStatusBar() const; { return fStatusBar; }. TGTab * GetTabLeft() const; { return fTabLeft; }. TGTab * GetTabRight() const; { return fTabRight; }. TGTab * GetTabBottom() const; { return fTabBottom; }. void SetActBrowser(TBrowserImp* b); { fActBrowser = b; }. void StopEmbedding(const char* name = 0); { StopEmbedding(name, 0); }. void Show(); { MapRaised(); }. TGMainFrame * GetMainFrame() const; { return (TGMainFrame *)this; }. void ShowCloseTab(Bool",MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:32007,Modifiability,plugin,plugin,32007," menu and hide previous one. void StartEmbedding(Int_t pos = kRight, Int_t subpos = -1); Start embedding external frame in the tab ""pos"" and tab element ""subpos"". void StopEmbedding(const char* name, TGLayoutHints* layout); Stop embedding external frame in the current editable frame. void SwitchMenus(TGCompositeFrame* from); Move the menu from original frame to our TGMenuFrame, or display the; menu associated to the current tab. void DoubleClicked(TObject* obj); Emits signal when double clicking on icon. void Checked(TObject* obj, Bool_t check); Emits signal when double clicking on icon. void ExecuteDefaultAction(TObject* obj); Emits signal ""ExecuteDefaultAction(TObject*)"". TBrowserImp * NewBrowser(TBrowser* b = 0, const char* title = ""ROOT Browser"", UInt_t width = 800, UInt_t height = 500, Option_t* opt = """"); static contructor returning TBrowserImp,; as needed by the plugin mechanism. TBrowserImp * NewBrowser(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """"); static contructor returning TBrowserImp,; as needed by the plugin mechanism. TRootBrowser(const TRootBrowser& ). TRootBrowser& operator=(const TRootBrowser& ). TGFrame * GetActFrame() const; { return (TGFrame *)fEditFrame; }. TGFrame * GetToolbarFrame() const; { return (TGFrame *)fToolbarFrame; }. TGStatusBar * GetStatusBar() const; { return fStatusBar; }. TGTab * GetTabLeft() const; { return fTabLeft; }. TGTab * GetTabRight() const; { return fTabRight; }. TGTab * GetTabBottom() const; { return fTabBottom; }. void SetActBrowser(TBrowserImp* b); { fActBrowser = b; }. void StopEmbedding(const char* name = 0); { StopEmbedding(name, 0); }. void Show(); { MapRaised(); }. TGMainFrame * GetMainFrame() const; { return (TGMainFrame *)this; }. void ShowCloseTab(Bool_t show); { fShowCloseTab = show; }. Bool_t IsCloseTabShown() const; { return fShowCloseTab; }. » Author: Bertrand Bellenot 26/09/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last change",MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:30056,Performance,Load,LoadPlugin,30056," tab element id from right tab. void CloseTabs(); Properly close the mainframes embedded in the different tabs. void CloseWindow(); Called when window is closed via the window manager. void DoTab(Int_t id); Handle Tab navigation. void EventInfo(Int_t event, Int_t px, Int_t py, TObject* selected); Display a tooltip with infos about the primitive below the cursor. Long_t ExecPlugin(const char* name = 0, const char* fname = 0, const char* cmd = 0, Int_t pos = kRight, Int_t subpos = -1); Execute a macro and embed the created frame in the tab ""pos""; and tab element ""subpos"". Option_t * GetDrawOption() const; Returns drawing option. TGTab* GetTab(Int_t pos) const; Returns the TGTab at position pos. Bool_t HandleKey(Event_t* event); Handle keyboard events. void HandleMenu(Int_t id); Handle menu entries events. void InitPlugins(Option_t* opt = """"); Initialize default plugins. Could be also of the form:; StartEmbedding(0);; TPluginHandler *ph;; ph = gROOT->GetPluginManager()->FindHandler(""TGClassBrowser"");; if (ph && ph->LoadPlugin() != -1) {; ph->ExecPlugin(3, gClient->GetRoot(), 200, 500);; }; StopEmbedding();. void ReallyDelete(); Really delete the browser and the this GUI. void RecursiveRemove(TObject* obj); Recursively remove object from browser. void RecursiveReparent(TGPopupMenu* popup); Recursively reparent TGPopupMenu to gClient->GetDefaultRoot(). void Refresh(Bool_t force = kFALSE); Refresh the actual browser contents. void RemoveTab(Int_t pos, Int_t subpos); Remove tab element ""subpos"" from tab ""pos"". void SetTab(Int_t pos = kRight, Int_t subpos = -1); Switch to Tab ""subpos"" in TGTab ""pos"". void SetTabTitle(const char* title, Int_t pos = kRight, Int_t subpos = -1); Set text ""title"" of Tab ""subpos"" in TGTab ""pos"". void SetStatusText(const char* txt, Int_t col); Set text in culumn col in status bar. void ShowMenu(TGCompositeFrame* menu); Show the selected frame's menu and hide previous one. void StartEmbedding(Int_t pos = kRight, Int_t subpos = -1); Start embedding e",MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:10194,Security,Hash,Hash,10194,"tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tHandleKey(Event_t* event); voidHandleMenu(Int_t id); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTBrowserImp::Iconify(); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; voidInitPlugins(Option_t* opt = """"); virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tIsCloseTabShown() const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; vir",MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:17843,Testability,Test,TestBit,17843,"ab(Int_t pos = kRight, Int_t subpos = -1); voidSetTabTitle(const char* title, Int_t pos = kRight, Int_t subpos = -1); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShow(); virtual voidShowCloseTab(Bool_t show); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; voidShowMenu(TGCompositeFrame* menu); virtual voidStartEmbedding(Int_t pos = kRight, Int_t subpos = -1); virtual voidStopEmbedding(const char* name = 0); voidStopEmbedding(const char* name, TGLayoutHints* layout); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidSwitchMenus(TGCompositeFrame* from); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TRootBrowser(TBrowser* b = 0, const char* name = ""ROOT Browser"", UInt_t width = 800, UInt_t height = 500, Option_t* opt = """", Bool_t initshow = kTRUE); TRootBrowser(TBrowser* b, const char* name, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """", Bool_t initshow = kTRUE); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:17882,Testability,Test,TestBits,17882,"ab(Int_t pos = kRight, Int_t subpos = -1); voidSetTabTitle(const char* title, Int_t pos = kRight, Int_t subpos = -1); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShow(); virtual voidShowCloseTab(Bool_t show); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; voidShowMenu(TGCompositeFrame* menu); virtual voidStartEmbedding(Int_t pos = kRight, Int_t subpos = -1); virtual voidStopEmbedding(const char* name = 0); voidStopEmbedding(const char* name, TGLayoutHints* layout); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidSwitchMenus(TGCompositeFrame* from); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TRootBrowser(TBrowser* b = 0, const char* name = ""ROOT Browser"", UInt_t width = 800, UInt_t height = 500, Option_t* opt = """", Bool_t initshow = kTRUE); TRootBrowser(TBrowser* b, const char* name, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """", Bool_t initshow = kTRUE); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowser.html:1743,Usability,Clear,Clear,1743,"= 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBrowseObj(TObject* obj)SIGNAL ; TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); virtual voidChecked(TObject* obj, Bool_t check)SIGNAL ; virtual voidTBrowserImp::CheckObjectItem(TObject*, Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidCloneBrowser(); virtual voidCloseTab(Int_t id); virtual voidCloseTabs(); virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; voidCreateBrowser(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtu",MatchSource.WIKI,root/html602/TRootBrowser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowser.html
https://root.cern/root/html602/TRootBrowserLite.html:4715,Availability,Error,Error,4715,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidExecMacro(); virtual Long_tTBrowserImp::ExecPlugin(const char*, const char*, const char*, Int_t, Int_t); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteDefaultAction(TObject* obj)SIGNAL ; virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; virtual TBrowser*TBrows",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:4953,Availability,error,error,4953,"_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidExecMacro(); virtual Long_tTBrowserImp::ExecPlugin(const char*, const char*, const char*, Int_t, Int_t); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteDefaultAction(TObject* obj)SIGNAL ; virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; virtual TBrowser*TBrowserImp::GetBrowser() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:5037,Availability,error,error,5037,"t(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidExecMacro(); virtual Long_tTBrowserImp::ExecPlugin(const char*, const char*, const char*, Int_t, Int_t); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteDefaultAction(TObject* obj)SIGNAL ; virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; virtual TBrowser*TBrowserImp::GetBrowser() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame:",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:21918,Availability,mask,mask,21918,,MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:27929,Deployability,Update,UpdateDrawOption,27929,"alled by a browser. If check < 0 (default) no check box is drawn,; if 0 then unchecked checkbox is added, if 1 checked checkbox is added. void AddCheckBox(TObject* obj, Bool_t check = kFALSE); Add a checkbox in the TGListTreeItem corresponding to obj; and a checkmark on TGLVEntry if check = kTRUE. void CheckObjectItem(TObject* obj, Bool_t check = kFALSE); Check / uncheck the TGListTreeItem corresponding to this; object and add a checkmark on TGLVEntry if check = kTRUE. void RemoveCheckBox(TObject* obj); Remove checkbox from TGListTree and checkmark from TGListView. void AddToBox(TObject* obj, const char* name); Add items to the iconbox of the browser. void AddToTree(TObject* obj, const char* name, Int_t check = -1); Add items to the current TGListTree of the browser. void BrowseObj(TObject* obj); Browse object. This, in turn, will trigger the calling of; TRootBrowserLite::Add() which will fill the IconBox and the tree.; Emits signal ""BrowseObj(TObject*)"". void UpdateDrawOption(); add new draw option to the ""history"". TGFileContainer * GetIconBox() const; returns pointer to fIconBox object. void ReallyDelete(); Really delete the browser and the this GUI. void CloseWindow(); In case window is closed via WM we get here. void DisplayTotal(Int_t total, Int_t selected); Display in statusbar total number of objects and number of; selected objects in IconBox. void DisplayDirectory(); Display current directory in second label, fLbl2. void ExecuteDefaultAction(TObject* obj); Execute default action for selected object (action is specified; in the $HOME/.root.mimes or $ROOTSYS/etc/root.mimes file.; Emits signal ""ExecuteDefaultAction(TObject*)"". Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle menu and other command generated by the user. void Chdir(TGListTreeItem* item); Make object associated with item the current directory. void HighlightListLevel(); helper method to track history. void AddToHistory(TGListTreeItem* item); helper method to track history. vo",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:30182,Deployability,update,update,30182," it from history. void ListTreeHighlight(TGListTreeItem* item); Open tree item and list in iconbox its contents. void ToSystemDirectory(const char* dirname); display directory. void SetDrawOption(Option_t* option = """"); sets drawing option. Option_t * GetDrawOption() const; returns drawing option. void DoubleClicked(TObject* obj); Emits signal when double clicking on icon. void Checked(TObject* obj, Bool_t check); Emits signal when double clicking on icon. void IconBoxAction(TObject* obj); Default action when double clicking on icon. void RecursiveRemove(TObject* obj); Recursively remove object from browser. void Refresh(Bool_t force = kFALSE); Refresh the browser contents. void ShowToolBar(Bool_t show = kTRUE); Show or hide toolbar. void ShowStatusBar(Bool_t show = kTRUE); Show or hide statusbar. void SetDefaults(const char* iconStyle = 0, const char* sortBy = 0); Set defaults depending on settings in the user's .rootrc. void SetViewMode(Int_t new_mode, Bool_t force = kFALSE); Set iconbox's view mode and update menu and toolbar buttons accordingly. void SetSortMode(Int_t new_mode); Set iconbox's sort mode and update menu radio buttons accordingly. void Search(); starts serach dialog. void HideTextEdit(); hide text edit. void BrowseTextFile(const char* file); browse text file. void ExecMacro(); executed browsed text macro. void InterruptMacro(); interrupt browsed macro execution. void ShowMacroButtons(Bool_t show = kTRUE); show/hide macro buttons. void SetStatusText(const char* txt, Int_t col); Set text in column col in status bar. TBrowserImp * NewBrowser(TBrowser* b = 0, const char* title = ""ROOT Browser"", UInt_t width = 800, UInt_t height = 500, Option_t* opt = """"); Interface method to the old browser. TBrowserImp * NewBrowser(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """"); Interface method to the old browser. TRootBrowserLite(TBrowser* b = 0, const char* title = ""ROOT Browser"", UInt_t width = 800, UInt_t height",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:30289,Deployability,update,update,30289,"id ToSystemDirectory(const char* dirname); display directory. void SetDrawOption(Option_t* option = """"); sets drawing option. Option_t * GetDrawOption() const; returns drawing option. void DoubleClicked(TObject* obj); Emits signal when double clicking on icon. void Checked(TObject* obj, Bool_t check); Emits signal when double clicking on icon. void IconBoxAction(TObject* obj); Default action when double clicking on icon. void RecursiveRemove(TObject* obj); Recursively remove object from browser. void Refresh(Bool_t force = kFALSE); Refresh the browser contents. void ShowToolBar(Bool_t show = kTRUE); Show or hide toolbar. void ShowStatusBar(Bool_t show = kTRUE); Show or hide statusbar. void SetDefaults(const char* iconStyle = 0, const char* sortBy = 0); Set defaults depending on settings in the user's .rootrc. void SetViewMode(Int_t new_mode, Bool_t force = kFALSE); Set iconbox's view mode and update menu and toolbar buttons accordingly. void SetSortMode(Int_t new_mode); Set iconbox's sort mode and update menu radio buttons accordingly. void Search(); starts serach dialog. void HideTextEdit(); hide text edit. void BrowseTextFile(const char* file); browse text file. void ExecMacro(); executed browsed text macro. void InterruptMacro(); interrupt browsed macro execution. void ShowMacroButtons(Bool_t show = kTRUE); show/hide macro buttons. void SetStatusText(const char* txt, Int_t col); Set text in column col in status bar. TBrowserImp * NewBrowser(TBrowser* b = 0, const char* title = ""ROOT Browser"", UInt_t width = 800, UInt_t height = 500, Option_t* opt = """"); Interface method to the old browser. TBrowserImp * NewBrowser(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """"); Interface method to the old browser. TRootBrowserLite(TBrowser* b = 0, const char* title = ""ROOT Browser"", UInt_t width = 800, UInt_t height = 500). void CloseTabs(); { }. void Iconify(); { }. void ResizeBrowser(); { }. void Show(); { MapRaised(); }. TGLis",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:11839,Integrability,Message,Message,11839,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; static TBrowserImp*NewBrowser(TBrowser* b = 0, const char* title = ""ROOT Browser"", UInt_t width = 800, UInt_t height = 500, Option_t* opt = """"); static TBrowserImp*NewBrowser(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """"); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObjec",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:30052,Integrability,depend,depending,30052,"to the past. Bool_t HistoryForward(); go to the future. void DeleteListTreeItem(TGListTreeItem* item); delete list tree item, remove it from history. void ListTreeHighlight(TGListTreeItem* item); Open tree item and list in iconbox its contents. void ToSystemDirectory(const char* dirname); display directory. void SetDrawOption(Option_t* option = """"); sets drawing option. Option_t * GetDrawOption() const; returns drawing option. void DoubleClicked(TObject* obj); Emits signal when double clicking on icon. void Checked(TObject* obj, Bool_t check); Emits signal when double clicking on icon. void IconBoxAction(TObject* obj); Default action when double clicking on icon. void RecursiveRemove(TObject* obj); Recursively remove object from browser. void Refresh(Bool_t force = kFALSE); Refresh the browser contents. void ShowToolBar(Bool_t show = kTRUE); Show or hide toolbar. void ShowStatusBar(Bool_t show = kTRUE); Show or hide statusbar. void SetDefaults(const char* iconStyle = 0, const char* sortBy = 0); Set defaults depending on settings in the user's .rootrc. void SetViewMode(Int_t new_mode, Bool_t force = kFALSE); Set iconbox's view mode and update menu and toolbar buttons accordingly. void SetSortMode(Int_t new_mode); Set iconbox's sort mode and update menu radio buttons accordingly. void Search(); starts serach dialog. void HideTextEdit(); hide text edit. void BrowseTextFile(const char* file); browse text file. void ExecMacro(); executed browsed text macro. void InterruptMacro(); interrupt browsed macro execution. void ShowMacroButtons(Bool_t show = kTRUE); show/hide macro buttons. void SetStatusText(const char* txt, Int_t col); Set text in column col in status bar. TBrowserImp * NewBrowser(TBrowser* b = 0, const char* title = ""ROOT Browser"", UInt_t width = 800, UInt_t height = 500, Option_t* opt = """"); Interface method to the old browser. TBrowserImp * NewBrowser(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """"); Interfac",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:30859,Integrability,Interface,Interface,30859,"FALSE); Refresh the browser contents. void ShowToolBar(Bool_t show = kTRUE); Show or hide toolbar. void ShowStatusBar(Bool_t show = kTRUE); Show or hide statusbar. void SetDefaults(const char* iconStyle = 0, const char* sortBy = 0); Set defaults depending on settings in the user's .rootrc. void SetViewMode(Int_t new_mode, Bool_t force = kFALSE); Set iconbox's view mode and update menu and toolbar buttons accordingly. void SetSortMode(Int_t new_mode); Set iconbox's sort mode and update menu radio buttons accordingly. void Search(); starts serach dialog. void HideTextEdit(); hide text edit. void BrowseTextFile(const char* file); browse text file. void ExecMacro(); executed browsed text macro. void InterruptMacro(); interrupt browsed macro execution. void ShowMacroButtons(Bool_t show = kTRUE); show/hide macro buttons. void SetStatusText(const char* txt, Int_t col); Set text in column col in status bar. TBrowserImp * NewBrowser(TBrowser* b = 0, const char* title = ""ROOT Browser"", UInt_t width = 800, UInt_t height = 500, Option_t* opt = """"); Interface method to the old browser. TBrowserImp * NewBrowser(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """"); Interface method to the old browser. TRootBrowserLite(TBrowser* b = 0, const char* title = ""ROOT Browser"", UInt_t width = 800, UInt_t height = 500). void CloseTabs(); { }. void Iconify(); { }. void ResizeBrowser(); { }. void Show(); { MapRaised(); }. TGListTree * GetListTree() const; { return fLt; }. TGStatusBar * GetStatusBar() const; { return fStatusBar; }. TGMenuBar * GetMenuBar() const; { return fMenuBar; }. TGToolBar * GetToolBar() const; { return fToolBar; }. TGMainFrame * GetMainFrame() const; { return (TGMainFrame *)this; }. » Author: Fons Rademakers 27/02/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:31021,Integrability,Interface,Interface,31021,"RUE); Show or hide toolbar. void ShowStatusBar(Bool_t show = kTRUE); Show or hide statusbar. void SetDefaults(const char* iconStyle = 0, const char* sortBy = 0); Set defaults depending on settings in the user's .rootrc. void SetViewMode(Int_t new_mode, Bool_t force = kFALSE); Set iconbox's view mode and update menu and toolbar buttons accordingly. void SetSortMode(Int_t new_mode); Set iconbox's sort mode and update menu radio buttons accordingly. void Search(); starts serach dialog. void HideTextEdit(); hide text edit. void BrowseTextFile(const char* file); browse text file. void ExecMacro(); executed browsed text macro. void InterruptMacro(); interrupt browsed macro execution. void ShowMacroButtons(Bool_t show = kTRUE); show/hide macro buttons. void SetStatusText(const char* txt, Int_t col); Set text in column col in status bar. TBrowserImp * NewBrowser(TBrowser* b = 0, const char* title = ""ROOT Browser"", UInt_t width = 800, UInt_t height = 500, Option_t* opt = """"); Interface method to the old browser. TBrowserImp * NewBrowser(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """"); Interface method to the old browser. TRootBrowserLite(TBrowser* b = 0, const char* title = ""ROOT Browser"", UInt_t width = 800, UInt_t height = 500). void CloseTabs(); { }. void Iconify(); { }. void ResizeBrowser(); { }. void Show(); { MapRaised(); }. TGListTree * GetListTree() const; { return fLt; }. TGStatusBar * GetStatusBar() const; { return fStatusBar; }. TGMenuBar * GetMenuBar() const; { return fMenuBar; }. TGToolBar * GetToolBar() const; { return fToolBar; }. TGMainFrame * GetMainFrame() const; { return (TGMainFrame *)this; }. » Author: Fons Rademakers 27/02/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:122,Modifiability,inherit,inheritance,122,". TRootBrowserLite. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TRootBrowserLite. class TRootBrowserLite: public TGMainFrame, public TBrowserImp. TRootBrowserLite. ROOT object browser (looking like Windows Explorer). Function Members (Methods); public:. virtual~TRootBrowserLite(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidAdd(TObject* obj, const char* name = 0, Int_t check = -1); virtual voidAddCheckBox(TObject* obj, Bool_t check = kFALSE); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidAddToBox(TObject* obj, const char* name); virtual voidAddToTree(TObject* obj, const char* name, Int_t check = -1); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBrowseObj(TObject* obj)SIGNAL ; TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); virtual voidChecked(TObject* obj, Bool_t check)SIGNAL ; virtual voidCheckObjectItem(TObject* obj, Bool_t check = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:10400,Modifiability,Inherit,InheritsFrom,10400,"eFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tHandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidIconify(); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidInterruptMacro(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_t",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:10466,Modifiability,Inherit,InheritsFrom,10466,"vent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tHandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidIconify(); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidInterruptMacro(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout();",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:26118,Modifiability,Inherit,Inheritance,26118,"; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGLayoutHints*fBarLayout; Bool_tfBrowseTextFile; TGLayoutHints*fComboLayout; TGComboBox*fDrawOptiondrawing option entry; TGLayoutHints*fExpandLayout; TGHorizontalFrame*fHf; TList*fHistoryhistory of browsing; TObject*fHistoryCursorcurrent hsitory position; const TGPicture*fIconPicicon picture; TGLabel*fLbl1; TGLabel*fLbl2; TGCompositeFrame*fListHdr; TGMenuBar*fMenuBar; TGLayoutHints*fMenuBarHelpLayout; TGLayoutHints*fMenuBarItemLayout; TGLayoutHints*fMenuBarLayout; TStringfTextFileName; TGToolBar*fToolBar; TGHorizontal3DLine*fToolBarSep; TGCompositeFrame*fTreeHdr; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TList*fWidgets. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. TBrowserImp. ←; TRootBrowserLite. Function documentation; TRootBrowserLite(TBrowser* b = 0, const char* title = ""ROOT Browser"", UInt_t width = 800, UInt_t height = 500); Create browser with a specified width and height. TRootBrowserLite(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); Create browser with a specified width and height and at position x, y. ~TRootBrowserLite(); Browser destructor. void CreateBrowser(const char* name); Create the actual browser. Bool_t HandleKey(Event_t* event); handle keys. void Add(TObject* obj, const char* name = 0, Int_t check = -1); Add items to the browser. This function has to be called; by the Browse() member function of objects when they are; called by a browser. If check < 0 (default) no check box is drawn,; if 0 then unchecked checkbox is added, if 1 checked checkbox is added. void AddCheckBox(TObject* obj, Bool",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:10087,Security,Hash,Hash,10087,"t_t, Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tHandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidIconify(); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidInterruptMacro(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFram",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:17511,Testability,Test,TestBit,17511,"t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetSortMode(Int_t new_mode); virtual voidSetStatusText(const char* txt, Int_t col); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShow(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidShowStatusBar(Bool_t show = kTRUE); virtual voidShowToolBar(Bool_t show = kTRUE); virtual voidTBrowserImp::StartEmbedding(Int_t, Int_t); virtual voidTBrowserImp::StopEmbedding(const char*); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TRootBrowserLite(const TRootBrowserLite&); TRootBrowserLite(TBrowser* b = 0, const char* title = ""ROOT Browser"", UInt_t width = 800, UInt_t height = 500); TRootBrowserLite(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:17550,Testability,Test,TestBits,17550,"t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetSortMode(Int_t new_mode); virtual voidSetStatusText(const char* txt, Int_t col); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShow(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidShowStatusBar(Bool_t show = kTRUE); virtual voidShowToolBar(Bool_t show = kTRUE); virtual voidTBrowserImp::StartEmbedding(Int_t, Int_t); virtual voidTBrowserImp::StopEmbedding(const char*); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TRootBrowserLite(const TRootBrowserLite&); TRootBrowserLite(TBrowser* b = 0, const char* title = ""ROOT Browser"", UInt_t width = 800, UInt_t height = 500); TRootBrowserLite(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:1907,Usability,Clear,Clear,1907,"ct* obj, const char* name, Int_t check = -1); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBrowseObj(TObject* obj)SIGNAL ; TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); virtual voidChecked(TObject* obj, Bool_t check)SIGNAL ; virtual voidCheckObjectItem(TObject* obj, Bool_t check = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseTabs(); virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObje",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:28958,Usability,Clear,ClearHistory,28958," ""history"". TGFileContainer * GetIconBox() const; returns pointer to fIconBox object. void ReallyDelete(); Really delete the browser and the this GUI. void CloseWindow(); In case window is closed via WM we get here. void DisplayTotal(Int_t total, Int_t selected); Display in statusbar total number of objects and number of; selected objects in IconBox. void DisplayDirectory(); Display current directory in second label, fLbl2. void ExecuteDefaultAction(TObject* obj); Execute default action for selected object (action is specified; in the $HOME/.root.mimes or $ROOTSYS/etc/root.mimes file.; Emits signal ""ExecuteDefaultAction(TObject*)"". Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle menu and other command generated by the user. void Chdir(TGListTreeItem* item); Make object associated with item the current directory. void HighlightListLevel(); helper method to track history. void AddToHistory(TGListTreeItem* item); helper method to track history. void ClearHistory(); clear navigation history. Bool_t HistoryBackward(); go to the past. Bool_t HistoryForward(); go to the future. void DeleteListTreeItem(TGListTreeItem* item); delete list tree item, remove it from history. void ListTreeHighlight(TGListTreeItem* item); Open tree item and list in iconbox its contents. void ToSystemDirectory(const char* dirname); display directory. void SetDrawOption(Option_t* option = """"); sets drawing option. Option_t * GetDrawOption() const; returns drawing option. void DoubleClicked(TObject* obj); Emits signal when double clicking on icon. void Checked(TObject* obj, Bool_t check); Emits signal when double clicking on icon. void IconBoxAction(TObject* obj); Default action when double clicking on icon. void RecursiveRemove(TObject* obj); Recursively remove object from browser. void Refresh(Bool_t force = kFALSE); Refresh the browser contents. void ShowToolBar(Bool_t show = kTRUE); Show or hide toolbar. void ShowStatusBar(Bool_t show = kTRUE); Show or hide statusbar. void S",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootBrowserLite.html:28974,Usability,clear,clear,28974," ""history"". TGFileContainer * GetIconBox() const; returns pointer to fIconBox object. void ReallyDelete(); Really delete the browser and the this GUI. void CloseWindow(); In case window is closed via WM we get here. void DisplayTotal(Int_t total, Int_t selected); Display in statusbar total number of objects and number of; selected objects in IconBox. void DisplayDirectory(); Display current directory in second label, fLbl2. void ExecuteDefaultAction(TObject* obj); Execute default action for selected object (action is specified; in the $HOME/.root.mimes or $ROOTSYS/etc/root.mimes file.; Emits signal ""ExecuteDefaultAction(TObject*)"". Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle menu and other command generated by the user. void Chdir(TGListTreeItem* item); Make object associated with item the current directory. void HighlightListLevel(); helper method to track history. void AddToHistory(TGListTreeItem* item); helper method to track history. void ClearHistory(); clear navigation history. Bool_t HistoryBackward(); go to the past. Bool_t HistoryForward(); go to the future. void DeleteListTreeItem(TGListTreeItem* item); delete list tree item, remove it from history. void ListTreeHighlight(TGListTreeItem* item); Open tree item and list in iconbox its contents. void ToSystemDirectory(const char* dirname); display directory. void SetDrawOption(Option_t* option = """"); sets drawing option. Option_t * GetDrawOption() const; returns drawing option. void DoubleClicked(TObject* obj); Emits signal when double clicking on icon. void Checked(TObject* obj, Bool_t check); Emits signal when double clicking on icon. void IconBoxAction(TObject* obj); Default action when double clicking on icon. void RecursiveRemove(TObject* obj); Recursively remove object from browser. void Refresh(Bool_t force = kFALSE); Refresh the browser contents. void ShowToolBar(Bool_t show = kTRUE); Show or hide toolbar. void ShowStatusBar(Bool_t show = kTRUE); Show or hide statusbar. void S",MatchSource.WIKI,root/html602/TRootBrowserLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootBrowserLite.html
https://root.cern/root/html602/TRootCanvas.html:4331,Availability,Error,Error,4331,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidEventInfo(Int_t event, Int_t px, Int_t py, TObject* selected); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFitCanvas(); virtual voidForceUpdate(); virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; UInt_tGetCheight() const; voidTGMainFrame::GetClassHints(const char*& classN",MatchSource.WIKI,root/html602/TRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootCanvas.html
https://root.cern/root/html602/TRootCanvas.html:4527,Availability,error,error,4527,"oidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidEventInfo(Int_t event, Int_t px, Int_t py, TObject* selected); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFitCanvas(); virtual voidForceUpdate(); virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; UInt_tGetCheight() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); UInt_tGetCwidth() const; static Pixel_tTGFrame::GetDefaultFrameBackground(); virtua",MatchSource.WIKI,root/html602/TRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootCanvas.html
https://root.cern/root/html602/TRootCanvas.html:4611,Availability,error,error,4611,"signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidEventInfo(Int_t event, Int_t px, Int_t py, TObject* selected); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFitCanvas(); virtual voidForceUpdate(); virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; UInt_tGetCheight() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); UInt_tGetCwidth() const; static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaul",MatchSource.WIKI,root/html602/TRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootCanvas.html
https://root.cern/root/html602/TRootCanvas.html:21242,Availability,mask,mask,21242,,MatchSource.WIKI,root/html602/TRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootCanvas.html
https://root.cern/root/html602/TRootCanvas.html:11457,Integrability,Message,Message,11457,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* option = """") const; voidPrintCanvas(); virtual voidTGFrame::Processed",MatchSource.WIKI,root/html602/TRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootCanvas.html
https://root.cern/root/html602/TRootCanvas.html:26852,Integrability,interface,interface,26852,"olTiptooltip for object info; TGPopupMenu*fToolsMenutools menu; TGVertical3DLine*fVertical1toolbar vertical separator; TGLayoutHints*fVertical1Layoutlayout hints for separator; TGVertical3DLine*fVertical2toolbar vertical separator; TGLayoutHints*fVertical2Layoutlayout hints for separator; TGPopupMenu*fViewMenuview menu; TGPopupMenu*fViewWithMenuview with... cascade submenu. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. TCanvasImp. ←; TRootCanvas. Function documentation; TRootCanvas(TCanvas* c = 0, const char* name = ""ROOT Canvas"", UInt_t width = 500, UInt_t height = 300); Create a basic ROOT canvas. TRootCanvas(TCanvas* c, const char* name, Int_t x, Int_t y, UInt_t width, UInt_t height); Create a basic ROOT canvas. void CreateCanvas(const char* name); Create the actual canvas. ~TRootCanvas(); Delete ROOT basic canvas. Order is significant. Delete in reverse; order of creation. void Close(); Called via TCanvasImp interface by TCanvas. void ReallyDelete(); Really delete the canvas and this GUI. void CloseWindow(); In case window is closed via WM we get here. UInt_t GetCwidth() const; Return width of canvas container. UInt_t GetCheight() const; Return height of canvas container. UInt_t GetWindowGeometry(Int_t& x, Int_t& y, UInt_t& w, UInt_t& h); Gets the size and position of the window containing the canvas. This; size includes the menubar and borders. void SetStatusText(const char* txt = 0, Int_t partidx = 0); Set text in status bar. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle menu and other command generated by the user. Int_t InitWindow(); Called by TCanvas ctor to get window indetifier. void SetCanvasSize(UInt_t w, UInt_t h); Set size of canvas container. Units in pixels. void SetWindowPosition(Int_t x, Int_t y); Set canvas position (units in pixels). void SetWindowSize(UInt_t w, UInt_t h); Set size of canvas (units in pixels). void RaiseWindow(); Put canvas ",MatchSource.WIKI,root/html602/TRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootCanvas.html
https://root.cern/root/html602/TRootCanvas.html:117,Modifiability,inherit,inheritance,117,". TRootCanvas. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TRootCanvas. class TRootCanvas: public TGMainFrame, public TCanvasImp. TRootCanvas. This class creates a main window with menubar, scrollbars and a; drawing area. The widgets used are the new native ROOT GUI widgets. Function Members (Methods); public:. virtual~TRootCanvas(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidActivated(Int_t id); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAdjustSize(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); TCanvas*TCanvasImp::Canvas() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(); virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* s",MatchSource.WIKI,root/html602/TRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootCanvas.html
https://root.cern/root/html602/TRootCanvas.html:10013,Modifiability,Inherit,InheritsFrom,10013,"Change(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual Bool_tHasEditor() const; virtual ULong_tTGObject::Hash() const; virtual Bool_tHasMenuBar() const; virtual Bool_tHasStatusBar() const; virtual Bool_tHasToolBar() const; virtual Bool_tHasToolTips() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidIconify(); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Int_tInitWindow(); virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; B",MatchSource.WIKI,root/html602/TRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootCanvas.html
https://root.cern/root/html602/TRootCanvas.html:10079,Modifiability,Inherit,InheritsFrom,10079,"ndler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual Bool_tHasEditor() const; virtual ULong_tTGObject::Hash() const; virtual Bool_tHasMenuBar() const; virtual Bool_tHasStatusBar() const; virtual Bool_tHasToolBar() const; virtual Bool_tHasToolTips() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidIconify(); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Int_tInitWindow(); virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layo",MatchSource.WIKI,root/html602/TRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootCanvas.html
https://root.cern/root/html602/TRootCanvas.html:26235,Modifiability,Inherit,Inheritance,26235,"inFrameLayoutlayout for main frame; TGMenuBar*fMenuBarmenubar; TGLayoutHints*fMenuBarHelpLayoutlayout hint for help menu in menubar; TGLayoutHints*fMenuBarItemLayoutlayout hints for menu in menubar; TGLayoutHints*fMenuBarLayoutmenubar layout hints; TGPopupMenu*fOptionMenuoption menu; TGStatusBar*fStatusBarstatusbar widget; TGLayoutHints*fStatusBarLayoutlayout hints for statusbar; TGToolBar*fToolBaricon button toolbar; TGLayoutHints*fToolBarLayoutlayout for toolbar widget; TGHorizontal3DLine*fToolBarSeptoolbar separator; TGDockableFrame*fToolDockdockable frame holding the toolbar; TGToolTip*fToolTiptooltip for object info; TGPopupMenu*fToolsMenutools menu; TGVertical3DLine*fVertical1toolbar vertical separator; TGLayoutHints*fVertical1Layoutlayout hints for separator; TGVertical3DLine*fVertical2toolbar vertical separator; TGLayoutHints*fVertical2Layoutlayout hints for separator; TGPopupMenu*fViewMenuview menu; TGPopupMenu*fViewWithMenuview with... cascade submenu. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. TCanvasImp. ←; TRootCanvas. Function documentation; TRootCanvas(TCanvas* c = 0, const char* name = ""ROOT Canvas"", UInt_t width = 500, UInt_t height = 300); Create a basic ROOT canvas. TRootCanvas(TCanvas* c, const char* name, Int_t x, Int_t y, UInt_t width, UInt_t height); Create a basic ROOT canvas. void CreateCanvas(const char* name); Create the actual canvas. ~TRootCanvas(); Delete ROOT basic canvas. Order is significant. Delete in reverse; order of creation. void Close(); Called via TCanvasImp interface by TCanvas. void ReallyDelete(); Really delete the canvas and this GUI. void CloseWindow(); In case window is closed via WM we get here. UInt_t GetCwidth() const; Return width of canvas container. UInt_t GetCheight() const; Return height of canvas container. UInt_t GetWindowGeometry(Int_t& x, Int_t& y, UInt_t& w, UInt_t& h); Gets the size and position of the window containing the",MatchSource.WIKI,root/html602/TRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootCanvas.html
https://root.cern/root/html602/TRootCanvas.html:29228,Modifiability,config,configure,29228,"how = kTRUE); Show or hide menubar. void ShowStatusBar(Bool_t show = kTRUE); Show or hide statusbar. void ShowEditor(Bool_t show = kTRUE); Show or hide side frame. void CreateEditor(); Create embedded editor. void ShowToolBar(Bool_t show = kTRUE); Show or hide toolbar. void ShowToolTips(Bool_t show = kTRUE); Enable or disable tooltip info. Bool_t HasEditor() const; Returns kTRUE if the editor is shown. Bool_t HasMenuBar() const; Returns kTRUE if the menu bar is shown. Bool_t HasStatusBar() const; Returns kTRUE if the status bar is shown. Bool_t HasToolBar() const; Returns kTRUE if the tool bar is shown. Bool_t HasToolTips() const; Returns kTRUE if the tooltips are enabled. void AdjustSize(); Keep the same canvas size while docking/undocking toolbar. Bool_t HandleContainerButton(Event_t* ev); Handle mouse button events in the canvas container. Bool_t HandleContainerDoubleClick(Event_t* ev); Handle mouse button double click events in the canvas container. Bool_t HandleContainerConfigure(Event_t* ev); Handle configure (i.e. resize) event. Bool_t HandleContainerKey(Event_t* ev); Handle keyboard events in the canvas container. Bool_t HandleContainerMotion(Event_t* ev); Handle mouse motion event in the canvas container. Bool_t HandleContainerExpose(Event_t* ev); Handle expose events. Bool_t HandleContainerCrossing(Event_t* ev); Handle enter/leave events. Only leave is activated at the moment. Bool_t HandleDNDDrop(TDNDData* data); Handle drop events. Atom_t HandleDNDPosition(Int_t x, Int_t y, Atom_t action, Int_t xroot, Int_t yroot); Handle dragging position events. Atom_t HandleDNDEnter(Atom_t* typelist); Handle drag enter events. Bool_t HandleDNDLeave(); Handle drag leave events. void Activated(Int_t id); Slot handling tab switching in the browser, to properly set the canvas; and the model to the editor. TRootCanvas(const TRootCanvas& ). TRootCanvas& operator=(const TRootCanvas& ). void ForceUpdate(); { Layout(); }. void Iconify(); { IconifyWindow(); }. void Show(); { Map",MatchSource.WIKI,root/html602/TRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootCanvas.html
https://root.cern/root/html602/TRootCanvas.html:24687,Performance,load,loaded,24687,atic Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. Bool_tfAutoFitwhen true canvas container keeps same size as canvas; Int_tfButtoncurrently pressed button; TRootContainer*fCanvasContainercontainer in canvas widget; Int_tfCanvasIDindex in fWindows array of TGX11; TGLayoutHints*fCanvasLayoutlayout for canvas widget; TGCanvas*fCanvasWindowcanvas widget; TGLayoutHints*fDockLayoutlayout hints for dockable frame widget; TGPopupMenu*fEditClearMenuclear cascade submenu; TGPopupMenu*fEditMenuedit menu; TVirtualPadEditor*fEditorpointer to currently loaded pad editor; TGCompositeFrame*fEditorFrameside frame for current pad editor; TGLayoutHints*fEditorLayoutlayout for editor frame; Bool_tfEmbeddedtrue if embedded in any other frame (e.g. in the browser); TGPopupMenu*fFileMenufile menu; TGPopupMenu*fFileSaveMenusave cascade submenu; TGPopupMenu*fHelpMenuhelp menu; TGHorizontal3DLine*fHorizontal1toolbar sepatator; TGLayoutHints*fHorizontal1Layoutlayout hints for separator; const TGPicture*fIconPicicon picture; TGCompositeFrame*fMainFramemain frame containing canvas and side frame; TGLayoutHints*fMainFrameLayoutlayout for main frame; TGMenuBar*fMenuBarmenubar; TGLayoutHints*fMenuBarHelpLayoutlayout hint for help menu in menubar; TGLayoutHints*fMenuBarItemLayoutlayout hints for menu in menubar; TGLayoutHints*fMenuBarLayoutmenubar layout hints; TGPopupMenu*fOptionMenuoption menu; TGSta,MatchSource.WIKI,root/html602/TRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootCanvas.html
https://root.cern/root/html602/TRootCanvas.html:9561,Security,Hash,Hash,9561,"andleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual Bool_tHasEditor() const; virtual ULong_tTGObject::Hash() const; virtual Bool_tHasMenuBar() const; virtual Bool_tHasStatusBar() const; virtual Bool_tHasToolBar() const; virtual Bool_tHasToolTips() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidIconify(); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Int_tInitWindow(); virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEdi",MatchSource.WIKI,root/html602/TRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootCanvas.html
https://root.cern/root/html602/TRootCanvas.html:29491,Security,expose,expose,29491,"bar. void ShowToolTips(Bool_t show = kTRUE); Enable or disable tooltip info. Bool_t HasEditor() const; Returns kTRUE if the editor is shown. Bool_t HasMenuBar() const; Returns kTRUE if the menu bar is shown. Bool_t HasStatusBar() const; Returns kTRUE if the status bar is shown. Bool_t HasToolBar() const; Returns kTRUE if the tool bar is shown. Bool_t HasToolTips() const; Returns kTRUE if the tooltips are enabled. void AdjustSize(); Keep the same canvas size while docking/undocking toolbar. Bool_t HandleContainerButton(Event_t* ev); Handle mouse button events in the canvas container. Bool_t HandleContainerDoubleClick(Event_t* ev); Handle mouse button double click events in the canvas container. Bool_t HandleContainerConfigure(Event_t* ev); Handle configure (i.e. resize) event. Bool_t HandleContainerKey(Event_t* ev); Handle keyboard events in the canvas container. Bool_t HandleContainerMotion(Event_t* ev); Handle mouse motion event in the canvas container. Bool_t HandleContainerExpose(Event_t* ev); Handle expose events. Bool_t HandleContainerCrossing(Event_t* ev); Handle enter/leave events. Only leave is activated at the moment. Bool_t HandleDNDDrop(TDNDData* data); Handle drop events. Atom_t HandleDNDPosition(Int_t x, Int_t y, Atom_t action, Int_t xroot, Int_t yroot); Handle dragging position events. Atom_t HandleDNDEnter(Atom_t* typelist); Handle drag enter events. Bool_t HandleDNDLeave(); Handle drag leave events. void Activated(Int_t id); Slot handling tab switching in the browser, to properly set the canvas; and the model to the editor. TRootCanvas(const TRootCanvas& ). TRootCanvas& operator=(const TRootCanvas& ). void ForceUpdate(); { Layout(); }. void Iconify(); { IconifyWindow(); }. void Show(); { MapRaised(); }. TGMenuBar * GetMenuBar() const; { return fMenuBar; }. TGLayoutHints * GetMenuBarItemLayout() const; { return fMenuBarItemLayout; }. TGStatusBar * GetStatusBar() const; { return fStatusBar; }. TGDockableFrame * GetToolDock() const; { return fToolDock; }",MatchSource.WIKI,root/html602/TRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootCanvas.html
https://root.cern/root/html602/TRootCanvas.html:16782,Testability,Test,TestBit,16782,"_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetStatusText(const char* txt = 0, Int_t partidx = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); virtual voidSetWindowPosition(Int_t x, Int_t y); virtual voidSetWindowSize(UInt_t w, UInt_t h); virtual voidSetWindowTitle(const char* newTitle); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShow(); virtual voidShowEditor(Bool_t show = kTRUE); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidShowMenuBar(Bool_t show = kTRUE); virtual voidShowStatusBar(Bool_t show = kTRUE); virtual voidShowToolBar(Bool_t show = kTRUE); virtual voidShowToolTips(Bool_t show = kTRUE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TRootCanvas(TCanvas* c = 0, const char* name = ""ROOT Canvas"", UInt_t width = 500, UInt_t height = 300); TRootCanvas(TCanvas* c, const char* name, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootCanvas.html
https://root.cern/root/html602/TRootCanvas.html:16821,Testability,Test,TestBits,16821,"_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetStatusText(const char* txt = 0, Int_t partidx = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); virtual voidSetWindowPosition(Int_t x, Int_t y); virtual voidSetWindowSize(UInt_t w, UInt_t h); virtual voidSetWindowTitle(const char* newTitle); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShow(); virtual voidShowEditor(Bool_t show = kTRUE); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidShowMenuBar(Bool_t show = kTRUE); virtual voidShowStatusBar(Bool_t show = kTRUE); virtual voidShowToolBar(Bool_t show = kTRUE); virtual voidShowToolTips(Bool_t show = kTRUE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TRootCanvas(TCanvas* c = 0, const char* name = ""ROOT Canvas"", UInt_t width = 500, UInt_t height = 300); TRootCanvas(TCanvas* c, const char* name, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootCanvas.html
https://root.cern/root/html602/TRootCanvas.html:1575,Usability,Clear,Clear,1575," char* method) const; virtual voidTGFrame::Activate(Bool_t); voidActivated(Int_t id); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAdjustSize(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); TCanvas*TCanvasImp::Canvas() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(); virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::",MatchSource.WIKI,root/html602/TRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootCanvas.html
https://root.cern/root/html602/TRootCanvas.html:28948,Usability,undo,undocking,28948,"e title on window. void FitCanvas(); Fit canvas container to current window size. void PrintCanvas(); Print the canvas. void EventInfo(Int_t event, Int_t px, Int_t py, TObject* selected); Display a tooltip with infos about the primitive below the cursor. void ShowMenuBar(Bool_t show = kTRUE); Show or hide menubar. void ShowStatusBar(Bool_t show = kTRUE); Show or hide statusbar. void ShowEditor(Bool_t show = kTRUE); Show or hide side frame. void CreateEditor(); Create embedded editor. void ShowToolBar(Bool_t show = kTRUE); Show or hide toolbar. void ShowToolTips(Bool_t show = kTRUE); Enable or disable tooltip info. Bool_t HasEditor() const; Returns kTRUE if the editor is shown. Bool_t HasMenuBar() const; Returns kTRUE if the menu bar is shown. Bool_t HasStatusBar() const; Returns kTRUE if the status bar is shown. Bool_t HasToolBar() const; Returns kTRUE if the tool bar is shown. Bool_t HasToolTips() const; Returns kTRUE if the tooltips are enabled. void AdjustSize(); Keep the same canvas size while docking/undocking toolbar. Bool_t HandleContainerButton(Event_t* ev); Handle mouse button events in the canvas container. Bool_t HandleContainerDoubleClick(Event_t* ev); Handle mouse button double click events in the canvas container. Bool_t HandleContainerConfigure(Event_t* ev); Handle configure (i.e. resize) event. Bool_t HandleContainerKey(Event_t* ev); Handle keyboard events in the canvas container. Bool_t HandleContainerMotion(Event_t* ev); Handle mouse motion event in the canvas container. Bool_t HandleContainerExpose(Event_t* ev); Handle expose events. Bool_t HandleContainerCrossing(Event_t* ev); Handle enter/leave events. Only leave is activated at the moment. Bool_t HandleDNDDrop(TDNDData* data); Handle drop events. Atom_t HandleDNDPosition(Int_t x, Int_t y, Atom_t action, Int_t xroot, Int_t yroot); Handle dragging position events. Atom_t HandleDNDEnter(Atom_t* typelist); Handle drag enter events. Bool_t HandleDNDLeave(); Handle drag leave events. void Activated(I",MatchSource.WIKI,root/html602/TRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootCanvas.html
https://root.cern/root/html602/TRootContextMenu.html:545,Availability,down,downs,545,". TRootContextMenu. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TRootContextMenu. class TRootContextMenu: public TGPopupMenu, public TContextMenuImp. TRootContextMenu. This class provides an interface to context sensitive popup menus.; These menus pop up when the user hits the right mouse button, and; are destroyed when the menu pops downs.; The picture below shows a canvas with a pop-up menu. ; . The picture below shows a canvas with a pop-up menu and a dialog box. ; . Function Members (Methods); public:. virtual~TRootContextMenu(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGPopupMenu::Activate(Bool_t); virtual voidTGPopupMenu::Activate(TGMenuEntry* entry); virtual voidTGPopupMenu::Activated(Int_t id)SIGNAL ; virtual voidTGPopupMenu::AddEntry(TGHotString* s, Int_t id, void* ud = 0, const TGPicture* p = 0, TGMenuEntry* before = 0); virtual voidTGPopupMenu::AddEntry(const char* s, Int_t id, void* ud = 0, const TGPicture* p = 0, TGMenuEntry* before = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTGPopupMenu::AddLabel(TGHotString* s, const TGPicture* p = 0, TGMenuEntry* before = 0); virtual voidTGPopupMenu::AddLabel(const char* s, const TGPicture* p = 0, TGMenuEntry* before = 0); virtual voidTGPopupMenu::AddPopup(TGHotString* s, TGPopupMenu* popup, TGMenuEntry* before = 0, const TGPicture* p = 0); virtual voidTGPopupMenu::AddPopup(const char* s, TGPopupMenu* popup, TGMenuEntry* before = 0, const TGPicture* p = 0); virtual voidTGPopupMenu::AddSeparator(TGMenuEntry* before = 0); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGPopupMenu::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQOb",MatchSource.WIKI,root/html602/TRootContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootContextMenu.html
https://root.cern/root/html602/TRootContextMenu.html:5617,Availability,Error,Error,5617,"nst char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTGPopupMenu::EnableEntry(Int_t id); virtual Int_tTGPopupMenu::EndMenu(void*& userData); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; virtual TContextMenu*TContextMenuImp::GetContextMenu() const; static Int_tTGWindow::GetCounter(); virtual TGMenuEntry*TGPopupMenu::GetCurrent() const; static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_t",MatchSource.WIKI,root/html602/TRootContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootContextMenu.html
https://root.cern/root/html602/TRootContextMenu.html:5746,Availability,error,error,5746,"nal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTGPopupMenu::EnableEntry(Int_t id); virtual Int_tTGPopupMenu::EndMenu(void*& userData); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; virtual TContextMenu*TContextMenuImp::GetContextMenu() const; static Int_tTGWindow::GetCounter(); virtual TGMenuEntry*TGPopupMenu::GetCurrent() const; static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGFrame::GetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWid",MatchSource.WIKI,root/html602/TRootContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootContextMenu.html
https://root.cern/root/html602/TRootContextMenu.html:5830,Availability,error,error,5830,"ject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTGPopupMenu::EnableEntry(Int_t id); virtual Int_tTGPopupMenu::EndMenu(void*& userData); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; virtual TContextMenu*TContextMenuImp::GetContextMenu() const; static Int_tTGWindow::GetCounter(); virtual TGMenuEntry*TGPopupMenu::GetCurrent() const; static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGFrame::GetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; TRootDialog*GetDialog() const; virtual TDNDData*TGFrame::GetDNDData(Atom",MatchSource.WIKI,root/html602/TRootContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootContextMenu.html
https://root.cern/root/html602/TRootContextMenu.html:20241,Availability,mask,mask,20241,,MatchSource.WIKI,root/html602/TRootContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootContextMenu.html
https://root.cern/root/html602/TRootContextMenu.html:400,Integrability,interface,interface,400,". TRootContextMenu. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TRootContextMenu. class TRootContextMenu: public TGPopupMenu, public TContextMenuImp. TRootContextMenu. This class provides an interface to context sensitive popup menus.; These menus pop up when the user hits the right mouse button, and; are destroyed when the menu pops downs.; The picture below shows a canvas with a pop-up menu. ; . The picture below shows a canvas with a pop-up menu and a dialog box. ; . Function Members (Methods); public:. virtual~TRootContextMenu(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGPopupMenu::Activate(Bool_t); virtual voidTGPopupMenu::Activate(TGMenuEntry* entry); virtual voidTGPopupMenu::Activated(Int_t id)SIGNAL ; virtual voidTGPopupMenu::AddEntry(TGHotString* s, Int_t id, void* ud = 0, const TGPicture* p = 0, TGMenuEntry* before = 0); virtual voidTGPopupMenu::AddEntry(const char* s, Int_t id, void* ud = 0, const TGPicture* p = 0, TGMenuEntry* before = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTGPopupMenu::AddLabel(TGHotString* s, const TGPicture* p = 0, TGMenuEntry* before = 0); virtual voidTGPopupMenu::AddLabel(const char* s, const TGPicture* p = 0, TGMenuEntry* before = 0); virtual voidTGPopupMenu::AddPopup(TGHotString* s, TGPopupMenu* popup, TGMenuEntry* before = 0, const TGPicture* p = 0); virtual voidTGPopupMenu::AddPopup(const char* s, TGPopupMenu* popup, TGMenuEntry* before = 0, const TGPicture* p = 0); virtual voidTGPopupMenu::AddSeparator(TGMenuEntry* before = 0); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGPopupMenu::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQOb",MatchSource.WIKI,root/html602/TRootContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootContextMenu.html
https://root.cern/root/html602/TRootContextMenu.html:11715,Integrability,Message,Message,11715,"get() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tTGPopupMenu::IsEntryChecked(Int_t id); virtual Bool_tTGPopupMenu::IsEntryEnabled(Int_t id); virtual Bool_tTGPopupMenu::IsEntryHidden(Int_t id); virtual Bool_tTGPopupMenu::IsEntryRChecked(Int_t id); virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGWindow::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidOnlineHelp(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTGPopupMenu::PlaceMenu(Int_t x, Int_t y, Bool_t stick_mode, Bool_t grab_pointer); virtual voidTObject::Pop(); vir",MatchSource.WIKI,root/html602/TRootContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootContextMenu.html
https://root.cern/root/html602/TRootContextMenu.html:24114,Integrability,depend,depending,24114,"ommand line arguments; TList*fTrashlist of objects to be deleted before refilling menu. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGPopupMenu. TContextMenuImp. ←; TRootContextMenu. Function documentation; TRootContextMenu(TContextMenu* c = 0, const char* name = ""ROOT Context Menu""); Create context menu. ~TRootContextMenu(); Delete a context menu. void DisplayPopup(Int_t x, Int_t y); Display context popup menu for currently selected object. TGPopupMenu * FindHierarchy(const char* commentstring, TString& last_component); Decodes the Hierarchy=""Level0/Level1/Level2/..."" statement from the comment field; and returns the - if needed - created sub menu ""Level0/Level1""; Returns the last component in last_component. void AddEntrySorted(TGPopupMenu* current, const char* s, Int_t id, void* ud = 0, const TGPicture* p = 0, Bool_t sorted = kTRUE); Add a entry to current menu with alphabetical ordering. void CreateMenu(TObject* object); Create the context menu depending on the selected object. void Dialog(TObject* object, TMethod* method); Create dialog object with OK and Cancel buttons. This dialog; prompts for the arguments of ""method"". void Dialog(TObject* object, TFunction* function); Create dialog object with OK and Cancel buttons. This dialog; prompts for the arguments of ""function"".; function may be a global function or a method. void DrawEntry(TGMenuEntry* entry); Draw context menu entry. Bool_t HandleButton(Event_t* event); Handle button event in the context menu. Bool_t HandleCrossing(Event_t* event); Handle pointer crossing event in context menu. Bool_t HandleMotion(Event_t* event); Handle pointer motion event in context menu. void OnlineHelp(); Open the online help matching the actual class/method. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle context menu messages. void RecursiveRemove(TObject* obj); Close the context menu if the object is deleted in the; RecursiveRemove() operation. TRootCon",MatchSource.WIKI,root/html602/TRootContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootContextMenu.html
https://root.cern/root/html602/TRootContextMenu.html:24962,Integrability,message,messages,24962,"nu for currently selected object. TGPopupMenu * FindHierarchy(const char* commentstring, TString& last_component); Decodes the Hierarchy=""Level0/Level1/Level2/..."" statement from the comment field; and returns the - if needed - created sub menu ""Level0/Level1""; Returns the last component in last_component. void AddEntrySorted(TGPopupMenu* current, const char* s, Int_t id, void* ud = 0, const TGPicture* p = 0, Bool_t sorted = kTRUE); Add a entry to current menu with alphabetical ordering. void CreateMenu(TObject* object); Create the context menu depending on the selected object. void Dialog(TObject* object, TMethod* method); Create dialog object with OK and Cancel buttons. This dialog; prompts for the arguments of ""method"". void Dialog(TObject* object, TFunction* function); Create dialog object with OK and Cancel buttons. This dialog; prompts for the arguments of ""function"".; function may be a global function or a method. void DrawEntry(TGMenuEntry* entry); Draw context menu entry. Bool_t HandleButton(Event_t* event); Handle button event in the context menu. Bool_t HandleCrossing(Event_t* event); Handle pointer crossing event in context menu. Bool_t HandleMotion(Event_t* event); Handle pointer motion event in context menu. void OnlineHelp(); Open the online help matching the actual class/method. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle context menu messages. void RecursiveRemove(TObject* obj); Close the context menu if the object is deleted in the; RecursiveRemove() operation. TRootContextMenu(const TRootContextMenu& ). TRootContextMenu& operator=(const TRootContextMenu& ). TRootDialog * GetDialog() const; { return fDialog; }. » Author: Fons Rademakers 12/02/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootContextMenu.html
https://root.cern/root/html602/TRootContextMenu.html:122,Modifiability,inherit,inheritance,122,". TRootContextMenu. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TRootContextMenu. class TRootContextMenu: public TGPopupMenu, public TContextMenuImp. TRootContextMenu. This class provides an interface to context sensitive popup menus.; These menus pop up when the user hits the right mouse button, and; are destroyed when the menu pops downs.; The picture below shows a canvas with a pop-up menu. ; . The picture below shows a canvas with a pop-up menu and a dialog box. ; . Function Members (Methods); public:. virtual~TRootContextMenu(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGPopupMenu::Activate(Bool_t); virtual voidTGPopupMenu::Activate(TGMenuEntry* entry); virtual voidTGPopupMenu::Activated(Int_t id)SIGNAL ; virtual voidTGPopupMenu::AddEntry(TGHotString* s, Int_t id, void* ud = 0, const TGPicture* p = 0, TGMenuEntry* before = 0); virtual voidTGPopupMenu::AddEntry(const char* s, Int_t id, void* ud = 0, const TGPicture* p = 0, TGMenuEntry* before = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTGPopupMenu::AddLabel(TGHotString* s, const TGPicture* p = 0, TGMenuEntry* before = 0); virtual voidTGPopupMenu::AddLabel(const char* s, const TGPicture* p = 0, TGMenuEntry* before = 0); virtual voidTGPopupMenu::AddPopup(TGHotString* s, TGPopupMenu* popup, TGMenuEntry* before = 0, const TGPicture* p = 0); virtual voidTGPopupMenu::AddPopup(const char* s, TGPopupMenu* popup, TGMenuEntry* before = 0, const TGPicture* p = 0); virtual voidTGPopupMenu::AddSeparator(TGMenuEntry* before = 0); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGPopupMenu::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQOb",MatchSource.WIKI,root/html602/TRootContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootContextMenu.html
https://root.cern/root/html602/TRootContextMenu.html:10371,Modifiability,Inherit,InheritsFrom,10371,"l Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tHandleMotion(Event_t* event); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGPopupMenu::HandleTimer(TTimer* t); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGPopupMenu::HideEntry(Int_t id); virtual voidTGPopupMenu::Highlighted(Int_t id)SIGNAL ; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tTGPopupMenu::IsEntryChecked(Int_t id); virtual Bool_tTGPopupMenu::IsEntryEnabled(Int_t id); virtual Bool_tTGPopupMenu::IsEntryHidden(Int_t id); virtual Bool_tTGPopupMenu::IsEntryRChecked(Int_t id); virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); virtual voidTGWindo",MatchSource.WIKI,root/html602/TRootContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootContextMenu.html
https://root.cern/root/html602/TRootContextMenu.html:10437,Modifiability,Inherit,InheritsFrom,10437,"::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tHandleMotion(Event_t* event); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGPopupMenu::HandleTimer(TTimer* t); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGPopupMenu::HideEntry(Int_t id); virtual voidTGPopupMenu::Highlighted(Int_t id)SIGNAL ; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tTGPopupMenu::IsEntryChecked(Int_t id); virtual Bool_tTGPopupMenu::IsEntryEnabled(Int_t id); virtual Bool_tTGPopupMenu::IsEntryHidden(Int_t id); virtual Bool_tTGPopupMenu::IsEntryRChecked(Int_t id); virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* si",MatchSource.WIKI,root/html602/TRootContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootContextMenu.html
https://root.cern/root/html602/TRootContextMenu.html:23203,Modifiability,Inherit,Inheritance,23203,"ntercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGPopupMenu::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGPopupMenu::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGPopupMenu::fgDefaultSelectedBackgroundGC; static const TGGC*TGPopupMenu::fgDefaultSelectedGC; static const TGFont*TGPopupMenu::fgHilightFont; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TRootDialog*fDialogdialog prompting for command line arguments; TList*fTrashlist of objects to be deleted before refilling menu. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGPopupMenu. TContextMenuImp. ←; TRootContextMenu. Function documentation; TRootContextMenu(TContextMenu* c = 0, const char* name = ""ROOT Context Menu""); Create context menu. ~TRootContextMenu(); Delete a context menu. void DisplayPopup(Int_t x, Int_t y); Display context popup menu for currently selected object. TGPopupMenu * FindHierarchy(const char* commentstring, TString& last_component); Decodes the Hierarchy=""Level0/Level1/Level2/..."" statement from the comment field; and returns the - if needed - created sub menu ""Level0/Level1""; Returns the last component in last_component. void AddEntrySorted(TGPopupMenu* current, const char* s, Int_t id, void* ud = 0, const TGPicture* p = 0, Bool_t sorted = kTRUE); Add a entry to current menu with alphabetical ordering. void CreateMenu(TObject* object); Create the context menu depending on the selected object. void Dialog(TObject* object, TMethod* method); Create dialog obj",MatchSource.WIKI,root/html602/TRootContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootContextMenu.html
https://root.cern/root/html602/TRootContextMenu.html:10033,Security,Hash,Hash,10033,"TGFrame::HandleDNDLeave(); virtual Atom_tTGFrame::HandleDNDPosition(Int_t, Int_t, Atom_t, Int_t, Int_t); virtual Bool_tTGFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGFrame::HandleDragDrop(TGFrame*, Int_t, Int_t, TGLayoutHints*); virtual Bool_tTGFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tHandleMotion(Event_t* event); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGPopupMenu::HandleTimer(TTimer* t); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGPopupMenu::HideEntry(Int_t id); virtual voidTGPopupMenu::Highlighted(Int_t id)SIGNAL ; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tTGPopupMenu::IsEntryChecked(Int_t id); virtual Bool_tTGPopupMenu::IsEntryEnabled(Int_t id); virtual Bool_tTGPopupMenu::IsEntryHidden(Int_t id); virtual Bool_tTGPopupMenu::IsEntryRChecked(Int_t id); virtual Bool_tTGObject::IsEqual(const TObject* ob",MatchSource.WIKI,root/html602/TRootContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootContextMenu.html
https://root.cern/root/html602/TRootContextMenu.html:15656,Testability,Test,TestBit,15656,"idTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGPopupMenu::SetEntrySep(UInt_t sep); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGPopupMenu::SetMenuBar(TGMenuBar* bar); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRootContextMenu(TContextMenu* c = 0, const char* name = ""ROOT Context Menu""); virtual voidTGPopupMenu::UnCheckEntries(); virtual voidTGPopupMenu::UnCheckEntry(Int_t id); virtual voidTGPopupMenu::UnCheckEntryByData(void* user_data); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootContextMenu.html
https://root.cern/root/html602/TRootContextMenu.html:15695,Testability,Test,TestBits,15695,"idTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGPopupMenu::SetEntrySep(UInt_t sep); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGPopupMenu::SetMenuBar(TGMenuBar* bar); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRootContextMenu(TContextMenu* c = 0, const char* name = ""ROOT Context Menu""); virtual voidTGPopupMenu::UnCheckEntries(); virtual voidTGPopupMenu::UnCheckEntry(Int_t id); virtual voidTGPopupMenu::UnCheckEntryByData(void* user_data); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootContextMenu.html
https://root.cern/root/html602/TRootContextMenu.html:2436,Usability,Clear,Clear,2436,"irtual voidTGPopupMenu::AddPopup(TGHotString* s, TGPopupMenu* popup, TGMenuEntry* before = 0, const TGPicture* p = 0); virtual voidTGPopupMenu::AddPopup(const char* s, TGPopupMenu* popup, TGMenuEntry* before = 0, const TGPicture* p = 0); virtual voidTGPopupMenu::AddSeparator(TGMenuEntry* before = 0); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGPopupMenu::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); virtual voidTGPopupMenu::CheckEntry(Int_t id); virtual voidTGPopupMenu::CheckEntryByData(void* user_data); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGPopupMenu::DefaultEntry(Int_t id); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGPopupMenu::DeleteEntry(Int_t id); virtual voidTGPopupMenu::DeleteEntry(TGMenuEntry* entry); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()",MatchSource.WIKI,root/html602/TRootContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootContextMenu.html
https://root.cern/root/html602/TRootControlBar.html:4334,Availability,Error,Error,4334,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; virtual TControlBarButton*TControlBarImp::GetClicked(); TGClient*TGObject::GetClient() const; virt",MatchSource.WIKI,root/html602/TRootControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootControlBar.html
https://root.cern/root/html602/TRootControlBar.html:4463,Availability,error,error,4463," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; virtual TControlBarButton*TControlBarImp::GetClicked(); TGClient*TGObject::GetClient() const; virtual TControlBar*TControlBarImp::GetControlBar(); static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackgr",MatchSource.WIKI,root/html602/TRootControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootControlBar.html
https://root.cern/root/html602/TRootControlBar.html:4547,Availability,error,error,4547,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; virtual TControlBarButton*TControlBarImp::GetClicked(); TGClient*TGObject::GetClient() const; virtual TControlBar*TControlBarImp::GetControlBar(); static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFr",MatchSource.WIKI,root/html602/TRootControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootControlBar.html
https://root.cern/root/html602/TRootControlBar.html:20031,Availability,mask,mask,20031,,MatchSource.WIKI,root/html602/TRootControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootControlBar.html
https://root.cern/root/html602/TRootControlBar.html:395,Integrability,interface,interface,395,". TRootControlBar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TRootControlBar. class TRootControlBar: public TGMainFrame, public TControlBarImp. TRootControlBar. This class provides an interface to the GUI dependent functions of; the TControlBar class. A control bar is a horizontal or vertical bar; with a number of buttons (text or picture buttons). Function Members (Methods); public:. virtual~TRootControlBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* ",MatchSource.WIKI,root/html602/TRootControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootControlBar.html
https://root.cern/root/html602/TRootControlBar.html:416,Integrability,depend,dependent,416,". TRootControlBar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TRootControlBar. class TRootControlBar: public TGMainFrame, public TControlBarImp. TRootControlBar. This class provides an interface to the GUI dependent functions of; the TControlBar class. A control bar is a horizontal or vertical bar; with a number of buttons (text or picture buttons). Function Members (Methods); public:. virtual~TRootControlBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* ",MatchSource.WIKI,root/html602/TRootControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootControlBar.html
https://root.cern/root/html602/TRootControlBar.html:11227,Integrability,Message,Message,11227,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootControlBar&operator=(const TRootControlBar&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* option = """") const",MatchSource.WIKI,root/html602/TRootControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootControlBar.html
https://root.cern/root/html602/TRootControlBar.html:23894,Integrability,message,messages,23894,"me::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. UInt_tfBwidthbutton width in pixels; TGLayoutHints*fL1button layout hints; TList*fWidgetslist of TGTextButton or TGPictureButtons. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. TControlBarImp. ←; TRootControlBar. Function documentation; TRootControlBar(TControlBar* c = 0, const char* title = ""ROOT Control Bar"", Int_t x = -999, Int_t y = -999); Create a ROOT native GUI controlbar. ~TRootControlBar(); Delete the control bar implementation. void Create(); Create the control bar. Loop over all buttons defined in the; TControlBar and create the buttons. void Show(); Show controlbar. If not yet created create it first. void Hide(); Hide controlbar. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle controlbar button messages. void ReallyDelete(); Really delete the control bar and the this GUI. void CloseWindow(); Called when closed via window manager action. void SetFont(const char* fontName); sets new font for control bar buttons. void SetButtonState(const char* label, Int_t state = 0); sets new font for control bar buttons. void SetTextColor(const char* colorName); sets text color for control bar buttons, e.g.:; root > .x tutorials/demos.C; root > bar->SetTextColor(""red""). void SetButtonWidth(UInt_t width); Set button width in pixels. TRootControlBar(TControlBar* c = 0, const char* title = ""ROOT Control Bar"", Int_t x = -999, Int_t y = -999). TList * GetWidgets() const; { return fWidgets; }. » Author: Fons Rademakers 22/02/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT ",MatchSource.WIKI,root/html602/TRootControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootControlBar.html
https://root.cern/root/html602/TRootControlBar.html:121,Modifiability,inherit,inheritance,121,". TRootControlBar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TRootControlBar. class TRootControlBar: public TGMainFrame, public TControlBarImp. TRootControlBar. This class provides an interface to the GUI dependent functions of; the TControlBar class. A control bar is a horizontal or vertical bar; with a number of buttons (text or picture buttons). Function Members (Methods); public:. virtual~TRootControlBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* ",MatchSource.WIKI,root/html602/TRootControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootControlBar.html
https://root.cern/root/html602/TRootControlBar.html:9810,Modifiability,Inherit,InheritsFrom,9810,"ndleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidHide(); virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html602/TRootControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootControlBar.html
https://root.cern/root/html602/TRootControlBar.html:9876,Modifiability,Inherit,InheritsFrom,9876,"_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidHide(); virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow:",MatchSource.WIKI,root/html602/TRootControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootControlBar.html
https://root.cern/root/html602/TRootControlBar.html:23218,Modifiability,Inherit,Inheritance,23218,"C; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. UInt_tfBwidthbutton width in pixels; TGLayoutHints*fL1button layout hints; TList*fWidgetslist of TGTextButton or TGPictureButtons. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. TControlBarImp. ←; TRootControlBar. Function documentation; TRootControlBar(TControlBar* c = 0, const char* title = ""ROOT Control Bar"", Int_t x = -999, Int_t y = -999); Create a ROOT native GUI controlbar. ~TRootControlBar(); Delete the control bar implementation. void Create(); Create the control bar. Loop over all buttons defined in the; TControlBar and create the buttons. void Show(); Show controlbar. If not yet created create it first. void Hide(); Hide controlbar. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Handle controlbar button messages. void ReallyDelete(); Really delete the control bar and the this GUI. void CloseWindow(); Called when closed via window manager action. void SetFont(const char* fontName); sets new font for control bar buttons. void SetButtonState(const char* label, Int_t state = 0); sets new font for control bar buttons. void SetTextColor",MatchSource.WIKI,root/html602/TRootControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootControlBar.html
https://root.cern/root/html602/TRootControlBar.html:9500,Security,Hash,Hash,9500,"virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidHide(); virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const",MatchSource.WIKI,root/html602/TRootControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootControlBar.html
https://root.cern/root/html602/TRootControlBar.html:16300,Testability,Test,TestBit,16300,"rame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetTextColor(const char* colorName); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShow(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TRootControlBar(const TRootControlBar&); TRootControlBar(TControlBar* c = 0, const char* title = ""ROOT Control Bar"", Int_t x = -999, Int_t y = -999); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootControlBar.html
https://root.cern/root/html602/TRootControlBar.html:16339,Testability,Test,TestBits,16339,"rame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidSetTextColor(const char* colorName); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShow(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TRootControlBar(const TRootControlBar&); TRootControlBar(TControlBar* c = 0, const char* title = ""ROOT Control Bar"", Int_t x = -999, Int_t y = -999); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootControlBar.html
https://root.cern/root/html602/TRootControlBar.html:1577,Usability,Clear,Clear,1577," virtual~TRootControlBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* ",MatchSource.WIKI,root/html602/TRootControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootControlBar.html
https://root.cern/root/html602/TRootDialog.html:4454,Availability,Error,Error,4454,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::G",MatchSource.WIKI,root/html602/TRootDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootDialog.html
https://root.cern/root/html602/TRootDialog.html:4583,Availability,error,error,4583," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html602/TRootDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootDialog.html
https://root.cern/root/html602/TRootDialog.html:4667,Availability,error,error,4667,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UIn",MatchSource.WIKI,root/html602/TRootDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootDialog.html
https://root.cern/root/html602/TRootDialog.html:20392,Availability,mask,mask,20392,,MatchSource.WIKI,root/html602/TRootDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootDialog.html
https://root.cern/root/html602/TRootDialog.html:11265,Integrability,Message,Message,11265,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootDialog&operator=(const TRootDialog&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPopup(); virtual voidTGCompositeFrame::Print(Option_t* optio",MatchSource.WIKI,root/html602/TRootDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootDialog.html
https://root.cern/root/html602/TRootDialog.html:117,Modifiability,inherit,inheritance,117,". TRootDialog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TRootDialog. class TRootDialog: public TGTransientFrame. TRootDialog. A TRootDialog is used to prompt for the arguments of an object's; member function. A TRootDialog is created via the context menu's; when selecting a member function taking arguments. Function Members (Methods); public:. virtual~TRootDialog(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidAdd(const char* argname, const char* value, const char* type); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, co",MatchSource.WIKI,root/html602/TRootDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootDialog.html
https://root.cern/root/html602/TRootDialog.html:9848,Modifiability,Inherit,InheritsFrom,9848,"irtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tHandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html602/TRootDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootDialog.html
https://root.cern/root/html602/TRootDialog.html:9914,Modifiability,Inherit,InheritsFrom,9914," Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tHandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow:",MatchSource.WIKI,root/html602/TRootDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootDialog.html
https://root.cern/root/html602/TRootDialog.html:23762,Modifiability,Inherit,Inheritance,23762,"me::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. Bool_tfApplyif true show Apply button; Bool_tfCancelif true show Cancel button; Bool_tfHelpif true show Online Help button; TGLayoutHints*fL1label layout; TGLayoutHints*fL2text entry layout; TRootContextMenu*fMenuassociated context menu; Bool_tfOkif true show OK button; TList*fWidgetslabel and text field widgets created in dialog. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TRootDialog. Function documentation; TRootDialog(TRootContextMenu* cmenu = 0, const TGWindow* main = 0, const char* title = ""ROOT Dialog"", Bool_t okB = kTRUE, Bool_t cancelB = kTRUE, Bool_t applyB = kFALSE, Bool_t helpB = kTRUE); Create a method argument prompt dialog. ~TRootDialog(); Delete the dialog. void Add(const char* argname, const char* value, const char* type); Add a label and text input field. const char * GetParameters(); Get parameter string (called by contextmenu after OK or Apply has; been selected). void Popup(); Popup dialog. void CloseWindow(); Called when closed via window manager action. void TabPressed(); Handle Tab keyboard navigation in this dialog. Bool_t HandleKey(Event_t* event); The key press event handler in this dialog. TRootDialog(TRootContextMenu* cmenu = 0, const TGWindow* main = 0, const char* title = ""ROOT Dialog"", Bool_t okB ",MatchSource.WIKI,root/html602/TRootDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootDialog.html
https://root.cern/root/html602/TRootDialog.html:9558,Security,Hash,Hash,9558,"t_t, Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tHandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html602/TRootDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootDialog.html
https://root.cern/root/html602/TRootDialog.html:16172,Testability,Test,TestBit,16172,"LayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidTabPressed(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TRootDialog(const TRootDialog&); TRootDialog(TRootContextMenu* cmenu = 0, const TGWindow* main = 0, const char* title = ""ROOT Dialog"", Bool_t okB = kTRUE, Bool_t cancelB = kTRUE, Bool_t applyB = kFALSE, Bool_t helpB = kTRUE); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootDialog.html
https://root.cern/root/html602/TRootDialog.html:16211,Testability,Test,TestBits,16211,"LayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidTabPressed(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TRootDialog(const TRootDialog&); TRootDialog(TRootContextMenu* cmenu = 0, const TGWindow* main = 0, const char* title = ""ROOT Dialog"", Bool_t okB = kTRUE, Bool_t cancelB = kTRUE, Bool_t applyB = kFALSE, Bool_t helpB = kTRUE); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootDialog.html
https://root.cern/root/html602/TRootDialog.html:1719,Usability,Clear,Clear,1719,"* value, const char* type); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char",MatchSource.WIKI,root/html602/TRootDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootDialog.html
https://root.cern/root/html602/TRootEmbeddedCanvas.html:4014,Availability,Error,Error,4014,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Bool_tGetAutoFit() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TCanvas*GetCanvas() const; Int_tGetCanvasWindowId() const; TGClient*TGObject::GetClient() const; TGFrame*TGCanvas::GetContainer() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; stat",MatchSource.WIKI,root/html602/TRootEmbeddedCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootEmbeddedCanvas.html
https://root.cern/root/html602/TRootEmbeddedCanvas.html:4143,Availability,error,error,4143," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Bool_tGetAutoFit() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TCanvas*GetCanvas() const; Int_tGetCanvasWindowId() const; TGClient*TGObject::GetClient() const; TGFrame*TGCanvas::GetContainer() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCanvas::GetDefaultSize() const; virtual UInt_tTGFrame::Ge",MatchSource.WIKI,root/html602/TRootEmbeddedCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootEmbeddedCanvas.html
https://root.cern/root/html602/TRootEmbeddedCanvas.html:4227,Availability,error,error,4227,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Bool_tGetAutoFit() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TCanvas*GetCanvas() const; Int_tGetCanvasWindowId() const; TGClient*TGObject::GetClient() const; TGFrame*TGCanvas::GetContainer() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCanvas::GetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTG",MatchSource.WIKI,root/html602/TRootEmbeddedCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootEmbeddedCanvas.html
https://root.cern/root/html602/TRootEmbeddedCanvas.html:17796,Availability,mask,mask,17796,,MatchSource.WIKI,root/html602/TRootEmbeddedCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootEmbeddedCanvas.html
https://root.cern/root/html602/TRootEmbeddedCanvas.html:9790,Integrability,Message,Message,9790,"st; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGCanvas::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCanvas::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGWindow::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGFrame::Print(Option_t* option = """") const; virtual voidTGFrame::ProcessedConfigure(Event_t* event)SIGNAL ; vi",MatchSource.WIKI,root/html602/TRootEmbeddedCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootEmbeddedCanvas.html
https://root.cern/root/html602/TRootEmbeddedCanvas.html:125,Modifiability,inherit,inheritance,125,". TRootEmbeddedCanvas. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TRootEmbeddedCanvas. class TRootEmbeddedCanvas: public TGCanvas. TRootEmbeddedCanvas. This class creates a TGCanvas in which a TCanvas is created. Use; GetCanvas() to get a pointer to the TCanvas. Function Members (Methods); public:. virtual~TRootEmbeddedCanvas(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCanvas::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAdoptCanvas(TCanvas* c); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTGCanvas::ClearViewPort(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_",MatchSource.WIKI,root/html602/TRootEmbeddedCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootEmbeddedCanvas.html
https://root.cern/root/html602/TRootEmbeddedCanvas.html:8656,Modifiability,Inherit,InheritsFrom,8656,"tual Bool_tTGFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tTGFrame::HandleMotion(Event_t*); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGCanvas::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCanv",MatchSource.WIKI,root/html602/TRootEmbeddedCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootEmbeddedCanvas.html
https://root.cern/root/html602/TRootEmbeddedCanvas.html:8722,Modifiability,Inherit,InheritsFrom,8722,"me::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tTGFrame::HandleMotion(Event_t*); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGCanvas::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCanvas::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject",MatchSource.WIKI,root/html602/TRootEmbeddedCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootEmbeddedCanvas.html
https://root.cern/root/html602/TRootEmbeddedCanvas.html:19720,Modifiability,Inherit,Inheritance,19720,"wPort*TGCanvas::fVportviewport through which we look at contents; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCanvas. ←; TRootEmbeddedCanvas. Function documentation; TRootEmbeddedCanvas(const char* name = 0, const TGWindow* p = 0, UInt_t w = 10, UInt_t h = 10, UInt_t options = kSunkenFrame | kDoubleBorder, Pixel_t back = GetDefaultFrameBackground()); Create an TCanvas embedded in a TGFrame. A pointer to the TCanvas can; be obtained via the GetCanvas() member function. To embed a canvas; derived from a TCanvas do the following:; TRootEmbeddedCanvas *embedded = new TRootEmbeddedCanvas(0, p, w, h);; [note name must be 0, not null string """"]; Int_t wid = embedded->GetCanvasWindowId();; TMyCanvas *myc = new TMyCanvas(""myname"", 10, 10, wid);; embedded->AdoptCanvas(myc);; [ the MyCanvas is adopted by the embedded canvas and will be; destroyed by it ]. ~TRootEmbeddedCanvas(); Delete embedded ROOT canvas. void AdoptCanvas(TCanvas* c); Canvas c is adopted from this embedded canvas. Bool_t HandleContainerButton(Event_t* ev); Handle ",MatchSource.WIKI,root/html602/TRootEmbeddedCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootEmbeddedCanvas.html
https://root.cern/root/html602/TRootEmbeddedCanvas.html:20940,Modifiability,config,configure,20940," 0, UInt_t w = 10, UInt_t h = 10, UInt_t options = kSunkenFrame | kDoubleBorder, Pixel_t back = GetDefaultFrameBackground()); Create an TCanvas embedded in a TGFrame. A pointer to the TCanvas can; be obtained via the GetCanvas() member function. To embed a canvas; derived from a TCanvas do the following:; TRootEmbeddedCanvas *embedded = new TRootEmbeddedCanvas(0, p, w, h);; [note name must be 0, not null string """"]; Int_t wid = embedded->GetCanvasWindowId();; TMyCanvas *myc = new TMyCanvas(""myname"", 10, 10, wid);; embedded->AdoptCanvas(myc);; [ the MyCanvas is adopted by the embedded canvas and will be; destroyed by it ]. ~TRootEmbeddedCanvas(); Delete embedded ROOT canvas. void AdoptCanvas(TCanvas* c); Canvas c is adopted from this embedded canvas. Bool_t HandleContainerButton(Event_t* ev); Handle mouse button events in the canvas container. Bool_t HandleContainerDoubleClick(Event_t* ev); Handle mouse button double click events in the canvas container. Bool_t HandleContainerConfigure(Event_t* ev); Handle configure (i.e. resize) event. Bool_t HandleContainerKey(Event_t* ev); Handle keyboard events in the canvas container. Bool_t HandleContainerMotion(Event_t* ev); Handle mouse motion event in the canvas container. Bool_t HandleContainerExpose(Event_t* ev); Handle expose events. Bool_t HandleContainerCrossing(Event_t* ev); Handle enter/leave events. Only leave is activated at the moment. Bool_t HandleDNDDrop(TDNDData* data); Handle drop events. Atom_t HandleDNDPosition(Int_t , Int_t , Atom_t action, Int_t , Int_t ); Handle dragging position events. Atom_t HandleDNDEnter(Atom_t* typelist); Handle drag enter events. Bool_t HandleDNDLeave(); Handle drag leave events. void SavePrimitive(ostream& out, Option_t* option = """"); Save an embedded canvas as a C++ statement(s) on output stream out. TRootEmbeddedCanvas(const TRootEmbeddedCanvas& ). TRootEmbeddedCanvas& operator=(const TRootEmbeddedCanvas& ). TCanvas * GetCanvas() const; { return fCanvas; }. Int_t GetCanvasWindowId",MatchSource.WIKI,root/html602/TRootEmbeddedCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootEmbeddedCanvas.html
https://root.cern/root/html602/TRootEmbeddedCanvas.html:8419,Security,Hash,Hash,8419,"irtual Bool_tHandleDNDLeave(); virtual Atom_tHandleDNDPosition(Int_t, Int_t, Atom_t action, Int_t, Int_t); virtual Bool_tTGFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGFrame::HandleDragDrop(TGFrame*, Int_t, Int_t, TGLayoutHints*); virtual Bool_tTGFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGFrame::HandleKey(Event_t*); virtual Bool_tTGFrame::HandleMotion(Event_t*); virtual Bool_tTGFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; virtual Bool_tTGFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGWindow::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTGCanvas:",MatchSource.WIKI,root/html602/TRootEmbeddedCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootEmbeddedCanvas.html
https://root.cern/root/html602/TRootEmbeddedCanvas.html:21203,Security,expose,expose,21203,"derived from a TCanvas do the following:; TRootEmbeddedCanvas *embedded = new TRootEmbeddedCanvas(0, p, w, h);; [note name must be 0, not null string """"]; Int_t wid = embedded->GetCanvasWindowId();; TMyCanvas *myc = new TMyCanvas(""myname"", 10, 10, wid);; embedded->AdoptCanvas(myc);; [ the MyCanvas is adopted by the embedded canvas and will be; destroyed by it ]. ~TRootEmbeddedCanvas(); Delete embedded ROOT canvas. void AdoptCanvas(TCanvas* c); Canvas c is adopted from this embedded canvas. Bool_t HandleContainerButton(Event_t* ev); Handle mouse button events in the canvas container. Bool_t HandleContainerDoubleClick(Event_t* ev); Handle mouse button double click events in the canvas container. Bool_t HandleContainerConfigure(Event_t* ev); Handle configure (i.e. resize) event. Bool_t HandleContainerKey(Event_t* ev); Handle keyboard events in the canvas container. Bool_t HandleContainerMotion(Event_t* ev); Handle mouse motion event in the canvas container. Bool_t HandleContainerExpose(Event_t* ev); Handle expose events. Bool_t HandleContainerCrossing(Event_t* ev); Handle enter/leave events. Only leave is activated at the moment. Bool_t HandleDNDDrop(TDNDData* data); Handle drop events. Atom_t HandleDNDPosition(Int_t , Int_t , Atom_t action, Int_t , Int_t ); Handle dragging position events. Atom_t HandleDNDEnter(Atom_t* typelist); Handle drag enter events. Bool_t HandleDNDLeave(); Handle drag leave events. void SavePrimitive(ostream& out, Option_t* option = """"); Save an embedded canvas as a C++ statement(s) on output stream out. TRootEmbeddedCanvas(const TRootEmbeddedCanvas& ). TRootEmbeddedCanvas& operator=(const TRootEmbeddedCanvas& ). TCanvas * GetCanvas() const; { return fCanvas; }. Int_t GetCanvasWindowId() const; { return fCWinId; }. Bool_t GetAutoFit() const; { return fAutoFit; }. void SetAutoFit(Bool_t fit = kTRUE); { fAutoFit = fit; }. » Author: Fons Rademakers 15/07/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ »",MatchSource.WIKI,root/html602/TRootEmbeddedCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootEmbeddedCanvas.html
https://root.cern/root/html602/TRootEmbeddedCanvas.html:13580,Testability,Test,TestBit,13580,"idTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCanvas::SetHsbPosition(Int_t newPos); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); voidTGCanvas::SetScrolling(Int_t scrolling); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGCanvas::SetVsbPosition(Int_t newPos); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRootEmbeddedCanvas(const char* name = 0, const TGWindow* p = 0, UInt_t w = 10, UInt_t h = 10, UInt_t options = kSunkenFrame | kDoubleBorder, Pixel_t back = GetDefaultFrameBackground()); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootEmbeddedCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootEmbeddedCanvas.html
https://root.cern/root/html602/TRootEmbeddedCanvas.html:13619,Testability,Test,TestBits,13619,"idTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCanvas::SetHsbPosition(Int_t newPos); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); voidTGCanvas::SetScrolling(Int_t scrolling); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGCanvas::SetVsbPosition(Int_t newPos); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRootEmbeddedCanvas(const char* name = 0, const TGWindow* p = 0, UInt_t w = 10, UInt_t h = 10, UInt_t options = kSunkenFrame | kDoubleBorder, Pixel_t back = GetDefaultFrameBackground()); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootEmbeddedCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootEmbeddedCanvas.html
https://root.cern/root/html602/TRootEmbeddedCanvas.html:1300,Usability,Clear,Clear,1300," virtual~TRootEmbeddedCanvas(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCanvas::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAdoptCanvas(TCanvas* c); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTGCanvas::ClearViewPort(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_",MatchSource.WIKI,root/html602/TRootEmbeddedCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootEmbeddedCanvas.html
https://root.cern/root/html602/TRootEmbeddedCanvas.html:1345,Usability,Clear,ClearViewPort,1345," virtual~TRootEmbeddedCanvas(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCanvas::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAdoptCanvas(TCanvas* c); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTGCanvas::ClearViewPort(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_",MatchSource.WIKI,root/html602/TRootEmbeddedCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootEmbeddedCanvas.html
https://root.cern/root/html602/TRootGuiBuilder.html:7108,Availability,Error,Error,7108,"ect::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEraseStatusBar(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual TGFrame*ExecuteAction(); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; TGMdiFrame*FindEditableMdiFrame(const TGWindow* win); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGuiBldAction*TGuiBuilder::GetAction() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static ULong_tGetBgnd(); static TGGC*GetBgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; void",MatchSource.WIKI,root/html602/TRootGuiBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html
https://root.cern/root/html602/TRootGuiBuilder.html:7237,Availability,error,error,7237,"onst char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEraseStatusBar(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual TGFrame*ExecuteAction(); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; TGMdiFrame*FindEditableMdiFrame(const TGWindow* win); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGuiBldAction*TGuiBuilder::GetAction() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static ULong_tGetBgnd(); static TGGC*GetBgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static",MatchSource.WIKI,root/html602/TRootGuiBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html
https://root.cern/root/html602/TRootGuiBuilder.html:7321,Availability,error,error,7321,"ram); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEraseStatusBar(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual TGFrame*ExecuteAction(); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; TGMdiFrame*FindEditableMdiFrame(const TGWindow* win); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGuiBldAction*TGuiBuilder::GetAction() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static ULong_tGetBgnd(); static TGGC*GetBgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); vi",MatchSource.WIKI,root/html602/TRootGuiBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html
https://root.cern/root/html602/TRootGuiBuilder.html:23747,Availability,mask,mask,23747,,MatchSource.WIKI,root/html602/TRootGuiBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html
https://root.cern/root/html602/TRootGuiBuilder.html:28764,Deployability,Update,Update,28764,"n; GetPopupHlghtGC(). GetBgndGC(). GetPopupBgndGC(). TRootGuiBuilder(const TGWindow* p = 0); Create GUI builder application. ~TRootGuiBuilder(); Destructor. void CloseWindow(); Close GUI builder via window manager ""Close"" button. TGButton * FindActionButton(const char* name, const char* section); Find action by name. void AddAction(TGuiBldAction* act, const char* sect); Add new action to widget palette. void AddSection(const char* sect); Add new shutter item. void HandleButtons(); Handle buttons in the GUI builder's widget palette. TGFrame * ExecuteAction(); Execute an action. void InitMenu(); Inititiate GUI Builder menus. void ChangeSelected(TGFrame* f); Set selected frame. void EnableLassoButtons(Bool_t on = kTRUE); Enable toolbar buttons for alignment. void EnableSelectedButtons(Bool_t on = kTRUE); Enable/disable toolbar buttons according to the selected frame. void EnableEditButtons(Bool_t on = kTRUE); Enable/disable toolbar buttons according to the selected frame. void Update(); Update gui builder. Bool_t IsSelectMode() const; Return the status of the selected mode. Bool_t IsGrabButtonDown() const; Return the status of the grab mode. Bool_t HandleKey(Event_t* event); Handle keys. Bool_t NewProject(TString type = """"); Create a new project. Bool_t OpenProject(Event_t* event = 0); Open new gui builder project. Bool_t SaveProject(Event_t* event = 0); Save selected project. void AddMacro(const char* macro, TImage* img); Add macro to ""User's Macros"" section; Input img must be static - do not delete it. TGMdiFrame * FindEditableMdiFrame(const TGWindow* win); Find the editable frame. void SwitchToolbarButton(); Switch image of toolbar edit button according to the current state. void HandleMenu(Int_t id); Handle menu items. void MaybeCloseWindow(); Handler before closing MDI frame. void HandleWindowClosed(Int_t id); Handler for closed MDI frame. void UpdateStatusBar(const char* text = 0); Update information shown on the status bar. void EraseStatusBar(); Clear informatio",MatchSource.WIKI,root/html602/TRootGuiBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html
https://root.cern/root/html602/TRootGuiBuilder.html:28774,Deployability,Update,Update,28774,"n; GetPopupHlghtGC(). GetBgndGC(). GetPopupBgndGC(). TRootGuiBuilder(const TGWindow* p = 0); Create GUI builder application. ~TRootGuiBuilder(); Destructor. void CloseWindow(); Close GUI builder via window manager ""Close"" button. TGButton * FindActionButton(const char* name, const char* section); Find action by name. void AddAction(TGuiBldAction* act, const char* sect); Add new action to widget palette. void AddSection(const char* sect); Add new shutter item. void HandleButtons(); Handle buttons in the GUI builder's widget palette. TGFrame * ExecuteAction(); Execute an action. void InitMenu(); Inititiate GUI Builder menus. void ChangeSelected(TGFrame* f); Set selected frame. void EnableLassoButtons(Bool_t on = kTRUE); Enable toolbar buttons for alignment. void EnableSelectedButtons(Bool_t on = kTRUE); Enable/disable toolbar buttons according to the selected frame. void EnableEditButtons(Bool_t on = kTRUE); Enable/disable toolbar buttons according to the selected frame. void Update(); Update gui builder. Bool_t IsSelectMode() const; Return the status of the selected mode. Bool_t IsGrabButtonDown() const; Return the status of the grab mode. Bool_t HandleKey(Event_t* event); Handle keys. Bool_t NewProject(TString type = """"); Create a new project. Bool_t OpenProject(Event_t* event = 0); Open new gui builder project. Bool_t SaveProject(Event_t* event = 0); Save selected project. void AddMacro(const char* macro, TImage* img); Add macro to ""User's Macros"" section; Input img must be static - do not delete it. TGMdiFrame * FindEditableMdiFrame(const TGWindow* win); Find the editable frame. void SwitchToolbarButton(); Switch image of toolbar edit button according to the current state. void HandleMenu(Int_t id); Handle menu items. void MaybeCloseWindow(); Handler before closing MDI frame. void HandleWindowClosed(Int_t id); Handler for closed MDI frame. void UpdateStatusBar(const char* text = 0); Update information shown on the status bar. void EraseStatusBar(); Clear informatio",MatchSource.WIKI,root/html602/TRootGuiBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html
https://root.cern/root/html602/TRootGuiBuilder.html:29654,Deployability,Update,UpdateStatusBar,29654,"); Enable/disable toolbar buttons according to the selected frame. void Update(); Update gui builder. Bool_t IsSelectMode() const; Return the status of the selected mode. Bool_t IsGrabButtonDown() const; Return the status of the grab mode. Bool_t HandleKey(Event_t* event); Handle keys. Bool_t NewProject(TString type = """"); Create a new project. Bool_t OpenProject(Event_t* event = 0); Open new gui builder project. Bool_t SaveProject(Event_t* event = 0); Save selected project. void AddMacro(const char* macro, TImage* img); Add macro to ""User's Macros"" section; Input img must be static - do not delete it. TGMdiFrame * FindEditableMdiFrame(const TGWindow* win); Find the editable frame. void SwitchToolbarButton(); Switch image of toolbar edit button according to the current state. void HandleMenu(Int_t id); Handle menu items. void MaybeCloseWindow(); Handler before closing MDI frame. void HandleWindowClosed(Int_t id); Handler for closed MDI frame. void UpdateStatusBar(const char* text = 0); Update information shown on the status bar. void EraseStatusBar(); Clear information shown in the status bar. void BindKeys(); Keyborad key binding. TGFrame * VSplitter(); Create new vertical splitter (TGVSplitter). TGFrame * HSplitter(); Creates new horizontal splitter (TGHSplitter). void Hide(); Hide builder. ULong_t GetBgnd(); Return default background color. void PropagateBgndColor(TGFrame* frame, Pixel_t color); Set a background color to frame and all its subframes. ULong_t GetPopupBgnd(); Return background color for popup menus. ULong_t GetPopupHlght(); Return highlighted color for popup menu entry. TGPopupMenu * CreatePopup(); Return style popup menu. TGFrame * BuildListTree(); Helper method used in guibuilding. TGFrame * BuildCanvas(); Helper method used in guibuilding to create TGCanvas widget. TGFrame * BuildShutter(); Helper method used in guibuilding to create TGShutter widget. TGFrame * BuildTextEdit(); Helper method to create TGTextEdit widget. TGFrame * BuildTab(); Help",MatchSource.WIKI,root/html602/TRootGuiBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html
https://root.cern/root/html602/TRootGuiBuilder.html:29693,Deployability,Update,Update,29693,"); Enable/disable toolbar buttons according to the selected frame. void Update(); Update gui builder. Bool_t IsSelectMode() const; Return the status of the selected mode. Bool_t IsGrabButtonDown() const; Return the status of the grab mode. Bool_t HandleKey(Event_t* event); Handle keys. Bool_t NewProject(TString type = """"); Create a new project. Bool_t OpenProject(Event_t* event = 0); Open new gui builder project. Bool_t SaveProject(Event_t* event = 0); Save selected project. void AddMacro(const char* macro, TImage* img); Add macro to ""User's Macros"" section; Input img must be static - do not delete it. TGMdiFrame * FindEditableMdiFrame(const TGWindow* win); Find the editable frame. void SwitchToolbarButton(); Switch image of toolbar edit button according to the current state. void HandleMenu(Int_t id); Handle menu items. void MaybeCloseWindow(); Handler before closing MDI frame. void HandleWindowClosed(Int_t id); Handler for closed MDI frame. void UpdateStatusBar(const char* text = 0); Update information shown on the status bar. void EraseStatusBar(); Clear information shown in the status bar. void BindKeys(); Keyborad key binding. TGFrame * VSplitter(); Create new vertical splitter (TGVSplitter). TGFrame * HSplitter(); Creates new horizontal splitter (TGHSplitter). void Hide(); Hide builder. ULong_t GetBgnd(); Return default background color. void PropagateBgndColor(TGFrame* frame, Pixel_t color); Set a background color to frame and all its subframes. ULong_t GetPopupBgnd(); Return background color for popup menus. ULong_t GetPopupHlght(); Return highlighted color for popup menu entry. TGPopupMenu * CreatePopup(); Return style popup menu. TGFrame * BuildListTree(); Helper method used in guibuilding. TGFrame * BuildCanvas(); Helper method used in guibuilding to create TGCanvas widget. TGFrame * BuildShutter(); Helper method used in guibuilding to create TGShutter widget. TGFrame * BuildTextEdit(); Helper method to create TGTextEdit widget. TGFrame * BuildTab(); Help",MatchSource.WIKI,root/html602/TRootGuiBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html
https://root.cern/root/html602/TRootGuiBuilder.html:14668,Integrability,Message,Message,14668,"Object* obj) const; virtual Bool_tTGuiBuilder::IsExecutable() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsGrabButtonDown() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsSelectMode() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); virtual voidMaybeCloseWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tNewProject(TString type = """"); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Bool_tOpenProject(Event_t* event = 0); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootGuiBuilder&operator=(const TRootGuiBuilder&); virtual voidTObject::Paint(Option_t* option = """"); ",MatchSource.WIKI,root/html602/TRootGuiBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html
https://root.cern/root/html602/TRootGuiBuilder.html:121,Modifiability,inherit,inheritance,121,". TRootGuiBuilder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUIBUILDER; » TRootGuiBuilder. class TRootGuiBuilder: public TGuiBuilder, public TGMainFrame. TRootGuiBuilder. ROOT GUI Builder principles. With the GUI builder, we try to make the next step from WYSIWYG; to embedded editing concept - WYSIWYE (""what you see is what you edit"").; The ROOT GUI Builder allows modifying real GUI objects.; For example, one can edit the existing GUI application created by; $ROOTSYS/tutorials/gui/guitest.C.; GUI components can be added to a design area from a widget palette,; or can be borrowed from another application.; One can drag and and drop TCanvas's menu bar into the application.; GUI objects can be resized and dragged, copied and pasted.; ROOT GUI Builder allows changing the layout, snap to grid, change object's; layout order via the GUI Builder toolbar, or by options in the right-click; context menus.; A final design can be immediatly tested and used, or saved as a C++ macro.; For example, it's possible to rearrange buttons in control bar,; add separators etc. and continue to use a new fancy control bar in the; application. The following is a short description of the GUI Builder actions and key shortcuts:. o Press Ctrl-Double-Click to start/stop edit mode; o Press Double-Click to activate quick edit action (defined in root.mimes). Selection, grabbing, dropping. It is possible to select, drag any frame and drop it to any frame. o Click left mouse button or Ctrl-Click to select an object to edit.; o Press right mouse button to activate context menu; o Multiple selection (grabbing):; - draw lasso and press Return key; - press Shift key and draw lasso; o Dropping:; - select frame and press Ctrl-Return key; o Changing layout order:; - select frame and use arrow keys to change l",MatchSource.WIKI,root/html602/TRootGuiBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html
https://root.cern/root/html602/TRootGuiBuilder.html:13050,Modifiability,Inherit,InheritsFrom,13050,"tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tHandleKey(Event_t* event); virtual voidHandleMenu(Int_t id); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual voidHandleWindowClosed(Int_t id); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidHide(); virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); static TGFrame*HSplitter(); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; static TGuiBuilder*TGuiBuilder::Instance(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTGuiBuilder::IsExecutable() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsGrabButtonDown() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsSelectMode() const; virtual Bool_tTOb",MatchSource.WIKI,root/html602/TRootGuiBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html
https://root.cern/root/html602/TRootGuiBuilder.html:13116,Modifiability,Inherit,InheritsFrom,13116,"Frame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tHandleKey(Event_t* event); virtual voidHandleMenu(Int_t id); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual voidHandleWindowClosed(Int_t id); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidHide(); virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); static TGFrame*HSplitter(); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; static TGuiBuilder*TGuiBuilder::Instance(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTGuiBuilder::IsExecutable() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsGrabButtonDown() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsSelectMode() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFram",MatchSource.WIKI,root/html602/TRootGuiBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html
https://root.cern/root/html602/TRootGuiBuilder.html:27607,Modifiability,Inherit,Inheritance,27607,"dowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGButton*fActionButtonaction button; Int_tfClosing; TGMdiFrame*fEditablemdi frame where editted frame is located; TGuiBldEditor*fEditorframe property editor; const TGPicture*fIconPicicon picture; TGMdiMainFrame*fMainmain mdi frame; TGuiBldDragManager*fManagerdrag and drop manager; TGMdiMenuBar*fMenuBarguibuilder menu bar; TGPopupMenu*fMenuEdit""Edit"" popup menu; TGPopupMenu*fMenuFile""File"" popup menu; TGPopupMenu*fMenuHelp""Help"" popup menu; TGPopupMenu*fMenuWindow""Window"" popup menu; TGFrame*fSelectedselected frame; TGShutter*fShutterwidget palette; TGDockableFrame*fShutterDockdockable frame where widget palette is located; TGPictureButton*fStartButtonstart button; TGStatusBar*fStatusBarguibuilder status bar; TGToolBar*fToolBarguibuider toolbar; TGDockableFrame*fToolDockdockable frame where toolbar is located; static TGGC*fgBgnd; static TGGC*fgBgndPopup; static TGGC*fgBgndPopupHlght. Class Charts. Inheritance Chart:. TGuiBuilder. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TRootGuiBuilder. Function documentation; GetPopupHlghtGC(). GetBgndGC(). GetPopupBgndGC(). TRootGuiBuilder(const TGWindow* p = 0); Create GUI builder application. ~TRootGuiBuilder(); Destructor. void CloseWindow(); Close GUI builder via window manager ""Close"" button. TGButton * FindActionButton(const char* name, const char* section); Find action by name. void AddAction(TGuiBldAction* act, const char* sect); Add new action to widget palette. void AddSection(const char* sect); Add new shutter item. void HandleButtons(); Handle buttons in the GUI builder's widget palette. TGFrame * ExecuteAction(); Execute an action. void InitMenu(); Inititiate GUI Builder menus. void ChangeSelected(TGFrame* f); Set selected frame. void EnableLassoButtons(Bool_t on = kTRUE); Enable toolbar buttons for alignment. void EnableSelectedButtons(Bool_t on = kTRUE); Enable/disable toolbar butto",MatchSource.WIKI,root/html602/TRootGuiBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html
https://root.cern/root/html602/TRootGuiBuilder.html:12712,Security,Hash,Hash,12712,"rtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tHandleKey(Event_t* event); virtual voidHandleMenu(Int_t id); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual voidHandleWindowClosed(Int_t id); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidHide(); virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); static TGFrame*HSplitter(); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; static TGuiBuilder*TGuiBuilder::Instance(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTGuiBuild",MatchSource.WIKI,root/html602/TRootGuiBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html
https://root.cern/root/html602/TRootGuiBuilder.html:1147,Testability,test,tested,1147,"C header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUIBUILDER; » TRootGuiBuilder. class TRootGuiBuilder: public TGuiBuilder, public TGMainFrame. TRootGuiBuilder. ROOT GUI Builder principles. With the GUI builder, we try to make the next step from WYSIWYG; to embedded editing concept - WYSIWYE (""what you see is what you edit"").; The ROOT GUI Builder allows modifying real GUI objects.; For example, one can edit the existing GUI application created by; $ROOTSYS/tutorials/gui/guitest.C.; GUI components can be added to a design area from a widget palette,; or can be borrowed from another application.; One can drag and and drop TCanvas's menu bar into the application.; GUI objects can be resized and dragged, copied and pasted.; ROOT GUI Builder allows changing the layout, snap to grid, change object's; layout order via the GUI Builder toolbar, or by options in the right-click; context menus.; A final design can be immediatly tested and used, or saved as a C++ macro.; For example, it's possible to rearrange buttons in control bar,; add separators etc. and continue to use a new fancy control bar in the; application. The following is a short description of the GUI Builder actions and key shortcuts:. o Press Ctrl-Double-Click to start/stop edit mode; o Press Double-Click to activate quick edit action (defined in root.mimes). Selection, grabbing, dropping. It is possible to select, drag any frame and drop it to any frame. o Click left mouse button or Ctrl-Click to select an object to edit.; o Press right mouse button to activate context menu; o Multiple selection (grabbing):; - draw lasso and press Return key; - press Shift key and draw lasso; o Dropping:; - select frame and press Ctrl-Return key; o Changing layout order:; - select frame and use arrow keys to change layout order; o Alignment:; - draw lasso and press arrow keys (or Shift-Arrow key) to align frames. Key shortcuts. o Return - grab selected frames; o ",MatchSource.WIKI,root/html602/TRootGuiBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html
https://root.cern/root/html602/TRootGuiBuilder.html:19846,Testability,Test,TestBit,19846,"ager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShow(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidSwitchToolbarButton(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TRootGuiBuilder(const TGWindow* p = 0); TRootGuiBuilder(const TRootGuiBuilder&); virtual voidTGFrame::UnmapWindow(); virtual voidUpdate(); virtual voidUpdateStatusBar(const char* text = 0); virtual voidTObject::UseCurrentStyle(); static TGFrame*VSplitter(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootGuiBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html
https://root.cern/root/html602/TRootGuiBuilder.html:19885,Testability,Test,TestBits,19885,"ager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShow(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidSwitchToolbarButton(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TRootGuiBuilder(const TGWindow* p = 0); TRootGuiBuilder(const TRootGuiBuilder&); virtual voidTGFrame::UnmapWindow(); virtual voidUpdate(); virtual voidUpdateStatusBar(const char* text = 0); virtual voidTObject::UseCurrentStyle(); static TGFrame*VSplitter(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootGuiBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html
https://root.cern/root/html602/TRootGuiBuilder.html:4309,Usability,Clear,Clear,4309,"eycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); static TGFrame*BuildCanvas(); static TGFrame*BuildComboBox(); static TGFrame*BuildH3DLine(); static TGFrame*BuildHProgressBar(); static TGFrame*BuildHScrollBar(); static TGFrame*BuildListBox(); static TGFrame*BuildListTree(); static TGFrame*BuildShutter(); static TGFrame*BuildTab(); static TGFrame*BuildTextEdit(); static TGFrame*BuildV3DLine(); static TGFrame*BuildVProgressBar(); static TGFrame*BuildVScrollBar(); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidChangeSelected(TGFrame* f); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; static TGPopupMenu*CreatePopup(); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Boo",MatchSource.WIKI,root/html602/TRootGuiBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html
https://root.cern/root/html602/TRootGuiBuilder.html:29760,Usability,Clear,Clear,29760,"e(); Update gui builder. Bool_t IsSelectMode() const; Return the status of the selected mode. Bool_t IsGrabButtonDown() const; Return the status of the grab mode. Bool_t HandleKey(Event_t* event); Handle keys. Bool_t NewProject(TString type = """"); Create a new project. Bool_t OpenProject(Event_t* event = 0); Open new gui builder project. Bool_t SaveProject(Event_t* event = 0); Save selected project. void AddMacro(const char* macro, TImage* img); Add macro to ""User's Macros"" section; Input img must be static - do not delete it. TGMdiFrame * FindEditableMdiFrame(const TGWindow* win); Find the editable frame. void SwitchToolbarButton(); Switch image of toolbar edit button according to the current state. void HandleMenu(Int_t id); Handle menu items. void MaybeCloseWindow(); Handler before closing MDI frame. void HandleWindowClosed(Int_t id); Handler for closed MDI frame. void UpdateStatusBar(const char* text = 0); Update information shown on the status bar. void EraseStatusBar(); Clear information shown in the status bar. void BindKeys(); Keyborad key binding. TGFrame * VSplitter(); Create new vertical splitter (TGVSplitter). TGFrame * HSplitter(); Creates new horizontal splitter (TGHSplitter). void Hide(); Hide builder. ULong_t GetBgnd(); Return default background color. void PropagateBgndColor(TGFrame* frame, Pixel_t color); Set a background color to frame and all its subframes. ULong_t GetPopupBgnd(); Return background color for popup menus. ULong_t GetPopupHlght(); Return highlighted color for popup menu entry. TGPopupMenu * CreatePopup(); Return style popup menu. TGFrame * BuildListTree(); Helper method used in guibuilding. TGFrame * BuildCanvas(); Helper method used in guibuilding to create TGCanvas widget. TGFrame * BuildShutter(); Helper method used in guibuilding to create TGShutter widget. TGFrame * BuildTextEdit(); Helper method to create TGTextEdit widget. TGFrame * BuildTab(); Helper method to create TGTab widget. TGFrame * BuildListBox(); Helper method to ",MatchSource.WIKI,root/html602/TRootGuiBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html
https://root.cern/root/html602/TRootGuiFactory.html:2245,Availability,Error,Error,2245,", Int_t y, UInt_t width, UInt_t height, Option_t* opt = """"); virtual TCanvasImp*CreateCanvasImp(TCanvas* c, const char* title, UInt_t width, UInt_t height); virtual TCanvasImp*CreateCanvasImp(TCanvas* c, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual TContextMenuImp*CreateContextMenuImp(TContextMenu* c, const char* name, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title, Int_t x, Int_t y); virtual TInspectorImp*TGuiFactory::CreateInspectorImp(const TObject* obj, UInt_t width, UInt_t height); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer);",MatchSource.WIKI,root/html602/TRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiFactory.html
https://root.cern/root/html602/TRootGuiFactory.html:2374,Availability,error,error,2374,"nt_t width, UInt_t height); virtual TCanvasImp*CreateCanvasImp(TCanvas* c, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual TContextMenuImp*CreateContextMenuImp(TContextMenu* c, const char* name, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title, Int_t x, Int_t y); virtual TInspectorImp*TGuiFactory::CreateInspectorImp(const TObject* obj, UInt_t width, UInt_t height); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObj",MatchSource.WIKI,root/html602/TRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiFactory.html
https://root.cern/root/html602/TRootGuiFactory.html:2458,Availability,error,error,2458,"r* title, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual TContextMenuImp*CreateContextMenuImp(TContextMenu* c, const char* name, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title, Int_t x, Int_t y); virtual TInspectorImp*TGuiFactory::CreateInspectorImp(const TObject* obj, UInt_t width, UInt_t height); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(",MatchSource.WIKI,root/html602/TRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiFactory.html
https://root.cern/root/html602/TRootGuiFactory.html:121,Modifiability,inherit,inheritance,121,". TRootGuiFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TRootGuiFactory. class TRootGuiFactory: public TGuiFactory. TRootGuiFactory. This class is a factory for ROOT GUI components. It overrides; the member functions of the ABS TGuiFactory. Function Members (Methods); public:. virtual~TRootGuiFactory(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual TApplicationImp*CreateApplicationImp(const char* classname, int* argc, char** argv); virtual TBrowserImp*CreateBrowserImp(TBrowser* b, const char* title, UInt_t width, UInt_t height, Option_t* opt = """"); virtual TBrowserImp*CreateBrowserImp(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """"); virtual TCanvasImp*CreateCanvasImp(TCanvas* c, const char* title, UInt_t width, UInt_t height); virtual TCanvasImp*CreateCanvasImp(TCanvas* c, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual TContextMenuImp*CreateContextMenuImp(TContextMenu* c, const char* name, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title, Int_t x, Int_t y); virtual TInspectorImp*TGuiFactory::CreateInspectorImp(const TObject* obj, UInt_t width, UInt_t height); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int",MatchSource.WIKI,root/html602/TRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiFactory.html
https://root.cern/root/html602/TRootGuiFactory.html:3382,Modifiability,Inherit,InheritsFrom,3382,"rtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz",MatchSource.WIKI,root/html602/TRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiFactory.html
https://root.cern/root/html602/TRootGuiFactory.html:3448,Modifiability,Inherit,InheritsFrom,3448,"_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootGuiFactory&operator=(const TRootGuiFactory&); vi",MatchSource.WIKI,root/html602/TRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiFactory.html
https://root.cern/root/html602/TRootGuiFactory.html:7095,Modifiability,Inherit,Inheritance,7095,"protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TGuiFactory. ←; TRootGuiFactory. ←. TQRootGuiFactory. Function documentation; TRootGuiFactory(const char* name = ""Root"", const char* title = ""ROOT GUI Factory""); TRootGuiFactory ctor. TApplicationImp * CreateApplicationImp(const char* classname, int* argc, char** argv); Create a ROOT native GUI version of TApplicationImp. TCanvasImp * CreateCanvasImp(TCanvas* c, const char* title, UInt_t width, UInt_t height); Create a ROOT native GUI version of TCanvasImp. TCanvasImp * CreateCanvasImp(TCanvas* c, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); Create a ROOT native GUI version of TCanvasImp. TBrowserImp * CreateBrowserImp(TBrowser* b, const char* title, UInt_t width, UInt_t height, Option_t* opt = """"); Create a ROOT native GUI version of TBrowserImp. TBrowserImp * CreateBrowserImp(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """"); Create a ROOT native GUI version of TBrowserImp. TConte",MatchSource.WIKI,root/html602/TRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiFactory.html
https://root.cern/root/html602/TRootGuiFactory.html:3272,Security,Hash,Hash,3272,"st char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::",MatchSource.WIKI,root/html602/TRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiFactory.html
https://root.cern/root/html602/TRootGuiFactory.html:5616,Testability,Test,TestBit,5616,"e(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootGuiFactory&operator=(const TRootGuiFactory&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRootGuiFactory(const TRootGuiFactory&); TRootGuiFactory(const char* name = ""Root"", const char* title = ""ROOT GUI Factory""); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiFactory.html
https://root.cern/root/html602/TRootGuiFactory.html:5655,Testability,Test,TestBits,5655,"e(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootGuiFactory&operator=(const TRootGuiFactory&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRootGuiFactory(const TRootGuiFactory&); TRootGuiFactory(const char* name = ""Root"", const char* title = ""ROOT GUI Factory""); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiFactory.html
https://root.cern/root/html602/TRootGuiFactory.html:763,Usability,Clear,Clear,763," virtual~TRootGuiFactory(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual TApplicationImp*CreateApplicationImp(const char* classname, int* argc, char** argv); virtual TBrowserImp*CreateBrowserImp(TBrowser* b, const char* title, UInt_t width, UInt_t height, Option_t* opt = """"); virtual TBrowserImp*CreateBrowserImp(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """"); virtual TCanvasImp*CreateCanvasImp(TCanvas* c, const char* title, UInt_t width, UInt_t height); virtual TCanvasImp*CreateCanvasImp(TCanvas* c, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual TContextMenuImp*CreateContextMenuImp(TContextMenu* c, const char* name, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title, Int_t x, Int_t y); virtual TInspectorImp*TGuiFactory::CreateInspectorImp(const TObject* obj, UInt_t width, UInt_t height); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int",MatchSource.WIKI,root/html602/TRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootGuiFactory.html
https://root.cern/root/html602/TRootHelpDialog.html:4378,Availability,Error,Error,4378,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::G",MatchSource.WIKI,root/html602/TRootHelpDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootHelpDialog.html
https://root.cern/root/html602/TRootHelpDialog.html:4507,Availability,error,error,4507," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html602/TRootHelpDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootHelpDialog.html
https://root.cern/root/html602/TRootHelpDialog.html:4591,Availability,error,error,4591,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UIn",MatchSource.WIKI,root/html602/TRootHelpDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootHelpDialog.html
https://root.cern/root/html602/TRootHelpDialog.html:20244,Availability,mask,mask,20244,,MatchSource.WIKI,root/html602/TRootHelpDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootHelpDialog.html
https://root.cern/root/html602/TRootHelpDialog.html:11166,Integrability,Message,Message,11166,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); voidPopup(); virtual voidTGCompositeFrame::Print(Option_t* option = """") const; virtual voidTGFrame::ProcessedConfig",MatchSource.WIKI,root/html602/TRootHelpDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootHelpDialog.html
https://root.cern/root/html602/TRootHelpDialog.html:121,Modifiability,inherit,inheritance,121,". TRootHelpDialog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » GUI; » TRootHelpDialog. class TRootHelpDialog: public TGTransientFrame. TRootHelpDialog. A TRootHelpDialog is used to display help text (or any text in a; dialog window). There is on OK button to popdown the dialog. Function Members (Methods); public:. virtual~TRootHelpDialog(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAddText(const char* helpText); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQ",MatchSource.WIKI,root/html602/TRootHelpDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootHelpDialog.html
https://root.cern/root/html602/TRootHelpDialog.html:9749,Modifiability,Inherit,InheritsFrom,9749,"TGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html602/TRootHelpDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootHelpDialog.html
https://root.cern/root/html602/TRootHelpDialog.html:9815,Modifiability,Inherit,InheritsFrom,9815,"e::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow:",MatchSource.WIKI,root/html602/TRootHelpDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootHelpDialog.html
https://root.cern/root/html602/TRootHelpDialog.html:23412,Modifiability,Inherit,Inheritance,23412,"C; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGLayoutHints*fL1layout of TGTextView; TGLayoutHints*fL2layout of OK button; TGTextButton*fOKOK button; TGTextView*fViewtext view. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TRootHelpDialog. Function documentation; TRootHelpDialog(const TGWindow* main = 0, const char* title = ""ROOT Help Dialog"", UInt_t w = 1, UInt_t h = 1); Create a help text dialog. ~TRootHelpDialog(); Delete help text dialog. void Popup(); Show help dialog. void SetText(const char* helpText); Set help text from helpText buffer in TGTextView. void AddText(const char* helpText); Add help text from helpText buffer to already existing text in TGTextView. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TRootHelpDialog(const TRootHelpDialog& ). TRootHelpDialog& operator=(const TRootHelpDialog& ). » Author: Fons Rademakers 24/02/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 15:29; This page has",MatchSource.WIKI,root/html602/TRootHelpDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootHelpDialog.html
https://root.cern/root/html602/TRootHelpDialog.html:9459,Security,Hash,Hash,9459,"virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html602/TRootHelpDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootHelpDialog.html
https://root.cern/root/html602/TRootHelpDialog.html:16037,Testability,Test,TestBit,16037,"positeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetText(const char* helpText); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TRootHelpDialog(const TGWindow* main = 0, const char* title = ""ROOT Help Dialog"", UInt_t w = 1, UInt_t h = 1); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootHelpDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootHelpDialog.html
https://root.cern/root/html602/TRootHelpDialog.html:16076,Testability,Test,TestBits,16076,"positeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetText(const char* helpText); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TRootHelpDialog(const TGWindow* main = 0, const char* title = ""ROOT Help Dialog"", UInt_t w = 1, UInt_t h = 1); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootHelpDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootHelpDialog.html
https://root.cern/root/html602/TRootHelpDialog.html:1643,Usability,Clear,Clear,1643," voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAddText(const char* helpText); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char",MatchSource.WIKI,root/html602/TRootHelpDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootHelpDialog.html
https://root.cern/root/html602/TRootIOCtor.html:689,Availability,avail,available,689,". TRootIOCtor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; inheritance tree (.pdf) viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TRootIOCtor. class TRootIOCtor. TRootIOCtor. Helper class used to mark a constructor to be used by ROOT instead; of the default constructor.; If rootcint sees in a class declaration of the class MyClass:; MyClass(TRootIOCtor*);; This constructor will be used instead of the default constructor. Also the pragma:; #pragma link C++ ioctortype MyMarker;; can be used to tell rootcint that a constuctor taking a MyMarker*; should be used whenever available. Function Members (Methods); public:. ~TRootIOCtor(); TRootIOCtor&operator=(const TRootIOCtor&); TRootIOCtor&operator=(TRootIOCtor&&); TRootIOCtor(); TRootIOCtor(const TRootIOCtor&); TRootIOCtor(TRootIOCtor&&). Class Charts. Inheritance Chart:. TRootIOCtor. Function documentation. » Author: Philippe Canal 15/03/2005 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootIOCtor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootIOCtor.html
https://root.cern/root/html602/TRootIOCtor.html:106,Modifiability,inherit,inheritance,106,". TRootIOCtor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; inheritance tree (.pdf) viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TRootIOCtor. class TRootIOCtor. TRootIOCtor. Helper class used to mark a constructor to be used by ROOT instead; of the default constructor.; If rootcint sees in a class declaration of the class MyClass:; MyClass(TRootIOCtor*);; This constructor will be used instead of the default constructor. Also the pragma:; #pragma link C++ ioctortype MyMarker;; can be used to tell rootcint that a constuctor taking a MyMarker*; should be used whenever available. Function Members (Methods); public:. ~TRootIOCtor(); TRootIOCtor&operator=(const TRootIOCtor&); TRootIOCtor&operator=(TRootIOCtor&&); TRootIOCtor(); TRootIOCtor(const TRootIOCtor&); TRootIOCtor(TRootIOCtor&&). Class Charts. Inheritance Chart:. TRootIOCtor. Function documentation. » Author: Philippe Canal 15/03/2005 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootIOCtor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootIOCtor.html
https://root.cern/root/html602/TRootIOCtor.html:924,Modifiability,Inherit,Inheritance,924,". TRootIOCtor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; inheritance tree (.pdf) viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TRootIOCtor. class TRootIOCtor. TRootIOCtor. Helper class used to mark a constructor to be used by ROOT instead; of the default constructor.; If rootcint sees in a class declaration of the class MyClass:; MyClass(TRootIOCtor*);; This constructor will be used instead of the default constructor. Also the pragma:; #pragma link C++ ioctortype MyMarker;; can be used to tell rootcint that a constuctor taking a MyMarker*; should be used whenever available. Function Members (Methods); public:. ~TRootIOCtor(); TRootIOCtor&operator=(const TRootIOCtor&); TRootIOCtor&operator=(TRootIOCtor&&); TRootIOCtor(); TRootIOCtor(const TRootIOCtor&); TRootIOCtor(TRootIOCtor&&). Class Charts. Inheritance Chart:. TRootIOCtor. Function documentation. » Author: Philippe Canal 15/03/2005 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootIOCtor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootIOCtor.html
https://root.cern/root/html602/TRootSecContext.html:1394,Availability,Error,Error,1394," virtual~TRootSecContext(); voidTObject::AbstractMethod(const char* method) const; voidTSecContext::AddForCleanup(Int_t port, Int_t proto, Int_t type); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*AsString(TString& out); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDeActivate(Option_t* opt = ""CR""); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*TSecContext::GetContext() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtor",MatchSource.WIKI,root/html602/TRootSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSecContext.html
https://root.cern/root/html602/TRootSecContext.html:1523,Availability,error,error,1523,"ddForCleanup(Int_t port, Int_t proto, Int_t type); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*AsString(TString& out); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDeActivate(Option_t* opt = ""CR""); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*TSecContext::GetContext() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatimeTSecContext::GetExpDate() const; const char*TSecContext::GetHost() const; virtual const char*TObject::GetIconName() const; const char*TSecContext::GetID() const; Int_tTSecContext::GetMethod() const; const char*TSecContext::GetMethodName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTSecContext::GetOffSet() const; virtual Option_t*TObject::GetOption() const; Int_tGetRSAKey() const; TList*TSecC",MatchSource.WIKI,root/html602/TRootSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSecContext.html
https://root.cern/root/html602/TRootSecContext.html:1607,Availability,error,error,1607,"tion_t* option = """"); virtual const char*AsString(TString& out); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDeActivate(Option_t* opt = ""CR""); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*TSecContext::GetContext() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatimeTSecContext::GetExpDate() const; const char*TSecContext::GetHost() const; virtual const char*TObject::GetIconName() const; const char*TSecContext::GetID() const; Int_tTSecContext::GetMethod() const; const char*TSecContext::GetMethodName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTSecContext::GetOffSet() const; virtual Option_t*TObject::GetOption() const; Int_tGetRSAKey() const; TList*TSecContext::GetSecContextCleanup() const; virtual const char*TObject::GetTitle() const; ",MatchSource.WIKI,root/html602/TRootSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSecContext.html
https://root.cern/root/html602/TRootSecContext.html:121,Modifiability,inherit,inheritance,121,". TRootSecContext. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » AUTH; » TRootSecContext. class TRootSecContext: public TSecContext. TRootSecContext. Special implementation of TSecContext. Function Members (Methods); public:. virtual~TRootSecContext(); voidTObject::AbstractMethod(const char* method) const; voidTSecContext::AddForCleanup(Int_t port, Int_t proto, Int_t type); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*AsString(TString& out); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDeActivate(Option_t* opt = ""CR""); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*TSecContext::GetContext() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtor",MatchSource.WIKI,root/html602/TRootSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSecContext.html
https://root.cern/root/html602/TRootSecContext.html:2922,Modifiability,Inherit,InheritsFrom,2922,"al Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatimeTSecContext::GetExpDate() const; const char*TSecContext::GetHost() const; virtual const char*TObject::GetIconName() const; const char*TSecContext::GetID() const; Int_tTSecContext::GetMethod() const; const char*TSecContext::GetMethodName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTSecContext::GetOffSet() const; virtual Option_t*TObject::GetOption() const; Int_tGetRSAKey() const; TList*TSecContext::GetSecContextCleanup() const; virtual const char*TObject::GetTitle() const; const char*TSecContext::GetToken() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSecContext::GetUser() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTSecContext::IsActive() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz);",MatchSource.WIKI,root/html602/TRootSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSecContext.html
https://root.cern/root/html602/TRootSecContext.html:2988,Modifiability,Inherit,InheritsFrom,2988,"GetDtorOnly(); TDatimeTSecContext::GetExpDate() const; const char*TSecContext::GetHost() const; virtual const char*TObject::GetIconName() const; const char*TSecContext::GetID() const; Int_tTSecContext::GetMethod() const; const char*TSecContext::GetMethodName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTSecContext::GetOffSet() const; virtual Option_t*TObject::GetOption() const; Int_tGetRSAKey() const; TList*TSecContext::GetSecContextCleanup() const; virtual const char*TObject::GetTitle() const; const char*TSecContext::GetToken() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSecContext::GetUser() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTSecContext::IsActive() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootSecContex",MatchSource.WIKI,root/html602/TRootSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSecContext.html
https://root.cern/root/html602/TRootSecContext.html:6878,Modifiability,Inherit,Inheritance,6878,"irtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. virtual Bool_tCleanupSecContext(Bool_t all). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfRSAKeyType of RSA key used. Class Charts. Inheritance Chart:. TObject. ←; TSecContext. ←; TRootSecContext. Function documentation; TRootSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = 1); Ctor for SecContext object. TRootSecContext(const char* url, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = 1); Ctor for SecContext object.; User and host from url = user@host . ~TRootSecContext(); Dtor: delete (deActivate, local/remote cleanup, list removal); all what is still active. void DeActivate(Option_t* opt = ""CR""); Set OffSet to -1 and expiring Date to default; Remove from the list; If globus, cleanup local stuff; If Opt contains ""C"" or ""c"", ask for remote cleanup; If Opt contains ""R"" or ""r"", remove from the list; Default Opt=""CR"". Bool_t CleanupSecContext(Bool_t all); Ask remote client to cleanup security context 'ctx'; If 'all', all sec context with the sa",MatchSource.WIKI,root/html602/TRootSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSecContext.html
https://root.cern/root/html602/TRootSecContext.html:2812,Security,Hash,Hash,2812," const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*TSecContext::GetContext() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatimeTSecContext::GetExpDate() const; const char*TSecContext::GetHost() const; virtual const char*TObject::GetIconName() const; const char*TSecContext::GetID() const; Int_tTSecContext::GetMethod() const; const char*TSecContext::GetMethodName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTSecContext::GetOffSet() const; virtual Option_t*TObject::GetOption() const; Int_tGetRSAKey() const; TList*TSecContext::GetSecContextCleanup() const; virtual const char*TObject::GetTitle() const; const char*TSecContext::GetToken() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSecContext::GetUser() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTSecContext::IsActive() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::",MatchSource.WIKI,root/html602/TRootSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSecContext.html
https://root.cern/root/html602/TRootSecContext.html:7826,Security,secur,security,7826,"mbie. private:. Int_tfRSAKeyType of RSA key used. Class Charts. Inheritance Chart:. TObject. ←; TSecContext. ←; TRootSecContext. Function documentation; TRootSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = 1); Ctor for SecContext object. TRootSecContext(const char* url, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = 1); Ctor for SecContext object.; User and host from url = user@host . ~TRootSecContext(); Dtor: delete (deActivate, local/remote cleanup, list removal); all what is still active. void DeActivate(Option_t* opt = ""CR""); Set OffSet to -1 and expiring Date to default; Remove from the list; If globus, cleanup local stuff; If Opt contains ""C"" or ""c"", ask for remote cleanup; If Opt contains ""R"" or ""r"", remove from the list; Default Opt=""CR"". Bool_t CleanupSecContext(Bool_t all); Ask remote client to cleanup security context 'ctx'; If 'all', all sec context with the same host as ctx; are cleaned. void Print(Option_t* option = ""F"") const; If opt is ""F"" (default) print object content.; If opt is ""<number>"" print in special form for calls within THostAuth; with cardinality <number>; If opt is ""S"" prints short in-line form for calls within TFTP,; TSlave, TProof ... const char * AsString(TString& out); Returns short string with relevant information about this; security context. TRootSecContext(const char* url, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = 1). Int_t GetRSAKey() const; { return fRSAKey; }. » Author: G. Ganis 08/07/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/auth:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSecContext.html
https://root.cern/root/html602/TRootSecContext.html:8282,Security,secur,security,8282,"mbie. private:. Int_tfRSAKeyType of RSA key used. Class Charts. Inheritance Chart:. TObject. ←; TSecContext. ←; TRootSecContext. Function documentation; TRootSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = 1); Ctor for SecContext object. TRootSecContext(const char* url, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = 1); Ctor for SecContext object.; User and host from url = user@host . ~TRootSecContext(); Dtor: delete (deActivate, local/remote cleanup, list removal); all what is still active. void DeActivate(Option_t* opt = ""CR""); Set OffSet to -1 and expiring Date to default; Remove from the list; If globus, cleanup local stuff; If Opt contains ""C"" or ""c"", ask for remote cleanup; If Opt contains ""R"" or ""r"", remove from the list; Default Opt=""CR"". Bool_t CleanupSecContext(Bool_t all); Ask remote client to cleanup security context 'ctx'; If 'all', all sec context with the same host as ctx; are cleaned. void Print(Option_t* option = ""F"") const; If opt is ""F"" (default) print object content.; If opt is ""<number>"" print in special form for calls within THostAuth; with cardinality <number>; If opt is ""S"" prints short in-line form for calls within TFTP,; TSlave, TProof ... const char * AsString(TString& out); Returns short string with relevant information about this; security context. TRootSecContext(const char* url, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = 1). Int_t GetRSAKey() const; { return fRSAKey; }. » Author: G. Ganis 08/07/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/auth:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSecContext.html
https://root.cern/root/html602/TRootSecContext.html:5141,Testability,Test,TestBit,5141,"t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootSecContext&operator=(const TRootSecContext&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = ""F"") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTSecContext::SetExpDate(TDatime expdate); voidTSecContext::SetID(const char* id); static voidTObject::SetObjectStat(Bool_t stat); voidTSecContext::SetOffSet(Int_t offset); virtual voidTObject::SetUniqueID(UInt_t uid); voidTSecContext::SetUser(const char* user); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRootSecContext(const TRootSecContext&); TRootSecContext(const char* url, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = 1); TRootSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = 1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSecContext.html
https://root.cern/root/html602/TRootSecContext.html:5180,Testability,Test,TestBits,5180,"t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootSecContext&operator=(const TRootSecContext&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = ""F"") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTSecContext::SetExpDate(TDatime expdate); voidTSecContext::SetID(const char* id); static voidTObject::SetObjectStat(Bool_t stat); voidTSecContext::SetOffSet(Int_t offset); virtual voidTObject::SetUniqueID(UInt_t uid); voidTSecContext::SetUser(const char* user); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRootSecContext(const TRootSecContext&); TRootSecContext(const char* url, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = 1); TRootSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0, Int_t key = 1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSecContext.html
https://root.cern/root/html602/TRootSecContext.html:808,Usability,Clear,Clear,808," virtual~TRootSecContext(); voidTObject::AbstractMethod(const char* method) const; voidTSecContext::AddForCleanup(Int_t port, Int_t proto, Int_t type); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*AsString(TString& out); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDeActivate(Option_t* opt = ""CR""); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*TSecContext::GetContext() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtor",MatchSource.WIKI,root/html602/TRootSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSecContext.html
https://root.cern/root/html602/TRootSniffer.html:1353,Availability,Error,Error,1353," virtual~TRootSniffer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Bool_tCanDrawItem(const char* path); Bool_tCanExploreItem(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual void*FindInHierarchy(const char* path, TClass** cl = 0, TDataMember** member = 0, Int_t* chld = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TO",MatchSource.WIKI,root/html602/TRootSniffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSniffer.html
https://root.cern/root/html602/TRootSniffer.html:1482,Availability,error,error,1482,"er(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Bool_tCanDrawItem(const char* path); Bool_tCanExploreItem(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual void*FindInHierarchy(const char* path, TClass** cl = 0, TDataMember** member = 0, Int_t* chld = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TObject*FindTObjectInHierarchy(const char* path); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; ULong_tGetItemHash(const char* itemname); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ULong_tGetStreamerInfoHash(); virtual const char*TNamed::GetTitle() ",MatchSource.WIKI,root/html602/TRootSniffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSniffer.html
https://root.cern/root/html602/TRootSniffer.html:1566,Availability,error,error,1566,"pendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Bool_tCanDrawItem(const char* path); Bool_tCanExploreItem(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual void*FindInHierarchy(const char* path, TClass** cl = 0, TDataMember** member = 0, Int_t* chld = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TObject*FindTObjectInHierarchy(const char* path); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; ULong_tGetItemHash(const char* itemname); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ULong_tGetStreamerInfoHash(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTime",MatchSource.WIKI,root/html602/TRootSniffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSniffer.html
https://root.cern/root/html602/TRootSniffer.html:12461,Deployability,release,released,12461,"te command for specified object; options include method and extra list of parameters; sniffer should be not-readonly to allow execution of the commands. Bool_t IsStreamerInfoItem(const char* itemname); Return true if it is streamer info item name. Bool_t ProduceBinary(const char* path, const char* options, void*& ptr, Long_t& length); produce binary data for specified item; if ""zipped"" option specified in query, buffer will be compressed. Bool_t ProduceImage(Int_t kind, const char* path, const char* options, void*& ptr, Long_t& length); Method to produce image from specified object. Parameters:; kind - image kind TImage::kPng, TImage::kJpeg, TImage::kGif; path - path to object; options - extra options. By default, image 300x200 is produced; In options string one could provide following parameters:; w - image width; h - image height; opt - draw options; For instance:; http://localhost:8080/Files/hsimple.root/hpx/get.png?w=500&h=500&opt=lego1. Return is memory with produced image; Memory must be released by user with free(ptr) call. Bool_t Produce(const char* path, const char* file, const char* options, void*& ptr, Long_t& length); method to produce different kind of binary data; Supported file (case sensitive):; ""root.bin"" - binary data; ""root.png"" - png image; ""root.jpeg"" - jpeg image; ""root.gif"" - gif image; ""root.xml"" - xml representation; ""root.json"" - json representation; ""exe.json"" - method execution with json reply; ""exe.txt"" - method execution with debug output. Bool_t RegisterObject(const char* subfolder, TObject* obj); register object in subfolder structure; subfolder parameter can have many levels like:. TRootSniffer* sniff = new TRootSniffer(""sniff"");; sniff->RegisterObject(""/my/sub/subfolder"", h1);. Such objects can be later found in ""Objects"" folder of sniffer like. h1 = sniff->FindTObjectInHierarchy(""/Objects/my/sub/subfolder/h1"");. Objects, registered in ""extra"" sub-folder, can be explored.; Typically one used ""extra"" sub-folder to register event struc",MatchSource.WIKI,root/html602/TRootSniffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSniffer.html
https://root.cern/root/html602/TRootSniffer.html:118,Modifiability,inherit,inheritance,118,". TRootSniffer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » HTTP; » TRootSniffer. class TRootSniffer: public TNamed. TRootSnifferScanRec. Structure used to scan hierarchies of ROOT objects; Represents single level of hierarchy. Function Members (Methods); public:. virtual~TRootSniffer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Bool_tCanDrawItem(const char* path); Bool_tCanExploreItem(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual void*FindInHierarchy(const char* path, TClass** cl = 0, TDataMember** member = 0, Int_t* chld = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TO",MatchSource.WIKI,root/html602/TRootSniffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSniffer.html
https://root.cern/root/html602/TRootSniffer.html:2720,Modifiability,Inherit,InheritsFrom,2720,"l voidTNamed::FillBuffer(char*& buffer); virtual void*FindInHierarchy(const char* path, TClass** cl = 0, TDataMember** member = 0, Int_t* chld = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TObject*FindTObjectInHierarchy(const char* path); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; ULong_tGetItemHash(const char* itemname); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ULong_tGetStreamerInfoHash(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static Bool_tIsDrawableClass(TClass* cl); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsReadOnly() const; virtual Bool_tTNamed::IsSortable() const; Bool_tIsStreamerInfoItem(const char* itemname); Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html602/TRootSniffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSniffer.html
https://root.cern/root/html602/TRootSniffer.html:2786,Modifiability,Inherit,InheritsFrom,2786,"chy(const char* path, TClass** cl = 0, TDataMember** member = 0, Int_t* chld = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TObject*FindTObjectInHierarchy(const char* path); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; ULong_tGetItemHash(const char* itemname); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ULong_tGetStreamerInfoHash(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static Bool_tIsDrawableClass(TClass* cl); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsReadOnly() const; virtual Bool_tTNamed::IsSortable() const; Bool_tIsStreamerInfoItem(const char* itemname); Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](",MatchSource.WIKI,root/html602/TRootSniffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSniffer.html
https://root.cern/root/html602/TRootSniffer.html:8153,Modifiability,Inherit,Inheritance,8153,"::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMemFile*fMemFile! file used to manage streamer infos; TStringTNamed::fNameobject identifier; TStringfObjectsPath! path for registered objects; Bool_tfReadOnly! indicate if sniffer allowed to change ROOT structures - for instance, read objects from files; Int_tfSinfoSize! number of elements in streamer info, used as version; TStringTNamed::fTitleobject title. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TRootSniffer. Function documentation; TRootSniffer(const char* name, const char* objpath = ""online""); constructor. ~TRootSniffer(); destructor. void ScanObjectMemebers(TRootSnifferScanRec& rec, TClass* cl, char* ptr, unsigned long cloffset); scan object data members; some members like enum or static members will be excluded. void ScanObject(TRootSnifferScanRec& rec, TObject* obj); scan object content; if object is known collection class (like TFolder),; collection content will be scanned as well. void ScanObjectProperties(TRootSnifferScanRec& rec, TObject*& obj, TClass*& obj_class); scans basic object properties; here such fields as _typename, _title, _more properties can be specified. void ScanObjectChilds(TRootSnifferScanRec& rec, TObject* obj); scans object childs (if any); here one scans collection, branches, trees and so on. void ScanCollection(TRootSnifferScanRec& rec, TCollection* lst, const char* foldername = 0, Bool_t extra = kFALSE, TCollecti",MatchSource.WIKI,root/html602/TRootSniffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSniffer.html
https://root.cern/root/html602/TRootSniffer.html:9492,Modifiability,extend,extend,9492,"e members like enum or static members will be excluded. void ScanObject(TRootSnifferScanRec& rec, TObject* obj); scan object content; if object is known collection class (like TFolder),; collection content will be scanned as well. void ScanObjectProperties(TRootSnifferScanRec& rec, TObject*& obj, TClass*& obj_class); scans basic object properties; here such fields as _typename, _title, _more properties can be specified. void ScanObjectChilds(TRootSnifferScanRec& rec, TObject* obj); scans object childs (if any); here one scans collection, branches, trees and so on. void ScanCollection(TRootSnifferScanRec& rec, TCollection* lst, const char* foldername = 0, Bool_t extra = kFALSE, TCollection* keys_lst = 0); scan collection content. void ScanRoot(TRootSnifferScanRec& rec); scan complete ROOT objects hierarchy; For the moment it includes objects in gROOT directory; and list of canvases and files; Also all registered objects are included.; One could reimplement this method to provide alternative; scan methods or to extend some collection kinds. Bool_t IsDrawableClass(TClass* cl); return true if object can be drawn. void ScanHierarchy(const char* topname, const char* path, TRootSnifferStore* store); scan ROOT hierarchy with provided store object. void * FindInHierarchy(const char* path, TClass** cl = 0, TDataMember** member = 0, Int_t* chld = 0); Search element with specified path; Returns pointer on element; Optionally one could obtain element class, member description; and number of childs. When chld!=0, not only element is searched,; but also number of childs are counted. When member!=0, any object; will be scanned for its data members (disregard of extra options). TObject * FindTObjectInHierarchy(const char* path); Search element in hierarchy, derived from TObject. ULong_t GetStreamerInfoHash(); Returns hash value for streamer infos; At the moment - just number of items in streamer infos list. ULong_t GetItemHash(const char* itemname); Get hash function for specified i",MatchSource.WIKI,root/html602/TRootSniffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSniffer.html
https://root.cern/root/html602/TRootSniffer.html:10480,Safety,detect,detect,10480,"ide alternative; scan methods or to extend some collection kinds. Bool_t IsDrawableClass(TClass* cl); return true if object can be drawn. void ScanHierarchy(const char* topname, const char* path, TRootSnifferStore* store); scan ROOT hierarchy with provided store object. void * FindInHierarchy(const char* path, TClass** cl = 0, TDataMember** member = 0, Int_t* chld = 0); Search element with specified path; Returns pointer on element; Optionally one could obtain element class, member description; and number of childs. When chld!=0, not only element is searched,; but also number of childs are counted. When member!=0, any object; will be scanned for its data members (disregard of extra options). TObject * FindTObjectInHierarchy(const char* path); Search element in hierarchy, derived from TObject. ULong_t GetStreamerInfoHash(); Returns hash value for streamer infos; At the moment - just number of items in streamer infos list. ULong_t GetItemHash(const char* itemname); Get hash function for specified item; used to detect any changes in the specified object. Bool_t CanDrawItem(const char* path); Method verifies if object can be drawn. Bool_t CanExploreItem(const char* path); Method returns true when object has childs or; one could try to expand item. void CreateMemFile(); Creates TMemFile instance, which used for objects streaming; One could not use TBufferFile directly,; while one also require streamer infos list. Bool_t ProduceJson(const char* path, const char* options, TString& res); produce JSON data for specified item; For object conversion TBufferJSON is used. Bool_t ProduceXml(const char* path, const char* options, TString& res); produce XML data for specified item; For object conversion TBufferXML is used. TString DecodeUrlOptionValue(const char* value, Bool_t remove_quotes = kTRUE); method replaces all kind of special symbols, which could appear in URL options. Bool_t ProduceExe(const char* path, const char* options, TString& res, Bool_t astxt = kFALSE); execute co",MatchSource.WIKI,root/html602/TRootSniffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSniffer.html
https://root.cern/root/html602/TRootSniffer.html:2610,Security,Hash,Hash,2610,"Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual void*FindInHierarchy(const char* path, TClass** cl = 0, TDataMember** member = 0, Int_t* chld = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TObject*FindTObjectInHierarchy(const char* path); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; ULong_tGetItemHash(const char* itemname); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ULong_tGetStreamerInfoHash(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static Bool_tIsDrawableClass(TClass* cl); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsReadOnly() const; virtual Bool_tTNamed::IsSortable() const; Bool_tIsStreamerInfoItem(const char* itemname); Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](vo",MatchSource.WIKI,root/html602/TRootSniffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSniffer.html
https://root.cern/root/html602/TRootSniffer.html:10299,Security,hash,hash,10299,"ROOT directory; and list of canvases and files; Also all registered objects are included.; One could reimplement this method to provide alternative; scan methods or to extend some collection kinds. Bool_t IsDrawableClass(TClass* cl); return true if object can be drawn. void ScanHierarchy(const char* topname, const char* path, TRootSnifferStore* store); scan ROOT hierarchy with provided store object. void * FindInHierarchy(const char* path, TClass** cl = 0, TDataMember** member = 0, Int_t* chld = 0); Search element with specified path; Returns pointer on element; Optionally one could obtain element class, member description; and number of childs. When chld!=0, not only element is searched,; but also number of childs are counted. When member!=0, any object; will be scanned for its data members (disregard of extra options). TObject * FindTObjectInHierarchy(const char* path); Search element in hierarchy, derived from TObject. ULong_t GetStreamerInfoHash(); Returns hash value for streamer infos; At the moment - just number of items in streamer infos list. ULong_t GetItemHash(const char* itemname); Get hash function for specified item; used to detect any changes in the specified object. Bool_t CanDrawItem(const char* path); Method verifies if object can be drawn. Bool_t CanExploreItem(const char* path); Method returns true when object has childs or; one could try to expand item. void CreateMemFile(); Creates TMemFile instance, which used for objects streaming; One could not use TBufferFile directly,; while one also require streamer infos list. Bool_t ProduceJson(const char* path, const char* options, TString& res); produce JSON data for specified item; For object conversion TBufferJSON is used. Bool_t ProduceXml(const char* path, const char* options, TString& res); produce XML data for specified item; For object conversion TBufferXML is used. TString DecodeUrlOptionValue(const char* value, Bool_t remove_quotes = kTRUE); method replaces all kind of special symbols, which co",MatchSource.WIKI,root/html602/TRootSniffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSniffer.html
https://root.cern/root/html602/TRootSniffer.html:10438,Security,hash,hash,10438,"ide alternative; scan methods or to extend some collection kinds. Bool_t IsDrawableClass(TClass* cl); return true if object can be drawn. void ScanHierarchy(const char* topname, const char* path, TRootSnifferStore* store); scan ROOT hierarchy with provided store object. void * FindInHierarchy(const char* path, TClass** cl = 0, TDataMember** member = 0, Int_t* chld = 0); Search element with specified path; Returns pointer on element; Optionally one could obtain element class, member description; and number of childs. When chld!=0, not only element is searched,; but also number of childs are counted. When member!=0, any object; will be scanned for its data members (disregard of extra options). TObject * FindTObjectInHierarchy(const char* path); Search element in hierarchy, derived from TObject. ULong_t GetStreamerInfoHash(); Returns hash value for streamer infos; At the moment - just number of items in streamer infos list. ULong_t GetItemHash(const char* itemname); Get hash function for specified item; used to detect any changes in the specified object. Bool_t CanDrawItem(const char* path); Method verifies if object can be drawn. Bool_t CanExploreItem(const char* path); Method returns true when object has childs or; one could try to expand item. void CreateMemFile(); Creates TMemFile instance, which used for objects streaming; One could not use TBufferFile directly,; while one also require streamer infos list. Bool_t ProduceJson(const char* path, const char* options, TString& res); produce JSON data for specified item; For object conversion TBufferJSON is used. Bool_t ProduceXml(const char* path, const char* options, TString& res); produce XML data for specified item; For object conversion TBufferXML is used. TString DecodeUrlOptionValue(const char* value, Bool_t remove_quotes = kTRUE); method replaces all kind of special symbols, which could appear in URL options. Bool_t ProduceExe(const char* path, const char* options, TString& res, Bool_t astxt = kFALSE); execute co",MatchSource.WIKI,root/html602/TRootSniffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSniffer.html
https://root.cern/root/html602/TRootSniffer.html:5767,Testability,Test,TestBit,5767,"char* options, TString& res, Bool_t astxt = kFALSE); Bool_tProduceImage(Int_t kind, const char* path, const char* options, void*& ptr, Long_t& length); Bool_tProduceJson(const char* path, const char* options, TString& res); Bool_tProduceXml(const char* path, const char* options, TString& res); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRegisterObject(const char* subfolder, TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidScanHierarchy(const char* topname, const char* path, TRootSnifferStore* store); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetReadOnly(Bool_t on = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRootSniffer(const TRootSniffer&); TRootSniffer(const char* name, const char* objpath = ""online""); Bool_tUnregisterObject(TObject* obj); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootSniffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSniffer.html
https://root.cern/root/html602/TRootSniffer.html:5806,Testability,Test,TestBits,5806,"char* options, TString& res, Bool_t astxt = kFALSE); Bool_tProduceImage(Int_t kind, const char* path, const char* options, void*& ptr, Long_t& length); Bool_tProduceJson(const char* path, const char* options, TString& res); Bool_tProduceXml(const char* path, const char* options, TString& res); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRegisterObject(const char* subfolder, TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidScanHierarchy(const char* topname, const char* path, TRootSnifferStore* store); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetReadOnly(Bool_t on = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRootSniffer(const TRootSniffer&); TRootSniffer(const char* name, const char* objpath = ""online""); Bool_tUnregisterObject(TObject* obj); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootSniffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSniffer.html
https://root.cern/root/html602/TRootSniffer.html:810,Usability,Clear,Clear,810," virtual~TRootSniffer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Bool_tCanDrawItem(const char* path); Bool_tCanExploreItem(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual void*FindInHierarchy(const char* path, TClass** cl = 0, TDataMember** member = 0, Int_t* chld = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TO",MatchSource.WIKI,root/html602/TRootSniffer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSniffer.html
https://root.cern/root/html602/TRootSnifferScanRec.html:125,Modifiability,inherit,inheritance,125,". TRootSnifferScanRec. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » HTTP; » TRootSnifferScanRec. class TRootSnifferScanRec. TRootSnifferScanRec. Structure used to scan hierarchies of ROOT objects; Represents single level of hierarchy. Function Members (Methods); public:. virtual~TRootSnifferScanRec(); voidBeforeNextChild(); Bool_tCanExpandItem(); Bool_tCanSetFields(); static TClass*Class(); voidCloseNode(); voidCreateNode(const char* _node_name); Int_tDepth() const; Bool_tDone() const; Int_tExtraFolderLevel(); Bool_tGoInside(TRootSnifferScanRec& super, TObject* obj, const char* obj_name = 0); virtual TClass*IsA() const; Bool_tIsReadyForResult() const; voidMakeItemName(const char* objname, TString& itemname); TRootSnifferScanRec&operator=(const TRootSnifferScanRec&); voidSetField(const char* name, const char* value, Bool_t with_quotes = kTRUE); Bool_tSetResult(void* obj, TClass* cl, TDataMember* member = 0, Int_t chlds = -1); voidSetRootClass(TClass* cl); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRootSnifferScanRec(); TRootSnifferScanRec(const TRootSnifferScanRec&). Data Members; public:. TListfItemsNames! list of created items names, need to avoid duplication; Bool_thas_more! indicates that potentially there are more items can be found; Int_tlvl! current level of hierarchy; UInt_tmask! defines operation kind; Int_tnum_childs! number of childs; Int_tnum_fields! number of fields; TRootSnifferScanRec*parent! pointer on parent record; const char*searchpath! current path searched; TStringstarted_node! name of node stared; TRootSnifferStore*store! object to store results. Class Charts. Inheritance Chart:. TRootSnifferScanRec. Function documentation; TRootSnifferScanRec();",MatchSource.WIKI,root/html602/TRootSnifferScanRec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferScanRec.html
https://root.cern/root/html602/TRootSnifferScanRec.html:1914,Modifiability,Inherit,Inheritance,1914,"tSnifferScanRec&operator=(const TRootSnifferScanRec&); voidSetField(const char* name, const char* value, Bool_t with_quotes = kTRUE); Bool_tSetResult(void* obj, TClass* cl, TDataMember* member = 0, Int_t chlds = -1); voidSetRootClass(TClass* cl); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRootSnifferScanRec(); TRootSnifferScanRec(const TRootSnifferScanRec&). Data Members; public:. TListfItemsNames! list of created items names, need to avoid duplication; Bool_thas_more! indicates that potentially there are more items can be found; Int_tlvl! current level of hierarchy; UInt_tmask! defines operation kind; Int_tnum_childs! number of childs; Int_tnum_fields! number of fields; TRootSnifferScanRec*parent! pointer on parent record; const char*searchpath! current path searched; TStringstarted_node! name of node stared; TRootSnifferStore*store! object to store results. Class Charts. Inheritance Chart:. TRootSnifferScanRec. Function documentation; TRootSnifferScanRec(); constructor. ~TRootSnifferScanRec(); destructor. void SetField(const char* name, const char* value, Bool_t with_quotes = kTRUE); record field for current element. void BeforeNextChild(); indicates that new child for current element will be started. void MakeItemName(const char* objname, TString& itemname); constructs item name from object name; if special symbols like '/', '#', ':', '&', '?' are used in object name; they will be replaced with '_'.; To avoid item name duplication, additional id number can be appended. void CreateNode(const char* _node_name); creates new node with specified name; if special symbols like ""[]&<>"" are used, node name; will be replaced by default name like ""extra_item_N"" and; original node name will be recorded as ""_original_name"" field; Optionally, object name can be recorded as ""_realname"" field. void CloseNode(); close started node. void SetRootClass(TClass* cl); set root class",MatchSource.WIKI,root/html602/TRootSnifferScanRec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferScanRec.html
https://root.cern/root/html602/TRootSnifferScanRec.html:1467,Safety,avoid,avoid,1467,"_tDepth() const; Bool_tDone() const; Int_tExtraFolderLevel(); Bool_tGoInside(TRootSnifferScanRec& super, TObject* obj, const char* obj_name = 0); virtual TClass*IsA() const; Bool_tIsReadyForResult() const; voidMakeItemName(const char* objname, TString& itemname); TRootSnifferScanRec&operator=(const TRootSnifferScanRec&); voidSetField(const char* name, const char* value, Bool_t with_quotes = kTRUE); Bool_tSetResult(void* obj, TClass* cl, TDataMember* member = 0, Int_t chlds = -1); voidSetRootClass(TClass* cl); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TRootSnifferScanRec(); TRootSnifferScanRec(const TRootSnifferScanRec&). Data Members; public:. TListfItemsNames! list of created items names, need to avoid duplication; Bool_thas_more! indicates that potentially there are more items can be found; Int_tlvl! current level of hierarchy; UInt_tmask! defines operation kind; Int_tnum_childs! number of childs; Int_tnum_fields! number of fields; TRootSnifferScanRec*parent! pointer on parent record; const char*searchpath! current path searched; TStringstarted_node! name of node stared; TRootSnifferStore*store! object to store results. Class Charts. Inheritance Chart:. TRootSnifferScanRec. Function documentation; TRootSnifferScanRec(); constructor. ~TRootSnifferScanRec(); destructor. void SetField(const char* name, const char* value, Bool_t with_quotes = kTRUE); record field for current element. void BeforeNextChild(); indicates that new child for current element will be started. void MakeItemName(const char* objname, TString& itemname); constructs item name from object name; if special symbols like '/', '#', ':', '&', '?' are used in object name; they will be replaced with '_'.; To avoid item name duplication, additional id number can be appended. void CreateNode(const char* _node_name); creates new node with specified name; if special symbols like ""[]&<>"" are used, node name",MatchSource.WIKI,root/html602/TRootSnifferScanRec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferScanRec.html
https://root.cern/root/html602/TRootSnifferScanRec.html:2458,Safety,avoid,avoid,2458,"ol_thas_more! indicates that potentially there are more items can be found; Int_tlvl! current level of hierarchy; UInt_tmask! defines operation kind; Int_tnum_childs! number of childs; Int_tnum_fields! number of fields; TRootSnifferScanRec*parent! pointer on parent record; const char*searchpath! current path searched; TStringstarted_node! name of node stared; TRootSnifferStore*store! object to store results. Class Charts. Inheritance Chart:. TRootSnifferScanRec. Function documentation; TRootSnifferScanRec(); constructor. ~TRootSnifferScanRec(); destructor. void SetField(const char* name, const char* value, Bool_t with_quotes = kTRUE); record field for current element. void BeforeNextChild(); indicates that new child for current element will be started. void MakeItemName(const char* objname, TString& itemname); constructs item name from object name; if special symbols like '/', '#', ':', '&', '?' are used in object name; they will be replaced with '_'.; To avoid item name duplication, additional id number can be appended. void CreateNode(const char* _node_name); creates new node with specified name; if special symbols like ""[]&<>"" are used, node name; will be replaced by default name like ""extra_item_N"" and; original node name will be recorded as ""_original_name"" field; Optionally, object name can be recorded as ""_realname"" field. void CloseNode(); close started node. void SetRootClass(TClass* cl); set root class name as node kind; in addition, path to master item (streamer info) specified; Such master item required to correctly unstream data on JavaScript. Bool_t Done() const; returns true if scanning is done; Can happen when searched element is found. Bool_t IsReadyForResult() const; Checks if result will be accepted.; Used to verify if sniffer should read object from the file. Bool_t SetResult(void* obj, TClass* cl, TDataMember* member = 0, Int_t chlds = -1); set results of scanning. Int_t Depth() const; returns current depth of scanned hierarchy. Int_t ExtraFolder",MatchSource.WIKI,root/html602/TRootSnifferScanRec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferScanRec.html
https://root.cern/root/html602/TRootSnifferScanRec.html:3610,Security,access,access,3610,"e; they will be replaced with '_'.; To avoid item name duplication, additional id number can be appended. void CreateNode(const char* _node_name); creates new node with specified name; if special symbols like ""[]&<>"" are used, node name; will be replaced by default name like ""extra_item_N"" and; original node name will be recorded as ""_original_name"" field; Optionally, object name can be recorded as ""_realname"" field. void CloseNode(); close started node. void SetRootClass(TClass* cl); set root class name as node kind; in addition, path to master item (streamer info) specified; Such master item required to correctly unstream data on JavaScript. Bool_t Done() const; returns true if scanning is done; Can happen when searched element is found. Bool_t IsReadyForResult() const; Checks if result will be accepted.; Used to verify if sniffer should read object from the file. Bool_t SetResult(void* obj, TClass* cl, TDataMember* member = 0, Int_t chlds = -1); set results of scanning. Int_t Depth() const; returns current depth of scanned hierarchy. Int_t ExtraFolderLevel(); return level depth till folder, marked with extra flag; Objects in such folder can be 'expanded' -; one can get access to all class members; If no extra folder found, -1 is returned. Bool_t CanExpandItem(); returns true if current item can be expanded - means one could explore; objects members. Bool_t GoInside(TRootSnifferScanRec& super, TObject* obj, const char* obj_name = 0); Method verifies if new level of hierarchy; should be started with provided object.; If required, all necessary nodes and fields will be created; Used when different collection kinds should be scanned. TRootSnifferScanRec(). Bool_t CanSetFields(); return true when fields could be set to the hierarchy item . » Last changed: Tue Jun 30 15:29:44 2015 » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootSnifferScanRec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferScanRec.html
https://root.cern/root/html602/TRootSnifferStore.html:1416,Availability,Error,Error,1416," virtual~TRootSnifferStore(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeforeNextChild(Int_t, Int_t, Int_t); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseNode(Int_t, const char*, Int_t); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCreateNode(Int_t, const char*); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual ",MatchSource.WIKI,root/html602/TRootSnifferStore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStore.html
https://root.cern/root/html602/TRootSnifferStore.html:1545,Availability,error,error,1545,"ual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeforeNextChild(Int_t, Int_t, Int_t); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseNode(Int_t, const char*, Int_t); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCreateNode(Int_t, const char*); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TClass*GetResClass() const; TDataMember*GetResMember() const; Int_tGetResNumChilds() const; void*GetResPtr() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject",MatchSource.WIKI,root/html602/TRootSnifferStore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStore.html
https://root.cern/root/html602/TRootSnifferStore.html:1629,Availability,error,error,1629,", Int_t, Int_t); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseNode(Int_t, const char*, Int_t); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCreateNode(Int_t, const char*); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TClass*GetResClass() const; TDataMember*GetResMember() const; Int_tGetResNumChilds() const; void*GetResPtr() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::Inherit",MatchSource.WIKI,root/html602/TRootSnifferStore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStore.html
https://root.cern/root/html602/TRootSnifferStore.html:123,Modifiability,inherit,inheritance,123,". TRootSnifferStore. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » HTTP; » TRootSnifferStore. class TRootSnifferStore: public TObject. TRootSnifferStore. Used to store different results of objects scanning by TRootSniffer. Function Members (Methods); public:. virtual~TRootSnifferStore(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeforeNextChild(Int_t, Int_t, Int_t); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseNode(Int_t, const char*, Int_t); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCreateNode(Int_t, const char*); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual ",MatchSource.WIKI,root/html602/TRootSnifferStore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStore.html
https://root.cern/root/html602/TRootSnifferStore.html:2625,Modifiability,Inherit,InheritsFrom,2625,"ror = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TClass*GetResClass() const; TDataMember*GetResMember() const; Int_tGetResNumChilds() const; void*GetResPtr() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tIsXml() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TO",MatchSource.WIKI,root/html602/TRootSnifferStore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStore.html
https://root.cern/root/html602/TRootSnifferStore.html:2691,Modifiability,Inherit,InheritsFrom,2691," Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TClass*GetResClass() const; TDataMember*GetResMember() const; Int_tGetResNumChilds() const; void*GetResPtr() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tIsXml() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootSnifferStore&oper",MatchSource.WIKI,root/html602/TRootSnifferStore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStore.html
https://root.cern/root/html602/TRootSnifferStore.html:6360,Modifiability,Inherit,Inheritance,6360,"const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TClass*fResClass! class of found item; TDataMember*fResMember! datamember pointer of found item; Int_tfResNumChilds! count of found childs, -1 by default; void*fResPtr! pointer on found item. Class Charts. Inheritance Chart:. TObject. ←; TRootSnifferStore. ←. TRootSnifferStoreJson. TRootSnifferStoreXml. Function documentation; TRootSnifferStore(); normal constructor. ~TRootSnifferStore(); destructor. void SetResult(void* _res, TClass* _rescl, TDataMember* _resmemb, Int_t _res_chld); set pointer on found element, class and number of childs. TRootSnifferStore(). void CreateNode(Int_t , const char* ); {}. void SetField(Int_t , const char* , const char* , Bool_t ); {}. void BeforeNextChild(Int_t , Int_t , Int_t ); {}. void CloseNode(Int_t , const char* , Int_t ); {}. void * GetResPtr() const. TClass * GetResClass() const. TDataMember * GetResMember() const. Int_t GetResNumChilds() const. Bool_t IsXml() const; { return kFALSE; }. » Last changed: Tue Jun 30 15:29:44 2015 » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootSnifferStore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStore.html
https://root.cern/root/html602/TRootSnifferStore.html:2515,Security,Hash,Hash,2515," const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TClass*GetResClass() const; TDataMember*GetResMember() const; Int_tGetResNumChilds() const; void*GetResPtr() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tIsXml() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator",MatchSource.WIKI,root/html602/TRootSnifferStore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStore.html
https://root.cern/root/html602/TRootSnifferStore.html:4822,Testability,Test,TestBit,4822," const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootSnifferStore&operator=(const TRootSnifferStore&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetField(Int_t, const char*, const char*, Bool_t); static voidTObject::SetObjectStat(Bool_t stat); voidSetResult(void* _res, TClass* _rescl, TDataMember* _resmemb, Int_t _res_chld); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRootSnifferStore(); TRootSnifferStore(const TRootSnifferStore&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootSnifferStore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStore.html
https://root.cern/root/html602/TRootSnifferStore.html:4861,Testability,Test,TestBits,4861," const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootSnifferStore&operator=(const TRootSnifferStore&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetField(Int_t, const char*, const char*, Bool_t); static voidTObject::SetObjectStat(Bool_t stat); voidSetResult(void* _res, TClass* _rescl, TDataMember* _resmemb, Int_t _res_chld); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRootSnifferStore(); TRootSnifferStore(const TRootSnifferStore&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootSnifferStore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStore.html
https://root.cern/root/html602/TRootSnifferStore.html:782,Usability,Clear,Clear,782," virtual~TRootSnifferStore(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeforeNextChild(Int_t, Int_t, Int_t); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseNode(Int_t, const char*, Int_t); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCreateNode(Int_t, const char*); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual ",MatchSource.WIKI,root/html602/TRootSnifferStore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStore.html
https://root.cern/root/html602/TRootSnifferStoreJson.html:1493,Availability,Error,Error,1493,"nifferStoreJson(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeforeNextChild(Int_t lvl, Int_t nchld, Int_t nfld); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseNode(Int_t lvl, const char* nodename, Int_t numchilds); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCreateNode(Int_t lvl, const char* nodename); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TClass*TRootSnifferStore::GetResClass() const; TDataMember*TRootSnifferStore::GetResMember() const; Int_tTRootSnifferStore::GetResNumChilds() const; void*TRootSnifferStore::GetResPtr() ",MatchSource.WIKI,root/html602/TRootSnifferStoreJson.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreJson.html
https://root.cern/root/html602/TRootSnifferStoreJson.html:1622,Availability,error,error,1622,"virtual voidBeforeNextChild(Int_t lvl, Int_t nchld, Int_t nfld); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseNode(Int_t lvl, const char* nodename, Int_t numchilds); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCreateNode(Int_t lvl, const char* nodename); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TClass*TRootSnifferStore::GetResClass() const; TDataMember*TRootSnifferStore::GetResMember() const; Int_tTRootSnifferStore::GetResNumChilds() const; void*TRootSnifferStore::GetResPtr() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTim",MatchSource.WIKI,root/html602/TRootSnifferStoreJson.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreJson.html
https://root.cern/root/html602/TRootSnifferStoreJson.html:1706,Availability,error,error,1706,"::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseNode(Int_t lvl, const char* nodename, Int_t numchilds); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCreateNode(Int_t lvl, const char* nodename); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TClass*TRootSnifferStore::GetResClass() const; TDataMember*TRootSnifferStore::GetResMember() const; Int_tTRootSnifferStore::GetResNumChilds() const; void*TRootSnifferStore::GetResPtr() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(c",MatchSource.WIKI,root/html602/TRootSnifferStoreJson.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreJson.html
https://root.cern/root/html602/TRootSnifferStoreJson.html:7310,Integrability,depend,depending,7310,"us)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TString*buf! output buffer; Bool_tcompact! produce compact json code; TClass*TRootSnifferStore::fResClass! class of found item; TDataMember*TRootSnifferStore::fResMember! datamember pointer of found item; Int_tTRootSnifferStore::fResNumChilds! count of found childs, -1 by default; void*TRootSnifferStore::fResPtr! pointer on found item. Class Charts. Inheritance Chart:. TObject. ←; TRootSnifferStore. ←; TRootSnifferStoreJson. Function documentation; void CreateNode(Int_t lvl, const char* nodename); starts new json object, will be closed by CloseNode. void SetField(Int_t lvl, const char* field, const char* value, Bool_t with_quotes); set field (json field) in current node. void BeforeNextChild(Int_t lvl, Int_t nchld, Int_t nfld); called before next child node created. void CloseNode(Int_t lvl, const char* nodename, Int_t numchilds); called when node should be closed; depending from number of childs different xml format is applied. TRootSnifferStoreJson(TString& _buf, Bool_t _compact = kFALSE); {}. virtual ~TRootSnifferStoreJson(); {}. » Last changed: Tue Jun 30 15:29:44 2015 » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootSnifferStoreJson.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreJson.html
https://root.cern/root/html602/TRootSnifferStoreJson.html:127,Modifiability,inherit,inheritance,127,". TRootSnifferStoreJson. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » HTTP; » TRootSnifferStoreJson. class TRootSnifferStoreJson: public TRootSnifferStore. TRootSnifferStore. Used to store different results of objects scanning by TRootSniffer. Function Members (Methods); public:. virtual~TRootSnifferStoreJson(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeforeNextChild(Int_t lvl, Int_t nchld, Int_t nfld); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseNode(Int_t lvl, const char* nodename, Int_t numchilds); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCreateNode(Int_t lvl, const char* nodename); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*",MatchSource.WIKI,root/html602/TRootSnifferStoreJson.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreJson.html
https://root.cern/root/html602/TRootSnifferStoreJson.html:2778,Modifiability,Inherit,InheritsFrom,2778,"; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TClass*TRootSnifferStore::GetResClass() const; TDataMember*TRootSnifferStore::GetResMember() const; Int_tTRootSnifferStore::GetResNumChilds() const; void*TRootSnifferStore::GetResPtr() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTRootSnifferStore::IsXml() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](",MatchSource.WIKI,root/html602/TRootSnifferStoreJson.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreJson.html
https://root.cern/root/html602/TRootSnifferStoreJson.html:2844,Modifiability,Inherit,InheritsFrom,2844,"t) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TClass*TRootSnifferStore::GetResClass() const; TDataMember*TRootSnifferStore::GetResMember() const; Int_tTRootSnifferStore::GetResNumChilds() const; void*TRootSnifferStore::GetResPtr() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTRootSnifferStore::IsXml() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRo",MatchSource.WIKI,root/html602/TRootSnifferStoreJson.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreJson.html
https://root.cern/root/html602/TRootSnifferStoreJson.html:6784,Modifiability,Inherit,Inheritance,6784,"us)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TString*buf! output buffer; Bool_tcompact! produce compact json code; TClass*TRootSnifferStore::fResClass! class of found item; TDataMember*TRootSnifferStore::fResMember! datamember pointer of found item; Int_tTRootSnifferStore::fResNumChilds! count of found childs, -1 by default; void*TRootSnifferStore::fResPtr! pointer on found item. Class Charts. Inheritance Chart:. TObject. ←; TRootSnifferStore. ←; TRootSnifferStoreJson. Function documentation; void CreateNode(Int_t lvl, const char* nodename); starts new json object, will be closed by CloseNode. void SetField(Int_t lvl, const char* field, const char* value, Bool_t with_quotes); set field (json field) in current node. void BeforeNextChild(Int_t lvl, Int_t nchld, Int_t nfld); called before next child node created. void CloseNode(Int_t lvl, const char* nodename, Int_t numchilds); called when node should be closed; depending from number of childs different xml format is applied. TRootSnifferStoreJson(TString& _buf, Bool_t _compact = kFALSE); {}. virtual ~TRootSnifferStoreJson(); {}. » Last changed: Tue Jun 30 15:29:44 2015 » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootSnifferStoreJson.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreJson.html
https://root.cern/root/html602/TRootSnifferStoreJson.html:2668,Security,Hash,Hash,2668,"* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TClass*TRootSnifferStore::GetResClass() const; TDataMember*TRootSnifferStore::GetResMember() const; Int_tTRootSnifferStore::GetResNumChilds() const; void*TRootSnifferStore::GetResPtr() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTRootSnifferStore::IsXml() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); voi",MatchSource.WIKI,root/html602/TRootSnifferStoreJson.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreJson.html
https://root.cern/root/html602/TRootSnifferStoreJson.html:5049,Testability,Test,TestBit,5049,"bject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootSnifferStoreJson&operator=(const TRootSnifferStoreJson&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetField(Int_t lvl, const char* field, const char* value, Bool_t with_quotes); static voidTObject::SetObjectStat(Bool_t stat); voidTRootSnifferStore::SetResult(void* _res, TClass* _rescl, TDataMember* _resmemb, Int_t _res_chld); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRootSnifferStoreJson(const TRootSnifferStoreJson&); TRootSnifferStoreJson(TString& _buf, Bool_t _compact = kFALSE); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootSnifferStoreJson.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreJson.html
https://root.cern/root/html602/TRootSnifferStoreJson.html:5088,Testability,Test,TestBits,5088,"bject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootSnifferStoreJson&operator=(const TRootSnifferStoreJson&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetField(Int_t lvl, const char* field, const char* value, Bool_t with_quotes); static voidTObject::SetObjectStat(Bool_t stat); voidTRootSnifferStore::SetResult(void* _res, TClass* _rescl, TDataMember* _resmemb, Int_t _res_chld); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRootSnifferStoreJson(const TRootSnifferStoreJson&); TRootSnifferStoreJson(TString& _buf, Bool_t _compact = kFALSE); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootSnifferStoreJson.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreJson.html
https://root.cern/root/html602/TRootSnifferStoreJson.html:823,Usability,Clear,Clear,823," virtual~TRootSnifferStoreJson(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeforeNextChild(Int_t lvl, Int_t nchld, Int_t nfld); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseNode(Int_t lvl, const char* nodename, Int_t numchilds); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCreateNode(Int_t lvl, const char* nodename); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*",MatchSource.WIKI,root/html602/TRootSnifferStoreJson.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreJson.html
https://root.cern/root/html602/TRootSnifferStoreXml.html:1484,Availability,Error,Error,1484,"TRootSnifferStoreXml(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeforeNextChild(Int_t lvl, Int_t nchld, Int_t); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseNode(Int_t lvl, const char* nodename, Int_t numchilds); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCreateNode(Int_t lvl, const char* nodename); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TClass*TRootSnifferStore::GetResClass() const; TDataMember*TRootSnifferStore::GetResMember() const; Int_tTRootSnifferStore::GetResNumChilds() const; void*TRootSnifferStore::GetResPtr() ",MatchSource.WIKI,root/html602/TRootSnifferStoreXml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreXml.html
https://root.cern/root/html602/TRootSnifferStoreXml.html:1613,Availability,error,error,1613,"""""); virtual voidBeforeNextChild(Int_t lvl, Int_t nchld, Int_t); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseNode(Int_t lvl, const char* nodename, Int_t numchilds); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCreateNode(Int_t lvl, const char* nodename); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TClass*TRootSnifferStore::GetResClass() const; TDataMember*TRootSnifferStore::GetResMember() const; Int_tTRootSnifferStore::GetResNumChilds() const; void*TRootSnifferStore::GetResPtr() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTim",MatchSource.WIKI,root/html602/TRootSnifferStoreXml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreXml.html
https://root.cern/root/html602/TRootSnifferStoreXml.html:1697,Availability,error,error,1697,"::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseNode(Int_t lvl, const char* nodename, Int_t numchilds); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCreateNode(Int_t lvl, const char* nodename); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TClass*TRootSnifferStore::GetResClass() const; TDataMember*TRootSnifferStore::GetResMember() const; Int_tTRootSnifferStore::GetResNumChilds() const; void*TRootSnifferStore::GetResPtr() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(c",MatchSource.WIKI,root/html602/TRootSnifferStoreXml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreXml.html
https://root.cern/root/html602/TRootSnifferStoreXml.html:7248,Integrability,depend,depending,7248,"tatic TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TString*buf! output buffer; Bool_tcompact! produce compact xml code; TClass*TRootSnifferStore::fResClass! class of found item; TDataMember*TRootSnifferStore::fResMember! datamember pointer of found item; Int_tTRootSnifferStore::fResNumChilds! count of found childs, -1 by default; void*TRootSnifferStore::fResPtr! pointer on found item. Class Charts. Inheritance Chart:. TObject. ←; TRootSnifferStore. ←; TRootSnifferStoreXml. Function documentation; void CreateNode(Int_t lvl, const char* nodename); starts new xml node, will be closed by CloseNode. void SetField(Int_t lvl, const char* field, const char* value, Bool_t ); set field (xml attribute) in current node. void BeforeNextChild(Int_t lvl, Int_t nchld, Int_t ); called before next child node created. void CloseNode(Int_t lvl, const char* nodename, Int_t numchilds); called when node should be closed; depending from number of childs different xml format is applied. Bool_t IsXml() const; { return kFALSE; }. TRootSnifferStoreXml(TString& _buf, Bool_t _compact = kFALSE); {}. virtual ~TRootSnifferStoreXml(); {}. » Last changed: Tue Jun 30 15:29:44 2015 » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootSnifferStoreXml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreXml.html
https://root.cern/root/html602/TRootSnifferStoreXml.html:126,Modifiability,inherit,inheritance,126,". TRootSnifferStoreXml. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » HTTP; » TRootSnifferStoreXml. class TRootSnifferStoreXml: public TRootSnifferStore. TRootSnifferStore. Used to store different results of objects scanning by TRootSniffer. Function Members (Methods); public:. virtual~TRootSnifferStoreXml(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeforeNextChild(Int_t lvl, Int_t nchld, Int_t); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseNode(Int_t lvl, const char* nodename, Int_t numchilds); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCreateNode(Int_t lvl, const char* nodename); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::",MatchSource.WIKI,root/html602/TRootSnifferStoreXml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreXml.html
https://root.cern/root/html602/TRootSnifferStoreXml.html:2769,Modifiability,Inherit,InheritsFrom,2769,"; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TClass*TRootSnifferStore::GetResClass() const; TDataMember*TRootSnifferStore::GetResMember() const; Int_tTRootSnifferStore::GetResNumChilds() const; void*TRootSnifferStore::GetResPtr() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tIsXml() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TO",MatchSource.WIKI,root/html602/TRootSnifferStoreXml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreXml.html
https://root.cern/root/html602/TRootSnifferStoreXml.html:2835,Modifiability,Inherit,InheritsFrom,2835,"t) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TClass*TRootSnifferStore::GetResClass() const; TDataMember*TRootSnifferStore::GetResMember() const; Int_tTRootSnifferStore::GetResNumChilds() const; void*TRootSnifferStore::GetResPtr() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tIsXml() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootSnifferStoreXml&o",MatchSource.WIKI,root/html602/TRootSnifferStoreXml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreXml.html
https://root.cern/root/html602/TRootSnifferStoreXml.html:6738,Modifiability,Inherit,Inheritance,6738,"tatic TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TString*buf! output buffer; Bool_tcompact! produce compact xml code; TClass*TRootSnifferStore::fResClass! class of found item; TDataMember*TRootSnifferStore::fResMember! datamember pointer of found item; Int_tTRootSnifferStore::fResNumChilds! count of found childs, -1 by default; void*TRootSnifferStore::fResPtr! pointer on found item. Class Charts. Inheritance Chart:. TObject. ←; TRootSnifferStore. ←; TRootSnifferStoreXml. Function documentation; void CreateNode(Int_t lvl, const char* nodename); starts new xml node, will be closed by CloseNode. void SetField(Int_t lvl, const char* field, const char* value, Bool_t ); set field (xml attribute) in current node. void BeforeNextChild(Int_t lvl, Int_t nchld, Int_t ); called before next child node created. void CloseNode(Int_t lvl, const char* nodename, Int_t numchilds); called when node should be closed; depending from number of childs different xml format is applied. Bool_t IsXml() const; { return kFALSE; }. TRootSnifferStoreXml(TString& _buf, Bool_t _compact = kFALSE); {}. virtual ~TRootSnifferStoreXml(); {}. » Last changed: Tue Jun 30 15:29:44 2015 » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRootSnifferStoreXml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreXml.html
https://root.cern/root/html602/TRootSnifferStoreXml.html:2659,Security,Hash,Hash,2659,"* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TClass*TRootSnifferStore::GetResClass() const; TDataMember*TRootSnifferStore::GetResMember() const; Int_tTRootSnifferStore::GetResNumChilds() const; void*TRootSnifferStore::GetResPtr() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tIsXml() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator",MatchSource.WIKI,root/html602/TRootSnifferStoreXml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreXml.html
https://root.cern/root/html602/TRootSnifferStoreXml.html:5007,Testability,Test,TestBit,5007,"oid* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootSnifferStoreXml&operator=(const TRootSnifferStoreXml&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetField(Int_t lvl, const char* field, const char* value, Bool_t); static voidTObject::SetObjectStat(Bool_t stat); voidTRootSnifferStore::SetResult(void* _res, TClass* _rescl, TDataMember* _resmemb, Int_t _res_chld); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRootSnifferStoreXml(const TRootSnifferStoreXml&); TRootSnifferStoreXml(TString& _buf, Bool_t _compact = kFALSE); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootSnifferStoreXml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreXml.html
https://root.cern/root/html602/TRootSnifferStoreXml.html:5046,Testability,Test,TestBits,5046,"oid* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootSnifferStoreXml&operator=(const TRootSnifferStoreXml&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetField(Int_t lvl, const char* field, const char* value, Bool_t); static voidTObject::SetObjectStat(Bool_t stat); voidTRootSnifferStore::SetResult(void* _res, TClass* _rescl, TDataMember* _resmemb, Int_t _res_chld); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRootSnifferStoreXml(const TRootSnifferStoreXml&); TRootSnifferStoreXml(TString& _buf, Bool_t _compact = kFALSE); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRootSnifferStoreXml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreXml.html
https://root.cern/root/html602/TRootSnifferStoreXml.html:814,Usability,Clear,Clear,814," virtual~TRootSnifferStoreXml(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeforeNextChild(Int_t lvl, Int_t nchld, Int_t); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseNode(Int_t lvl, const char* nodename, Int_t numchilds); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCreateNode(Int_t lvl, const char* nodename); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::",MatchSource.WIKI,root/html602/TRootSnifferStoreXml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRootSnifferStoreXml.html
https://root.cern/root/html602/TRotation.html:4203,Availability,recover,recover,4203,"; angles of the rotated axes:;   Double_t tx,ty,tz,px,py,pz;;   tx= a.ThetaX();;   ...;   pz= a.PhiZ();. Setting The Rotations; The member function SetToIdentity() will set the rotation object; to the identity (no rotation).; With a minor caveat, the Euler angles of the rotation may be set using; SetXEulerAngles() or individually set with SetXPhi(),; SetXTheta(), and SetXPsi(). These routines set the Euler; angles using the X-convention which is defined by a rotation about the Z-axis,; about the new X-axis, and about the new Z-axis. This is the convention used; in Landau and Lifshitz, Goldstein and other common physics texts. The; Y-convention euler angles can be set with SetYEulerAngles(),; SetYPhi(), SetYTheta(), and SetYPsi(). The caveat; is that Euler angles usually define the rotation of the new coordinate system; with respect to the original system, however, the TRotation class specifies; the rotation of the object in the original system (an active rotation). To; recover the usual Euler rotations (ie. rotate the system not the object), you; must take the inverse of the rotation.; The member functions SetXAxis(), SetYAxis(), and; SetZAxis() will create a rotation which rotates the requested axis; of the object to be parallel to a vector. If used with one argument, the; rotation about that axis is arbitrary. If used with two arguments, the; second variable defines the XY, YZ, or ZX; respectively. Inverse rotation;   TRotation a,b;;   ...;   b = a.Inverse();  // b is inverse of a, a is unchanged;   b = a.Invert();   // invert a and set b = a. Compound Rotations; The operator * has been implemented in a way that follows the; mathematical notation of a product of the two matrices which describe the; two consecutive rotations. Therefore the second rotation should be placed; first:;   r = r2 * r1;. Rotation of TVector3; The TRotation class provides an operator * which allows to express; a rotation of a TVector3 analog to the mathematical notation;   | x' |   | xx xy x",MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:6398,Availability,Error,Error,6398,,MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:6527,Availability,error,error,6527,,MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:6611,Availability,error,error,6611,"thod) const; voidAngleAxis(Double_t&, TVector3&) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetXPhi() const; Double_tGetXPsi() const; Double_tGetXTheta() const; Double_tGetYPhi() const; Double_tGetYPsi() const; Double_tGetYTheta() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt)",MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:14504,Energy Efficiency,efficient,efficient,14504," of quaternion is null, creates identity rotation; if quaternion is non-unit, creates rotation corresponding to the normalized (unit) quaternion. TRotation & Rotate(Double_t , const TVector3& ); rotate along an axis. TRotation & RotateX(Double_t ); rotate around x. TRotation & RotateY(Double_t ); rotate around y. TRotation & RotateZ(Double_t ); rotate around z. TRotation & RotateAxes(const TVector3& newX, const TVector3& newY, const TVector3& newZ); rotate axes. Double_t PhiX() const; return Phi. Double_t PhiY() const; return Phi. Double_t PhiZ() const; return Phi. Double_t ThetaX() const; return Phi. Double_t ThetaY() const; return Theta. Double_t ThetaZ() const; return Theta. void AngleAxis(Double_t& , TVector3& ) const; rotation defined by an angle and a vector. TRotation & SetXEulerAngles(Double_t phi, Double_t theta, Double_t psi); Rotate using the x-convention (Landau and Lifshitz, Goldstein, &c) by; doing the explicit rotations. This is slightly less efficient than; directly applying the rotation, but makes the code much clearer. My; presumption is that this code is not going to be a speed bottle neck. TRotation & SetYEulerAngles(Double_t phi, Double_t theta, Double_t psi); Rotate using the y-convention. TRotation & RotateXEulerAngles(Double_t phi, Double_t theta, Double_t psi); Rotate using the x-convention. TRotation & RotateYEulerAngles(Double_t phi, Double_t theta, Double_t psi); Rotate using the y-convention. void SetXPhi(Double_t ); set XPhi. void SetXTheta(Double_t ); set XTheta. void SetXPsi(Double_t ); set XPsi. void SetYPhi(Double_t ); set YPhi. void SetYTheta(Double_t ); set YTheta. void SetYPsi(Double_t ); set YPsi. Double_t GetXPhi(void); return phi angle. Double_t GetYPhi(void); return YPhi. Double_t GetXTheta(void); return XTheta. Double_t GetYTheta(void); return YTheta. Double_t GetXPsi(void); Get psi angle. Double_t GetYPsi(void); return YPsi. TRotation & SetXAxis(const TVector3& axis, const TVector3& xyPlane); set X axis. TRotation & SetXAxis",MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:3606,Integrability,rout,routines,3606,"Math::Pi()/3,TVector3(3,4,5));; It is possible to find a unit vector and an angle, which describe the; same rotation as the current one:;   Double_t angle;;   TVector3 axis;;   r.GetAngleAxis(angle,axis);. Rotation of local axes; Member function RotateAxes() adds a rotation of local axes to; the current rotation and returns the result:;   TVector3 newX(0,1,0);;   TVector3 newY(0,0,1);;   TVector3 newZ(1,0,0);;   a.RotateAxes(newX,newY,newZ);; Member functions ThetaX(), ThetaY(), ThetaZ(),; PhiX(), PhiY(),PhiZ() return azimuth and polar; angles of the rotated axes:;   Double_t tx,ty,tz,px,py,pz;;   tx= a.ThetaX();;   ...;   pz= a.PhiZ();. Setting The Rotations; The member function SetToIdentity() will set the rotation object; to the identity (no rotation).; With a minor caveat, the Euler angles of the rotation may be set using; SetXEulerAngles() or individually set with SetXPhi(),; SetXTheta(), and SetXPsi(). These routines set the Euler; angles using the X-convention which is defined by a rotation about the Z-axis,; about the new X-axis, and about the new Z-axis. This is the convention used; in Landau and Lifshitz, Goldstein and other common physics texts. The; Y-convention euler angles can be set with SetYEulerAngles(),; SetYPhi(), SetYTheta(), and SetYPsi(). The caveat; is that Euler angles usually define the rotation of the new coordinate system; with respect to the original system, however, the TRotation class specifies; the rotation of the object in the original system (an active rotation). To; recover the usual Euler rotations (ie. rotate the system not the object), you; must take the inverse of the rotation.; The member functions SetXAxis(), SetYAxis(), and; SetZAxis() will create a rotation which rotates the requested axis; of the object to be parallel to a vector. If used with one argument, the; rotation about that axis is arbitrary. If used with two arguments, the; second variable defines the XY, YZ, or ZX; respectively. Inverse rotation;   TRotation a,b;;",MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:115,Modifiability,inherit,inheritance,115,". TRotation. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » PHYSICS; » TRotation. class TRotation: public TObject. The Physics Vector package ; -* ========================== ; -* The Physics Vector package consists of five classes: ; -* - TVector2 ; -* - TVector3 ; -* - TRotation ; -* - TLorentzVector ; -* - TLorentzRotation ; -* It is a combination of CLHEPs Vector package written by ; -* Leif Lonnblad, Andreas Nilsson and Evgueni Tcherniaev ; -* and a ROOT package written by Pasha Murat. ; -* for CLHEP see: http://wwwinfo.cern.ch/asd/lhc++/clhep/ ; *. . TRotation; The TRotation class describes a rotation of objects of the TVector3 class.; It is a 3*3 matrix of Double_t:; | xx  xy  xz |; | yx  yy  yz |; | zx  zy  zz |; It describes a so called active rotation, i.e. rotation of objects inside; a static system of coordinates. In case you want to rotate the frame and; want to know the coordinates of objects in the rotated system, you should; apply the inverse rotation to the objects. If you want to transform coordinates; from the rotated frame to the original frame you have to apply the direct; transformation.; A rotation around a specified axis means counterclockwise rotation around; the positive direction of the axis.;  . Declaration, Access, Comparisons;   TRotation r;    // r initialized as identity;   TRotation m(r); // m = r; There is no direct way to set the matrix elements - to ensure that; a TRotation object always describes a real rotation. But you can get the; values by the member functions XX()..ZZ() or the (,); operator:;   Double_t xx = r.XX();     //  the; same as xx=r(0,0);            xx; = r(0,0);;   if (r==m) {...}          // test for equality;   if (r!=m) {..}           // test for inequality;   if (r.IsIdentity()) {...} // test for identity;  . Rotatio",MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:4593,Modifiability,variab,variable,4593,"). These routines set the Euler; angles using the X-convention which is defined by a rotation about the Z-axis,; about the new X-axis, and about the new Z-axis. This is the convention used; in Landau and Lifshitz, Goldstein and other common physics texts. The; Y-convention euler angles can be set with SetYEulerAngles(),; SetYPhi(), SetYTheta(), and SetYPsi(). The caveat; is that Euler angles usually define the rotation of the new coordinate system; with respect to the original system, however, the TRotation class specifies; the rotation of the object in the original system (an active rotation). To; recover the usual Euler rotations (ie. rotate the system not the object), you; must take the inverse of the rotation.; The member functions SetXAxis(), SetYAxis(), and; SetZAxis() will create a rotation which rotates the requested axis; of the object to be parallel to a vector. If used with one argument, the; rotation about that axis is arbitrary. If used with two arguments, the; second variable defines the XY, YZ, or ZX; respectively. Inverse rotation;   TRotation a,b;;   ...;   b = a.Inverse();  // b is inverse of a, a is unchanged;   b = a.Invert();   // invert a and set b = a. Compound Rotations; The operator * has been implemented in a way that follows the; mathematical notation of a product of the two matrices which describe the; two consecutive rotations. Therefore the second rotation should be placed; first:;   r = r2 * r1;. Rotation of TVector3; The TRotation class provides an operator * which allows to express; a rotation of a TVector3 analog to the mathematical notation;   | x' |   | xx xy xz | | x |;   | y' | = | yx yy yz | | y |;   | z' |   | zx zy zz | | z |; e.g.:;   TVector3 v(1,1,1);;   v = r * v;; You can also use the Transform() member function or the operator; *= of the; TVector3 class:;   TVector3 v;;   TRotation r;;   v.Transform(r);;   v *= r;  //Attention v = r * v. Function Members (Methods); public:. virtual~TRotation(); voidTObject::AbstractMeth",MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:7645,Modifiability,Inherit,InheritsFrom,7645,"Event(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetXPhi() const; Double_tGetXPsi() const; Double_tGetXTheta() const; Double_tGetYPhi() const; Double_tGetYPsi() const; Double_tGetYTheta() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; TRotationInverse() const; TRotation&Invert(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsIdentity() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidMakeBasis(TVector3& xAxis, TVector3& yAxis, TVector3& zAxis) const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operato",MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:7711,Modifiability,Inherit,InheritsFrom,7711,"(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetXPhi() const; Double_tGetXPsi() const; Double_tGetXTheta() const; Double_tGetYPhi() const; Double_tGetYPsi() const; Double_tGetYTheta() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; TRotationInverse() const; TRotation&Invert(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsIdentity() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidMakeBasis(TVector3& xAxis, TVector3& yAxis, TVector3& zAxis) const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp);",MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:13066,Modifiability,Inherit,Inheritance,13066,"on(Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t, Double_t). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_tfxx; Double_tfxy; Double_tfxz; Double_tfyx; Double_tfyy; Double_tfyz; Double_tfzx; Double_tfzy; Double_tfzz. Class Charts. Inheritance Chart:. TObject. ←; TRotation. Function documentation; TRotation(); {}. TRotation(const TRotation& ); {}. TRotation(Double_t , Double_t , Double_t , Double_t , Double_t , Double_t , Double_t , Double_t , Double_t ); {}. Double_t operator()(int , int ) const; dereferencing operator const. TRotation operator*(const TRotation& ) const; multiplication operator. TRotation(const TQuaternion& ); Constructor for a rotation based on a Quaternion; if magnitude of quaternion is null, creates identity rotation; if quaternion is non-unit, creates rotation corresponding to the normalized (unit) quaternion. TRotation & Rotate(Double_t , const TVector3& ); rotate along an axis. TRotation & RotateX(Double_t ); rotate around x. TRotation & RotateY(Double_t ); rotate around y. TRotation & RotateZ(Double_t ); rotate around z. TRotation & RotateAxes(const TVector3& newX, const TVector3& newY, const TVector3& newZ); rotate axes. Double_t PhiX() const; return Phi. Double_t PhiY() const; return Phi. Double",MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:15944,Modifiability,variab,variable,15944,"les(Double_t phi, Double_t theta, Double_t psi); Rotate using the y-convention. void SetXPhi(Double_t ); set XPhi. void SetXTheta(Double_t ); set XTheta. void SetXPsi(Double_t ); set XPsi. void SetYPhi(Double_t ); set YPhi. void SetYTheta(Double_t ); set YTheta. void SetYPsi(Double_t ); set YPsi. Double_t GetXPhi(void); return phi angle. Double_t GetYPhi(void); return YPhi. Double_t GetXTheta(void); return XTheta. Double_t GetYTheta(void); return YTheta. Double_t GetXPsi(void); Get psi angle. Double_t GetYPsi(void); return YPsi. TRotation & SetXAxis(const TVector3& axis, const TVector3& xyPlane); set X axis. TRotation & SetXAxis(const TVector3& axis); set X axis. TRotation & SetYAxis(const TVector3& axis, const TVector3& yzPlane); set Y axis. TRotation & SetYAxis(const TVector3& axis); set Y axis. TRotation & SetZAxis(const TVector3& axis, const TVector3& zxPlane); set Z axis. TRotation & SetZAxis(const TVector3& axis); set Z axis. void MakeBasis(TVector3& xAxis, TVector3& yAxis, TVector3& zAxis) const; Make the Z axis into a unit variable. Double_t XX() const; { return fxx; }. Double_t XY() const; { return fxy; }. Double_t XZ() const; { return fxz; }. Double_t YX() const; { return fyx; }. Double_t YY() const; { return fyy; }. Double_t YZ() const; { return fyz; }. Double_t ZX() const; { return fzx; }. Double_t ZY() const; { return fzy; }. Double_t ZZ() const; { return fzz; }. Bool_t IsIdentity() const. TRotation & SetToIdentity(). TRotation & Transform(const TRotation& ). TRotation Inverse() const. TRotation & Invert(). TRotation & Rotate(Double_t , const TVector3* ). TRotationRow & operator=(const TRotation& ). virtual ~TRotation(); Copy constructor. {;}. » Author: Peter Malzacher 19/06/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/physics:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT supp",MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:4203,Safety,recover,recover,4203,"; angles of the rotated axes:;   Double_t tx,ty,tz,px,py,pz;;   tx= a.ThetaX();;   ...;   pz= a.PhiZ();. Setting The Rotations; The member function SetToIdentity() will set the rotation object; to the identity (no rotation).; With a minor caveat, the Euler angles of the rotation may be set using; SetXEulerAngles() or individually set with SetXPhi(),; SetXTheta(), and SetXPsi(). These routines set the Euler; angles using the X-convention which is defined by a rotation about the Z-axis,; about the new X-axis, and about the new Z-axis. This is the convention used; in Landau and Lifshitz, Goldstein and other common physics texts. The; Y-convention euler angles can be set with SetYEulerAngles(),; SetYPhi(), SetYTheta(), and SetYPsi(). The caveat; is that Euler angles usually define the rotation of the new coordinate system; with respect to the original system, however, the TRotation class specifies; the rotation of the object in the original system (an active rotation). To; recover the usual Euler rotations (ie. rotate the system not the object), you; must take the inverse of the rotation.; The member functions SetXAxis(), SetYAxis(), and; SetZAxis() will create a rotation which rotates the requested axis; of the object to be parallel to a vector. If used with one argument, the; rotation about that axis is arbitrary. If used with two arguments, the; second variable defines the XY, YZ, or ZX; respectively. Inverse rotation;   TRotation a,b;;   ...;   b = a.Inverse();  // b is inverse of a, a is unchanged;   b = a.Invert();   // invert a and set b = a. Compound Rotations; The operator * has been implemented in a way that follows the; mathematical notation of a product of the two matrices which describe the; two consecutive rotations. Therefore the second rotation should be placed; first:;   r = r2 * r1;. Rotation of TVector3; The TRotation class provides an operator * which allows to express; a rotation of a TVector3 analog to the mathematical notation;   | x' |   | xx xy x",MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:1455,Security,Access,Access,1455,"LHEPs Vector package written by ; -* Leif Lonnblad, Andreas Nilsson and Evgueni Tcherniaev ; -* and a ROOT package written by Pasha Murat. ; -* for CLHEP see: http://wwwinfo.cern.ch/asd/lhc++/clhep/ ; *. . TRotation; The TRotation class describes a rotation of objects of the TVector3 class.; It is a 3*3 matrix of Double_t:; | xx  xy  xz |; | yx  yy  yz |; | zx  zy  zz |; It describes a so called active rotation, i.e. rotation of objects inside; a static system of coordinates. In case you want to rotate the frame and; want to know the coordinates of objects in the rotated system, you should; apply the inverse rotation to the objects. If you want to transform coordinates; from the rotated frame to the original frame you have to apply the direct; transformation.; A rotation around a specified axis means counterclockwise rotation around; the positive direction of the axis.;  . Declaration, Access, Comparisons;   TRotation r;    // r initialized as identity;   TRotation m(r); // m = r; There is no direct way to set the matrix elements - to ensure that; a TRotation object always describes a real rotation. But you can get the; values by the member functions XX()..ZZ() or the (,); operator:;   Double_t xx = r.XX();     //  the; same as xx=r(0,0);            xx; = r(0,0);;   if (r==m) {...}          // test for equality;   if (r!=m) {..}           // test for inequality;   if (r.IsIdentity()) {...} // test for identity;  . Rotation around axes; The following matrices desrcibe counterclockwise rotations around coordinate; axes;         | 1   0      ; 0    |; Rx(a) = | 0 cos(a) -sin(a) |;         | 0 sin(a) cos(a) ; |;         | cos(a)  0 sin(a); |; Ry(a) = |   0     1   ; 0   |;         | -sin(a) 0 cos(a) |;         | cos(a) -sin(a) 0 |; Rz(a) = | sin(a) cos(a) 0 |;         |   0     ; 0     1 |; and are implemented as member functions RotateX(), RotateY(); and RotateZ():;   r.RotateX(TMath::Pi()); // rotation around the x-axis. Rotation around arbitary axis; The member functi",MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:7535,Security,Hash,Hash,7535,"; virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetXPhi() const; Double_tGetXPsi() const; Double_tGetXTheta() const; Double_tGetYPhi() const; Double_tGetYPsi() const; Double_tGetYTheta() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; TRotationInverse() const; TRotation&Invert(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsIdentity() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidMakeBasis(TVector3& xAxis, TVector3& yAxis, TVector3& zAxis) const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voi",MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:1871,Testability,test,test,1871,"; | xx  xy  xz |; | yx  yy  yz |; | zx  zy  zz |; It describes a so called active rotation, i.e. rotation of objects inside; a static system of coordinates. In case you want to rotate the frame and; want to know the coordinates of objects in the rotated system, you should; apply the inverse rotation to the objects. If you want to transform coordinates; from the rotated frame to the original frame you have to apply the direct; transformation.; A rotation around a specified axis means counterclockwise rotation around; the positive direction of the axis.;  . Declaration, Access, Comparisons;   TRotation r;    // r initialized as identity;   TRotation m(r); // m = r; There is no direct way to set the matrix elements - to ensure that; a TRotation object always describes a real rotation. But you can get the; values by the member functions XX()..ZZ() or the (,); operator:;   Double_t xx = r.XX();     //  the; same as xx=r(0,0);            xx; = r(0,0);;   if (r==m) {...}          // test for equality;   if (r!=m) {..}           // test for inequality;   if (r.IsIdentity()) {...} // test for identity;  . Rotation around axes; The following matrices desrcibe counterclockwise rotations around coordinate; axes;         | 1   0      ; 0    |; Rx(a) = | 0 cos(a) -sin(a) |;         | 0 sin(a) cos(a) ; |;         | cos(a)  0 sin(a); |; Ry(a) = |   0     1   ; 0   |;         | -sin(a) 0 cos(a) |;         | cos(a) -sin(a) 0 |; Rz(a) = | sin(a) cos(a) 0 |;         |   0     ; 0     1 |; and are implemented as member functions RotateX(), RotateY(); and RotateZ():;   r.RotateX(TMath::Pi()); // rotation around the x-axis. Rotation around arbitary axis; The member function Rotate() allows to rotate around an arbitary vector; (not neccessary a unit one) and returns the result.;   r.Rotate(TMath::Pi()/3,TVector3(3,4,5));; It is possible to find a unit vector and an angle, which describe the; same rotation as the current one:;   Double_t angle;;   TVector3 axis;;   r.GetAngleAxis(angle,axis)",MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:1920,Testability,test,test,1920,"|; It describes a so called active rotation, i.e. rotation of objects inside; a static system of coordinates. In case you want to rotate the frame and; want to know the coordinates of objects in the rotated system, you should; apply the inverse rotation to the objects. If you want to transform coordinates; from the rotated frame to the original frame you have to apply the direct; transformation.; A rotation around a specified axis means counterclockwise rotation around; the positive direction of the axis.;  . Declaration, Access, Comparisons;   TRotation r;    // r initialized as identity;   TRotation m(r); // m = r; There is no direct way to set the matrix elements - to ensure that; a TRotation object always describes a real rotation. But you can get the; values by the member functions XX()..ZZ() or the (,); operator:;   Double_t xx = r.XX();     //  the; same as xx=r(0,0);            xx; = r(0,0);;   if (r==m) {...}          // test for equality;   if (r!=m) {..}           // test for inequality;   if (r.IsIdentity()) {...} // test for identity;  . Rotation around axes; The following matrices desrcibe counterclockwise rotations around coordinate; axes;         | 1   0      ; 0    |; Rx(a) = | 0 cos(a) -sin(a) |;         | 0 sin(a) cos(a) ; |;         | cos(a)  0 sin(a); |; Ry(a) = |   0     1   ; 0   |;         | -sin(a) 0 cos(a) |;         | cos(a) -sin(a) 0 |; Rz(a) = | sin(a) cos(a) 0 |;         |   0     ; 0     1 |; and are implemented as member functions RotateX(), RotateY(); and RotateZ():;   r.RotateX(TMath::Pi()); // rotation around the x-axis. Rotation around arbitary axis; The member function Rotate() allows to rotate around an arbitary vector; (not neccessary a unit one) and returns the result.;   r.Rotate(TMath::Pi()/3,TVector3(3,4,5));; It is possible to find a unit vector and an angle, which describe the; same rotation as the current one:;   Double_t angle;;   TVector3 axis;;   r.GetAngleAxis(angle,axis);. Rotation of local axes; Member function Rot",MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:1972,Testability,test,test,1972,"ation of objects inside; a static system of coordinates. In case you want to rotate the frame and; want to know the coordinates of objects in the rotated system, you should; apply the inverse rotation to the objects. If you want to transform coordinates; from the rotated frame to the original frame you have to apply the direct; transformation.; A rotation around a specified axis means counterclockwise rotation around; the positive direction of the axis.;  . Declaration, Access, Comparisons;   TRotation r;    // r initialized as identity;   TRotation m(r); // m = r; There is no direct way to set the matrix elements - to ensure that; a TRotation object always describes a real rotation. But you can get the; values by the member functions XX()..ZZ() or the (,); operator:;   Double_t xx = r.XX();     //  the; same as xx=r(0,0);            xx; = r(0,0);;   if (r==m) {...}          // test for equality;   if (r!=m) {..}           // test for inequality;   if (r.IsIdentity()) {...} // test for identity;  . Rotation around axes; The following matrices desrcibe counterclockwise rotations around coordinate; axes;         | 1   0      ; 0    |; Rx(a) = | 0 cos(a) -sin(a) |;         | 0 sin(a) cos(a) ; |;         | cos(a)  0 sin(a); |; Ry(a) = |   0     1   ; 0   |;         | -sin(a) 0 cos(a) |;         | cos(a) -sin(a) 0 |; Rz(a) = | sin(a) cos(a) 0 |;         |   0     ; 0     1 |; and are implemented as member functions RotateX(), RotateY(); and RotateZ():;   r.RotateX(TMath::Pi()); // rotation around the x-axis. Rotation around arbitary axis; The member function Rotate() allows to rotate around an arbitary vector; (not neccessary a unit one) and returns the result.;   r.Rotate(TMath::Pi()/3,TVector3(3,4,5));; It is possible to find a unit vector and an angle, which describe the; same rotation as the current one:;   Double_t angle;;   TVector3 axis;;   r.GetAngleAxis(angle,axis);. Rotation of local axes; Member function RotateAxes() adds a rotation of local axes to; the curre",MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:11204,Testability,Test,TestBit,11204,"ilename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); TRotation&SetToIdentity(); virtual voidTObject::SetUniqueID(UInt_t uid); TRotation&SetXAxis(const TVector3& axis); TRotation&SetXAxis(const TVector3& axis, const TVector3& xyPlane); TRotation&SetXEulerAngles(Double_t phi, Double_t theta, Double_t psi); voidSetXPhi(Double_t); voidSetXPsi(Double_t); voidSetXTheta(Double_t); TRotation&SetYAxis(const TVector3& axis); TRotation&SetYAxis(const TVector3& axis, const TVector3& yzPlane); TRotation&SetYEulerAngles(Double_t phi, Double_t theta, Double_t psi); voidSetYPhi(Double_t); voidSetYPsi(Double_t); voidSetYTheta(Double_t); TRotation&SetZAxis(const TVector3& axis); TRotation&SetZAxis(const TVector3& axis, const TVector3& zxPlane); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Double_tThetaX() const; Double_tThetaY() const; Double_tThetaZ() const; TRotation&Transform(const TRotation&); TRotation(); TRotation(const TRotation&); TRotation(const TQuaternion&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Double_tXX() const; Double_tXY() const; Double_tXZ() const; Double_tYX() const; Double_tYY() const; Double_tYZ() const; Double_tZX() const; Double_tZY() const; Double_tZZ() const.",MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:11243,Testability,Test,TestBits,11243,"ilename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); TRotation&SetToIdentity(); virtual voidTObject::SetUniqueID(UInt_t uid); TRotation&SetXAxis(const TVector3& axis); TRotation&SetXAxis(const TVector3& axis, const TVector3& xyPlane); TRotation&SetXEulerAngles(Double_t phi, Double_t theta, Double_t psi); voidSetXPhi(Double_t); voidSetXPsi(Double_t); voidSetXTheta(Double_t); TRotation&SetYAxis(const TVector3& axis); TRotation&SetYAxis(const TVector3& axis, const TVector3& yzPlane); TRotation&SetYEulerAngles(Double_t phi, Double_t theta, Double_t psi); voidSetYPhi(Double_t); voidSetYPsi(Double_t); voidSetYTheta(Double_t); TRotation&SetZAxis(const TVector3& axis); TRotation&SetZAxis(const TVector3& axis, const TVector3& zxPlane); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Double_tThetaX() const; Double_tThetaY() const; Double_tThetaZ() const; TRotation&Transform(const TRotation&); TRotation(); TRotation(const TRotation&); TRotation(const TQuaternion&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Double_tXX() const; Double_tXY() const; Double_tXZ() const; Double_tYX() const; Double_tYY() const; Double_tYZ() const; Double_tZX() const; Double_tZY() const; Double_tZZ() const.",MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:5858,Usability,Clear,Clear,5858,,MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotation.html:14576,Usability,clear,clearer,14576," of quaternion is null, creates identity rotation; if quaternion is non-unit, creates rotation corresponding to the normalized (unit) quaternion. TRotation & Rotate(Double_t , const TVector3& ); rotate along an axis. TRotation & RotateX(Double_t ); rotate around x. TRotation & RotateY(Double_t ); rotate around y. TRotation & RotateZ(Double_t ); rotate around z. TRotation & RotateAxes(const TVector3& newX, const TVector3& newY, const TVector3& newZ); rotate axes. Double_t PhiX() const; return Phi. Double_t PhiY() const; return Phi. Double_t PhiZ() const; return Phi. Double_t ThetaX() const; return Phi. Double_t ThetaY() const; return Theta. Double_t ThetaZ() const; return Theta. void AngleAxis(Double_t& , TVector3& ) const; rotation defined by an angle and a vector. TRotation & SetXEulerAngles(Double_t phi, Double_t theta, Double_t psi); Rotate using the x-convention (Landau and Lifshitz, Goldstein, &c) by; doing the explicit rotations. This is slightly less efficient than; directly applying the rotation, but makes the code much clearer. My; presumption is that this code is not going to be a speed bottle neck. TRotation & SetYEulerAngles(Double_t phi, Double_t theta, Double_t psi); Rotate using the y-convention. TRotation & RotateXEulerAngles(Double_t phi, Double_t theta, Double_t psi); Rotate using the x-convention. TRotation & RotateYEulerAngles(Double_t phi, Double_t theta, Double_t psi); Rotate using the y-convention. void SetXPhi(Double_t ); set XPhi. void SetXTheta(Double_t ); set XTheta. void SetXPsi(Double_t ); set XPsi. void SetYPhi(Double_t ); set YPhi. void SetYTheta(Double_t ); set YTheta. void SetYPsi(Double_t ); set YPsi. Double_t GetXPhi(void); return phi angle. Double_t GetYPhi(void); return YPhi. Double_t GetXTheta(void); return XTheta. Double_t GetYTheta(void); return YTheta. Double_t GetXPsi(void); Get psi angle. Double_t GetYPsi(void); return YPsi. TRotation & SetXAxis(const TVector3& axis, const TVector3& xyPlane); set X axis. TRotation & SetXAxis",MatchSource.WIKI,root/html602/TRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotation.html
https://root.cern/root/html602/TRotMatrix.html:1253,Availability,Error,Error,1253," virtual~TRotMatrix(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDeterminant() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_t*GetGLMatrix(Double_t* rGLMatrix) const; virtual const char*TObject::GetIconName() const; virtual Double_t*G",MatchSource.WIKI,root/html602/TRotMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotMatrix.html
https://root.cern/root/html602/TRotMatrix.html:1382,Availability,error,error,1382," virtual~TRotMatrix(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDeterminant() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_t*GetGLMatrix(Double_t* rGLMatrix) const; virtual const char*TObject::GetIconName() const; virtual Double_t*G",MatchSource.WIKI,root/html602/TRotMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotMatrix.html
https://root.cern/root/html602/TRotMatrix.html:1466,Availability,error,error,1466,"* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDeterminant() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_t*GetGLMatrix(Double_t* rGLMatrix) const; virtual const char*TObject::GetIconName() const; virtual Double_t*GetMatrix(); virtual const char*TNamed::GetName() const; virtual Int_tGetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Double_tGetPhi() const; virtual Double_tGetPsi() const; virtual Double_tGetTheta() const; virtual const char*TNamed::GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTO",MatchSource.WIKI,root/html602/TRotMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotMatrix.html
https://root.cern/root/html602/TRotMatrix.html:116,Modifiability,inherit,inheritance,116,". TRotMatrix. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » G3D; » TRotMatrix. class TRotMatrix: public TNamed. Manages a detector rotation matrix. See class TGeometry. Function Members (Methods); public:. virtual~TRotMatrix(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDeterminant() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_t*GetGLMatrix(Double_t* rGLMatrix) const; virtual const char*TObject::GetIconName() const; virtual Double_t*G",MatchSource.WIKI,root/html602/TRotMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotMatrix.html
https://root.cern/root/html602/TRotMatrix.html:2637,Modifiability,Inherit,InheritsFrom,2637,"lBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_t*GetGLMatrix(Double_t* rGLMatrix) const; virtual const char*TObject::GetIconName() const; virtual Double_t*GetMatrix(); virtual const char*TNamed::GetName() const; virtual Int_tGetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Double_tGetPhi() const; virtual Double_tGetPsi() const; virtual Double_tGetTheta() const; virtual const char*TNamed::GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsReflection() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); vo",MatchSource.WIKI,root/html602/TRotMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotMatrix.html
https://root.cern/root/html602/TRotMatrix.html:2703,Modifiability,Inherit,InheritsFrom,2703,"char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_t*GetGLMatrix(Double_t* rGLMatrix) const; virtual const char*TObject::GetIconName() const; virtual Double_t*GetMatrix(); virtual const char*TNamed::GetName() const; virtual Int_tGetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Double_tGetPhi() const; virtual Double_tGetPsi() const; virtual Double_tGetTheta() const; virtual const char*TNamed::GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsReflection() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRotMatrix&operat",MatchSource.WIKI,root/html602/TRotMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotMatrix.html
https://root.cern/root/html602/TRotMatrix.html:7056,Modifiability,Inherit,Inheritance,7056,"; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TRotMatrix::(anonymous)kReflection; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_tfMatrix[9]Rotation matrix; TStringTNamed::fNameobject identifier; Int_tfNumberRotation matrix number; Double_tfPhiphi angle; Double_tfPsipsi angle; Double_tfThetatheta angle; TStringTNamed::fTitleobject title; Int_tfTypeType of matrix (0=identity, 1=reflexion, 2=otherwise). Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TRotMatrix. Function documentation; TRotMatrix(); RotMatrix default constructor. TRotMatrix(const char* name, const char* title, Double_t* matrix); RotMatrix normal constructor. TRotMatrix(const char* name, const char* title, Double_t theta, Double_t phi, Double_t psi); RotMatrix normal constructor. TRotMatrix(const char* name, const char* title, Double_t theta1, Double_t phi1, Double_t theta2, Double_t phi2, Double_t theta3, Double_t phi3); RotMatrix normal constructor defined a la GEANT. The TRotMatrix constructor with six angles uses the GEANT convention:. theta1 is the polar angle of the x-prim axis in the main reference system; (MRS), theta2 and theta3 have the same meaning for the y-prim and z-prim; axis. Phi1 is the azimuthal angle of the x-prim in the MRS and phi2 and phi3; have the same meaning for y-prim and z-prim. for example, the unit matrix is defined in the following way. x-prim || x, y-prim || y, z-prim || z. means: theta1=90, theta2=90",MatchSource.WIKI,root/html602/TRotMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotMatrix.html
https://root.cern/root/html602/TRotMatrix.html:325,Safety,detect,detector,325,". TRotMatrix. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » G3D; » TRotMatrix. class TRotMatrix: public TNamed. Manages a detector rotation matrix. See class TGeometry. Function Members (Methods); public:. virtual~TRotMatrix(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDeterminant() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_t*GetGLMatrix(Double_t* rGLMatrix) const; virtual const char*TObject::GetIconName() const; virtual Double_t*G",MatchSource.WIKI,root/html602/TRotMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotMatrix.html
https://root.cern/root/html602/TRotMatrix.html:2527,Security,Hash,Hash,2527,"t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_t*GetGLMatrix(Double_t* rGLMatrix) const; virtual const char*TObject::GetIconName() const; virtual Double_t*GetMatrix(); virtual const char*TNamed::GetName() const; virtual Int_tGetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Double_tGetPhi() const; virtual Double_tGetPsi() const; virtual Double_tGetTheta() const; virtual const char*TNamed::GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsReflection() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::ope",MatchSource.WIKI,root/html602/TRotMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotMatrix.html
https://root.cern/root/html602/TRotMatrix.html:5061,Testability,Test,TestBit,5061,"ption = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual const Double_t*SetAngles(Double_t theta1, Double_t phi1, Double_t theta2, Double_t phi2, Double_t theta3, Double_t phi3); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetMatrix(const Double_t* matrix); virtual voidSetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRotMatrix(); TRotMatrix(const TRotMatrix&); TRotMatrix(const char* name, const char* title, Double_t* matrix); TRotMatrix(const char* name, const char* title, Double_t theta, Double_t phi, Double_t psi); TRotMatrix(const char* name, const char* title, Double_t theta1, Double_t phi1, Double_t theta2, Double_t phi2, Double_t theta3, Double_t phi3); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRotMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotMatrix.html
https://root.cern/root/html602/TRotMatrix.html:5100,Testability,Test,TestBits,5100,"ption = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual const Double_t*SetAngles(Double_t theta1, Double_t phi1, Double_t theta2, Double_t phi2, Double_t theta3, Double_t phi3); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetMatrix(const Double_t* matrix); virtual voidSetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRotMatrix(); TRotMatrix(const TRotMatrix&); TRotMatrix(const char* name, const char* title, Double_t* matrix); TRotMatrix(const char* name, const char* title, Double_t theta, Double_t phi, Double_t psi); TRotMatrix(const char* name, const char* title, Double_t theta1, Double_t phi1, Double_t theta2, Double_t phi2, Double_t theta3, Double_t phi3); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TRotMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotMatrix.html
https://root.cern/root/html602/TRotMatrix.html:9806,Testability,Test,TestBit,9806,"ctor. Double_t Determinant() const; Determinant() returns the value of the determiant of this matrix. Double_t* GetGLMatrix(Double_t* rGLMatrix) const; Convert this matrix to the OpenGL [4x4]. [ fMatrix[0] fMatrix[1] fMatrix[2] 0 ]; [ fMatrix[3] fMatrix[4] fMatrix[5] 0 ]; [ fMatrix[6] fMatrix[7] fMatrix[8] 0 ]; [ 0 0 0 1 ]. Input:. Double_t *rGLMatrix - pointer to Double_t 4x4 buffer array. Return:. Double_t pointer to the input buffer. const Double_t* SetAngles(Double_t theta1, Double_t phi1, Double_t theta2, Double_t phi2, Double_t theta3, Double_t phi3); theta1 is the polar angle of the x-prim axis in the main reference system; (MRS), theta2 and theta3 have the same meaning for the y-prim and z-prim; axis. Phi1 is the azimuthal angle of the x-prim in the MRS and phi2 and phi3; have the same meaning for y-prim and z-prim. for example, the unit matrix is defined in the following way. x-prim || x, y-prim || y, z-prim || z. means: theta1=90, theta2=90, theta3=0, phi1=0, phi2=90, phi3=0. void SetMatrix(const Double_t* matrix); copy predefined 3x3 matrix into TRotMatrix object. void SetReflection(); SetReflection() - checks whether the determinant of this; matrix defines the reflection transformation; and set the ""reflection"" flag if any. void Streamer(TBuffer& ); Stream an object of class TRotMatrix. void SetName(const char* name); { }. TRotMatrix(). Double_t* GetMatrix(); {return &fMatrix[0];}. Int_t GetNumber() const; {return fNumber;}. Int_t GetType() const; {return fType;}. Double_t GetTheta() const; {return fTheta;}. Double_t GetPhi() const; {return fPhi;}. Double_t GetPsi() const; {return fPsi;}. Bool_t IsReflection() const; {return TestBit(kReflection);}. » Author: Rene Brun 14/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRotMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotMatrix.html
https://root.cern/root/html602/TRotMatrix.html:673,Usability,Clear,Clear,673," virtual~TRotMatrix(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDeterminant() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_t*GetGLMatrix(Double_t* rGLMatrix) const; virtual const char*TObject::GetIconName() const; virtual Double_t*G",MatchSource.WIKI,root/html602/TRotMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRotMatrix.html
https://root.cern/root/html602/TRWLock.html:1299,Availability,Error,Error,1299," virtual~TRWLock(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObject",MatchSource.WIKI,root/html602/TRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRWLock.html
https://root.cern/root/html602/TRWLock.html:1428,Availability,error,error,1428," virtual~TRWLock(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObject",MatchSource.WIKI,root/html602/TRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRWLock.html
https://root.cern/root/html602/TRWLock.html:1512,Availability,error,error,1512," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html602/TRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRWLock.html
https://root.cern/root/html602/TRWLock.html:113,Modifiability,inherit,inheritance,113,". TRWLock. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » THREAD; » TRWLock. class TRWLock: public TObject. TRWLock. This class implements a reader/writer lock. A rwlock allows; a resource to be accessed by multiple reader threads but only; one writer thread. Function Members (Methods); public:. virtual~TRWLock(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObject",MatchSource.WIKI,root/html602/TRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRWLock.html
https://root.cern/root/html602/TRWLock.html:2392,Modifiability,Inherit,InheritsFrom,2392,"d, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html602/TRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRWLock.html
https://root.cern/root/html602/TRWLock.html:2458,Modifiability,Inherit,InheritsFrom,2458,"cute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); ",MatchSource.WIKI,root/html602/TRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRWLock.html
https://root.cern/root/html602/TRWLock.html:5814,Modifiability,variab,variable,5814,"ze = 0) const; Int_tWriteLock(); Int_tWriteUnLock(). protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TRWLock&operator=(const TRWLock&); TRWLock(const TRWLock&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TConditionfLockFreerwlock condition variable; TMutexfMutexrwlock mutex; Int_tfReadersnumber of readers; Int_tfWritersnumber of writers. Class Charts. Inheritance Chart:. TObject. ←; TRWLock. Function documentation; TRWLock(); Create reader/write lock. Int_t ReadLock(); Obtain a reader lock. Returns always 0. Int_t ReadUnLock(); Unlock reader lock. Returns -1 if thread was not locked,; 0 if everything ok. Int_t WriteLock(); Obtain a writer lock. Returns always 0. Int_t WriteUnLock(); Unlock writer lock. Returns -1 if thread was not locked,; 0 if everything ok. TRWLock(const TRWLock& ). TRWLock& operator=(const TRWLock& ). virtual ~TRWLock(); { }. » Author: Fons Rademakers 04/01/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRWLock.html
https://root.cern/root/html602/TRWLock.html:5928,Modifiability,Inherit,Inheritance,5928,"ze = 0) const; Int_tWriteLock(); Int_tWriteUnLock(). protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TRWLock&operator=(const TRWLock&); TRWLock(const TRWLock&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TConditionfLockFreerwlock condition variable; TMutexfMutexrwlock mutex; Int_tfReadersnumber of readers; Int_tfWritersnumber of writers. Class Charts. Inheritance Chart:. TObject. ←; TRWLock. Function documentation; TRWLock(); Create reader/write lock. Int_t ReadLock(); Obtain a reader lock. Returns always 0. Int_t ReadUnLock(); Unlock reader lock. Returns -1 if thread was not locked,; 0 if everything ok. Int_t WriteLock(); Obtain a writer lock. Returns always 0. Int_t WriteUnLock(); Unlock writer lock. Returns -1 if thread was not locked,; 0 if everything ok. TRWLock(const TRWLock& ). TRWLock& operator=(const TRWLock& ). virtual ~TRWLock(); { }. » Author: Fons Rademakers 04/01/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRWLock.html
https://root.cern/root/html602/TRWLock.html:395,Security,access,accessed,395,". TRWLock. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » THREAD; » TRWLock. class TRWLock: public TObject. TRWLock. This class implements a reader/writer lock. A rwlock allows; a resource to be accessed by multiple reader threads but only; one writer thread. Function Members (Methods); public:. virtual~TRWLock(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObject",MatchSource.WIKI,root/html602/TRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRWLock.html
https://root.cern/root/html602/TRWLock.html:2282,Security,Hash,Hash,2282,"l voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html602/TRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRWLock.html
https://root.cern/root/html602/TRWLock.html:4395,Testability,Test,TestBit,4395,"st; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); Int_tReadLock(); Int_tReadUnLock(); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRWLock(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tWriteLock(); Int_tWriteUnLock().",MatchSource.WIKI,root/html602/TRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRWLock.html
https://root.cern/root/html602/TRWLock.html:4434,Testability,Test,TestBits,4434,"st; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); Int_tReadLock(); Int_tReadUnLock(); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRWLock(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tWriteLock(); Int_tWriteUnLock().",MatchSource.WIKI,root/html602/TRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRWLock.html
https://root.cern/root/html602/TRWLock.html:759,Usability,Clear,Clear,759," virtual~TRWLock(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObject",MatchSource.WIKI,root/html602/TRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TRWLock.html
https://root.cern/root/html602/TS3HTTPRequest.html:1949,Availability,Error,Error,1949," virtual~TS3HTTPRequest(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const;",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:2078,Availability,error,error,2078," virtual~TS3HTTPRequest(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const;",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:2162,Availability,error,error,2162," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const TString&GetAccessKey() const; TStringGetAuthType() const; const TString&GetBucket() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TString&GetHost() const; TS3HTTPRequest::EHTTPVerbGetHTTPVerb() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; const TString&GetObjectKey() const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TStringGetRequest(TS3HTTPRequest::EHTTPVerb httpVerb, Bool_t appendCRLF = kTRUE); const TString&GetSecretKey() const; const TString&GetTimeStamp() const; virtual const char*TObject::GetTit",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:436,Integrability,protocol,protocol,436,". TS3HTTPRequest. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3HTTPRequest. class TS3HTTPRequest: public TObject. TS3HTTPRequest. An object of this class represents an HTTP request extended to be; compatible with Amazon's S3 protocol.; Specifically, such a request contains an 'Authorization' header with; information used by the S3 server for authenticating this request.; The authentication information is computed based on a pair of access; key and secret key which are both provided to the user by the S3; service provider (e.g. Amazon, Google, etc.).; The secret key is used to compute a signature of selected fields in; the request. The algorithm for computing the signature is documented; in:. Google storage:; http://code.google.com/apis/storage/docs/reference/v1/developer-guidev1.html#authentication. Amazon:; http://docs.aws.amazon.com/AmazonS3/latest/dev/S3_Authentication2.html. Function Members (Methods); public:. virtual~TS3HTTPRequest(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const;",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:120,Modifiability,inherit,inheritance,120,". TS3HTTPRequest. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3HTTPRequest. class TS3HTTPRequest: public TObject. TS3HTTPRequest. An object of this class represents an HTTP request extended to be; compatible with Amazon's S3 protocol.; Specifically, such a request contains an 'Authorization' header with; information used by the S3 server for authenticating this request.; The authentication information is computed based on a pair of access; key and secret key which are both provided to the user by the S3; service provider (e.g. Amazon, Google, etc.).; The secret key is used to compute a signature of selected fields in; the request. The algorithm for computing the signature is documented; in:. Google storage:; http://code.google.com/apis/storage/docs/reference/v1/developer-guidev1.html#authentication. Amazon:; http://docs.aws.amazon.com/AmazonS3/latest/dev/S3_Authentication2.html. Function Members (Methods); public:. virtual~TS3HTTPRequest(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const;",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:392,Modifiability,extend,extended,392,". TS3HTTPRequest. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3HTTPRequest. class TS3HTTPRequest: public TObject. TS3HTTPRequest. An object of this class represents an HTTP request extended to be; compatible with Amazon's S3 protocol.; Specifically, such a request contains an 'Authorization' header with; information used by the S3 server for authenticating this request.; The authentication information is computed based on a pair of access; key and secret key which are both provided to the user by the S3; service provider (e.g. Amazon, Google, etc.).; The secret key is used to compute a signature of selected fields in; the request. The algorithm for computing the signature is documented; in:. Google storage:; http://code.google.com/apis/storage/docs/reference/v1/developer-guidev1.html#authentication. Amazon:; http://docs.aws.amazon.com/AmazonS3/latest/dev/S3_Authentication2.html. Function Members (Methods); public:. virtual~TS3HTTPRequest(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const;",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:3406,Modifiability,Inherit,InheritsFrom,3406,"(const TObject* obj) const; const TString&GetAccessKey() const; TStringGetAuthType() const; const TString&GetBucket() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TString&GetHost() const; TS3HTTPRequest::EHTTPVerbGetHTTPVerb() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; const TString&GetObjectKey() const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TStringGetRequest(TS3HTTPRequest::EHTTPVerb httpVerb, Bool_t appendCRLF = kTRUE); const TString&GetSecretKey() const; const TString&GetTimeStamp() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:3472,Modifiability,Inherit,InheritsFrom,3472,"tringGetAuthType() const; const TString&GetBucket() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TString&GetHost() const; TS3HTTPRequest::EHTTPVerbGetHTTPVerb() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; const TString&GetObjectKey() const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TStringGetRequest(TS3HTTPRequest::EHTTPVerb httpVerb, Bool_t appendCRLF = kTRUE); const TString&GetSecretKey() const; const TString&GetTimeStamp() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TS3HTTPRequest&operator=(const TS3HTTPRequest&); vi",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:8431,Modifiability,Inherit,Inheritance,8431,"c TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TS3HTTPRequest::EAuthTypekNoAuth; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TS3HTTPRequest::EHTTPVerbkPOST; static TS3HTTPRequest::EHTTPVerbkPUT; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TStringfAccessKeyAccess key (for authentication); TS3HTTPRequest::EAuthTypefAuthTypeAuthentication type; TStringfBucketBucket name; TStringfHostHost name; TStringfObjectKeyObject key; TStringfSecretKeySecret key (for authentication); TStringfTimeStampRequest time stamp; TS3HTTPRequest::EHTTPVerbfVerbHTTP Verb. Class Charts. Inheritance Chart:. TObject. ←; TS3HTTPRequest. Function documentation; TS3HTTPRequest(). TS3HTTPRequest(TS3HTTPRequest::EHTTPVerb httpVerb, const TString& host, const TString& bucket, const TString& objectKey, TS3HTTPRequest::EAuthType authType, const TString& accessKey, const TString& secretKey); Default constructor. TS3HTTPRequest(const TS3HTTPRequest& m); Copy constructor. TString ComputeSignature(TS3HTTPRequest::EHTTPVerb httpVerb) const; Returns this request's signature. TString HTTPVerbToTString(TS3HTTPRequest::EHTTPVerb httpVerb) const. TS3HTTPRequest& SetTimeStamp(); Sets this request's time stamp according to:; http://code.google.com/apis/storage/docs/reference-headers.html#date. TString MakeRequestLine(TS3HTTPRequest::EHTTPVerb httpVerb) const; Returns the first line of a HTTP request for this object. Note that since; we don't use the virtual host syntax which is supported by Amazon, we; must include the bucket name in thr resource. For example, we don't use; http://mybucket.s3.amazo",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:489,Security,Authoriz,Authorization,489,". TS3HTTPRequest. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3HTTPRequest. class TS3HTTPRequest: public TObject. TS3HTTPRequest. An object of this class represents an HTTP request extended to be; compatible with Amazon's S3 protocol.; Specifically, such a request contains an 'Authorization' header with; information used by the S3 server for authenticating this request.; The authentication information is computed based on a pair of access; key and secret key which are both provided to the user by the S3; service provider (e.g. Amazon, Google, etc.).; The secret key is used to compute a signature of selected fields in; the request. The algorithm for computing the signature is documented; in:. Google storage:; http://code.google.com/apis/storage/docs/reference/v1/developer-guidev1.html#authentication. Amazon:; http://docs.aws.amazon.com/AmazonS3/latest/dev/S3_Authentication2.html. Function Members (Methods); public:. virtual~TS3HTTPRequest(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const;",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:555,Security,authenticat,authenticating,555,". TS3HTTPRequest. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3HTTPRequest. class TS3HTTPRequest: public TObject. TS3HTTPRequest. An object of this class represents an HTTP request extended to be; compatible with Amazon's S3 protocol.; Specifically, such a request contains an 'Authorization' header with; information used by the S3 server for authenticating this request.; The authentication information is computed based on a pair of access; key and secret key which are both provided to the user by the S3; service provider (e.g. Amazon, Google, etc.).; The secret key is used to compute a signature of selected fields in; the request. The algorithm for computing the signature is documented; in:. Google storage:; http://code.google.com/apis/storage/docs/reference/v1/developer-guidev1.html#authentication. Amazon:; http://docs.aws.amazon.com/AmazonS3/latest/dev/S3_Authentication2.html. Function Members (Methods); public:. virtual~TS3HTTPRequest(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const;",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:589,Security,authenticat,authentication,589,". TS3HTTPRequest. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3HTTPRequest. class TS3HTTPRequest: public TObject. TS3HTTPRequest. An object of this class represents an HTTP request extended to be; compatible with Amazon's S3 protocol.; Specifically, such a request contains an 'Authorization' header with; information used by the S3 server for authenticating this request.; The authentication information is computed based on a pair of access; key and secret key which are both provided to the user by the S3; service provider (e.g. Amazon, Google, etc.).; The secret key is used to compute a signature of selected fields in; the request. The algorithm for computing the signature is documented; in:. Google storage:; http://code.google.com/apis/storage/docs/reference/v1/developer-guidev1.html#authentication. Amazon:; http://docs.aws.amazon.com/AmazonS3/latest/dev/S3_Authentication2.html. Function Members (Methods); public:. virtual~TS3HTTPRequest(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const;",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:647,Security,access,access,647,". TS3HTTPRequest. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3HTTPRequest. class TS3HTTPRequest: public TObject. TS3HTTPRequest. An object of this class represents an HTTP request extended to be; compatible with Amazon's S3 protocol.; Specifically, such a request contains an 'Authorization' header with; information used by the S3 server for authenticating this request.; The authentication information is computed based on a pair of access; key and secret key which are both provided to the user by the S3; service provider (e.g. Amazon, Google, etc.).; The secret key is used to compute a signature of selected fields in; the request. The algorithm for computing the signature is documented; in:. Google storage:; http://code.google.com/apis/storage/docs/reference/v1/developer-guidev1.html#authentication. Amazon:; http://docs.aws.amazon.com/AmazonS3/latest/dev/S3_Authentication2.html. Function Members (Methods); public:. virtual~TS3HTTPRequest(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const;",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:1006,Security,authenticat,authentication,1006,"quest. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3HTTPRequest. class TS3HTTPRequest: public TObject. TS3HTTPRequest. An object of this class represents an HTTP request extended to be; compatible with Amazon's S3 protocol.; Specifically, such a request contains an 'Authorization' header with; information used by the S3 server for authenticating this request.; The authentication information is computed based on a pair of access; key and secret key which are both provided to the user by the S3; service provider (e.g. Amazon, Google, etc.).; The secret key is used to compute a signature of selected fields in; the request. The algorithm for computing the signature is documented; in:. Google storage:; http://code.google.com/apis/storage/docs/reference/v1/developer-guidev1.html#authentication. Amazon:; http://docs.aws.amazon.com/AmazonS3/latest/dev/S3_Authentication2.html. Function Members (Methods); public:. virtual~TS3HTTPRequest(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual v",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:3296,Security,Hash,Hash,3296,"r* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const TString&GetAccessKey() const; TStringGetAuthType() const; const TString&GetBucket() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TString&GetHost() const; TS3HTTPRequest::EHTTPVerbGetHTTPVerb() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; const TString&GetObjectKey() const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TStringGetRequest(TS3HTTPRequest::EHTTPVerb httpVerb, Bool_t appendCRLF = kTRUE); const TString&GetSecretKey() const; const TString&GetTimeStamp() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:4950,Security,access,accessKey,4950,"y(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TS3HTTPRequest&operator=(const TS3HTTPRequest&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TS3HTTPRequest&SetAccessKey(const TString& accessKey); TS3HTTPRequest&SetAuthKeys(const TString& accessKey, const TString& secretKey); TS3HTTPRequest&SetAuthType(TS3HTTPRequest::EAuthType authType); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); TS3HTTPRequest&SetBucket(const TString& bucket); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); TS3HTTPRequest&SetHost(const TString& host); TS3HTTPRequest&SetObjectKey(const TString& objectKey); static voidTObject::SetObjectStat(Bool_t stat); TS3HTTPRequest&SetSecretKey(const TString& secretKey); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TS3HTTPRequest(); TS3HTTPRequest(const TS3HTTPRequest& m); TS3HTT",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:5004,Security,access,accessKey,5004,"har* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TS3HTTPRequest&operator=(const TS3HTTPRequest&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TS3HTTPRequest&SetAccessKey(const TString& accessKey); TS3HTTPRequest&SetAuthKeys(const TString& accessKey, const TString& secretKey); TS3HTTPRequest&SetAuthType(TS3HTTPRequest::EAuthType authType); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); TS3HTTPRequest&SetBucket(const TString& bucket); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); TS3HTTPRequest&SetHost(const TString& host); TS3HTTPRequest&SetObjectKey(const TString& objectKey); static voidTObject::SetObjectStat(Bool_t stat); TS3HTTPRequest&SetSecretKey(const TString& secretKey); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TS3HTTPRequest(); TS3HTTPRequest(const TS3HTTPRequest& m); TS3HTTPRequest(TS3HTTPRequest::EHTTPVerb httpVerb, const TSt",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:6121,Security,access,accessKey,6121,"nst TS3HTTPRequest&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TS3HTTPRequest&SetAccessKey(const TString& accessKey); TS3HTTPRequest&SetAuthKeys(const TString& accessKey, const TString& secretKey); TS3HTTPRequest&SetAuthType(TS3HTTPRequest::EAuthType authType); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); TS3HTTPRequest&SetBucket(const TString& bucket); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); TS3HTTPRequest&SetHost(const TString& host); TS3HTTPRequest&SetObjectKey(const TString& objectKey); static voidTObject::SetObjectStat(Bool_t stat); TS3HTTPRequest&SetSecretKey(const TString& secretKey); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TS3HTTPRequest(); TS3HTTPRequest(const TS3HTTPRequest& m); TS3HTTPRequest(TS3HTTPRequest::EHTTPVerb httpVerb, const TString& host, const TString& bucket, const TString& objectKey, TS3HTTPRequest::EAuthType authType, const TString& accessKey, const TString& secretKey); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:8138,Security,authenticat,authentication,8138,"rbkDELETE; static TS3HTTPRequest::EHTTPVerbkGET; static TS3HTTPRequest::EAuthTypekGoogle; static TS3HTTPRequest::EHTTPVerbkHEAD; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TS3HTTPRequest::EAuthTypekNoAuth; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TS3HTTPRequest::EHTTPVerbkPOST; static TS3HTTPRequest::EHTTPVerbkPUT; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TStringfAccessKeyAccess key (for authentication); TS3HTTPRequest::EAuthTypefAuthTypeAuthentication type; TStringfBucketBucket name; TStringfHostHost name; TStringfObjectKeyObject key; TStringfSecretKeySecret key (for authentication); TStringfTimeStampRequest time stamp; TS3HTTPRequest::EHTTPVerbfVerbHTTP Verb. Class Charts. Inheritance Chart:. TObject. ←; TS3HTTPRequest. Function documentation; TS3HTTPRequest(). TS3HTTPRequest(TS3HTTPRequest::EHTTPVerb httpVerb, const TString& host, const TString& bucket, const TString& objectKey, TS3HTTPRequest::EAuthType authType, const TString& accessKey, const TString& secretKey); Default constructor. TS3HTTPRequest(const TS3HTTPRequest& m); Copy constructor. TString ComputeSignature(TS3HTTPRequest::EHTTPVerb httpVerb) const; Returns this request's signature. TString HTTPVerbToTString(TS3HTTPRequest::EHTTPVerb httpVerb) const. TS3HTTPRequest& SetTimeStamp(); Sets this request's time stamp according to:; http://code.google.com/apis/storage/docs/reference-headers.html#date. TString MakeRequestLine(TS3HTTPRequest::EHTTPVerb httpVerb) const; Returns the first line of a HTTP request for this object. Note ",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:8322,Security,authenticat,authentication,8322,"rbkDELETE; static TS3HTTPRequest::EHTTPVerbkGET; static TS3HTTPRequest::EAuthTypekGoogle; static TS3HTTPRequest::EHTTPVerbkHEAD; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TS3HTTPRequest::EAuthTypekNoAuth; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TS3HTTPRequest::EHTTPVerbkPOST; static TS3HTTPRequest::EHTTPVerbkPUT; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TStringfAccessKeyAccess key (for authentication); TS3HTTPRequest::EAuthTypefAuthTypeAuthentication type; TStringfBucketBucket name; TStringfHostHost name; TStringfObjectKeyObject key; TStringfSecretKeySecret key (for authentication); TStringfTimeStampRequest time stamp; TS3HTTPRequest::EHTTPVerbfVerbHTTP Verb. Class Charts. Inheritance Chart:. TObject. ←; TS3HTTPRequest. Function documentation; TS3HTTPRequest(). TS3HTTPRequest(TS3HTTPRequest::EHTTPVerb httpVerb, const TString& host, const TString& bucket, const TString& objectKey, TS3HTTPRequest::EAuthType authType, const TString& accessKey, const TString& secretKey); Default constructor. TS3HTTPRequest(const TS3HTTPRequest& m); Copy constructor. TString ComputeSignature(TS3HTTPRequest::EHTTPVerb httpVerb) const; Returns this request's signature. TString HTTPVerbToTString(TS3HTTPRequest::EHTTPVerb httpVerb) const. TS3HTTPRequest& SetTimeStamp(); Sets this request's time stamp according to:; http://code.google.com/apis/storage/docs/reference-headers.html#date. TString MakeRequestLine(TS3HTTPRequest::EHTTPVerb httpVerb) const; Returns the first line of a HTTP request for this object. Note ",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:8693,Security,access,accessKey,8693,"static TS3HTTPRequest::EAuthTypekNoAuth; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TS3HTTPRequest::EHTTPVerbkPOST; static TS3HTTPRequest::EHTTPVerbkPUT; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TStringfAccessKeyAccess key (for authentication); TS3HTTPRequest::EAuthTypefAuthTypeAuthentication type; TStringfBucketBucket name; TStringfHostHost name; TStringfObjectKeyObject key; TStringfSecretKeySecret key (for authentication); TStringfTimeStampRequest time stamp; TS3HTTPRequest::EHTTPVerbfVerbHTTP Verb. Class Charts. Inheritance Chart:. TObject. ←; TS3HTTPRequest. Function documentation; TS3HTTPRequest(). TS3HTTPRequest(TS3HTTPRequest::EHTTPVerb httpVerb, const TString& host, const TString& bucket, const TString& objectKey, TS3HTTPRequest::EAuthType authType, const TString& accessKey, const TString& secretKey); Default constructor. TS3HTTPRequest(const TS3HTTPRequest& m); Copy constructor. TString ComputeSignature(TS3HTTPRequest::EHTTPVerb httpVerb) const; Returns this request's signature. TString HTTPVerbToTString(TS3HTTPRequest::EHTTPVerb httpVerb) const. TS3HTTPRequest& SetTimeStamp(); Sets this request's time stamp according to:; http://code.google.com/apis/storage/docs/reference-headers.html#date. TString MakeRequestLine(TS3HTTPRequest::EHTTPVerb httpVerb) const; Returns the first line of a HTTP request for this object. Note that since; we don't use the virtual host syntax which is supported by Amazon, we; must include the bucket name in thr resource. For example, we don't use; http://mybucket.s3.amazonaws.com/path/to/my/file but instead; http://s3.amazonaws.com/mybucket/path/to/my/file so the HTTP request; will be of the form ""GET /mybucket/path/to/my/file HTTP/1.1""; Also note that the path mu",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:9877,Security,authenticat,authentication,9877,"pVerb) const; Returns this request's signature. TString HTTPVerbToTString(TS3HTTPRequest::EHTTPVerb httpVerb) const. TS3HTTPRequest& SetTimeStamp(); Sets this request's time stamp according to:; http://code.google.com/apis/storage/docs/reference-headers.html#date. TString MakeRequestLine(TS3HTTPRequest::EHTTPVerb httpVerb) const; Returns the first line of a HTTP request for this object. Note that since; we don't use the virtual host syntax which is supported by Amazon, we; must include the bucket name in thr resource. For example, we don't use; http://mybucket.s3.amazonaws.com/path/to/my/file but instead; http://s3.amazonaws.com/mybucket/path/to/my/file so the HTTP request; will be of the form ""GET /mybucket/path/to/my/file HTTP/1.1""; Also note that the path must include the leading '/'. TString MakeHostHeader() const; Returns the 'Host' header to include in the HTTP request. TString MakeDateHeader() const; Returns the date header for this HTTP request. TString MakeAuthPrefix() const; Returns the authentication prefix. TString MakeAuthHeader(TS3HTTPRequest::EHTTPVerb httpVerb) const; Returns the authentication header for this HTTP request. TString GetRequest(TS3HTTPRequest::EHTTPVerb httpVerb, Bool_t appendCRLF = kTRUE); Returns the HTTP request ready to be sent to the server. TS3HTTPRequest& SetHost(const TString& host). TS3HTTPRequest& SetBucket(const TString& bucket). TS3HTTPRequest& SetObjectKey(const TString& objectKey). TS3HTTPRequest& SetAuthKeys(const TString& accessKey, const TString& secretKey). TS3HTTPRequest& SetAuthType(TS3HTTPRequest::EAuthType authType). TS3HTTPRequest& SetAccessKey(const TString& accessKey). TS3HTTPRequest& SetSecretKey(const TString& secretKey). virtual ~TS3HTTPRequest(); { }. EHTTPVerb GetHTTPVerb() const; { return fVerb; }. const TString& GetHost() const; { return fHost; }. const TString& GetBucket() const; { return fBucket; }. const TString& GetObjectKey() const; { return fObjectKey; }. const TString& GetTimeStamp() const; { retur",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:9978,Security,authenticat,authentication,9978,"Verb httpVerb) const. TS3HTTPRequest& SetTimeStamp(); Sets this request's time stamp according to:; http://code.google.com/apis/storage/docs/reference-headers.html#date. TString MakeRequestLine(TS3HTTPRequest::EHTTPVerb httpVerb) const; Returns the first line of a HTTP request for this object. Note that since; we don't use the virtual host syntax which is supported by Amazon, we; must include the bucket name in thr resource. For example, we don't use; http://mybucket.s3.amazonaws.com/path/to/my/file but instead; http://s3.amazonaws.com/mybucket/path/to/my/file so the HTTP request; will be of the form ""GET /mybucket/path/to/my/file HTTP/1.1""; Also note that the path must include the leading '/'. TString MakeHostHeader() const; Returns the 'Host' header to include in the HTTP request. TString MakeDateHeader() const; Returns the date header for this HTTP request. TString MakeAuthPrefix() const; Returns the authentication prefix. TString MakeAuthHeader(TS3HTTPRequest::EHTTPVerb httpVerb) const; Returns the authentication header for this HTTP request. TString GetRequest(TS3HTTPRequest::EHTTPVerb httpVerb, Bool_t appendCRLF = kTRUE); Returns the HTTP request ready to be sent to the server. TS3HTTPRequest& SetHost(const TString& host). TS3HTTPRequest& SetBucket(const TString& bucket). TS3HTTPRequest& SetObjectKey(const TString& objectKey). TS3HTTPRequest& SetAuthKeys(const TString& accessKey, const TString& secretKey). TS3HTTPRequest& SetAuthType(TS3HTTPRequest::EAuthType authType). TS3HTTPRequest& SetAccessKey(const TString& accessKey). TS3HTTPRequest& SetSecretKey(const TString& secretKey). virtual ~TS3HTTPRequest(); { }. EHTTPVerb GetHTTPVerb() const; { return fVerb; }. const TString& GetHost() const; { return fHost; }. const TString& GetBucket() const; { return fBucket; }. const TString& GetObjectKey() const; { return fObjectKey; }. const TString& GetTimeStamp() const; { return fTimeStamp; }. const TString& GetAccessKey() const; { return fAccessKey; }. const TString& Ge",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:10358,Security,access,accessKey,10358,"e the bucket name in thr resource. For example, we don't use; http://mybucket.s3.amazonaws.com/path/to/my/file but instead; http://s3.amazonaws.com/mybucket/path/to/my/file so the HTTP request; will be of the form ""GET /mybucket/path/to/my/file HTTP/1.1""; Also note that the path must include the leading '/'. TString MakeHostHeader() const; Returns the 'Host' header to include in the HTTP request. TString MakeDateHeader() const; Returns the date header for this HTTP request. TString MakeAuthPrefix() const; Returns the authentication prefix. TString MakeAuthHeader(TS3HTTPRequest::EHTTPVerb httpVerb) const; Returns the authentication header for this HTTP request. TString GetRequest(TS3HTTPRequest::EHTTPVerb httpVerb, Bool_t appendCRLF = kTRUE); Returns the HTTP request ready to be sent to the server. TS3HTTPRequest& SetHost(const TString& host). TS3HTTPRequest& SetBucket(const TString& bucket). TS3HTTPRequest& SetObjectKey(const TString& objectKey). TS3HTTPRequest& SetAuthKeys(const TString& accessKey, const TString& secretKey). TS3HTTPRequest& SetAuthType(TS3HTTPRequest::EAuthType authType). TS3HTTPRequest& SetAccessKey(const TString& accessKey). TS3HTTPRequest& SetSecretKey(const TString& secretKey). virtual ~TS3HTTPRequest(); { }. EHTTPVerb GetHTTPVerb() const; { return fVerb; }. const TString& GetHost() const; { return fHost; }. const TString& GetBucket() const; { return fBucket; }. const TString& GetObjectKey() const; { return fObjectKey; }. const TString& GetTimeStamp() const; { return fTimeStamp; }. const TString& GetAccessKey() const; { return fAccessKey; }. const TString& GetSecretKey() const; { return fSecretKey; }. TString GetAuthType() const; { return fAuthType; }. » Author: Fabio Hernandez 30/01/2013 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a m",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:10505,Security,access,accessKey,10505,"hr resource. For example, we don't use; http://mybucket.s3.amazonaws.com/path/to/my/file but instead; http://s3.amazonaws.com/mybucket/path/to/my/file so the HTTP request; will be of the form ""GET /mybucket/path/to/my/file HTTP/1.1""; Also note that the path must include the leading '/'. TString MakeHostHeader() const; Returns the 'Host' header to include in the HTTP request. TString MakeDateHeader() const; Returns the date header for this HTTP request. TString MakeAuthPrefix() const; Returns the authentication prefix. TString MakeAuthHeader(TS3HTTPRequest::EHTTPVerb httpVerb) const; Returns the authentication header for this HTTP request. TString GetRequest(TS3HTTPRequest::EHTTPVerb httpVerb, Bool_t appendCRLF = kTRUE); Returns the HTTP request ready to be sent to the server. TS3HTTPRequest& SetHost(const TString& host). TS3HTTPRequest& SetBucket(const TString& bucket). TS3HTTPRequest& SetObjectKey(const TString& objectKey). TS3HTTPRequest& SetAuthKeys(const TString& accessKey, const TString& secretKey). TS3HTTPRequest& SetAuthType(TS3HTTPRequest::EAuthType authType). TS3HTTPRequest& SetAccessKey(const TString& accessKey). TS3HTTPRequest& SetSecretKey(const TString& secretKey). virtual ~TS3HTTPRequest(); { }. EHTTPVerb GetHTTPVerb() const; { return fVerb; }. const TString& GetHost() const; { return fHost; }. const TString& GetBucket() const; { return fBucket; }. const TString& GetObjectKey() const; { return fObjectKey; }. const TString& GetTimeStamp() const; { return fTimeStamp; }. const TString& GetAccessKey() const; { return fAccessKey; }. const TString& GetSecretKey() const; { return fSecretKey; }. TString GetAuthType() const; { return fAuthType; }. » Author: Fabio Hernandez 30/01/2013 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:5825,Testability,Test,TestBit,5825,"nst TS3HTTPRequest&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TS3HTTPRequest&SetAccessKey(const TString& accessKey); TS3HTTPRequest&SetAuthKeys(const TString& accessKey, const TString& secretKey); TS3HTTPRequest&SetAuthType(TS3HTTPRequest::EAuthType authType); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); TS3HTTPRequest&SetBucket(const TString& bucket); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); TS3HTTPRequest&SetHost(const TString& host); TS3HTTPRequest&SetObjectKey(const TString& objectKey); static voidTObject::SetObjectStat(Bool_t stat); TS3HTTPRequest&SetSecretKey(const TString& secretKey); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TS3HTTPRequest(); TS3HTTPRequest(const TS3HTTPRequest& m); TS3HTTPRequest(TS3HTTPRequest::EHTTPVerb httpVerb, const TString& host, const TString& bucket, const TString& objectKey, TS3HTTPRequest::EAuthType authType, const TString& accessKey, const TString& secretKey); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:5864,Testability,Test,TestBits,5864,"nst TS3HTTPRequest&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TS3HTTPRequest&SetAccessKey(const TString& accessKey); TS3HTTPRequest&SetAuthKeys(const TString& accessKey, const TString& secretKey); TS3HTTPRequest&SetAuthType(TS3HTTPRequest::EAuthType authType); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); TS3HTTPRequest&SetBucket(const TString& bucket); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); TS3HTTPRequest&SetHost(const TString& host); TS3HTTPRequest&SetObjectKey(const TString& objectKey); static voidTObject::SetObjectStat(Bool_t stat); TS3HTTPRequest&SetSecretKey(const TString& secretKey); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TS3HTTPRequest(); TS3HTTPRequest(const TS3HTTPRequest& m); TS3HTTPRequest(TS3HTTPRequest::EHTTPVerb httpVerb, const TString& host, const TString& bucket, const TString& objectKey, TS3HTTPRequest::EAuthType authType, const TString& accessKey, const TString& secretKey); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3HTTPRequest.html:1409,Usability,Clear,Clear,1409," virtual~TS3HTTPRequest(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const;",MatchSource.WIKI,root/html602/TS3HTTPRequest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3HTTPRequest.html
https://root.cern/root/html602/TS3WebFile.html:4635,Availability,Error,Error,4635,"; virtual TKey*TFile::CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle, const size_t namesize = 0); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTFile::DrawMap(const char* keys = ""*"", Option_t* option = """")MENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTFile::FillBuffer(char*& buffer); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidTFile::Flush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); const TString&GetAccessKey() const; TArchiveFile*TFile::GetArchive() const; Long64_tTFile::Ge",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:4764,Availability,error,error,4764,"ateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle, const size_t namesize = 0); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTFile::DrawMap(const char* keys = ""*"", Option_t* option = """")MENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTFile::FillBuffer(char*& buffer); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidTFile::Flush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); const TString&GetAccessKey() const; TArchiveFile*TFile::GetArchive() const; Long64_tTFile::GetArchiveOffset() const; static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(const char* name); static TFile::EAsyncOpenStatus",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:4848,Availability,error,error,4848,"t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle, const size_t namesize = 0); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTFile::DrawMap(const char* keys = ""*"", Option_t* option = """")MENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTFile::FillBuffer(char*& buffer); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidTFile::Flush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); const TString&GetAccessKey() const; TArchiveFile*TFile::GetArchive() const; Long64_tTFile::GetArchiveOffset() const; static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(const char* name); static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(TFileOpenHandle* handle); Int_tTFile::GetBestBuffer() cons",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:12786,Availability,Recover,Recover,12786,"w[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TS3WebFile&operator=(const TS3WebFile&); virtual voidTFile::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTFile::Print(Option_t* option = """") const; virtual voidTDirectoryFile::Purge(Short_t nkeep = 1); virtual voidTDirectory::pwd() const; virtual Int_tTObject::Read(const char* name); virtual voidTDirectoryFile::ReadAll(Option_t* option = """"); virtual Bool_tTWebFile::ReadBuffer(char* buf, Int_t len); virtual Bool_tTWebFile::ReadBuffer(char* buf, Long64_t pos, Int_t len); virtual Bool_tTFile::ReadBufferAsync(Long64_t offs, Int_t len); virtual Bool_tReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); virtual voidTFile::ReadFree(); virtual Int_tTDirectoryFile::ReadKeys(Bool_t forceRead = kTRUE); virtual TProcessID*TFile::ReadProcessID(UShort_t pidf); virtual voidTFile::ReadStreamerInfo(); virtual Int_tTDirectoryFile::ReadTObject(TObject* obj, const char* keyname); virtual Int_tTFile::Recover(); virtual voidTDirectory::RecursiveRemove(TObject* obj); virtual TObject*TDirectory::Remove(TObject*); virtual Int_tTWebFile::ReOpen(Option_t* mode); virtual voidTDirectoryFile::ResetAfterMerge(TFileMergeInfo*); voidTObject::ResetBit(UInt_t f); virtual voidTFile::ResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidTWebFile::Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operat",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:25567,Availability,alive,alive,25567,"_tTWebFile::fSizefile size; TSocket*TWebFile::fSocketsocket for HTTP/1.1 (stays alive between calls); Double_tTFile::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!URL of file; TUrlTWebFile::fUrlOrgsave original url in case of temp redirection; Bool_tfUseMultiRangeIs the S3 server capable of serving multirange requests?; Int_tTFile::fVersionFile format version; Bool_tTDirectoryFile::fWritabletrue if directory is writable; Int_tTFile::fWrittenNumber of objects written so far; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory; static TList*TFile::fgAsyncOpenRequestsList of handles for pending open requests; static atomic<Long64_t>TFile::fgBytesReadNumber of bytes read by all TFile objects; static atomic<Long64_t>TFile::fgBytesWriteNumber of bytes written by all TFile objects; static TStringTFile::fgCacheFileDirDirectory where to locally stage files; static Bool_tTFile::fgCacheFileDisconnectedIndicates, we trust in the files in the cache dir without stat on the cached file; static Bool_tTFile::fgCacheFileForceIndicates, to force all READ to CACHEREAD; static atomic<Long64_t>TFile::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static TUrlTWebFile::fgProxyglobally set proxy URL; static atomic<Int_t>TFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TDirectory. ←",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:28579,Availability,down,downloading,28579,"ile(const char* url, Option_t* options = """"); Construct a TS3WebFile object. The path argument is a URL of one of the; following forms:. s3://host.example.com/bucket/path/to/my/file; s3http://host.example.com/bucket/path/to/my/file; s3https://host.example.com/bucket/path/to/my/file; as3://host.example.com/bucket/path/to/my/file. For files hosted by Google Storage, use the following forms:. gs://storage.googleapis.com/bucket/path/to/my/file; gshttp://storage.googleapis.com/bucket/path/to/my/file; gsthttps://storage.googleapis.com/bucket/path/to/my/file. The 'as3' scheme is accepted for backwards compatibility but its usage is; deprecated. The recommended way to create an instance of this class is through; TFile::Open, for instance:. TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file""); TFile* f2 = TFile::Open(""gs://storage.googleapis.com/bucket/path/to/my/file""). The specified scheme (i.e. s3, s3http, s3https, ...) determines the underlying; transport protocol to use for downloading the file contents, namely HTTP or HTTPS.; The 's3', 's3https', 'gs' and 'gshttps' schemes imply using HTTPS as the transport; protocol. The 's3http', 'as3' and 'gshttp' schemes imply using HTTP as the transport; protocol. The 'options' argument can contain 'NOPROXY' if you want to bypass; the HTTP proxy when retrieving this file's contents. As for any TWebFile-derived; object, the URL of the web proxy can be specified by setting an environmental; variable 'http_proxy'. If this variable is set, we ask that proxy to route our; requests HTTP(S) requests to the file server. In addition, you can also use the 'options' argument to provide the access key; and secret key to be used for authentication purposes for this file by using a; string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; open several files hosted by different providers in the same program/macro,; where the environemntal variables solution is not convenient (see below). If you need to specify ",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:23340,Deployability,install,installed,23340,"to this file; TFileCacheRead*TFile::fCacheRead!Pointer to the read cache (if any); TMap*TFile::fCacheReadMap!Pointer to the read cache (if any); TFileCacheWrite*TFile::fCacheWrite!Pointer to the write cache (if any); TArrayC*TFile::fClassIndex!Index of TStreamerInfo classes written to this file; Int_tTFile::fCompressCompression level and algorithm; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; Int_tTFile::fDFile descriptor; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; Long64_tTFile::fENDLast used byte in file; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TFile::fFreeFree segments linked list table; Bool_tTWebFile::fHTTP11true if server support HTTP/1.1; Bool_tTWebFile::fHasModRoottrue if server has mod_root installed; TList*TFile::fInfoCache!Cached list of the streamer infos in this file; Bool_tTFile::fInitDone!True if the file has been initialized; Bool_tTFile::fIsArchive!True if this is a pure archive file; Bool_tTFile::fIsPcmFile!True if the file is a ROOT pcm file.; Bool_tTFile::fIsRootFile!True is this is a ROOT file, raw file otherwise; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTWebFile::fMsgGetHeadcache GetHead() msg; TStringTWebFile::fMsgReadBuffercache ReadBuffer() msg; TStringTWebFile::fMsgReadBuffer10cache ReadBuffer10() msg; Bool_tTFile::fMustFlush!True if the file buffers must be flushed; Int_tTFile::fNProcessIDsNumber of TProcessID written to this file; TStringTNamed::fNameobject identifier; Int_tTFile::fNbytesFreeNumber of bytes for free segments structure; Int_tTFile::fNbytesInfoNumber of bytes for StreamerInfo record; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:449,Integrability,protocol,protocol,449,". TS3WebFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3WebFile. class TS3WebFile: public TWebFile. TS3WebFile. A TS3WebFile is a TWebFile which retrieves the file contents from a; web server implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:630,Integrability,protocol,protocol,630,". TS3WebFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3WebFile. class TS3WebFile: public TWebFile. TS3WebFile. A TS3WebFile is a TWebFile which retrieves the file contents from a; web server implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:647,Integrability,protocol,protocol,647,". TS3WebFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3WebFile. class TS3WebFile: public TWebFile. TS3WebFile. A TS3WebFile is a TWebFile which retrieves the file contents from a; web server implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:1881,Integrability,protocol,protocol,1881," the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html. ""Amazon Simple Storage Service REST API Reference""; http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest.html. Function Members (Methods); public:. virtual~TS3WebFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual ",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:28559,Integrability,protocol,protocol,28559,"ile(const char* url, Option_t* options = """"); Construct a TS3WebFile object. The path argument is a URL of one of the; following forms:. s3://host.example.com/bucket/path/to/my/file; s3http://host.example.com/bucket/path/to/my/file; s3https://host.example.com/bucket/path/to/my/file; as3://host.example.com/bucket/path/to/my/file. For files hosted by Google Storage, use the following forms:. gs://storage.googleapis.com/bucket/path/to/my/file; gshttp://storage.googleapis.com/bucket/path/to/my/file; gsthttps://storage.googleapis.com/bucket/path/to/my/file. The 'as3' scheme is accepted for backwards compatibility but its usage is; deprecated. The recommended way to create an instance of this class is through; TFile::Open, for instance:. TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file""); TFile* f2 = TFile::Open(""gs://storage.googleapis.com/bucket/path/to/my/file""). The specified scheme (i.e. s3, s3http, s3https, ...) determines the underlying; transport protocol to use for downloading the file contents, namely HTTP or HTTPS.; The 's3', 's3https', 'gs' and 'gshttps' schemes imply using HTTPS as the transport; protocol. The 's3http', 'as3' and 'gshttp' schemes imply using HTTP as the transport; protocol. The 'options' argument can contain 'NOPROXY' if you want to bypass; the HTTP proxy when retrieving this file's contents. As for any TWebFile-derived; object, the URL of the web proxy can be specified by setting an environmental; variable 'http_proxy'. If this variable is set, we ask that proxy to route our; requests HTTP(S) requests to the file server. In addition, you can also use the 'options' argument to provide the access key; and secret key to be used for authentication purposes for this file by using a; string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; open several files hosted by different providers in the same program/macro,; where the environemntal variables solution is not convenient (see below). If you need to specify ",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:28717,Integrability,protocol,protocol,28717," of one of the; following forms:. s3://host.example.com/bucket/path/to/my/file; s3http://host.example.com/bucket/path/to/my/file; s3https://host.example.com/bucket/path/to/my/file; as3://host.example.com/bucket/path/to/my/file. For files hosted by Google Storage, use the following forms:. gs://storage.googleapis.com/bucket/path/to/my/file; gshttp://storage.googleapis.com/bucket/path/to/my/file; gsthttps://storage.googleapis.com/bucket/path/to/my/file. The 'as3' scheme is accepted for backwards compatibility but its usage is; deprecated. The recommended way to create an instance of this class is through; TFile::Open, for instance:. TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file""); TFile* f2 = TFile::Open(""gs://storage.googleapis.com/bucket/path/to/my/file""). The specified scheme (i.e. s3, s3http, s3https, ...) determines the underlying; transport protocol to use for downloading the file contents, namely HTTP or HTTPS.; The 's3', 's3https', 'gs' and 'gshttps' schemes imply using HTTPS as the transport; protocol. The 's3http', 'as3' and 'gshttp' schemes imply using HTTP as the transport; protocol. The 'options' argument can contain 'NOPROXY' if you want to bypass; the HTTP proxy when retrieving this file's contents. As for any TWebFile-derived; object, the URL of the web proxy can be specified by setting an environmental; variable 'http_proxy'. If this variable is set, we ask that proxy to route our; requests HTTP(S) requests to the file server. In addition, you can also use the 'options' argument to provide the access key; and secret key to be used for authentication purposes for this file by using a; string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; open several files hosted by different providers in the same program/macro,; where the environemntal variables solution is not convenient (see below). If you need to specify both NOPROXY and AUTH separate them by ' '; (blank), for instance:; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:28803,Integrability,protocol,protocol,28803,"st.example.com/bucket/path/to/my/file; s3https://host.example.com/bucket/path/to/my/file; as3://host.example.com/bucket/path/to/my/file. For files hosted by Google Storage, use the following forms:. gs://storage.googleapis.com/bucket/path/to/my/file; gshttp://storage.googleapis.com/bucket/path/to/my/file; gsthttps://storage.googleapis.com/bucket/path/to/my/file. The 'as3' scheme is accepted for backwards compatibility but its usage is; deprecated. The recommended way to create an instance of this class is through; TFile::Open, for instance:. TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file""); TFile* f2 = TFile::Open(""gs://storage.googleapis.com/bucket/path/to/my/file""). The specified scheme (i.e. s3, s3http, s3https, ...) determines the underlying; transport protocol to use for downloading the file contents, namely HTTP or HTTPS.; The 's3', 's3https', 'gs' and 'gshttps' schemes imply using HTTPS as the transport; protocol. The 's3http', 'as3' and 'gshttp' schemes imply using HTTP as the transport; protocol. The 'options' argument can contain 'NOPROXY' if you want to bypass; the HTTP proxy when retrieving this file's contents. As for any TWebFile-derived; object, the URL of the web proxy can be specified by setting an environmental; variable 'http_proxy'. If this variable is set, we ask that proxy to route our; requests HTTP(S) requests to the file server. In addition, you can also use the 'options' argument to provide the access key; and secret key to be used for authentication purposes for this file by using a; string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; open several files hosted by different providers in the same program/macro,; where the environemntal variables solution is not convenient (see below). If you need to specify both NOPROXY and AUTH separate them by ' '; (blank), for instance:; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"". Examples:; TFile* f1 = TFile::Open(""s3://host.e",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:29111,Integrability,rout,route,29111,"t/path/to/my/file. The 'as3' scheme is accepted for backwards compatibility but its usage is; deprecated. The recommended way to create an instance of this class is through; TFile::Open, for instance:. TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file""); TFile* f2 = TFile::Open(""gs://storage.googleapis.com/bucket/path/to/my/file""). The specified scheme (i.e. s3, s3http, s3https, ...) determines the underlying; transport protocol to use for downloading the file contents, namely HTTP or HTTPS.; The 's3', 's3https', 'gs' and 'gshttps' schemes imply using HTTPS as the transport; protocol. The 's3http', 'as3' and 'gshttp' schemes imply using HTTP as the transport; protocol. The 'options' argument can contain 'NOPROXY' if you want to bypass; the HTTP proxy when retrieving this file's contents. As for any TWebFile-derived; object, the URL of the web proxy can be specified by setting an environmental; variable 'http_proxy'. If this variable is set, we ask that proxy to route our; requests HTTP(S) requests to the file server. In addition, you can also use the 'options' argument to provide the access key; and secret key to be used for authentication purposes for this file by using a; string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; open several files hosted by different providers in the same program/macro,; where the environemntal variables solution is not convenient (see below). If you need to specify both NOPROXY and AUTH separate them by ' '; (blank), for instance:; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"". Examples:; TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:31666,Integrability,protocol,protocol,31666,"e server. This; is useful when the file is set an access control that allows for; any unidentified user to read the file. Bool_t ParseOptions(Option_t* options, TString& accessKey, TString& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" for not using the HTTP proxy for; accessing this file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+"". Int_t GetHead(); Overwrites TWebFile::GetHead() for retrieving the HTTP headers of this; file. Uses TS3HTTPRequest to generate an HTTP HEAD request which includes; the authorization header expected by the S3 server. void SetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); Overwrites TWebFile::SetMsgReadBuffer10() for setting the HTTP GET; request compliant to the authentication mechanism used by the S3; protocol. The GET request must contain an ""Authorization"" header with; the signature of the request, generated using the user's secret access; key. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf). void ProcessHttpHeader(const TString& headerLine); This method is called by the super-class TWebFile when a HTTP header; for this file is retrieved. We scan the 'Server' header to detect the; type of S3 server this file is hosted on and to determine if it is; known to support multi-range HTTP GET requests. Some S3 servers (for; instance Amazon's) do not support that feature and when they; receive a multi-range request they sent back the whole file contents.; For this class, if the server do not support multirange requests; we issue multiple single-range requests instead. Bool_t GetCredentialsFromEnv(const char* accessKeyEnv, const char* secretKeyEnv, TString& outAcce",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:116,Modifiability,inherit,inheritance,116,". TS3WebFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3WebFile. class TS3WebFile: public TWebFile. TS3WebFile. A TS3WebFile is a TWebFile which retrieves the file contents from a; web server implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:1372,Modifiability,variab,variables,1372,"hich retrieves the file contents from a; web server implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html. ""Amazon Simple Storage Service REST API Reference""; http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest.html. Function Members (Methods); public:. virtual~TS3WebFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:1594,Modifiability,flexible,flexible,1594,"the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html. ""Amazon Simple Storage Service REST API Reference""; http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest.html. Function Members (Methods); public:. virtual~TS3WebFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:9897,Modifiability,Inherit,InheritsFrom,9897,"TFile::GetRelOffset() const; const TString&GetSecretKey() const; virtual Long64_tTDirectoryFile::GetSeekDir() const; virtual Long64_tTFile::GetSeekFree() const; virtual Long64_tTFile::GetSeekInfo() const; virtual Long64_tTDirectoryFile::GetSeekKeys() const; virtual Long64_tTDirectoryFile::GetSeekParent() const; virtual Long64_tTWebFile::GetSize() const; const TList*TFile::GetStreamerInfoCache(); virtual TList*TFile::GetStreamerInfoList(); virtual const char*TNamed::GetTitle() const; static TFile::EFileTypeTFile::GetType(const char* name, Option_t* option = """", TString* prefix = 0); virtual UInt_tTObject::GetUniqueID() const; const TUrl&GetUrl() const; TUUIDTDirectory::GetUUID() const; Int_tTFile::GetVersion() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; static voidTFile::IncrementFileCounter(); virtual voidTFile::IncrementProcessIDs(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTFile::IsArchive() const; Bool_tTFile::IsBinary() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTDirectory::IsFolder() const; virtual Bool_tTDirectoryFile::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTWebFile::IsOpen() const; Bool_tTFile::IsRaw() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDirectoryFile::IsWritable() const; Bool_tTObject::IsZombie() const; virtual voidTFile::ls(Option_t* option = """") const; virtual voidTFile::MakeFree(Long64_t first, Long64_t last); virtual voidTFile::MakeProject(const char* dirname, const char* classes = ""*"", Option_t* option = ""new"")MENU ; virtual voidTFile::Map()MENU ; virtual Bool_tTFile::Matches(const char* name); voidTObject::MayNotUse(const char* method) cons",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:9963,Modifiability,Inherit,InheritsFrom,9963,"irtual Long64_tTDirectoryFile::GetSeekDir() const; virtual Long64_tTFile::GetSeekFree() const; virtual Long64_tTFile::GetSeekInfo() const; virtual Long64_tTDirectoryFile::GetSeekKeys() const; virtual Long64_tTDirectoryFile::GetSeekParent() const; virtual Long64_tTWebFile::GetSize() const; const TList*TFile::GetStreamerInfoCache(); virtual TList*TFile::GetStreamerInfoList(); virtual const char*TNamed::GetTitle() const; static TFile::EFileTypeTFile::GetType(const char* name, Option_t* option = """", TString* prefix = 0); virtual UInt_tTObject::GetUniqueID() const; const TUrl&GetUrl() const; TUUIDTDirectory::GetUUID() const; Int_tTFile::GetVersion() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; static voidTFile::IncrementFileCounter(); virtual voidTFile::IncrementProcessIDs(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTFile::IsArchive() const; Bool_tTFile::IsBinary() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTDirectory::IsFolder() const; virtual Bool_tTDirectoryFile::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTWebFile::IsOpen() const; Bool_tTFile::IsRaw() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDirectoryFile::IsWritable() const; Bool_tTObject::IsZombie() const; virtual voidTFile::ls(Option_t* option = """") const; virtual voidTFile::MakeFree(Long64_t first, Long64_t last); virtual voidTFile::MakeProject(const char* dirname, const char* classes = ""*"", Option_t* option = ""new"")MENU ; virtual voidTFile::Map()MENU ; virtual Bool_tTFile::Matches(const char* name); voidTObject::MayNotUse(const char* method) const; virtual TDirectory*TDirectoryFile::mkdir(const char* name, cons",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:27432,Modifiability,Inherit,Inheritance,27432,"ad by all TFile objects; static atomic<Long64_t>TFile::fgBytesWriteNumber of bytes written by all TFile objects; static TStringTFile::fgCacheFileDirDirectory where to locally stage files; static Bool_tTFile::fgCacheFileDisconnectedIndicates, we trust in the files in the cache dir without stat on the cached file; static Bool_tTFile::fgCacheFileForceIndicates, to force all READ to CACHEREAD; static atomic<Long64_t>TFile::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static TUrlTWebFile::fgProxyglobally set proxy URL; static atomic<Int_t>TFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TDirectory. ←; TDirectoryFile. ←; TFile. ←; TWebFile. ←; TS3WebFile. Function documentation; TS3WebFile(const char* url, Option_t* options = """"); Construct a TS3WebFile object. The path argument is a URL of one of the; following forms:. s3://host.example.com/bucket/path/to/my/file; s3http://host.example.com/bucket/path/to/my/file; s3https://host.example.com/bucket/path/to/my/file; as3://host.example.com/bucket/path/to/my/file. For files hosted by Google Storage, use the following forms:. gs://storage.googleapis.com/bucket/path/to/my/file; gshttp://storage.googleapis.com/bucket/path/to/my/file; gsthttps://storage.googleapis.com/bucket/path/to/my/file. The 'as3' scheme is accepted for backwards compatibility but its usage is; deprecated. The recommended way to create an instance of this class is through; TFile::Open, for instance:. TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file""); TFile* f2 = TFile::Open(""gs://storage.googleapis.co",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:29042,Modifiability,variab,variable,29042,"cket/path/to/my/file; gshttp://storage.googleapis.com/bucket/path/to/my/file; gsthttps://storage.googleapis.com/bucket/path/to/my/file. The 'as3' scheme is accepted for backwards compatibility but its usage is; deprecated. The recommended way to create an instance of this class is through; TFile::Open, for instance:. TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file""); TFile* f2 = TFile::Open(""gs://storage.googleapis.com/bucket/path/to/my/file""). The specified scheme (i.e. s3, s3http, s3https, ...) determines the underlying; transport protocol to use for downloading the file contents, namely HTTP or HTTPS.; The 's3', 's3https', 'gs' and 'gshttps' schemes imply using HTTPS as the transport; protocol. The 's3http', 'as3' and 'gshttp' schemes imply using HTTP as the transport; protocol. The 'options' argument can contain 'NOPROXY' if you want to bypass; the HTTP proxy when retrieving this file's contents. As for any TWebFile-derived; object, the URL of the web proxy can be specified by setting an environmental; variable 'http_proxy'. If this variable is set, we ask that proxy to route our; requests HTTP(S) requests to the file server. In addition, you can also use the 'options' argument to provide the access key; and secret key to be used for authentication purposes for this file by using a; string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; open several files hosted by different providers in the same program/macro,; where the environemntal variables solution is not convenient (see below). If you need to specify both NOPROXY and AUTH separate them by ' '; (blank), for instance:; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"". Examples:; TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1eu",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:29073,Modifiability,variab,variable,29073,"t/path/to/my/file. The 'as3' scheme is accepted for backwards compatibility but its usage is; deprecated. The recommended way to create an instance of this class is through; TFile::Open, for instance:. TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file""); TFile* f2 = TFile::Open(""gs://storage.googleapis.com/bucket/path/to/my/file""). The specified scheme (i.e. s3, s3http, s3https, ...) determines the underlying; transport protocol to use for downloading the file contents, namely HTTP or HTTPS.; The 's3', 's3https', 'gs' and 'gshttps' schemes imply using HTTPS as the transport; protocol. The 's3http', 'as3' and 'gshttp' schemes imply using HTTP as the transport; protocol. The 'options' argument can contain 'NOPROXY' if you want to bypass; the HTTP proxy when retrieving this file's contents. As for any TWebFile-derived; object, the URL of the web proxy can be specified by setting an environmental; variable 'http_proxy'. If this variable is set, we ask that proxy to route our; requests HTTP(S) requests to the file server. In addition, you can also use the 'options' argument to provide the access key; and secret key to be used for authentication purposes for this file by using a; string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; open several files hosted by different providers in the same program/macro,; where the environemntal variables solution is not convenient (see below). If you need to specify both NOPROXY and AUTH separate them by ' '; (blank), for instance:; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"". Examples:; TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:29503,Modifiability,variab,variables,29503,"""). The specified scheme (i.e. s3, s3http, s3https, ...) determines the underlying; transport protocol to use for downloading the file contents, namely HTTP or HTTPS.; The 's3', 's3https', 'gs' and 'gshttps' schemes imply using HTTPS as the transport; protocol. The 's3http', 'as3' and 'gshttp' schemes imply using HTTP as the transport; protocol. The 'options' argument can contain 'NOPROXY' if you want to bypass; the HTTP proxy when retrieving this file's contents. As for any TWebFile-derived; object, the URL of the web proxy can be specified by setting an environmental; variable 'http_proxy'. If this variable is set, we ask that proxy to route our; requests HTTP(S) requests to the file server. In addition, you can also use the 'options' argument to provide the access key; and secret key to be used for authentication purposes for this file by using a; string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; open several files hosted by different providers in the same program/macro,; where the environemntal variables solution is not convenient (see below). If you need to specify both NOPROXY and AUTH separate them by ' '; (blank), for instance:; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"". Examples:; TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""...."") the values of the environmental variables; S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; the access key id and the secret access key, respectively. You have; been provided with these credentials by your S3 service provider. If neither the AUTH information is provided in the 'options' argument; nor the environmental varia",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:30155,Modifiability,variab,variables,30155,"tions' argument to provide the access key; and secret key to be used for authentication purposes for this file by using a; string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; open several files hosted by different providers in the same program/macro,; where the environemntal variables solution is not convenient (see below). If you need to specify both NOPROXY and AUTH separate them by ' '; (blank), for instance:; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"". Examples:; TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""...."") the values of the environmental variables; S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; the access key id and the secret access key, respectively. You have; been provided with these credentials by your S3 service provider. If neither the AUTH information is provided in the 'options' argument; nor the environmental variables are set, we try to open the file; without providing any authentication information to the server. This; is useful when the file is set an access control that allows for; any unidentified user to read the file. Bool_t ParseOptions(Option_t* options, TString& accessKey, TString& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" for not using the HTTP proxy for; accessing this file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8ww",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:30460,Modifiability,variab,variables,30460,"gram/macro,; where the environemntal variables solution is not convenient (see below). If you need to specify both NOPROXY and AUTH separate them by ' '; (blank), for instance:; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"". Examples:; TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""...."") the values of the environmental variables; S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; the access key id and the secret access key, respectively. You have; been provided with these credentials by your S3 service provider. If neither the AUTH information is provided in the 'options' argument; nor the environmental variables are set, we try to open the file; without providing any authentication information to the server. This; is useful when the file is set an access control that allows for; any unidentified user to read the file. Bool_t ParseOptions(Option_t* options, TString& accessKey, TString& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" for not using the HTTP proxy for; accessing this file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+"". Int_t GetHead(); Overwrites TWebFile::GetHead() for retrieving the HTTP headers of this; file. Uses TS3HTTPRequest to generate an HTTP HEAD request which includes; the authorization header expected by the S3 server. void SetMsgReadBuffer10(",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:32645,Modifiability,variab,variables,32645,"10() for setting the HTTP GET; request compliant to the authentication mechanism used by the S3; protocol. The GET request must contain an ""Authorization"" header with; the signature of the request, generated using the user's secret access; key. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf). void ProcessHttpHeader(const TString& headerLine); This method is called by the super-class TWebFile when a HTTP header; for this file is retrieved. We scan the 'Server' header to detect the; type of S3 server this file is hosted on and to determine if it is; known to support multi-range HTTP GET requests. Some S3 servers (for; instance Amazon's) do not support that feature and when they; receive a multi-range request they sent back the whole file contents.; For this class, if the server do not support multirange requests; we issue multiple single-range requests instead. Bool_t GetCredentialsFromEnv(const char* accessKeyEnv, const char* secretKeyEnv, TString& outAccessKey, TString& outSecretKey); Sets the access and secret keys from the environmental variables, if; they are both set. TS3WebFile(). void SetAccessKey(const TString& accessKey); Modifiers of data members (to be used mainly by subclasses). { fS3Request.SetAccessKey(accessKey); }. void SetSecretKey(const TString& secretKey); { fS3Request.SetSecretKey(secretKey); }. TS3WebFile(const char* url, Option_t* options = """"); Constructors & Destructor. virtual ~TS3WebFile(); {}. const TString& GetAccessKey() const; Selectors. { return fS3Request.GetAccessKey(); }. const TString& GetSecretKey() const; { return fS3Request.GetSecretKey(); }. const TString& GetBucket() const; { return fS3Request.GetBucket(); }. const TString& GetObjectKey() const; { return fS3Request.GetObjectKey(); }. const TUrl& GetUrl() const; { return fUrl; }. » Author: Fabio Hernandez 22/01/2013 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TS3WebFile.h$ » Last generated: 2015-06-30 15:29; This",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:13767,Performance,cache,cacheDir,13767,"al Int_tTFile::Recover(); virtual voidTDirectory::RecursiveRemove(TObject* obj); virtual TObject*TDirectory::Remove(TObject*); virtual Int_tTWebFile::ReOpen(Option_t* mode); virtual voidTDirectoryFile::ResetAfterMerge(TFileMergeInfo*); voidTObject::ResetBit(UInt_t f); virtual voidTFile::ResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidTWebFile::Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); virtual voidTFile::SetCacheRead(TFileCacheRead* cache, TObject* tree = 0, TFile::ECacheAction action = kDisconnect); virtual voidTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionAlgorithm(Int_t algorithm = 0); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTFile::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTFile::SetEND(Long64_t last); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetO",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:13894,Performance,cache,cache,13894," virtual Int_tTWebFile::ReOpen(Option_t* mode); virtual voidTDirectoryFile::ResetAfterMerge(TFileMergeInfo*); voidTObject::ResetBit(UInt_t f); virtual voidTFile::ResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidTWebFile::Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); virtual voidTFile::SetCacheRead(TFileCacheRead* cache, TObject* tree = 0, TFile::ECacheAction action = kDisconnect); virtual voidTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionAlgorithm(Int_t algorithm = 0); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTFile::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTFile::SetEND(Long64_t last); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFile::SetOffset(Long64_t offset, TFile::ERelativeTo pos = kBeg); static Bool_tTFile::Set",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:14013,Performance,cache,cache,14013,"ct::ResetBit(UInt_t f); virtual voidTFile::ResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidTWebFile::Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); virtual voidTFile::SetCacheRead(TFileCacheRead* cache, TObject* tree = 0, TFile::ECacheAction action = kDisconnect); virtual voidTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionAlgorithm(Int_t algorithm = 0); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTFile::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTFile::SetEND(Long64_t last); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFile::SetOffset(Long64_t offset, TFile::ERelativeTo pos = kBeg); static Bool_tTFile::SetOnlyStaged(Bool_t onlystaged); static UInt_tTFile::SetOpenTimeout(UInt_t timeout); virtual voidTFile::SetOption(Option_",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:22511,Performance,cache,cache,22511,tBigFile; static TFile::EFileTypeTFile::kWeb; static TObject::(anonymous)TObject::kWriteDelete; static TFile::EStatusBitsTFile::kWriteError; static TObject::(anonymous)TObject::kZombie. protected:. TArchiveFile*TFile::fArchive!Archive file from which we read this file; Long64_tTFile::fArchiveOffset!Offset at which file starts in archive; TFileOpenHandle*TFile::fAsyncHandle!For proper automatic cleanup; TFile::EAsyncOpenStatusTFile::fAsyncOpenStatus!Status of an asynchronous open request; Long64_tTFile::fBEGINFirst used byte in file; TStringTWebFile::fBasicUrlbasic url without authentication and options; TStringTWebFile::fBasicUrlOrgsave original url in case of temp redirection; Int_tTDirectoryFile::fBufferSizeDefault buffer size to create new TKeys; Long64_tTFile::fBytesReadNumber of bytes read from this file; Long64_tTFile::fBytesReadExtraNumber of extra bytes (overhead) read by the readahead buffer; Long64_tTFile::fBytesWriteNumber of bytes written to this file; TFileCacheRead*TFile::fCacheRead!Pointer to the read cache (if any); TMap*TFile::fCacheReadMap!Pointer to the read cache (if any); TFileCacheWrite*TFile::fCacheWrite!Pointer to the write cache (if any); TArrayC*TFile::fClassIndex!Index of TStreamerInfo classes written to this file; Int_tTFile::fCompressCompression level and algorithm; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; Int_tTFile::fDFile descriptor; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; Long64_tTFile::fENDLast used byte in file; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TFile::fFreeFree segments linked list table; Bool_tTWebFile::fHTTP11true if server support HTTP/1.1; Bool_tTWebFile::fHasModRoottrue if server has mod_root installed; TList*TFile::fInfoCache!Cached list of the streamer infos in this file; Bool_tTFile::fInitDone!True if the file has been initial,MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:22573,Performance,cache,cache,22573,tBigFile; static TFile::EFileTypeTFile::kWeb; static TObject::(anonymous)TObject::kWriteDelete; static TFile::EStatusBitsTFile::kWriteError; static TObject::(anonymous)TObject::kZombie. protected:. TArchiveFile*TFile::fArchive!Archive file from which we read this file; Long64_tTFile::fArchiveOffset!Offset at which file starts in archive; TFileOpenHandle*TFile::fAsyncHandle!For proper automatic cleanup; TFile::EAsyncOpenStatusTFile::fAsyncOpenStatus!Status of an asynchronous open request; Long64_tTFile::fBEGINFirst used byte in file; TStringTWebFile::fBasicUrlbasic url without authentication and options; TStringTWebFile::fBasicUrlOrgsave original url in case of temp redirection; Int_tTDirectoryFile::fBufferSizeDefault buffer size to create new TKeys; Long64_tTFile::fBytesReadNumber of bytes read from this file; Long64_tTFile::fBytesReadExtraNumber of extra bytes (overhead) read by the readahead buffer; Long64_tTFile::fBytesWriteNumber of bytes written to this file; TFileCacheRead*TFile::fCacheRead!Pointer to the read cache (if any); TMap*TFile::fCacheReadMap!Pointer to the read cache (if any); TFileCacheWrite*TFile::fCacheWrite!Pointer to the write cache (if any); TArrayC*TFile::fClassIndex!Index of TStreamerInfo classes written to this file; Int_tTFile::fCompressCompression level and algorithm; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; Int_tTFile::fDFile descriptor; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; Long64_tTFile::fENDLast used byte in file; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TFile::fFreeFree segments linked list table; Bool_tTWebFile::fHTTP11true if server support HTTP/1.1; Bool_tTWebFile::fHasModRoottrue if server has mod_root installed; TList*TFile::fInfoCache!Cached list of the streamer infos in this file; Bool_tTFile::fInitDone!True if the file has been initial,MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:22645,Performance,cache,cache,22645,tBigFile; static TFile::EFileTypeTFile::kWeb; static TObject::(anonymous)TObject::kWriteDelete; static TFile::EStatusBitsTFile::kWriteError; static TObject::(anonymous)TObject::kZombie. protected:. TArchiveFile*TFile::fArchive!Archive file from which we read this file; Long64_tTFile::fArchiveOffset!Offset at which file starts in archive; TFileOpenHandle*TFile::fAsyncHandle!For proper automatic cleanup; TFile::EAsyncOpenStatusTFile::fAsyncOpenStatus!Status of an asynchronous open request; Long64_tTFile::fBEGINFirst used byte in file; TStringTWebFile::fBasicUrlbasic url without authentication and options; TStringTWebFile::fBasicUrlOrgsave original url in case of temp redirection; Int_tTDirectoryFile::fBufferSizeDefault buffer size to create new TKeys; Long64_tTFile::fBytesReadNumber of bytes read from this file; Long64_tTFile::fBytesReadExtraNumber of extra bytes (overhead) read by the readahead buffer; Long64_tTFile::fBytesWriteNumber of bytes written to this file; TFileCacheRead*TFile::fCacheRead!Pointer to the read cache (if any); TMap*TFile::fCacheReadMap!Pointer to the read cache (if any); TFileCacheWrite*TFile::fCacheWrite!Pointer to the write cache (if any); TArrayC*TFile::fClassIndex!Index of TStreamerInfo classes written to this file; Int_tTFile::fCompressCompression level and algorithm; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; Int_tTFile::fDFile descriptor; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; Long64_tTFile::fENDLast used byte in file; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TFile::fFreeFree segments linked list table; Bool_tTWebFile::fHTTP11true if server support HTTP/1.1; Bool_tTWebFile::fHasModRoottrue if server has mod_root installed; TList*TFile::fInfoCache!Cached list of the streamer infos in this file; Bool_tTFile::fInitDone!True if the file has been initial,MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:23375,Performance,Cache,Cached,23375,"to this file; TFileCacheRead*TFile::fCacheRead!Pointer to the read cache (if any); TMap*TFile::fCacheReadMap!Pointer to the read cache (if any); TFileCacheWrite*TFile::fCacheWrite!Pointer to the write cache (if any); TArrayC*TFile::fClassIndex!Index of TStreamerInfo classes written to this file; Int_tTFile::fCompressCompression level and algorithm; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; Int_tTFile::fDFile descriptor; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; Long64_tTFile::fENDLast used byte in file; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TFile::fFreeFree segments linked list table; Bool_tTWebFile::fHTTP11true if server support HTTP/1.1; Bool_tTWebFile::fHasModRoottrue if server has mod_root installed; TList*TFile::fInfoCache!Cached list of the streamer infos in this file; Bool_tTFile::fInitDone!True if the file has been initialized; Bool_tTFile::fIsArchive!True if this is a pure archive file; Bool_tTFile::fIsPcmFile!True if the file is a ROOT pcm file.; Bool_tTFile::fIsRootFile!True is this is a ROOT file, raw file otherwise; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTWebFile::fMsgGetHeadcache GetHead() msg; TStringTWebFile::fMsgReadBuffercache ReadBuffer() msg; TStringTWebFile::fMsgReadBuffer10cache ReadBuffer10() msg; Bool_tTFile::fMustFlush!True if the file buffers must be flushed; Int_tTFile::fNProcessIDsNumber of TProcessID written to this file; TStringTNamed::fNameobject identifier; Int_tTFile::fNbytesFreeNumber of bytes for free segments structure; Int_tTFile::fNbytesInfoNumber of bytes for StreamerInfo record; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:24707,Performance,cache,cache,24707,"file is a ROOT pcm file.; Bool_tTFile::fIsRootFile!True is this is a ROOT file, raw file otherwise; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTWebFile::fMsgGetHeadcache GetHead() msg; TStringTWebFile::fMsgReadBuffercache ReadBuffer() msg; TStringTWebFile::fMsgReadBuffer10cache ReadBuffer10() msg; Bool_tTFile::fMustFlush!True if the file buffers must be flushed; Int_tTFile::fNProcessIDsNumber of TProcessID written to this file; TStringTNamed::fNameobject identifier; Int_tTFile::fNbytesFreeNumber of bytes for free segments structure; Int_tTFile::fNbytesInfoNumber of bytes for StreamerInfo record; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; Bool_tTFile::fNoAnchorInName!True if we don't want to force the anchor to be appended to the file name; Bool_tTWebFile::fNoProxydon't use proxy; Long64_tTFile::fOffset!Seek offset cache; TList*TFile::fOpenPhases!Time info about open phases; TStringTFile::fOptionFile options; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; TObjArray*TFile::fProcessIDs!Array of pointers to TProcessIDs; TUrlTWebFile::fProxyproxy URL; Int_tTFile::fReadCallsNumber of read calls ( not counting the cache calls ); TStringTFile::fRealNameEffective real file name (not original url); TS3HTTPRequestfS3RequestS3 HTTP request; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTFile::fSeekFreeLocation on disk of free segments structure; Long64_tTFile::fSeekInfoLocation on disk of StreamerInfo record; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; Long64_tTWebFile::fSizefile size; TSocket*TWebFile::fSocketsocket for HTTP/1.1 (stays alive between c",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:25021,Performance,cache,cache,25021,"file is a ROOT pcm file.; Bool_tTFile::fIsRootFile!True is this is a ROOT file, raw file otherwise; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTWebFile::fMsgGetHeadcache GetHead() msg; TStringTWebFile::fMsgReadBuffercache ReadBuffer() msg; TStringTWebFile::fMsgReadBuffer10cache ReadBuffer10() msg; Bool_tTFile::fMustFlush!True if the file buffers must be flushed; Int_tTFile::fNProcessIDsNumber of TProcessID written to this file; TStringTNamed::fNameobject identifier; Int_tTFile::fNbytesFreeNumber of bytes for free segments structure; Int_tTFile::fNbytesInfoNumber of bytes for StreamerInfo record; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; Bool_tTFile::fNoAnchorInName!True if we don't want to force the anchor to be appended to the file name; Bool_tTWebFile::fNoProxydon't use proxy; Long64_tTFile::fOffset!Seek offset cache; TList*TFile::fOpenPhases!Time info about open phases; TStringTFile::fOptionFile options; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; TObjArray*TFile::fProcessIDs!Array of pointers to TProcessIDs; TUrlTWebFile::fProxyproxy URL; Int_tTFile::fReadCallsNumber of read calls ( not counting the cache calls ); TStringTFile::fRealNameEffective real file name (not original url); TS3HTTPRequestfS3RequestS3 HTTP request; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTFile::fSeekFreeLocation on disk of free segments structure; Long64_tTFile::fSeekInfoLocation on disk of StreamerInfo record; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; Long64_tTWebFile::fSizefile size; TSocket*TWebFile::fSocketsocket for HTTP/1.1 (stays alive between c",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:26712,Performance,cache,cache,26712,"_tTWebFile::fSizefile size; TSocket*TWebFile::fSocketsocket for HTTP/1.1 (stays alive between calls); Double_tTFile::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!URL of file; TUrlTWebFile::fUrlOrgsave original url in case of temp redirection; Bool_tfUseMultiRangeIs the S3 server capable of serving multirange requests?; Int_tTFile::fVersionFile format version; Bool_tTDirectoryFile::fWritabletrue if directory is writable; Int_tTFile::fWrittenNumber of objects written so far; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory; static TList*TFile::fgAsyncOpenRequestsList of handles for pending open requests; static atomic<Long64_t>TFile::fgBytesReadNumber of bytes read by all TFile objects; static atomic<Long64_t>TFile::fgBytesWriteNumber of bytes written by all TFile objects; static TStringTFile::fgCacheFileDirDirectory where to locally stage files; static Bool_tTFile::fgCacheFileDisconnectedIndicates, we trust in the files in the cache dir without stat on the cached file; static Bool_tTFile::fgCacheFileForceIndicates, to force all READ to CACHEREAD; static atomic<Long64_t>TFile::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static TUrlTWebFile::fgProxyglobally set proxy URL; static atomic<Int_t>TFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TDirectory. ←",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:26742,Performance,cache,cached,26742,"_tTWebFile::fSizefile size; TSocket*TWebFile::fSocketsocket for HTTP/1.1 (stays alive between calls); Double_tTFile::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!URL of file; TUrlTWebFile::fUrlOrgsave original url in case of temp redirection; Bool_tfUseMultiRangeIs the S3 server capable of serving multirange requests?; Int_tTFile::fVersionFile format version; Bool_tTDirectoryFile::fWritabletrue if directory is writable; Int_tTFile::fWrittenNumber of objects written so far; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory; static TList*TFile::fgAsyncOpenRequestsList of handles for pending open requests; static atomic<Long64_t>TFile::fgBytesReadNumber of bytes read by all TFile objects; static atomic<Long64_t>TFile::fgBytesWriteNumber of bytes written by all TFile objects; static TStringTFile::fgCacheFileDirDirectory where to locally stage files; static Bool_tTFile::fgCacheFileDisconnectedIndicates, we trust in the files in the cache dir without stat on the cached file; static Bool_tTFile::fgCacheFileForceIndicates, to force all READ to CACHEREAD; static atomic<Long64_t>TFile::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static TUrlTWebFile::fgProxyglobally set proxy URL; static atomic<Int_t>TFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TDirectory. ←",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:26823,Performance,CACHE,CACHEREAD,26823,"_tTWebFile::fSizefile size; TSocket*TWebFile::fSocketsocket for HTTP/1.1 (stays alive between calls); Double_tTFile::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!URL of file; TUrlTWebFile::fUrlOrgsave original url in case of temp redirection; Bool_tfUseMultiRangeIs the S3 server capable of serving multirange requests?; Int_tTFile::fVersionFile format version; Bool_tTDirectoryFile::fWritabletrue if directory is writable; Int_tTFile::fWrittenNumber of objects written so far; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory; static TList*TFile::fgAsyncOpenRequestsList of handles for pending open requests; static atomic<Long64_t>TFile::fgBytesReadNumber of bytes read by all TFile objects; static atomic<Long64_t>TFile::fgBytesWriteNumber of bytes written by all TFile objects; static TStringTFile::fgCacheFileDirDirectory where to locally stage files; static Bool_tTFile::fgCacheFileDisconnectedIndicates, we trust in the files in the cache dir without stat on the cached file; static Bool_tTFile::fgCacheFileForceIndicates, to force all READ to CACHEREAD; static atomic<Long64_t>TFile::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static TUrlTWebFile::fgProxyglobally set proxy URL; static atomic<Int_t>TFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TDirectory. ←",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:12786,Safety,Recover,Recover,12786,"w[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TS3WebFile&operator=(const TS3WebFile&); virtual voidTFile::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTFile::Print(Option_t* option = """") const; virtual voidTDirectoryFile::Purge(Short_t nkeep = 1); virtual voidTDirectory::pwd() const; virtual Int_tTObject::Read(const char* name); virtual voidTDirectoryFile::ReadAll(Option_t* option = """"); virtual Bool_tTWebFile::ReadBuffer(char* buf, Int_t len); virtual Bool_tTWebFile::ReadBuffer(char* buf, Long64_t pos, Int_t len); virtual Bool_tTFile::ReadBufferAsync(Long64_t offs, Int_t len); virtual Bool_tReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); virtual voidTFile::ReadFree(); virtual Int_tTDirectoryFile::ReadKeys(Bool_t forceRead = kTRUE); virtual TProcessID*TFile::ReadProcessID(UShort_t pidf); virtual voidTFile::ReadStreamerInfo(); virtual Int_tTDirectoryFile::ReadTObject(TObject* obj, const char* keyname); virtual Int_tTFile::Recover(); virtual voidTDirectory::RecursiveRemove(TObject* obj); virtual TObject*TDirectory::Remove(TObject*); virtual Int_tTWebFile::ReOpen(Option_t* mode); virtual voidTDirectoryFile::ResetAfterMerge(TFileMergeInfo*); voidTObject::ResetBit(UInt_t f); virtual voidTFile::ResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidTWebFile::Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operat",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:14970,Safety,timeout,timeout,14970,"dTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionAlgorithm(Int_t algorithm = 0); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTFile::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTFile::SetEND(Long64_t last); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFile::SetOffset(Long64_t offset, TFile::ERelativeTo pos = kBeg); static Bool_tTFile::SetOnlyStaged(Bool_t onlystaged); static UInt_tTFile::SetOpenTimeout(UInt_t timeout); virtual voidTFile::SetOption(Option_t* option = "">""); static voidTWebFile::SetProxy(const char* url); static voidTFile::SetReadaheadSize(Int_t bufsize = 256000); virtual voidTFile::SetReadCalls(Int_t readcalls = 0); static voidTFile::SetReadStreamerInfo(Bool_t readinfo = kTRUE); virtual voidTDirectoryFile::SetSeekDir(Long64_t v); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectoryFile::SetTRefAction(TObject* ref, TObject* parent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDirectoryFile::SetWritable(Bool_t writable = kTRUE); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTFile::ShowStreamerInfo(); static Bool_tTFile::ShrinkCacheFileDir(Long64_t shrinkSize, Long_t cleanupInteval = 0); virtual Int_tTFile::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTFile::SumBuffer(Int_t bufsize); virtual voidTObject::SysError(const char* method, const char* msgfmt) ",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:32064,Safety,detect,detect,32064,"his file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+"". Int_t GetHead(); Overwrites TWebFile::GetHead() for retrieving the HTTP headers of this; file. Uses TS3HTTPRequest to generate an HTTP HEAD request which includes; the authorization header expected by the S3 server. void SetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); Overwrites TWebFile::SetMsgReadBuffer10() for setting the HTTP GET; request compliant to the authentication mechanism used by the S3; protocol. The GET request must contain an ""Authorization"" header with; the signature of the request, generated using the user's secret access; key. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf). void ProcessHttpHeader(const TString& headerLine); This method is called by the super-class TWebFile when a HTTP header; for this file is retrieved. We scan the 'Server' header to detect the; type of S3 server this file is hosted on and to determine if it is; known to support multi-range HTTP GET requests. Some S3 servers (for; instance Amazon's) do not support that feature and when they; receive a multi-range request they sent back the whole file contents.; For this class, if the server do not support multirange requests; we issue multiple single-range requests instead. Bool_t GetCredentialsFromEnv(const char* accessKeyEnv, const char* secretKeyEnv, TString& outAccessKey, TString& outSecretKey); Sets the access and secret keys from the environmental variables, if; they are both set. TS3WebFile(). void SetAccessKey(const TString& accessKey); Modifiers of data members (to be used mainly by subclasses). { fS3Request.SetAccessKey(accessKey); }. void SetSecretKey(const TString& secretKey); { fS3Request.SetSecretKey(secretKey); }. TS3WebFile(const char* url, Option_t* options = """"); Constructors & Destructor. virtual ~TS3WebFile(); {}. const TString& GetAccessKey() const; Selectors. { return fS3Request.GetAccessKe",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:794,Security,Authoriz,Authorization,794,". TS3WebFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3WebFile. class TS3WebFile: public TWebFile. TS3WebFile. A TS3WebFile is a TWebFile which retrieves the file contents from a; web server implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:923,Security,Access,Access,923,". TS3WebFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3WebFile. class TS3WebFile: public TWebFile. TS3WebFile. A TS3WebFile is a TWebFile which retrieves the file contents from a; web server implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:952,Security,Access,Access,952,". TS3WebFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3WebFile. class TS3WebFile: public TWebFile. TS3WebFile. A TS3WebFile is a TWebFile which retrieves the file contents from a; web server implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:1052,Security,authenticat,authenticate,1052,"mepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3WebFile. class TS3WebFile: public TWebFile. TS3WebFile. A TS3WebFile is a TWebFile which retrieves the file contents from a; web server implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html. ""Amazon S",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:1123,Security,Access,Access,1123,") viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3WebFile. class TS3WebFile: public TWebFile. TS3WebFile. A TS3WebFile is a TWebFile which retrieves the file contents from a; web server implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html. ""Amazon Simple Storage Service REST API Reference""; http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:1145,Security,Access,Access,1145,") viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3WebFile. class TS3WebFile: public TWebFile. TS3WebFile. A TS3WebFile is a TWebFile which retrieves the file contents from a; web server implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html. ""Amazon Simple Storage Service REST API Reference""; http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:1169,Security,access,access,1169,") viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3WebFile. class TS3WebFile: public TWebFile. TS3WebFile. A TS3WebFile is a TWebFile which retrieves the file contents from a; web server implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html. ""Amazon Simple Storage Service REST API Reference""; http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:1530,Security,access,access,1530,"ed with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html. ""Amazon Simple Storage Service REST API Reference""; http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest.html. Function Members (Methods); public:. virtual~TS3WebFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtua",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:9703,Security,Hash,Hash,9703,"tTFile::GetReadCalls() const; static Bool_tTFile::GetReadStreamerInfo(); Int_tTFile::GetRecordHeader(char* buf, Long64_t first, Int_t maxbytes, Int_t& nbytes, Int_t& objlen, Int_t& keylen); Long64_tTFile::GetRelOffset() const; const TString&GetSecretKey() const; virtual Long64_tTDirectoryFile::GetSeekDir() const; virtual Long64_tTFile::GetSeekFree() const; virtual Long64_tTFile::GetSeekInfo() const; virtual Long64_tTDirectoryFile::GetSeekKeys() const; virtual Long64_tTDirectoryFile::GetSeekParent() const; virtual Long64_tTWebFile::GetSize() const; const TList*TFile::GetStreamerInfoCache(); virtual TList*TFile::GetStreamerInfoList(); virtual const char*TNamed::GetTitle() const; static TFile::EFileTypeTFile::GetType(const char* name, Option_t* option = """", TString* prefix = 0); virtual UInt_tTObject::GetUniqueID() const; const TUrl&GetUrl() const; TUUIDTDirectory::GetUUID() const; Int_tTFile::GetVersion() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; static voidTFile::IncrementFileCounter(); virtual voidTFile::IncrementProcessIDs(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTFile::IsArchive() const; Bool_tTFile::IsBinary() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTDirectory::IsFolder() const; virtual Bool_tTDirectoryFile::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTWebFile::IsOpen() const; Bool_tTFile::IsRaw() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDirectoryFile::IsWritable() const; Bool_tTObject::IsZombie() const; virtual voidTFile::ls(Option_t* option = """") const; virtual voidTFile::MakeFree(Long64_t first, Long64_t last); virtual voidTFile::MakeProject(const ch",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:18825,Security,access,accessKey,18825,"Keys(TDirectory*); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTDirectory::FillFullPath(TString& buf) const; Bool_tTFile::FlushWriteCache(); virtual TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(); virtual Int_tTWebFile::GetFromWeb(char* buf, Int_t len, const TString& msg); virtual Int_tTWebFile::GetFromWeb10(char* buf, Int_t len, const TString& msg); virtual Int_tGetHead(); virtual Int_tTWebFile::GetHunk(TSocket* s, char* hunk, Int_t maxsize); virtual Int_tTWebFile::GetLine(TSocket* s, char* line, Int_t maxsize); virtual const char*TWebFile::HttpTerminator(const char* start, const char* peeked, Int_t peeklen); virtual voidTWebFile::Init(Bool_t readHeadOnly); Int_tTFile::MakeProjectParMake(const char* packname, const char* filename); Int_tTFile::MakeProjectParProofInf(const char* packname, const char* proofinfdir); voidTObject::MakeZombie(); virtual voidProcessHttpHeader(const TString& headerLine); virtual Bool_tTWebFile::ReadBuffer10(char* buf, Int_t len); virtual Bool_tTWebFile::ReadBuffers10(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Int_tTFile::ReadBufferViaCache(char* buf, Int_t len); voidTDirectory::RegisterContext(TDirectory::TContext* ctxt); voidSetAccessKey(const TString& accessKey); virtual voidSetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); voidSetSecretKey(const TString& secretKey); virtual Int_tTFile::SysClose(Int_t fd); virtual Int_tTFile::SysOpen(const char* pathname, Int_t flags, UInt_t mode); virtual Int_tTFile::SysRead(Int_t fd, void* buf, Int_t len); virtual Long64_tTFile::SysSeek(Int_t fd, Long64_t offset, Int_t whence); virtual Int_tTFile::SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); virtual Int_tTFile::SysSync(Int_t fd); virtual Int_tTFile::SysWrite(Int_t fd, const void* buf, Int_t len); voidTDirectory::UnregisterContext(TDirectory::TContext* ctxt); Int_tTFile::WriteBufferViaCache(const char* buf, Int_t len).",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:19608,Security,access,accessKeyEnv,19608," Int_tTFile::ReadBufferViaCache(char* buf, Int_t len); voidTDirectory::RegisterContext(TDirectory::TContext* ctxt); voidSetAccessKey(const TString& accessKey); virtual voidSetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); voidSetSecretKey(const TString& secretKey); virtual Int_tTFile::SysClose(Int_t fd); virtual Int_tTFile::SysOpen(const char* pathname, Int_t flags, UInt_t mode); virtual Int_tTFile::SysRead(Int_t fd, void* buf, Int_t len); virtual Long64_tTFile::SysSeek(Int_t fd, Long64_t offset, Int_t whence); virtual Int_tTFile::SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); virtual Int_tTFile::SysSync(Int_t fd); virtual Int_tTFile::SysWrite(Int_t fd, const void* buf, Int_t len); voidTDirectory::UnregisterContext(TDirectory::TContext* ctxt); Int_tTFile::WriteBufferViaCache(const char* buf, Int_t len). private:. Bool_tGetCredentialsFromEnv(const char* accessKeyEnv, const char* secretKeyEnv, TString& outAccessKey, TString& outSecretKey); Bool_tParseOptions(Option_t* options, TString& accessKey, TString& secretKey); TS3WebFile(). Data Members; public:. static TFile::EAsyncOpenStatusTFile::kAOSFailure; static TFile::EAsyncOpenStatusTFile::kAOSInProgress; static TFile::EAsyncOpenStatusTFile::kAOSNotAsync; static TFile::EAsyncOpenStatusTFile::kAOSSuccess; static TFile::ERelativeToTFile::kBeg; static TFile::EStatusBitsTFile::kBinaryFile; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TDirectoryFile::(anonymous)TDirectoryFile::kCloseDirectory; static TFile::ERelativeToTFile::kCur; static TFile::EFileTypeTFile::kDefault; static TFile::EStatusBitsTFile::kDevNull; static TFile::ECacheActionTFile::kDisconnect; static TFile::ECacheActionTFile::kDoNotDisconnect; static TFile::ERelativeToTFile::kEnd; static TFile::EOpenTimeOutTFile::kEternalTimeout; static TFile::EFileTypeTFile::kFile; static TFile::EStatusBitsTF",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:19742,Security,access,accessKey,19742," Int_tTFile::ReadBufferViaCache(char* buf, Int_t len); voidTDirectory::RegisterContext(TDirectory::TContext* ctxt); voidSetAccessKey(const TString& accessKey); virtual voidSetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); voidSetSecretKey(const TString& secretKey); virtual Int_tTFile::SysClose(Int_t fd); virtual Int_tTFile::SysOpen(const char* pathname, Int_t flags, UInt_t mode); virtual Int_tTFile::SysRead(Int_t fd, void* buf, Int_t len); virtual Long64_tTFile::SysSeek(Int_t fd, Long64_t offset, Int_t whence); virtual Int_tTFile::SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); virtual Int_tTFile::SysSync(Int_t fd); virtual Int_tTFile::SysWrite(Int_t fd, const void* buf, Int_t len); voidTDirectory::UnregisterContext(TDirectory::TContext* ctxt); Int_tTFile::WriteBufferViaCache(const char* buf, Int_t len). private:. Bool_tGetCredentialsFromEnv(const char* accessKeyEnv, const char* secretKeyEnv, TString& outAccessKey, TString& outSecretKey); Bool_tParseOptions(Option_t* options, TString& accessKey, TString& secretKey); TS3WebFile(). Data Members; public:. static TFile::EAsyncOpenStatusTFile::kAOSFailure; static TFile::EAsyncOpenStatusTFile::kAOSInProgress; static TFile::EAsyncOpenStatusTFile::kAOSNotAsync; static TFile::EAsyncOpenStatusTFile::kAOSSuccess; static TFile::ERelativeToTFile::kBeg; static TFile::EStatusBitsTFile::kBinaryFile; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TDirectoryFile::(anonymous)TDirectoryFile::kCloseDirectory; static TFile::ERelativeToTFile::kCur; static TFile::EFileTypeTFile::kDefault; static TFile::EStatusBitsTFile::kDevNull; static TFile::ECacheActionTFile::kDisconnect; static TFile::ECacheActionTFile::kDoNotDisconnect; static TFile::ERelativeToTFile::kEnd; static TFile::EOpenTimeOutTFile::kEternalTimeout; static TFile::EFileTypeTFile::kFile; static TFile::EStatusBitsTF",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:22062,Security,authenticat,authentication,22062,tBigFile; static TFile::EFileTypeTFile::kWeb; static TObject::(anonymous)TObject::kWriteDelete; static TFile::EStatusBitsTFile::kWriteError; static TObject::(anonymous)TObject::kZombie. protected:. TArchiveFile*TFile::fArchive!Archive file from which we read this file; Long64_tTFile::fArchiveOffset!Offset at which file starts in archive; TFileOpenHandle*TFile::fAsyncHandle!For proper automatic cleanup; TFile::EAsyncOpenStatusTFile::fAsyncOpenStatus!Status of an asynchronous open request; Long64_tTFile::fBEGINFirst used byte in file; TStringTWebFile::fBasicUrlbasic url without authentication and options; TStringTWebFile::fBasicUrlOrgsave original url in case of temp redirection; Int_tTDirectoryFile::fBufferSizeDefault buffer size to create new TKeys; Long64_tTFile::fBytesReadNumber of bytes read from this file; Long64_tTFile::fBytesReadExtraNumber of extra bytes (overhead) read by the readahead buffer; Long64_tTFile::fBytesWriteNumber of bytes written to this file; TFileCacheRead*TFile::fCacheRead!Pointer to the read cache (if any); TMap*TFile::fCacheReadMap!Pointer to the read cache (if any); TFileCacheWrite*TFile::fCacheWrite!Pointer to the write cache (if any); TArrayC*TFile::fClassIndex!Index of TStreamerInfo classes written to this file; Int_tTFile::fCompressCompression level and algorithm; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; Int_tTFile::fDFile descriptor; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; Long64_tTFile::fENDLast used byte in file; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TFile::fFreeFree segments linked list table; Bool_tTWebFile::fHTTP11true if server support HTTP/1.1; Bool_tTWebFile::fHasModRoottrue if server has mod_root installed; TList*TFile::fInfoCache!Cached list of the streamer infos in this file; Bool_tTFile::fInitDone!True if the file has been initial,MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:29236,Security,access,access,29236,"lass is through; TFile::Open, for instance:. TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file""); TFile* f2 = TFile::Open(""gs://storage.googleapis.com/bucket/path/to/my/file""). The specified scheme (i.e. s3, s3http, s3https, ...) determines the underlying; transport protocol to use for downloading the file contents, namely HTTP or HTTPS.; The 's3', 's3https', 'gs' and 'gshttps' schemes imply using HTTPS as the transport; protocol. The 's3http', 'as3' and 'gshttp' schemes imply using HTTP as the transport; protocol. The 'options' argument can contain 'NOPROXY' if you want to bypass; the HTTP proxy when retrieving this file's contents. As for any TWebFile-derived; object, the URL of the web proxy can be specified by setting an environmental; variable 'http_proxy'. If this variable is set, we ask that proxy to route our; requests HTTP(S) requests to the file server. In addition, you can also use the 'options' argument to provide the access key; and secret key to be used for authentication purposes for this file by using a; string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; open several files hosted by different providers in the same program/macro,; where the environemntal variables solution is not convenient (see below). If you need to specify both NOPROXY and AUTH separate them by ' '; (blank), for instance:; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"". Examples:; TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""...."") the values of the environmental variables; S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; the access key id and the secret access k",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:29278,Security,authenticat,authentication,29278,"lass is through; TFile::Open, for instance:. TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file""); TFile* f2 = TFile::Open(""gs://storage.googleapis.com/bucket/path/to/my/file""). The specified scheme (i.e. s3, s3http, s3https, ...) determines the underlying; transport protocol to use for downloading the file contents, namely HTTP or HTTPS.; The 's3', 's3https', 'gs' and 'gshttps' schemes imply using HTTPS as the transport; protocol. The 's3http', 'as3' and 'gshttp' schemes imply using HTTP as the transport; protocol. The 'options' argument can contain 'NOPROXY' if you want to bypass; the HTTP proxy when retrieving this file's contents. As for any TWebFile-derived; object, the URL of the web proxy can be specified by setting an environmental; variable 'http_proxy'. If this variable is set, we ask that proxy to route our; requests HTTP(S) requests to the file server. In addition, you can also use the 'options' argument to provide the access key; and secret key to be used for authentication purposes for this file by using a; string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; open several files hosted by different providers in the same program/macro,; where the environemntal variables solution is not convenient (see below). If you need to specify both NOPROXY and AUTH separate them by ' '; (blank), for instance:; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"". Examples:; TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""...."") the values of the environmental variables; S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; the access key id and the secret access k",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:30046,Security,authenticat,authentication,30046,"f this variable is set, we ask that proxy to route our; requests HTTP(S) requests to the file server. In addition, you can also use the 'options' argument to provide the access key; and secret key to be used for authentication purposes for this file by using a; string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; open several files hosted by different providers in the same program/macro,; where the environemntal variables solution is not convenient (see below). If you need to specify both NOPROXY and AUTH separate them by ' '; (blank), for instance:; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"". Examples:; TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""...."") the values of the environmental variables; S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; the access key id and the secret access key, respectively. You have; been provided with these credentials by your S3 service provider. If neither the AUTH information is provided in the 'options' argument; nor the environmental variables are set, we try to open the file; without providing any authentication information to the server. This; is useful when the file is set an access control that allows for; any unidentified user to read the file. Bool_t ParseOptions(Option_t* options, TString& accessKey, TString& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" f",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:30236,Security,access,access,30236,"tions' argument to provide the access key; and secret key to be used for authentication purposes for this file by using a; string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; open several files hosted by different providers in the same program/macro,; where the environemntal variables solution is not convenient (see below). If you need to specify both NOPROXY and AUTH separate them by ' '; (blank), for instance:; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"". Examples:; TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""...."") the values of the environmental variables; S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; the access key id and the secret access key, respectively. You have; been provided with these credentials by your S3 service provider. If neither the AUTH information is provided in the 'options' argument; nor the environmental variables are set, we try to open the file; without providing any authentication information to the server. This; is useful when the file is set an access control that allows for; any unidentified user to read the file. Bool_t ParseOptions(Option_t* options, TString& accessKey, TString& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" for not using the HTTP proxy for; accessing this file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8ww",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:30265,Security,access,access,30265,"tions' argument to provide the access key; and secret key to be used for authentication purposes for this file by using a; string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to; open several files hosted by different providers in the same program/macro,; where the environemntal variables solution is not convenient (see below). If you need to specify both NOPROXY and AUTH separate them by ' '; (blank), for instance:; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"". Examples:; TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""...."") the values of the environmental variables; S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; the access key id and the secret access key, respectively. You have; been provided with these credentials by your S3 service provider. If neither the AUTH information is provided in the 'options' argument; nor the environmental variables are set, we try to open the file; without providing any authentication information to the server. This; is useful when the file is set an access control that allows for; any unidentified user to read the file. Bool_t ParseOptions(Option_t* options, TString& accessKey, TString& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" for not using the HTTP proxy for; accessing this file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8ww",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:30526,Security,authenticat,authentication,30526,"gram/macro,; where the environemntal variables solution is not convenient (see below). If you need to specify both NOPROXY and AUTH separate them by ' '; (blank), for instance:; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"". Examples:; TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""...."") the values of the environmental variables; S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; the access key id and the secret access key, respectively. You have; been provided with these credentials by your S3 service provider. If neither the AUTH information is provided in the 'options' argument; nor the environmental variables are set, we try to open the file; without providing any authentication information to the server. This; is useful when the file is set an access control that allows for; any unidentified user to read the file. Bool_t ParseOptions(Option_t* options, TString& accessKey, TString& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" for not using the HTTP proxy for; accessing this file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+"". Int_t GetHead(); Overwrites TWebFile::GetHead() for retrieving the HTTP headers of this; file. Uses TS3HTTPRequest to generate an HTTP HEAD request which includes; the authorization header expected by the S3 server. void SetMsgReadBuffer10(",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:30608,Security,access,access,30608,"ank), for instance:; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"". Examples:; TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""...."") the values of the environmental variables; S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; the access key id and the secret access key, respectively. You have; been provided with these credentials by your S3 service provider. If neither the AUTH information is provided in the 'options' argument; nor the environmental variables are set, we try to open the file; without providing any authentication information to the server. This; is useful when the file is set an access control that allows for; any unidentified user to read the file. Bool_t ParseOptions(Option_t* options, TString& accessKey, TString& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" for not using the HTTP proxy for; accessing this file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+"". Int_t GetHead(); Overwrites TWebFile::GetHead() for retrieving the HTTP headers of this; file. Uses TS3HTTPRequest to generate an HTTP HEAD request which includes; the authorization header expected by the S3 server. void SetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); Overwrites TWebFile::SetMsgReadBuffer10() for setting the HTTP GET; request compliant to th",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:30728,Security,access,accessKey,30728,"/host.example.com/bucket/path/to/my/file"",; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""...."") the values of the environmental variables; S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; the access key id and the secret access key, respectively. You have; been provided with these credentials by your S3 service provider. If neither the AUTH information is provided in the 'options' argument; nor the environmental variables are set, we try to open the file; without providing any authentication information to the server. This; is useful when the file is set an access control that allows for; any unidentified user to read the file. Bool_t ParseOptions(Option_t* options, TString& accessKey, TString& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" for not using the HTTP proxy for; accessing this file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+"". Int_t GetHead(); Overwrites TWebFile::GetHead() for retrieving the HTTP headers of this; file. Uses TS3HTTPRequest to generate an HTTP HEAD request which includes; the authorization header expected by the S3 server. void SetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); Overwrites TWebFile::SetMsgReadBuffer10() for setting the HTTP GET; request compliant to the authentication mechanism used by the S3; protocol. The GET request must contain an ""Authorization"" header with; the signature of the reque",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:30776,Security,authenticat,authentication,30776,"/host.example.com/bucket/path/to/my/file"",; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""...."") the values of the environmental variables; S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; the access key id and the secret access key, respectively. You have; been provided with these credentials by your S3 service provider. If neither the AUTH information is provided in the 'options' argument; nor the environmental variables are set, we try to open the file; without providing any authentication information to the server. This; is useful when the file is set an access control that allows for; any unidentified user to read the file. Bool_t ParseOptions(Option_t* options, TString& accessKey, TString& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" for not using the HTTP proxy for; accessing this file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+"". Int_t GetHead(); Overwrites TWebFile::GetHead() for retrieving the HTTP headers of this; file. Uses TS3HTTPRequest to generate an HTTP HEAD request which includes; the authorization header expected by the S3 server. void SetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); Overwrites TWebFile::SetMsgReadBuffer10() for setting the HTTP GET; request compliant to the authentication mechanism used by the S3; protocol. The GET request must contain an ""Authorization"" header with; the signature of the reque",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:30801,Security,access,access,30801,"/host.example.com/bucket/path/to/my/file"",; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""...."") the values of the environmental variables; S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; the access key id and the secret access key, respectively. You have; been provided with these credentials by your S3 service provider. If neither the AUTH information is provided in the 'options' argument; nor the environmental variables are set, we try to open the file; without providing any authentication information to the server. This; is useful when the file is set an access control that allows for; any unidentified user to read the file. Bool_t ParseOptions(Option_t* options, TString& accessKey, TString& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" for not using the HTTP proxy for; accessing this file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+"". Int_t GetHead(); Overwrites TWebFile::GetHead() for retrieving the HTTP headers of this; file. Uses TS3HTTPRequest to generate an HTTP HEAD request which includes; the authorization header expected by the S3 server. void SetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); Overwrites TWebFile::SetMsgReadBuffer10() for setting the HTTP GET; request compliant to the authentication mechanism used by the S3; protocol. The GET request must contain an ""Authorization"" header with; the signature of the reque",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:30851,Security,authenticat,authentication,30851,"frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""...."") the values of the environmental variables; S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; the access key id and the secret access key, respectively. You have; been provided with these credentials by your S3 service provider. If neither the AUTH information is provided in the 'options' argument; nor the environmental variables are set, we try to open the file; without providing any authentication information to the server. This; is useful when the file is set an access control that allows for; any unidentified user to read the file. Bool_t ParseOptions(Option_t* options, TString& accessKey, TString& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" for not using the HTTP proxy for; accessing this file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+"". Int_t GetHead(); Overwrites TWebFile::GetHead() for retrieving the HTTP headers of this; file. Uses TS3HTTPRequest to generate an HTTP HEAD request which includes; the authorization header expected by the S3 server. void SetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); Overwrites TWebFile::SetMsgReadBuffer10() for setting the HTTP GET; request compliant to the authentication mechanism used by the S3; protocol. The GET request must contain an ""Authorization"" header with; the signature of the request, generated using the user's secret access; key. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf). void ProcessHttpHeader(const TString& headerLine); This method is called by the super-class TWebFile when",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:30985,Security,access,access,30985,"frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""...."") the values of the environmental variables; S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; the access key id and the secret access key, respectively. You have; been provided with these credentials by your S3 service provider. If neither the AUTH information is provided in the 'options' argument; nor the environmental variables are set, we try to open the file; without providing any authentication information to the server. This; is useful when the file is set an access control that allows for; any unidentified user to read the file. Bool_t ParseOptions(Option_t* options, TString& accessKey, TString& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" for not using the HTTP proxy for; accessing this file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+"". Int_t GetHead(); Overwrites TWebFile::GetHead() for retrieving the HTTP headers of this; file. Uses TS3HTTPRequest to generate an HTTP HEAD request which includes; the authorization header expected by the S3 server. void SetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); Overwrites TWebFile::SetMsgReadBuffer10() for setting the HTTP GET; request compliant to the authentication mechanism used by the S3; protocol. The GET request must contain an ""Authorization"" header with; the signature of the request, generated using the user's secret access; key. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf). void ProcessHttpHeader(const TString& headerLine); This method is called by the super-class TWebFile when",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:31100,Security,access,accessing,31100,"frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""...."") the values of the environmental variables; S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; the access key id and the secret access key, respectively. You have; been provided with these credentials by your S3 service provider. If neither the AUTH information is provided in the 'options' argument; nor the environmental variables are set, we try to open the file; without providing any authentication information to the server. This; is useful when the file is set an access control that allows for; any unidentified user to read the file. Bool_t ParseOptions(Option_t* options, TString& accessKey, TString& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" for not using the HTTP proxy for; accessing this file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+"". Int_t GetHead(); Overwrites TWebFile::GetHead() for retrieving the HTTP headers of this; file. Uses TS3HTTPRequest to generate an HTTP HEAD request which includes; the authorization header expected by the S3 server. void SetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); Overwrites TWebFile::SetMsgReadBuffer10() for setting the HTTP GET; request compliant to the authentication mechanism used by the S3; protocol. The GET request must contain an ""Authorization"" header with; the signature of the request, generated using the user's secret access; key. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf). void ProcessHttpHeader(const TString& headerLine); This method is called by the super-class TWebFile when",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:31395,Security,authoriz,authorization,31395," AUTH information is provided in the 'options' argument; nor the environmental variables are set, we try to open the file; without providing any authentication information to the server. This; is useful when the file is set an access control that allows for; any unidentified user to read the file. Bool_t ParseOptions(Option_t* options, TString& accessKey, TString& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" for not using the HTTP proxy for; accessing this file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+"". Int_t GetHead(); Overwrites TWebFile::GetHead() for retrieving the HTTP headers of this; file. Uses TS3HTTPRequest to generate an HTTP HEAD request which includes; the authorization header expected by the S3 server. void SetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); Overwrites TWebFile::SetMsgReadBuffer10() for setting the HTTP GET; request compliant to the authentication mechanism used by the S3; protocol. The GET request must contain an ""Authorization"" header with; the signature of the request, generated using the user's secret access; key. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf). void ProcessHttpHeader(const TString& headerLine); This method is called by the super-class TWebFile when a HTTP header; for this file is retrieved. We scan the 'Server' header to detect the; type of S3 server this file is hosted on and to determine if it is; known to support multi-range HTTP GET requests. Some S3 servers (for; instance Amazon's) do not support that feature and when they; receive a multi-range request they sent back the whole file contents.; For this class, if the server do no",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:31625,Security,authenticat,authentication,31625,"e server. This; is useful when the file is set an access control that allows for; any unidentified user to read the file. Bool_t ParseOptions(Option_t* options, TString& accessKey, TString& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" for not using the HTTP proxy for; accessing this file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+"". Int_t GetHead(); Overwrites TWebFile::GetHead() for retrieving the HTTP headers of this; file. Uses TS3HTTPRequest to generate an HTTP HEAD request which includes; the authorization header expected by the S3 server. void SetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); Overwrites TWebFile::SetMsgReadBuffer10() for setting the HTTP GET; request compliant to the authentication mechanism used by the S3; protocol. The GET request must contain an ""Authorization"" header with; the signature of the request, generated using the user's secret access; key. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf). void ProcessHttpHeader(const TString& headerLine); This method is called by the super-class TWebFile when a HTTP header; for this file is retrieved. We scan the 'Server' header to detect the; type of S3 server this file is hosted on and to determine if it is; known to support multi-range HTTP GET requests. Some S3 servers (for; instance Amazon's) do not support that feature and when they; receive a multi-range request they sent back the whole file contents.; For this class, if the server do not support multirange requests; we issue multiple single-range requests instead. Bool_t GetCredentialsFromEnv(const char* accessKeyEnv, const char* secretKeyEnv, TString& outAcce",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:31709,Security,Authoriz,Authorization,31709,"ng& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" for not using the HTTP proxy for; accessing this file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+"". Int_t GetHead(); Overwrites TWebFile::GetHead() for retrieving the HTTP headers of this; file. Uses TS3HTTPRequest to generate an HTTP HEAD request which includes; the authorization header expected by the S3 server. void SetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); Overwrites TWebFile::SetMsgReadBuffer10() for setting the HTTP GET; request compliant to the authentication mechanism used by the S3; protocol. The GET request must contain an ""Authorization"" header with; the signature of the request, generated using the user's secret access; key. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf). void ProcessHttpHeader(const TString& headerLine); This method is called by the super-class TWebFile when a HTTP header; for this file is retrieved. We scan the 'Server' header to detect the; type of S3 server this file is hosted on and to determine if it is; known to support multi-range HTTP GET requests. Some S3 servers (for; instance Amazon's) do not support that feature and when they; receive a multi-range request they sent back the whole file contents.; For this class, if the server do not support multirange requests; we issue multiple single-range requests instead. Bool_t GetCredentialsFromEnv(const char* accessKeyEnv, const char* secretKeyEnv, TString& outAccessKey, TString& outSecretKey); Sets the access and secret keys from the environmental variables, if; they are both set. TS3WebFile(). void SetAccessKey(const TString& accessKey); Modifi",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:31801,Security,access,access,31801,"ng& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" for not using the HTTP proxy for; accessing this file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+"". Int_t GetHead(); Overwrites TWebFile::GetHead() for retrieving the HTTP headers of this; file. Uses TS3HTTPRequest to generate an HTTP HEAD request which includes; the authorization header expected by the S3 server. void SetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); Overwrites TWebFile::SetMsgReadBuffer10() for setting the HTTP GET; request compliant to the authentication mechanism used by the S3; protocol. The GET request must contain an ""Authorization"" header with; the signature of the request, generated using the user's secret access; key. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf). void ProcessHttpHeader(const TString& headerLine); This method is called by the super-class TWebFile when a HTTP header; for this file is retrieved. We scan the 'Server' header to detect the; type of S3 server this file is hosted on and to determine if it is; known to support multi-range HTTP GET requests. Some S3 servers (for; instance Amazon's) do not support that feature and when they; receive a multi-range request they sent back the whole file contents.; For this class, if the server do not support multirange requests; we issue multiple single-range requests instead. Bool_t GetCredentialsFromEnv(const char* accessKeyEnv, const char* secretKeyEnv, TString& outAccessKey, TString& outSecretKey); Sets the access and secret keys from the environmental variables, if; they are both set. TS3WebFile(). void SetAccessKey(const TString& accessKey); Modifi",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:32503,Security,access,accessKeyEnv,32503,"10() for setting the HTTP GET; request compliant to the authentication mechanism used by the S3; protocol. The GET request must contain an ""Authorization"" header with; the signature of the request, generated using the user's secret access; key. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf). void ProcessHttpHeader(const TString& headerLine); This method is called by the super-class TWebFile when a HTTP header; for this file is retrieved. We scan the 'Server' header to detect the; type of S3 server this file is hosted on and to determine if it is; known to support multi-range HTTP GET requests. Some S3 servers (for; instance Amazon's) do not support that feature and when they; receive a multi-range request they sent back the whole file contents.; For this class, if the server do not support multirange requests; we issue multiple single-range requests instead. Bool_t GetCredentialsFromEnv(const char* accessKeyEnv, const char* secretKeyEnv, TString& outAccessKey, TString& outSecretKey); Sets the access and secret keys from the environmental variables, if; they are both set. TS3WebFile(). void SetAccessKey(const TString& accessKey); Modifiers of data members (to be used mainly by subclasses). { fS3Request.SetAccessKey(accessKey); }. void SetSecretKey(const TString& secretKey); { fS3Request.SetSecretKey(secretKey); }. TS3WebFile(const char* url, Option_t* options = """"); Constructors & Destructor. virtual ~TS3WebFile(); {}. const TString& GetAccessKey() const; Selectors. { return fS3Request.GetAccessKey(); }. const TString& GetSecretKey() const; { return fS3Request.GetSecretKey(); }. const TString& GetBucket() const; { return fS3Request.GetBucket(); }. const TString& GetObjectKey() const; { return fS3Request.GetObjectKey(); }. const TUrl& GetUrl() const; { return fUrl; }. » Author: Fabio Hernandez 22/01/2013 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TS3WebFile.h$ » Last generated: 2015-06-30 15:29; This",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:32599,Security,access,access,32599,"10() for setting the HTTP GET; request compliant to the authentication mechanism used by the S3; protocol. The GET request must contain an ""Authorization"" header with; the signature of the request, generated using the user's secret access; key. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf). void ProcessHttpHeader(const TString& headerLine); This method is called by the super-class TWebFile when a HTTP header; for this file is retrieved. We scan the 'Server' header to detect the; type of S3 server this file is hosted on and to determine if it is; known to support multi-range HTTP GET requests. Some S3 servers (for; instance Amazon's) do not support that feature and when they; receive a multi-range request they sent back the whole file contents.; For this class, if the server do not support multirange requests; we issue multiple single-range requests instead. Bool_t GetCredentialsFromEnv(const char* accessKeyEnv, const char* secretKeyEnv, TString& outAccessKey, TString& outSecretKey); Sets the access and secret keys from the environmental variables, if; they are both set. TS3WebFile(). void SetAccessKey(const TString& accessKey); Modifiers of data members (to be used mainly by subclasses). { fS3Request.SetAccessKey(accessKey); }. void SetSecretKey(const TString& secretKey); { fS3Request.SetSecretKey(secretKey); }. TS3WebFile(const char* url, Option_t* options = """"); Constructors & Destructor. virtual ~TS3WebFile(); {}. const TString& GetAccessKey() const; Selectors. { return fS3Request.GetAccessKey(); }. const TString& GetSecretKey() const; { return fS3Request.GetSecretKey(); }. const TString& GetBucket() const; { return fS3Request.GetBucket(); }. const TString& GetObjectKey() const; { return fS3Request.GetObjectKey(); }. const TUrl& GetUrl() const; { return fUrl; }. » Author: Fabio Hernandez 22/01/2013 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TS3WebFile.h$ » Last generated: 2015-06-30 15:29; This",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:32726,Security,access,accessKey,32726,"n"" header with; the signature of the request, generated using the user's secret access; key. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf). void ProcessHttpHeader(const TString& headerLine); This method is called by the super-class TWebFile when a HTTP header; for this file is retrieved. We scan the 'Server' header to detect the; type of S3 server this file is hosted on and to determine if it is; known to support multi-range HTTP GET requests. Some S3 servers (for; instance Amazon's) do not support that feature and when they; receive a multi-range request they sent back the whole file contents.; For this class, if the server do not support multirange requests; we issue multiple single-range requests instead. Bool_t GetCredentialsFromEnv(const char* accessKeyEnv, const char* secretKeyEnv, TString& outAccessKey, TString& outSecretKey); Sets the access and secret keys from the environmental variables, if; they are both set. TS3WebFile(). void SetAccessKey(const TString& accessKey); Modifiers of data members (to be used mainly by subclasses). { fS3Request.SetAccessKey(accessKey); }. void SetSecretKey(const TString& secretKey); { fS3Request.SetSecretKey(secretKey); }. TS3WebFile(const char* url, Option_t* options = """"); Constructors & Destructor. virtual ~TS3WebFile(); {}. const TString& GetAccessKey() const; Selectors. { return fS3Request.GetAccessKey(); }. const TString& GetSecretKey() const; { return fS3Request.GetSecretKey(); }. const TString& GetBucket() const; { return fS3Request.GetBucket(); }. const TString& GetObjectKey() const; { return fS3Request.GetObjectKey(); }. const TUrl& GetUrl() const; { return fUrl; }. » Author: Fabio Hernandez 22/01/2013 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TS3WebFile.h$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:32825,Security,access,accessKey,32825,"n"" header with; the signature of the request, generated using the user's secret access; key. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf). void ProcessHttpHeader(const TString& headerLine); This method is called by the super-class TWebFile when a HTTP header; for this file is retrieved. We scan the 'Server' header to detect the; type of S3 server this file is hosted on and to determine if it is; known to support multi-range HTTP GET requests. Some S3 servers (for; instance Amazon's) do not support that feature and when they; receive a multi-range request they sent back the whole file contents.; For this class, if the server do not support multirange requests; we issue multiple single-range requests instead. Bool_t GetCredentialsFromEnv(const char* accessKeyEnv, const char* secretKeyEnv, TString& outAccessKey, TString& outSecretKey); Sets the access and secret keys from the environmental variables, if; they are both set. TS3WebFile(). void SetAccessKey(const TString& accessKey); Modifiers of data members (to be used mainly by subclasses). { fS3Request.SetAccessKey(accessKey); }. void SetSecretKey(const TString& secretKey); { fS3Request.SetSecretKey(secretKey); }. TS3WebFile(const char* url, Option_t* options = """"); Constructors & Destructor. virtual ~TS3WebFile(); {}. const TString& GetAccessKey() const; Selectors. { return fS3Request.GetAccessKey(); }. const TString& GetSecretKey() const; { return fS3Request.GetSecretKey(); }. const TString& GetBucket() const; { return fS3Request.GetBucket(); }. const TString& GetObjectKey() const; { return fS3Request.GetObjectKey(); }. const TUrl& GetUrl() const; { return fUrl; }. » Author: Fabio Hernandez 22/01/2013 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TS3WebFile.h$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:15996,Testability,Test,TestBit,15996,"etOption(Option_t* option = "">""); static voidTWebFile::SetProxy(const char* url); static voidTFile::SetReadaheadSize(Int_t bufsize = 256000); virtual voidTFile::SetReadCalls(Int_t readcalls = 0); static voidTFile::SetReadStreamerInfo(Bool_t readinfo = kTRUE); virtual voidTDirectoryFile::SetSeekDir(Long64_t v); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectoryFile::SetTRefAction(TObject* ref, TObject* parent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDirectoryFile::SetWritable(Bool_t writable = kTRUE); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTFile::ShowStreamerInfo(); static Bool_tTFile::ShrinkCacheFileDir(Long64_t shrinkSize, Long_t cleanupInteval = 0); virtual Int_tTFile::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTFile::SumBuffer(Int_t bufsize); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TS3WebFile(const TS3WebFile&); TS3WebFile(const char* url, Option_t* options = """"); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsiz = 0); virtual Int_tTFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsiz = 0) const; virtual Bool_tTFile::WriteBuffer(const char* buf, Int_t len); virtual voidTDirectoryFile::WriteDirHeader(); virtual voidTFile::WriteFree(); virtual voidTFile::WriteHeader(); virtual voidTDirectoryFile::WriteKeys(); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const char* classname, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const TClass* cl, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual UShort_tTFile::WriteProcessID(TProcessID* pid); virtual voidT",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:16035,Testability,Test,TestBits,16035,"c voidTWebFile::SetProxy(const char* url); static voidTFile::SetReadaheadSize(Int_t bufsize = 256000); virtual voidTFile::SetReadCalls(Int_t readcalls = 0); static voidTFile::SetReadStreamerInfo(Bool_t readinfo = kTRUE); virtual voidTDirectoryFile::SetSeekDir(Long64_t v); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectoryFile::SetTRefAction(TObject* ref, TObject* parent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDirectoryFile::SetWritable(Bool_t writable = kTRUE); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTFile::ShowStreamerInfo(); static Bool_tTFile::ShrinkCacheFileDir(Long64_t shrinkSize, Long_t cleanupInteval = 0); virtual Int_tTFile::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTFile::SumBuffer(Int_t bufsize); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TS3WebFile(const TS3WebFile&); TS3WebFile(const char* url, Option_t* options = """"); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsiz = 0); virtual Int_tTFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsiz = 0) const; virtual Bool_tTFile::WriteBuffer(const char* buf, Int_t len); virtual voidTDirectoryFile::WriteDirHeader(); virtual voidTFile::WriteFree(); virtual voidTFile::WriteHeader(); virtual voidTDirectoryFile::WriteKeys(); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const char* classname, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const TClass* cl, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual UShort_tTFile::WriteProcessID(TProcessID* pid); virtual voidTFile::WriteStreamerInfo(); virtual Int_t",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:1916,Usability,Simpl,Simple,1916," the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html. ""Amazon Simple Storage Service REST API Reference""; http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest.html. Function Members (Methods); public:. virtual~TS3WebFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual ",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:1949,Usability,Guid,Guide,1949," the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html. ""Amazon Simple Storage Service REST API Reference""; http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest.html. Function Members (Methods); public:. virtual~TS3WebFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual ",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:2034,Usability,Simpl,Simple,2034,"nticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html. ""Amazon Simple Storage Service REST API Reference""; http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest.html. Function Members (Methods); public:. virtual~TS3WebFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassNam",MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TS3WebFile.html:3093,Usability,Clear,Clear,3093,,MatchSource.WIKI,root/html602/TS3WebFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TS3WebFile.html
https://root.cern/root/html602/TSAXParser.html:3850,Availability,Error,Error,3850,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tTXMLParser::GetParseCode() const; const char*",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:3979,Availability,error,error,3979," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tTXMLParser::GetParseCode() const; const char*TXMLParser::GetParseCodeMessage(Int_t parseCode) const; Bool_tTXMLParser::GetReplaceEntities() const; Bool_tTXMLParser::GetStopOn",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:4063,Availability,error,error,4063,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tTXMLParser::GetParseCode() const; const char*TXMLParser::GetParseCodeMessage(Int_t parseCode) const; Bool_tTXMLParser::GetReplaceEntities() const; Bool_tTXMLParser::GetStopOnError() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:11063,Availability,error,errorcodes,11063,"ct::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. _xmlParserCtxt*TXMLParser::fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTXMLParser::fParseCodeto keep track of the errorcodes; Bool_tTXMLParser::fReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTXMLParser::fStopErrorstop when parse error occurs; Bool_tTXMLParser::fValidateto validate the parse context; TStringTXMLParser::fValidateErrorparse error; TStringTXMLParser::fValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. _xmlSAXHandler*fSAXHandlerlibxml2 SAX handler. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TXMLParser. ←; TSAXParser. Function documentation; TSAXParser(); Create SAX parser. ~TSAXParser(); TSAXParser desctructor. void OnStartDocument(); Emit a signal for OnStartDocument. void OnEndDocument(); Emit a signal for OnEndDocument. void OnStartElement(const char* name, const TList* attr); Emit a signal for OnStarElement, where name is the Element's name and; attribute is a TList of (TObjString*, TObjString *) TPair's.; The TPair's key is the attribute's name and value is the attribute's; value. void OnEndElement(const char* name); Emit a s",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:11242,Availability,error,error,11242,"ct::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. _xmlParserCtxt*TXMLParser::fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTXMLParser::fParseCodeto keep track of the errorcodes; Bool_tTXMLParser::fReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTXMLParser::fStopErrorstop when parse error occurs; Bool_tTXMLParser::fValidateto validate the parse context; TStringTXMLParser::fValidateErrorparse error; TStringTXMLParser::fValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. _xmlSAXHandler*fSAXHandlerlibxml2 SAX handler. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TXMLParser. ←; TSAXParser. Function documentation; TSAXParser(); Create SAX parser. ~TSAXParser(); TSAXParser desctructor. void OnStartDocument(); Emit a signal for OnStartDocument. void OnEndDocument(); Emit a signal for OnEndDocument. void OnStartElement(const char* name, const TList* attr); Emit a signal for OnStarElement, where name is the Element's name and; attribute is a TList of (TObjString*, TObjString *) TPair's.; The TPair's key is the attribute's name and value is the attribute's; value. void OnEndElement(const char* name); Emit a s",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:11353,Availability,error,error,11353,"ct::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. _xmlParserCtxt*TXMLParser::fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTXMLParser::fParseCodeto keep track of the errorcodes; Bool_tTXMLParser::fReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTXMLParser::fStopErrorstop when parse error occurs; Bool_tTXMLParser::fValidateto validate the parse context; TStringTXMLParser::fValidateErrorparse error; TStringTXMLParser::fValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. _xmlSAXHandler*fSAXHandlerlibxml2 SAX handler. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TXMLParser. ←; TSAXParser. Function documentation; TSAXParser(); Create SAX parser. ~TSAXParser(); TSAXParser desctructor. void OnStartDocument(); Emit a signal for OnStartDocument. void OnEndDocument(); Emit a signal for OnEndDocument. void OnStartElement(const char* name, const TList* attr); Emit a signal for OnStarElement, where name is the Element's name and; attribute is a TList of (TObjString*, TObjString *) TPair's.; The TPair's key is the attribute's name and value is the attribute's; value. void OnEndElement(const char* name); Emit a s",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:12602,Availability,error,error,12602,". TQObject. ←; TXMLParser. ←; TSAXParser. Function documentation; TSAXParser(); Create SAX parser. ~TSAXParser(); TSAXParser desctructor. void OnStartDocument(); Emit a signal for OnStartDocument. void OnEndDocument(); Emit a signal for OnEndDocument. void OnStartElement(const char* name, const TList* attr); Emit a signal for OnStarElement, where name is the Element's name and; attribute is a TList of (TObjString*, TObjString *) TPair's.; The TPair's key is the attribute's name and value is the attribute's; value. void OnEndElement(const char* name); Emit a signal for OnEndElement, where name is the Element's name. void OnCharacters(const char* characters); Emit a signal for OnCharacters, where characters are the characters; outside of tags. void OnComment(const char* text); Emit a signal for OnComment, where text is the comment. void OnWarning(const char* text); Emit a signal for OnWarning, where text is the warning. Int_t OnError(const char* text); Emit a signal for OnError, where text is the error and it returns the; Parse Error Code, see TXMLParser. Int_t OnFatalError(const char* text); Emit a signal for OnFactalError, where text is the error and it; returns the Parse Error Code, see TXMLParser. void OnCdataBlock(const char* text, Int_t len); Emit a signal for OnCdataBlock. Int_t Parse(); This function parses the xml file, by initializing the parser and checks; whether the parse context is created or not, it will check as well; whether the document is well formated.; It returns the parse error code, see TXMLParser. Int_t ParseFile(const char* filename); It creates the parse context of the xml file, where the xml file name is; filename. If context is created sucessfully, it will call Parse(); It returns parse error code, see TXMLParser. Int_t ParseBuffer(const char* contents, Int_t len); It parse the contents, instead of a file.; It will return error if is attempted to parse a second file while; a parse is in progres.; It returns parse code error, see TXMLParser.",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:12634,Availability,Error,Error,12634,". TQObject. ←; TXMLParser. ←; TSAXParser. Function documentation; TSAXParser(); Create SAX parser. ~TSAXParser(); TSAXParser desctructor. void OnStartDocument(); Emit a signal for OnStartDocument. void OnEndDocument(); Emit a signal for OnEndDocument. void OnStartElement(const char* name, const TList* attr); Emit a signal for OnStarElement, where name is the Element's name and; attribute is a TList of (TObjString*, TObjString *) TPair's.; The TPair's key is the attribute's name and value is the attribute's; value. void OnEndElement(const char* name); Emit a signal for OnEndElement, where name is the Element's name. void OnCharacters(const char* characters); Emit a signal for OnCharacters, where characters are the characters; outside of tags. void OnComment(const char* text); Emit a signal for OnComment, where text is the comment. void OnWarning(const char* text); Emit a signal for OnWarning, where text is the warning. Int_t OnError(const char* text); Emit a signal for OnError, where text is the error and it returns the; Parse Error Code, see TXMLParser. Int_t OnFatalError(const char* text); Emit a signal for OnFactalError, where text is the error and it; returns the Parse Error Code, see TXMLParser. void OnCdataBlock(const char* text, Int_t len); Emit a signal for OnCdataBlock. Int_t Parse(); This function parses the xml file, by initializing the parser and checks; whether the parse context is created or not, it will check as well; whether the document is well formated.; It returns the parse error code, see TXMLParser. Int_t ParseFile(const char* filename); It creates the parse context of the xml file, where the xml file name is; filename. If context is created sucessfully, it will call Parse(); It returns parse error code, see TXMLParser. Int_t ParseBuffer(const char* contents, Int_t len); It parse the contents, instead of a file.; It will return error if is attempted to parse a second file while; a parse is in progres.; It returns parse code error, see TXMLParser.",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:12751,Availability,error,error,12751,"OnStartDocument(); Emit a signal for OnStartDocument. void OnEndDocument(); Emit a signal for OnEndDocument. void OnStartElement(const char* name, const TList* attr); Emit a signal for OnStarElement, where name is the Element's name and; attribute is a TList of (TObjString*, TObjString *) TPair's.; The TPair's key is the attribute's name and value is the attribute's; value. void OnEndElement(const char* name); Emit a signal for OnEndElement, where name is the Element's name. void OnCharacters(const char* characters); Emit a signal for OnCharacters, where characters are the characters; outside of tags. void OnComment(const char* text); Emit a signal for OnComment, where text is the comment. void OnWarning(const char* text); Emit a signal for OnWarning, where text is the warning. Int_t OnError(const char* text); Emit a signal for OnError, where text is the error and it returns the; Parse Error Code, see TXMLParser. Int_t OnFatalError(const char* text); Emit a signal for OnFactalError, where text is the error and it; returns the Parse Error Code, see TXMLParser. void OnCdataBlock(const char* text, Int_t len); Emit a signal for OnCdataBlock. Int_t Parse(); This function parses the xml file, by initializing the parser and checks; whether the parse context is created or not, it will check as well; whether the document is well formated.; It returns the parse error code, see TXMLParser. Int_t ParseFile(const char* filename); It creates the parse context of the xml file, where the xml file name is; filename. If context is created sucessfully, it will call Parse(); It returns parse error code, see TXMLParser. Int_t ParseBuffer(const char* contents, Int_t len); It parse the contents, instead of a file.; It will return error if is attempted to parse a second file while; a parse is in progres.; It returns parse code error, see TXMLParser. void ConnectToHandler(const char* handlerName, void* handler); A default TSAXParser to a user-defined Handler connection function.; This functi",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:12783,Availability,Error,Error,12783,"OnStartDocument(); Emit a signal for OnStartDocument. void OnEndDocument(); Emit a signal for OnEndDocument. void OnStartElement(const char* name, const TList* attr); Emit a signal for OnStarElement, where name is the Element's name and; attribute is a TList of (TObjString*, TObjString *) TPair's.; The TPair's key is the attribute's name and value is the attribute's; value. void OnEndElement(const char* name); Emit a signal for OnEndElement, where name is the Element's name. void OnCharacters(const char* characters); Emit a signal for OnCharacters, where characters are the characters; outside of tags. void OnComment(const char* text); Emit a signal for OnComment, where text is the comment. void OnWarning(const char* text); Emit a signal for OnWarning, where text is the warning. Int_t OnError(const char* text); Emit a signal for OnError, where text is the error and it returns the; Parse Error Code, see TXMLParser. Int_t OnFatalError(const char* text); Emit a signal for OnFactalError, where text is the error and it; returns the Parse Error Code, see TXMLParser. void OnCdataBlock(const char* text, Int_t len); Emit a signal for OnCdataBlock. Int_t Parse(); This function parses the xml file, by initializing the parser and checks; whether the parse context is created or not, it will check as well; whether the document is well formated.; It returns the parse error code, see TXMLParser. Int_t ParseFile(const char* filename); It creates the parse context of the xml file, where the xml file name is; filename. If context is created sucessfully, it will call Parse(); It returns parse error code, see TXMLParser. Int_t ParseBuffer(const char* contents, Int_t len); It parse the contents, instead of a file.; It will return error if is attempted to parse a second file while; a parse is in progres.; It returns parse code error, see TXMLParser. void ConnectToHandler(const char* handlerName, void* handler); A default TSAXParser to a user-defined Handler connection function.; This functi",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:13109,Availability,error,error,13109," void OnEndElement(const char* name); Emit a signal for OnEndElement, where name is the Element's name. void OnCharacters(const char* characters); Emit a signal for OnCharacters, where characters are the characters; outside of tags. void OnComment(const char* text); Emit a signal for OnComment, where text is the comment. void OnWarning(const char* text); Emit a signal for OnWarning, where text is the warning. Int_t OnError(const char* text); Emit a signal for OnError, where text is the error and it returns the; Parse Error Code, see TXMLParser. Int_t OnFatalError(const char* text); Emit a signal for OnFactalError, where text is the error and it; returns the Parse Error Code, see TXMLParser. void OnCdataBlock(const char* text, Int_t len); Emit a signal for OnCdataBlock. Int_t Parse(); This function parses the xml file, by initializing the parser and checks; whether the parse context is created or not, it will check as well; whether the document is well formated.; It returns the parse error code, see TXMLParser. Int_t ParseFile(const char* filename); It creates the parse context of the xml file, where the xml file name is; filename. If context is created sucessfully, it will call Parse(); It returns parse error code, see TXMLParser. Int_t ParseBuffer(const char* contents, Int_t len); It parse the contents, instead of a file.; It will return error if is attempted to parse a second file while; a parse is in progres.; It returns parse code error, see TXMLParser. void ConnectToHandler(const char* handlerName, void* handler); A default TSAXParser to a user-defined Handler connection function.; This function makes connection between various function from TSAXParser; with the user-define SAX Handler, whose functions has to be exactly the; same as in TSAXParser. handlerName is the user-defined SAX Handler class name; handler is the pointer to the user-defined SAX Handler. See SAXHandler.C tutorial. TSAXParser(const TSAXParser& ). TSAXParser& operator=(const TSAXParser& ). » A",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:13334,Availability,error,error,13334," the characters; outside of tags. void OnComment(const char* text); Emit a signal for OnComment, where text is the comment. void OnWarning(const char* text); Emit a signal for OnWarning, where text is the warning. Int_t OnError(const char* text); Emit a signal for OnError, where text is the error and it returns the; Parse Error Code, see TXMLParser. Int_t OnFatalError(const char* text); Emit a signal for OnFactalError, where text is the error and it; returns the Parse Error Code, see TXMLParser. void OnCdataBlock(const char* text, Int_t len); Emit a signal for OnCdataBlock. Int_t Parse(); This function parses the xml file, by initializing the parser and checks; whether the parse context is created or not, it will check as well; whether the document is well formated.; It returns the parse error code, see TXMLParser. Int_t ParseFile(const char* filename); It creates the parse context of the xml file, where the xml file name is; filename. If context is created sucessfully, it will call Parse(); It returns parse error code, see TXMLParser. Int_t ParseBuffer(const char* contents, Int_t len); It parse the contents, instead of a file.; It will return error if is attempted to parse a second file while; a parse is in progres.; It returns parse code error, see TXMLParser. void ConnectToHandler(const char* handlerName, void* handler); A default TSAXParser to a user-defined Handler connection function.; This function makes connection between various function from TSAXParser; with the user-define SAX Handler, whose functions has to be exactly the; same as in TSAXParser. handlerName is the user-defined SAX Handler class name; handler is the pointer to the user-defined SAX Handler. See SAXHandler.C tutorial. TSAXParser(const TSAXParser& ). TSAXParser& operator=(const TSAXParser& ). » Author: Jose Lo 12/1/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/xmlparser:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generate",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:13472,Availability,error,error,13472," comment. void OnWarning(const char* text); Emit a signal for OnWarning, where text is the warning. Int_t OnError(const char* text); Emit a signal for OnError, where text is the error and it returns the; Parse Error Code, see TXMLParser. Int_t OnFatalError(const char* text); Emit a signal for OnFactalError, where text is the error and it; returns the Parse Error Code, see TXMLParser. void OnCdataBlock(const char* text, Int_t len); Emit a signal for OnCdataBlock. Int_t Parse(); This function parses the xml file, by initializing the parser and checks; whether the parse context is created or not, it will check as well; whether the document is well formated.; It returns the parse error code, see TXMLParser. Int_t ParseFile(const char* filename); It creates the parse context of the xml file, where the xml file name is; filename. If context is created sucessfully, it will call Parse(); It returns parse error code, see TXMLParser. Int_t ParseBuffer(const char* contents, Int_t len); It parse the contents, instead of a file.; It will return error if is attempted to parse a second file while; a parse is in progres.; It returns parse code error, see TXMLParser. void ConnectToHandler(const char* handlerName, void* handler); A default TSAXParser to a user-defined Handler connection function.; This function makes connection between various function from TSAXParser; with the user-define SAX Handler, whose functions has to be exactly the; same as in TSAXParser. handlerName is the user-defined SAX Handler class name; handler is the pointer to the user-defined SAX Handler. See SAXHandler.C tutorial. TSAXParser(const TSAXParser& ). TSAXParser& operator=(const TSAXParser& ). » Author: Jose Lo 12/1/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/xmlparser:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:13570,Availability,error,error,13570," comment. void OnWarning(const char* text); Emit a signal for OnWarning, where text is the warning. Int_t OnError(const char* text); Emit a signal for OnError, where text is the error and it returns the; Parse Error Code, see TXMLParser. Int_t OnFatalError(const char* text); Emit a signal for OnFactalError, where text is the error and it; returns the Parse Error Code, see TXMLParser. void OnCdataBlock(const char* text, Int_t len); Emit a signal for OnCdataBlock. Int_t Parse(); This function parses the xml file, by initializing the parser and checks; whether the parse context is created or not, it will check as well; whether the document is well formated.; It returns the parse error code, see TXMLParser. Int_t ParseFile(const char* filename); It creates the parse context of the xml file, where the xml file name is; filename. If context is created sucessfully, it will call Parse(); It returns parse error code, see TXMLParser. Int_t ParseBuffer(const char* contents, Int_t len); It parse the contents, instead of a file.; It will return error if is attempted to parse a second file while; a parse is in progres.; It returns parse code error, see TXMLParser. void ConnectToHandler(const char* handlerName, void* handler); A default TSAXParser to a user-defined Handler connection function.; This function makes connection between various function from TSAXParser; with the user-define SAX Handler, whose functions has to be exactly the; same as in TSAXParser. handlerName is the user-defined SAX Handler class name; handler is the pointer to the user-defined SAX Handler. See SAXHandler.C tutorial. TSAXParser(const TSAXParser& ). TSAXParser& operator=(const TSAXParser& ). » Author: Jose Lo 12/1/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/xmlparser:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:9881,Deployability,Release,ReleaseUnderlying,9881,"er& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSAXParser(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTXMLParser::InitializeContext(); voidTObject::MakeZombie(); virtual voidTXMLParser::OnValidateError(const TString& message); virtual voidTXMLParser::OnValidateWarning(const TString& message); virtual voidTXMLParser::ReleaseUnderlying(); virtual voidTXMLParser::SetParseCode(Int_t code). private:. TSAXParser&operator=(const TSAXParser&); virtual Int_tParse(); TSAXParser(const TSAXParser&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanu",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:548,Energy Efficiency,efficient,efficient,548,". TSAXParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XMLPARSER; » TSAXParser. class TSAXParser: public TXMLParser. TSAXParser. TSAXParser is a subclass of TXMLParser, it is a wraper class to; libxml library. SAX (Simple API for XML) is an event based interface, which doesn't; maintain the DOM tree in memory, in other words, it's much more; efficient for large document. TSAXParserCallback contains a number of callback routines to the; parser in a xmlSAXHandler structure. The parser will then parse the; document and call the appropriate callback when certain conditions; occur. Function Members (Methods); public:. virtual~TSAXParser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidConnectToHandler(const ch",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:381,Integrability,wrap,wraper,381,". TSAXParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XMLPARSER; » TSAXParser. class TSAXParser: public TXMLParser. TSAXParser. TSAXParser is a subclass of TXMLParser, it is a wraper class to; libxml library. SAX (Simple API for XML) is an event based interface, which doesn't; maintain the DOM tree in memory, in other words, it's much more; efficient for large document. TSAXParserCallback contains a number of callback routines to the; parser in a xmlSAXHandler structure. The parser will then parse the; document and call the appropriate callback when certain conditions; occur. Function Members (Methods); public:. virtual~TSAXParser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidConnectToHandler(const ch",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:457,Integrability,interface,interface,457,". TSAXParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XMLPARSER; » TSAXParser. class TSAXParser: public TXMLParser. TSAXParser. TSAXParser is a subclass of TXMLParser, it is a wraper class to; libxml library. SAX (Simple API for XML) is an event based interface, which doesn't; maintain the DOM tree in memory, in other words, it's much more; efficient for large document. TSAXParserCallback contains a number of callback routines to the; parser in a xmlSAXHandler structure. The parser will then parse the; document and call the appropriate callback when certain conditions; occur. Function Members (Methods); public:. virtual~TSAXParser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidConnectToHandler(const ch",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:627,Integrability,rout,routines,627,". TSAXParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XMLPARSER; » TSAXParser. class TSAXParser: public TXMLParser. TSAXParser. TSAXParser is a subclass of TXMLParser, it is a wraper class to; libxml library. SAX (Simple API for XML) is an event based interface, which doesn't; maintain the DOM tree in memory, in other words, it's much more; efficient for large document. TSAXParserCallback contains a number of callback routines to the; parser in a xmlSAXHandler structure. The parser will then parse the; document and call the appropriate callback when certain conditions; occur. Function Members (Methods); public:. virtual~TSAXParser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidConnectToHandler(const ch",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:6199,Integrability,Message,Message,6199,"lidateWarning() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidOnCdataBlock(const char* text, Int_t len)SIGNAL ; virtual voidOnCharacters(const char* characters)SIGNAL ; virtual voidOnComment(const char* text)SIGNAL ; virtual voidOnEndDocument()SIGNAL ; virtual voidOnEndElement(const char* name)SIGNAL ; virtual Int_tOnError(const char* text)SIGNAL ; virtual Int_tOnFatalError(const char* text)SIGNAL ; virtual voidOnStartDocument()SIGNAL ; virtual voidOnStartElement(const char* name, const TList* attr)SIGNAL ; virtual voidOnWarning(const char* text)SIGNAL ; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); ",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:9780,Integrability,message,message,9780,"er& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSAXParser(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTXMLParser::InitializeContext(); voidTObject::MakeZombie(); virtual voidTXMLParser::OnValidateError(const TString& message); virtual voidTXMLParser::OnValidateWarning(const TString& message); virtual voidTXMLParser::ReleaseUnderlying(); virtual voidTXMLParser::SetParseCode(Int_t code). private:. TSAXParser&operator=(const TSAXParser&); virtual Int_tParse(); TSAXParser(const TSAXParser&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanu",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:9847,Integrability,message,message,9847,"er& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSAXParser(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTXMLParser::InitializeContext(); voidTObject::MakeZombie(); virtual voidTXMLParser::OnValidateError(const TString& message); virtual voidTXMLParser::OnValidateWarning(const TString& message); virtual voidTXMLParser::ReleaseUnderlying(); virtual voidTXMLParser::SetParseCode(Int_t code). private:. TSAXParser&operator=(const TSAXParser&); virtual Int_tParse(); TSAXParser(const TSAXParser&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanu",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:116,Modifiability,inherit,inheritance,116,". TSAXParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XMLPARSER; » TSAXParser. class TSAXParser: public TXMLParser. TSAXParser. TSAXParser is a subclass of TXMLParser, it is a wraper class to; libxml library. SAX (Simple API for XML) is an event based interface, which doesn't; maintain the DOM tree in memory, in other words, it's much more; efficient for large document. TSAXParserCallback contains a number of callback routines to the; parser in a xmlSAXHandler structure. The parser will then parse the; document and call the appropriate callback when certain conditions; occur. Function Members (Methods); public:. virtual~TSAXParser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidConnectToHandler(const ch",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:5569,Modifiability,Inherit,InheritsFrom,5569,"TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tTXMLParser::GetParseCode() const; const char*TXMLParser::GetParseCodeMessage(Int_t parseCode) const; Bool_tTXMLParser::GetReplaceEntities() const; Bool_tTXMLParser::GetStopOnError() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Bool_tTXMLParser::GetValidate() const; const char*TXMLParser::GetValidateError() const; const char*TXMLParser::GetValidateWarning() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidOnCdataBlock(const char* text, Int_t len)SIGNAL ; virtual voidOnCharacters(const char* characters)S",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:5635,Modifiability,Inherit,InheritsFrom,5635,"tName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tTXMLParser::GetParseCode() const; const char*TXMLParser::GetParseCodeMessage(Int_t parseCode) const; Bool_tTXMLParser::GetReplaceEntities() const; Bool_tTXMLParser::GetStopOnError() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Bool_tTXMLParser::GetValidate() const; const char*TXMLParser::GetValidateError() const; const char*TXMLParser::GetValidateWarning() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidOnCdataBlock(const char* text, Int_t len)SIGNAL ; virtual voidOnCharacters(const char* characters)SIGNAL ; virtual voidOnComment(const char* text)SIGNAL ; virtual vo",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:11565,Modifiability,Inherit,Inheritance,11565,"c TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. _xmlParserCtxt*TXMLParser::fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTXMLParser::fParseCodeto keep track of the errorcodes; Bool_tTXMLParser::fReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTXMLParser::fStopErrorstop when parse error occurs; Bool_tTXMLParser::fValidateto validate the parse context; TStringTXMLParser::fValidateErrorparse error; TStringTXMLParser::fValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. _xmlSAXHandler*fSAXHandlerlibxml2 SAX handler. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TXMLParser. ←; TSAXParser. Function documentation; TSAXParser(); Create SAX parser. ~TSAXParser(); TSAXParser desctructor. void OnStartDocument(); Emit a signal for OnStartDocument. void OnEndDocument(); Emit a signal for OnEndDocument. void OnStartElement(const char* name, const TList* attr); Emit a signal for OnStarElement, where name is the Element's name and; attribute is a TList of (TObjString*, TObjString *) TPair's.; The TPair's key is the attribute's name and value is the attribute's; value. void OnEndElement(const char* name); Emit a signal for OnEndElement, where name is the Element's name. void OnCharacters(const char* characters); Emit a signal for OnCharacters, where characters are the characters; outside of tags. void OnComment(const char* text); Emit a signal for OnComment, where text is the comment. void OnWarning(const char* text); Emit a signal for OnWarning, where text is the warning. Int_t OnError(const char* text); Emit a signal for",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:5371,Security,Hash,Hash,5371,"wOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tTXMLParser::GetParseCode() const; const char*TXMLParser::GetParseCodeMessage(Int_t parseCode) const; Bool_tTXMLParser::GetReplaceEntities() const; Bool_tTXMLParser::GetStopOnError() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Bool_tTXMLParser::GetValidate() const; const char*TXMLParser::GetValidateError() const; const char*TXMLParser::GetValidateWarning() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObje",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:11286,Security,validat,validate,11286,"ct::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. _xmlParserCtxt*TXMLParser::fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTXMLParser::fParseCodeto keep track of the errorcodes; Bool_tTXMLParser::fReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTXMLParser::fStopErrorstop when parse error occurs; Bool_tTXMLParser::fValidateto validate the parse context; TStringTXMLParser::fValidateErrorparse error; TStringTXMLParser::fValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. _xmlSAXHandler*fSAXHandlerlibxml2 SAX handler. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TXMLParser. ←; TSAXParser. Function documentation; TSAXParser(); Create SAX parser. ~TSAXParser(); TSAXParser desctructor. void OnStartDocument(); Emit a signal for OnStartDocument. void OnEndDocument(); Emit a signal for OnEndDocument. void OnStartElement(const char* name, const TList* attr); Emit a signal for OnStarElement, where name is the Element's name and; attribute is a TList of (TObjString*, TObjString *) TPair's.; The TPair's key is the attribute's name and value is the attribute's; value. void OnEndElement(const char* name); Emit a s",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:8590,Testability,Test,TestBit,8590,"t)SIGNAL ; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual Int_tParseBuffer(const char* contents, Int_t len); virtual Int_tParseFile(const char* filename); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTXMLParser::SetReplaceEntities(Bool_t val = kTRUE); voidTXMLParser::SetStopOnError(Bool_t stop = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidTXMLParser::SetValidate(Bool_t val = kTRUE); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTXMLParser::StopParser(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSAXParser(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:8629,Testability,Test,TestBits,8629,"t)SIGNAL ; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual Int_tParseBuffer(const char* contents, Int_t len); virtual Int_tParseFile(const char* filename); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTXMLParser::SetReplaceEntities(Bool_t val = kTRUE); voidTXMLParser::SetStopOnError(Bool_t stop = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidTXMLParser::SetValidate(Bool_t val = kTRUE); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTXMLParser::StopParser(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSAXParser(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:419,Usability,Simpl,Simple,419,". TSAXParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XMLPARSER; » TSAXParser. class TSAXParser: public TXMLParser. TSAXParser. TSAXParser is a subclass of TXMLParser, it is a wraper class to; libxml library. SAX (Simple API for XML) is an event based interface, which doesn't; maintain the DOM tree in memory, in other words, it's much more; efficient for large document. TSAXParserCallback contains a number of callback routines to the; parser in a xmlSAXHandler structure. The parser will then parse the; document and call the appropriate callback when certain conditions; occur. Function Members (Methods); public:. virtual~TSAXParser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidConnectToHandler(const ch",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSAXParser.html:1330,Usability,Clear,Clear,1330," virtual~TSAXParser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidConnectToHandler(const ch",MatchSource.WIKI,root/html602/TSAXParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSAXParser.html
https://root.cern/root/html602/TSecContext.html:1392,Availability,Error,Error,1392," virtual~TSecContext(); voidTObject::AbstractMethod(const char* method) const; voidAddForCleanup(Int_t port, Int_t proto, Int_t type); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*AsString(TString& out); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDeActivate(Option_t* opt = ""CR""); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*GetContext() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatime",MatchSource.WIKI,root/html602/TSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContext.html
https://root.cern/root/html602/TSecContext.html:1521,Availability,error,error,1521,"ddForCleanup(Int_t port, Int_t proto, Int_t type); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*AsString(TString& out); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDeActivate(Option_t* opt = ""CR""); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*GetContext() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatimeGetExpDate() const; const char*GetHost() const; virtual const char*TObject::GetIconName() const; const char*GetID() const; Int_tGetMethod() const; const char*GetMethodName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetOffSet() const; virtual Option_t*TObject::GetOption() const; TList*GetSecContextCleanup() const; virtual const char*TObject::GetTitle() const; const char*GetToken() const; virtual UInt_tT",MatchSource.WIKI,root/html602/TSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContext.html
https://root.cern/root/html602/TSecContext.html:1605,Availability,error,error,1605,"tion_t* option = """"); virtual const char*AsString(TString& out); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDeActivate(Option_t* opt = ""CR""); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*GetContext() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatimeGetExpDate() const; const char*GetHost() const; virtual const char*TObject::GetIconName() const; const char*GetID() const; Int_tGetMethod() const; const char*GetMethodName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetOffSet() const; virtual Option_t*TObject::GetOption() const; TList*GetSecContextCleanup() const; virtual const char*TObject::GetTitle() const; const char*GetToken() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; virtual Bool_tTObject::Hand",MatchSource.WIKI,root/html602/TSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContext.html
https://root.cern/root/html602/TSecContext.html:117,Modifiability,inherit,inheritance,117,". TSecContext. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSecContext. class TSecContext: public TObject. TSecContext. Contains details about an established security context; Used by THostAuth. Function Members (Methods); public:. virtual~TSecContext(); voidTObject::AbstractMethod(const char* method) const; voidAddForCleanup(Int_t port, Int_t proto, Int_t type); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*AsString(TString& out); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDeActivate(Option_t* opt = ""CR""); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*GetContext() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatime",MatchSource.WIKI,root/html602/TSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContext.html
https://root.cern/root/html602/TSecContext.html:2766,Modifiability,Inherit,InheritsFrom,2766,"ct*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*GetContext() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatimeGetExpDate() const; const char*GetHost() const; virtual const char*TObject::GetIconName() const; const char*GetID() const; Int_tGetMethod() const; const char*GetMethodName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetOffSet() const; virtual Option_t*TObject::GetOption() const; TList*GetSecContextCleanup() const; virtual const char*TObject::GetTitle() const; const char*GetToken() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsA(const char* methodname); Bool_tIsActive() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::oper",MatchSource.WIKI,root/html602/TSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContext.html
https://root.cern/root/html602/TSecContext.html:2832,Modifiability,Inherit,InheritsFrom,2832,"bject::FindObject(const TObject* obj) const; void*GetContext() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatimeGetExpDate() const; const char*GetHost() const; virtual const char*TObject::GetIconName() const; const char*GetID() const; Int_tGetMethod() const; const char*GetMethodName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetOffSet() const; virtual Option_t*TObject::GetOption() const; TList*GetSecContextCleanup() const; virtual const char*TObject::GetTitle() const; const char*GetToken() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsA(const char* methodname); Bool_tIsActive() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, voi",MatchSource.WIKI,root/html602/TSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContext.html
https://root.cern/root/html602/TSecContext.html:7099,Modifiability,Inherit,Inheritance,7099,"tic TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TList*fCleanupPoints to list with info for remote cleanup; void*fContextKrb5, Globus: ptr to specific sec context; TDatimefExpDateExpiring date (one sec precision); TStringfHostRemote host name; TStringfIDString identifying uniquely this context; Int_tfMethodAuthentication method used; TStringfMethodNameAuthentication method name; Int_tfOffSetoffset in remote host auth tab file (in bytes); TStringfTokenToken identifying this authentication; TStringfUserRemote login username. Class Charts. Inheritance Chart:. TObject. ←; TSecContext. ←. TRootSecContext. Function documentation; TSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0); Ctor for SecContext object. TSecContext(const char* url, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0); Ctor for SecContext object.; User and host from url = user@host . TSecContext(const TSecContext& ); copy constructor. TSecContext& operator=(const TSecContext& ); assignement operator. ~TSecContext(); Dtor: delete (deActivate, local/remote cleanup, list removal); all what is still active. void Cleanup(); Cleanup what is still active. void DeActivate(Option_t* opt = ""CR""); Set OffSet to -1 and expiring Date to default; Remove from the list; If Opt contains ""C"" or ""c"", ask for remote cleanup; If Opt contains ""R"" or ""r"", remove from the list; Default Opt=""CR"". void AddForCleanup(Int_t port, Int_t ",MatchSource.WIKI,root/html602/TSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContext.html
https://root.cern/root/html602/TSecContext.html:367,Security,secur,security,367,". TSecContext. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSecContext. class TSecContext: public TObject. TSecContext. Contains details about an established security context; Used by THostAuth. Function Members (Methods); public:. virtual~TSecContext(); voidTObject::AbstractMethod(const char* method) const; voidAddForCleanup(Int_t port, Int_t proto, Int_t type); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*AsString(TString& out); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDeActivate(Option_t* opt = ""CR""); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*GetContext() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatime",MatchSource.WIKI,root/html602/TSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContext.html
https://root.cern/root/html602/TSecContext.html:2656,Security,Hash,Hash,2656,"vent, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*GetContext() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatimeGetExpDate() const; const char*GetHost() const; virtual const char*TObject::GetIconName() const; const char*GetID() const; Int_tGetMethod() const; const char*GetMethodName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetOffSet() const; virtual Option_t*TObject::GetOption() const; TList*GetSecContextCleanup() const; virtual const char*TObject::GetTitle() const; const char*GetToken() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsA(const char* methodname); Bool_tIsActive() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, voi",MatchSource.WIKI,root/html602/TSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContext.html
https://root.cern/root/html602/TSecContext.html:7034,Security,authenticat,authentication,7034,"a Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TList*fCleanupPoints to list with info for remote cleanup; void*fContextKrb5, Globus: ptr to specific sec context; TDatimefExpDateExpiring date (one sec precision); TStringfHostRemote host name; TStringfIDString identifying uniquely this context; Int_tfMethodAuthentication method used; TStringfMethodNameAuthentication method name; Int_tfOffSetoffset in remote host auth tab file (in bytes); TStringfTokenToken identifying this authentication; TStringfUserRemote login username. Class Charts. Inheritance Chart:. TObject. ←; TSecContext. ←. TRootSecContext. Function documentation; TSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0); Ctor for SecContext object. TSecContext(const char* url, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0); Ctor for SecContext object.; User and host from url = user@host . TSecContext(const TSecContext& ); copy constructor. TSecContext& operator=(const TSecContext& ); assignement operator. ~TSecContext(); Dtor: delete (deActivate, local/remote cleanup, list removal); all what is still active. void Cleanup(); Cleanup what is still active. v",MatchSource.WIKI,root/html602/TSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContext.html
https://root.cern/root/html602/TSecContext.html:8245,Security,secur,security,8245,"_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0); Ctor for SecContext object. TSecContext(const char* url, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0); Ctor for SecContext object.; User and host from url = user@host . TSecContext(const TSecContext& ); copy constructor. TSecContext& operator=(const TSecContext& ); assignement operator. ~TSecContext(); Dtor: delete (deActivate, local/remote cleanup, list removal); all what is still active. void Cleanup(); Cleanup what is still active. void DeActivate(Option_t* opt = ""CR""); Set OffSet to -1 and expiring Date to default; Remove from the list; If Opt contains ""C"" or ""c"", ask for remote cleanup; If Opt contains ""R"" or ""r"", remove from the list; Default Opt=""CR"". void AddForCleanup(Int_t port, Int_t proto, Int_t type); Create a new TSecContextCleanup; Internally is added to the list. Bool_t IsA(const char* methodname); Checks if this security context is for method named 'methname'; Case sensitive. Bool_t IsActive() const; Check remote OffSet and expiring Date. void Print(Option_t* option = ""F"") const; If opt is ""F"" (default) print object content.; If opt is ""<number>"" print in special form for calls within THostAuth; with cardinality <number>; If opt is ""S"" prints short in-line form for calls within TFTP,; TSlave, TProof ... const char * AsString(TString& out); Returns short string with relevant information about this; security context. Bool_t CleanupSecContext(Bool_t all); Ask remote client to cleanup security context 'ctx'; If 'all', all sec context with the same host as ctx; are cleaned. void * GetContext() const; { return fContext; }. TDatime GetExpDate() const; { return fExpDate; }. const char * GetHost() const; { return fHost; }. const char * GetID() const; { return fID; }. Int_t GetMethod() const; { return fMethod; }. const char * GetMethodName() const; { return fMethodName; }. Int_t GetOffSet() const; { return fO",MatchSource.WIKI,root/html602/TSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContext.html
https://root.cern/root/html602/TSecContext.html:8740,Security,secur,security,8740,"text(); Dtor: delete (deActivate, local/remote cleanup, list removal); all what is still active. void Cleanup(); Cleanup what is still active. void DeActivate(Option_t* opt = ""CR""); Set OffSet to -1 and expiring Date to default; Remove from the list; If Opt contains ""C"" or ""c"", ask for remote cleanup; If Opt contains ""R"" or ""r"", remove from the list; Default Opt=""CR"". void AddForCleanup(Int_t port, Int_t proto, Int_t type); Create a new TSecContextCleanup; Internally is added to the list. Bool_t IsA(const char* methodname); Checks if this security context is for method named 'methname'; Case sensitive. Bool_t IsActive() const; Check remote OffSet and expiring Date. void Print(Option_t* option = ""F"") const; If opt is ""F"" (default) print object content.; If opt is ""<number>"" print in special form for calls within THostAuth; with cardinality <number>; If opt is ""S"" prints short in-line form for calls within TFTP,; TSlave, TProof ... const char * AsString(TString& out); Returns short string with relevant information about this; security context. Bool_t CleanupSecContext(Bool_t all); Ask remote client to cleanup security context 'ctx'; If 'all', all sec context with the same host as ctx; are cleaned. void * GetContext() const; { return fContext; }. TDatime GetExpDate() const; { return fExpDate; }. const char * GetHost() const; { return fHost; }. const char * GetID() const; { return fID; }. Int_t GetMethod() const; { return fMethod; }. const char * GetMethodName() const; { return fMethodName; }. Int_t GetOffSet() const; { return fOffSet; }. TList * GetSecContextCleanup() const; { return fCleanup; }. const char * GetToken() const; { return fToken; }. const char * GetUser() const; { return fUser; }. Bool_t IsA(const char* methodname). void SetExpDate(TDatime expdate); { fExpDate= expdate; }. void SetID(const char* id); { fID= id; }. void SetOffSet(Int_t offset); { fOffSet = offset; }. void SetUser(const char* user); { fUser = user; }. » Author: G. Ganis 31/03/2003 » Copyrig",MatchSource.WIKI,root/html602/TSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContext.html
https://root.cern/root/html602/TSecContext.html:8825,Security,secur,security,8825,"active. void DeActivate(Option_t* opt = ""CR""); Set OffSet to -1 and expiring Date to default; Remove from the list; If Opt contains ""C"" or ""c"", ask for remote cleanup; If Opt contains ""R"" or ""r"", remove from the list; Default Opt=""CR"". void AddForCleanup(Int_t port, Int_t proto, Int_t type); Create a new TSecContextCleanup; Internally is added to the list. Bool_t IsA(const char* methodname); Checks if this security context is for method named 'methname'; Case sensitive. Bool_t IsActive() const; Check remote OffSet and expiring Date. void Print(Option_t* option = ""F"") const; If opt is ""F"" (default) print object content.; If opt is ""<number>"" print in special form for calls within THostAuth; with cardinality <number>; If opt is ""S"" prints short in-line form for calls within TFTP,; TSlave, TProof ... const char * AsString(TString& out); Returns short string with relevant information about this; security context. Bool_t CleanupSecContext(Bool_t all); Ask remote client to cleanup security context 'ctx'; If 'all', all sec context with the same host as ctx; are cleaned. void * GetContext() const; { return fContext; }. TDatime GetExpDate() const; { return fExpDate; }. const char * GetHost() const; { return fHost; }. const char * GetID() const; { return fID; }. Int_t GetMethod() const; { return fMethod; }. const char * GetMethodName() const; { return fMethodName; }. Int_t GetOffSet() const; { return fOffSet; }. TList * GetSecContextCleanup() const; { return fCleanup; }. const char * GetToken() const; { return fToken; }. const char * GetUser() const; { return fUser; }. Bool_t IsA(const char* methodname). void SetExpDate(TDatime expdate); { fExpDate= expdate; }. void SetID(const char* id); { fID= id; }. void SetOffSet(Int_t offset); { fOffSet = offset; }. void SetUser(const char* user); { fUser = user; }. » Author: G. Ganis 31/03/2003 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-30 15:29; This page has been",MatchSource.WIKI,root/html602/TSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContext.html
https://root.cern/root/html602/TSecContext.html:4904,Testability,Test,TestBit,4904,"tr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = ""F"") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetExpDate(TDatime expdate); voidSetID(const char* id); static voidTObject::SetObjectStat(Bool_t stat); voidSetOffSet(Int_t offset); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUser(const char* user); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSecContext(const char* url, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0); TSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContext.html
https://root.cern/root/html602/TSecContext.html:4943,Testability,Test,TestBits,4943,"tr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = ""F"") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetExpDate(TDatime expdate); voidSetID(const char* id); static voidTObject::SetObjectStat(Bool_t stat); voidSetOffSet(Int_t offset); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUser(const char* user); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSecContext(const char* url, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0); TSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContext.html
https://root.cern/root/html602/TSecContext.html:7069,Testability,log,login,7069,"a Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TList*fCleanupPoints to list with info for remote cleanup; void*fContextKrb5, Globus: ptr to specific sec context; TDatimefExpDateExpiring date (one sec precision); TStringfHostRemote host name; TStringfIDString identifying uniquely this context; Int_tfMethodAuthentication method used; TStringfMethodNameAuthentication method name; Int_tfOffSetoffset in remote host auth tab file (in bytes); TStringfTokenToken identifying this authentication; TStringfUserRemote login username. Class Charts. Inheritance Chart:. TObject. ←; TSecContext. ←. TRootSecContext. Function documentation; TSecContext(const char* user, const char* host, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0); Ctor for SecContext object. TSecContext(const char* url, Int_t meth, Int_t offset, const char* id, const char* token, TDatime expdate = kROOTTZERO, void* ctx = 0); Ctor for SecContext object.; User and host from url = user@host . TSecContext(const TSecContext& ); copy constructor. TSecContext& operator=(const TSecContext& ); assignement operator. ~TSecContext(); Dtor: delete (deActivate, local/remote cleanup, list removal); all what is still active. void Cleanup(); Cleanup what is still active. v",MatchSource.WIKI,root/html602/TSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContext.html
https://root.cern/root/html602/TSecContext.html:806,Usability,Clear,Clear,806," virtual~TSecContext(); voidTObject::AbstractMethod(const char* method) const; voidAddForCleanup(Int_t port, Int_t proto, Int_t type); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*AsString(TString& out); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDeActivate(Option_t* opt = ""CR""); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*GetContext() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatime",MatchSource.WIKI,root/html602/TSecContext.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContext.html
https://root.cern/root/html602/TSecContextCleanup.html:1275,Availability,Error,Error,1275," virtual~TSecContextCleanup(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py)",MatchSource.WIKI,root/html602/TSecContextCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContextCleanup.html
https://root.cern/root/html602/TSecContextCleanup.html:1404,Availability,error,error,1404," virtual~TSecContextCleanup(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py)",MatchSource.WIKI,root/html602/TSecContextCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContextCleanup.html
https://root.cern/root/html602/TSecContextCleanup.html:1488,Availability,error,error,1488," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetPort() const; Int_tGetProtocol() const; virtual const char*TObject::GetTitle() const; Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bo",MatchSource.WIKI,root/html602/TSecContextCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContextCleanup.html
https://root.cern/root/html602/TSecContextCleanup.html:124,Modifiability,inherit,inheritance,124,". TSecContextCleanup. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSecContextCleanup. class TSecContextCleanup: public TObject. TSecContext. Contains details about an established security context; Used by THostAuth. Function Members (Methods); public:. virtual~TSecContextCleanup(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py)",MatchSource.WIKI,root/html602/TSecContextCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContextCleanup.html
https://root.cern/root/html602/TSecContextCleanup.html:2438,Modifiability,Inherit,InheritsFrom,2438,"(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetPort() const; Int_tGetProtocol() const; virtual const char*TObject::GetTitle() const; Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html602/TSecContextCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContextCleanup.html
https://root.cern/root/html602/TSecContextCleanup.html:2504,Modifiability,Inherit,InheritsFrom,2504,"idTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetPort() const; Int_tGetProtocol() const; virtual const char*TObject::GetTitle() const; Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSecContextCleanup&operator=(const TSecContextClean",MatchSource.WIKI,root/html602/TSecContextCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContextCleanup.html
https://root.cern/root/html602/TSecContextCleanup.html:5928,Modifiability,Inherit,Inheritance,5928,"ct::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfPort; Int_tfServerProtocol; Int_tfServerType0 = sockd, 1 = rootd, 2 = proofd. Class Charts. Inheritance Chart:. TObject. ←; TSecContextCleanup. Function documentation; TSecContext& operator=(const TSecContextCleanup& ). Bool_t IsA(const char *methodname). TSecContextCleanup(Int_t port, Int_t proto, Int_t type); { }. virtual ~TSecContextCleanup(); { }. Int_t GetPort() const; { return fPort; }. Int_t GetProtocol() const; { return fServerProtocol; }. Int_t GetType() const; { return fServerType; }. » Author: G. Ganis 31/03/2003 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSecContextCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContextCleanup.html
https://root.cern/root/html602/TSecContextCleanup.html:388,Security,secur,security,388,". TSecContextCleanup. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSecContextCleanup. class TSecContextCleanup: public TObject. TSecContext. Contains details about an established security context; Used by THostAuth. Function Members (Methods); public:. virtual~TSecContextCleanup(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py)",MatchSource.WIKI,root/html602/TSecContextCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContextCleanup.html
https://root.cern/root/html602/TSecContextCleanup.html:2328,Security,Hash,Hash,2328,"rtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetPort() const; Int_tGetProtocol() const; virtual const char*TObject::GetTitle() const; Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html602/TSecContextCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContextCleanup.html
https://root.cern/root/html602/TSecContextCleanup.html:4462,Testability,Test,TestBit,4462,"tUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSecContextCleanup&operator=(const TSecContextCleanup&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSecContextCleanup(const TSecContextCleanup&); TSecContextCleanup(Int_t port, Int_t proto, Int_t type); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSecContextCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContextCleanup.html
https://root.cern/root/html602/TSecContextCleanup.html:4501,Testability,Test,TestBits,4501,"tUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSecContextCleanup&operator=(const TSecContextCleanup&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSecContextCleanup(const TSecContextCleanup&); TSecContextCleanup(Int_t port, Int_t proto, Int_t type); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSecContextCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContextCleanup.html
https://root.cern/root/html602/TSecContextCleanup.html:735,Usability,Clear,Clear,735," virtual~TSecContextCleanup(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py)",MatchSource.WIKI,root/html602/TSecContextCleanup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSecContextCleanup.html
https://root.cern/root/html602/TSelector.html:3913,Availability,Error,Error,3913,,MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:4042,Availability,error,error,4042,"const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*GetOption() const; virtual TList*GetOutputList() const; static TSelector*GetSelector(const char* filename); virtual Long64_tGetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUn",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:4126,Availability,error,error,4126,"d(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*GetOption() const; virtual TList*GetOutputList() const; static TSelector*GetSelector(const char* filename); virtual Long64_tGetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTO",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:9215,Availability,avail,available,9215,"=(const TSelector&); TSelector(const TSelector&). Data Members; public:. static TSelector::EAbortkAbortFile; static TSelector::EAbortkAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortkContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortfAbortAbort status; TList*fInputList of objects available during processing; TObject*fObject!Current object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and ",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:12832,Availability,avail,available,12832,"ointer to the TChain being processed,; use fChain->GetTree()->GetEntry(entry);. void ProcessFill(Long64_t ); This method is called for all selected entries. User fills histograms; in this function. This method is obsolete, use Process(). WARNING when a selector is used with a TChain:; in the Process, ProcessCut, ProcessFill function, you must use; the pointer to the current Tree to call GetEntry(entry).; entry is always the local entry number in the current tree.; Assuming that fChain is the pointer to the TChain being processed,; use fChain->GetTree()->GetEntry(entry);. Bool_t Process(Long64_t ); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either t01::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the return value of TTree::Process(). The return value is currently not used. TSelector(const TSelector& ). TSelector& operator=(const TSelector& ). int Version() const; { return 0; }. void Init(TTree* ); { }. void Begin(TTree* ); { }. void SlaveBegin(TTree* ); { }. Bool_t Notify(); { return kTRUE; }. const char * GetOption() const; { return fOption; }. Long64_t GetStatus() const; { return fStatus; }. Int_t GetEntry(Long64_t , Int_t = 0); { return 0; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. void SetInputList(TList* input); { fInput = input; }. void SetStatus(Long64_t status); { fStatus = status; }. TList * Get",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:115,Modifiability,inherit,inheritance,115,". TSelector. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TSelector. class TSelector: public TObject. A TSelector object is used by the TTree::Draw, TTree::Scan,; TTree::Process to navigate in a TTree and make selections.; It contains the following main methods:. void TSelector::Init(TTree *t). Called every time a new TTree is; attached. void TSelector::SlaveBegin(). Create e.g. histograms in this method.; This method is called (with or without PROOF) before looping on the; entries in the Tree. When using PROOF, this method is called on; each worker node.; void TSelector::Begin(). Mostly for backward compatibility; use; SlaveBegin() instead. Both methods are called before looping on the; entries in the Tree. When using PROOF, Begin() is called on the; client only. Bool_t TSelector::Notify(). This method is called at the first entry; of a new file in a chain. Bool_t TSelector::Process(Long64_t entry). This method is called; to process an entry. It is the user's responsability to read; the corresponding entry in memory (may be just a partial read).; Once the entry is in memory one can apply a selection and if the; entry is selected histograms can be filled. Processing stops; when this function returns kFALSE. This function combines the; next two functions in one, avoiding to have to maintain state; in the class to communicate between these two functions.; See WARNING below about entry.; This method is used by PROOF.; Bool_t TSelector::ProcessCut(Long64_t entry). This method is called; before processing entry. It is the user's responsability to read; the corresponding entry in memory (may be just a partial read).; The function returns kTRUE if the entry must be processed,; kFALSE otherwise. This method is obsolete, use Process().; See WARNING below about entry.; v",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:5246,Modifiability,Inherit,InheritsFrom,5246," const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*GetOption() const; virtual TList*GetOutputList() const; static TSelector*GetSelector(const char* filename); virtual Long64_tGetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tIsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:5312,Modifiability,Inherit,InheritsFrom,5312,"nst char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*GetOption() const; virtual TList*GetOutputList() const; static TSelector*GetSelector(const char* filename); virtual Long64_tGetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tIsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t s",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:9466,Modifiability,Inherit,Inheritance,9466,"bject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortkContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortfAbortAbort status; TList*fInputList of objects available during processing; TObject*fObject!Current object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, s",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:2535,Performance,perform,performs,2535,"functions.; See WARNING below about entry.; This method is used by PROOF.; Bool_t TSelector::ProcessCut(Long64_t entry). This method is called; before processing entry. It is the user's responsability to read; the corresponding entry in memory (may be just a partial read).; The function returns kTRUE if the entry must be processed,; kFALSE otherwise. This method is obsolete, use Process().; See WARNING below about entry.; void TSelector::ProcessFill(Long64_t entry). This method is called; for all selected entries. User fills histograms in this function.; This method is obsolete, use Process().; See WARNING below about entry.; void TSelector::SlaveTerminate(). This method is called at the end of; the loop on all PROOF worker nodes. In local mode this method is; called on the client too.; void TSelector::Terminate(). This method is called at the end of; the loop on all entries. When using PROOF Terminate() is call on; the client only. Typically one performs the fits on the produced; histograms or write the histograms to file in this method. WARNING when a selector is used with a TChain:; in the Process, ProcessCut, ProcessFill function, you must use; the pointer to the current Tree to call GetEntry(entry).; entry is always the local entry number in the current tree.; Assuming that fChain is the pointer to the TChain being processed,; use fChain->GetTree()->GetEntry(entry);. Function Members (Methods); public:. virtual~TSelector(); virtual voidAbort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:10441,Performance,load,loaded,10441," Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older than file.o; and file.so, the file.C is not compiled, only file.so is loaded. The static function returns a pointer to a TSelector object. Bool_t IsStandardDraw(const char* selec); Find out if this is a standard selection used for Draw actions; (either TSelectorDraw, TProofDraw or deriving from them). Bool_t ProcessCut(Long64_t ); This method is called before processing entry. It is the user's responsability to read; the corresponding entry in memory (may be just a partial read).; The function returns kTRUE if the ",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:10715,Performance,load,loaded,10715,"r3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older than file.o; and file.so, the file.C is not compiled, only file.so is loaded. The static function returns a pointer to a TSelector object. Bool_t IsStandardDraw(const char* selec); Find out if this is a standard selection used for Draw actions; (either TSelectorDraw, TProofDraw or deriving from them). Bool_t ProcessCut(Long64_t ); This method is called before processing entry. It is the user's responsability to read; the corresponding entry in memory (may be just a partial read).; The function returns kTRUE if the entry must be processed,; kFALSE otherwise. This method is obsolete, use Process(). WARNING when a selector is used with a TChain:; in the Process, ProcessCut, ProcessFill function, you must use; the pointer to the current Tree to call ",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:10904,Performance,load,loaded,10904,"tProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older than file.o; and file.so, the file.C is not compiled, only file.so is loaded. The static function returns a pointer to a TSelector object. Bool_t IsStandardDraw(const char* selec); Find out if this is a standard selection used for Draw actions; (either TSelectorDraw, TProofDraw or deriving from them). Bool_t ProcessCut(Long64_t ); This method is called before processing entry. It is the user's responsability to read; the corresponding entry in memory (may be just a partial read).; The function returns kTRUE if the entry must be processed,; kFALSE otherwise. This method is obsolete, use Process(). WARNING when a selector is used with a TChain:; in the Process, ProcessCut, ProcessFill function, you must use; the pointer to the current Tree to call GetEntry(entry).; entry is always the local entry number in the current tree.; Assuming that fChain is the pointer to the TChain being processed,; use fChain->GetTree()->GetEntry(entry);. v",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:11015,Performance,load,loaded,11015,"ile in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older than file.o; and file.so, the file.C is not compiled, only file.so is loaded. The static function returns a pointer to a TSelector object. Bool_t IsStandardDraw(const char* selec); Find out if this is a standard selection used for Draw actions; (either TSelectorDraw, TProofDraw or deriving from them). Bool_t ProcessCut(Long64_t ); This method is called before processing entry. It is the user's responsability to read; the corresponding entry in memory (may be just a partial read).; The function returns kTRUE if the entry must be processed,; kFALSE otherwise. This method is obsolete, use Process(). WARNING when a selector is used with a TChain:; in the Process, ProcessCut, ProcessFill function, you must use; the pointer to the current Tree to call GetEntry(entry).; entry is always the local entry number in the current tree.; Assuming that fChain is the pointer to the TChain being processed,; use fChain->GetTree()->GetEntry(entry);. void ProcessFill(Long64_t ); This method is called for all selected entries. User fills histograms; in this function. This meth",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:12599,Performance,load,loaded,12599,"h a TChain:; in the Process, ProcessCut, ProcessFill function, you must use; the pointer to the current Tree to call GetEntry(entry).; entry is always the local entry number in the current tree.; Assuming that fChain is the pointer to the TChain being processed,; use fChain->GetTree()->GetEntry(entry);. void ProcessFill(Long64_t ); This method is called for all selected entries. User fills histograms; in this function. This method is obsolete, use Process(). WARNING when a selector is used with a TChain:; in the Process, ProcessCut, ProcessFill function, you must use; the pointer to the current Tree to call GetEntry(entry).; entry is always the local entry number in the current tree.; Assuming that fChain is the pointer to the TChain being processed,; use fChain->GetTree()->GetEntry(entry);. Bool_t Process(Long64_t ); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either t01::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the return value of TTree::Process(). The return value is currently not used. TSelector(const TSelector& ). TSelector& operator=(const TSelector& ). int Version() const; { return 0; }. void Init(TTree* ); { }. void Begin(TTree* ); { }. void SlaveBegin(TTree* ); { }. Bool_t Notify(); { return kTRUE; }. const char * GetOption() const; { return fOption; }. Long64_t GetStatus() const; { return fStatus; }. Int_t GetEntry(Long64_t , Int_t = 0); { return 0; }. void ",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:12818,Performance,load,loaded,12818,"ointer to the TChain being processed,; use fChain->GetTree()->GetEntry(entry);. void ProcessFill(Long64_t ); This method is called for all selected entries. User fills histograms; in this function. This method is obsolete, use Process(). WARNING when a selector is used with a TChain:; in the Process, ProcessCut, ProcessFill function, you must use; the pointer to the current Tree to call GetEntry(entry).; entry is always the local entry number in the current tree.; Assuming that fChain is the pointer to the TChain being processed,; use fChain->GetTree()->GetEntry(entry);. Bool_t Process(Long64_t ); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either t01::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the return value of TTree::Process(). The return value is currently not used. TSelector(const TSelector& ). TSelector& operator=(const TSelector& ). int Version() const; { return 0; }. void Init(TTree* ); { }. void Begin(TTree* ); { }. void SlaveBegin(TTree* ); { }. Bool_t Notify(); { return kTRUE; }. const char * GetOption() const; { return fOption; }. Long64_t GetStatus() const; { return fStatus; }. Int_t GetEntry(Long64_t , Int_t = 0); { return 0; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. void SetInputList(TList* input); { fInput = input; }. void SetStatus(Long64_t status); { fStatus = status; }. TList * Get",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:1492,Safety,avoid,avoiding,1492,"ed every time a new TTree is; attached. void TSelector::SlaveBegin(). Create e.g. histograms in this method.; This method is called (with or without PROOF) before looping on the; entries in the Tree. When using PROOF, this method is called on; each worker node.; void TSelector::Begin(). Mostly for backward compatibility; use; SlaveBegin() instead. Both methods are called before looping on the; entries in the Tree. When using PROOF, Begin() is called on the; client only. Bool_t TSelector::Notify(). This method is called at the first entry; of a new file in a chain. Bool_t TSelector::Process(Long64_t entry). This method is called; to process an entry. It is the user's responsability to read; the corresponding entry in memory (may be just a partial read).; Once the entry is in memory one can apply a selection and if the; entry is selected histograms can be filled. Processing stops; when this function returns kFALSE. This function combines the; next two functions in one, avoiding to have to maintain state; in the class to communicate between these two functions.; See WARNING below about entry.; This method is used by PROOF.; Bool_t TSelector::ProcessCut(Long64_t entry). This method is called; before processing entry. It is the user's responsability to read; the corresponding entry in memory (may be just a partial read).; The function returns kTRUE if the entry must be processed,; kFALSE otherwise. This method is obsolete, use Process().; See WARNING below about entry.; void TSelector::ProcessFill(Long64_t entry). This method is called; for all selected entries. User fills histograms in this function.; This method is obsolete, use Process().; See WARNING below about entry.; void TSelector::SlaveTerminate(). This method is called at the end of; the loop on all PROOF worker nodes. In local mode this method is; called on the client too.; void TSelector::Terminate(). This method is called at the end of; the loop on all entries. When using PROOF Terminate() is call on; the cl",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:9836,Safety,Abort,Abort,9836,"s)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortfAbortAbort status; TList*fInputList of objects available during processing; TObject*fObject!Current object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:9900,Safety,Abort,Abort,9900,"s)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortfAbortAbort status; TList*fInputList of objects available during processing; TObject*fObject!Current object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:9971,Safety,abort,aborted,9971,"tatic TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortfAbortAbort status; TList*fInputList of objects available during processing; TObject*fObject!Current object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older tha",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:10039,Safety,abort,aborted,10039,"s)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortfAbortAbort status; TList*fInputList of objects available during processing; TObject*fObject!Current object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older than file.o; and file.so, the file.C is not compiled, only file.so is loaded. The static function returns a pointer to a TS",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:10149,Safety,abort,aborted,10149,"s)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortfAbortAbort status; TList*fInputList of objects available during processing; TObject*fObject!Current object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older than file.o; and file.so, the file.C is not compiled, only file.so is loaded. The static function returns a pointer to a TS",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:10158,Safety,Abort,Abort,10158,"nputList of objects available during processing; TObject*fObject!Current object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older than file.o; and file.so, the file.C is not compiled, only file.so is loaded. The static function returns a pointer to a TSelector object. Bool_t IsStandardDraw(const char* selec); Find out if this is a standard selection used for Draw actions; (eithe",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:10241,Safety,abort,abort,10241,"object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older than file.o; and file.so, the file.C is not compiled, only file.so is loaded. The static function returns a pointer to a TSelector object. Bool_t IsStandardDraw(const char* selec); Find out if this is a standard selection used for Draw actions; (either TSelectorDraw, TProofDraw or deriving from them). Bool_t ProcessCut(Lon",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:10308,Safety,abort,abort,10308,"to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older than file.o; and file.so, the file.C is not compiled, only file.so is loaded. The static function returns a pointer to a TSelector object. Bool_t IsStandardDraw(const char* selec); Find out if this is a standard selection used for Draw actions; (either TSelectorDraw, TProofDraw or deriving from them). Bool_t ProcessCut(Long64_t ); This method is called before processing entry. It is the u",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:13094,Safety,Abort,Abort,13094,"d with a TChain:; in the Process, ProcessCut, ProcessFill function, you must use; the pointer to the current Tree to call GetEntry(entry).; entry is always the local entry number in the current tree.; Assuming that fChain is the pointer to the TChain being processed,; use fChain->GetTree()->GetEntry(entry);. Bool_t Process(Long64_t ); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either t01::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the return value of TTree::Process(). The return value is currently not used. TSelector(const TSelector& ). TSelector& operator=(const TSelector& ). int Version() const; { return 0; }. void Init(TTree* ); { }. void Begin(TTree* ); { }. void SlaveBegin(TTree* ); { }. Bool_t Notify(); { return kTRUE; }. const char * GetOption() const; { return fOption; }. Long64_t GetStatus() const; { return fStatus; }. Int_t GetEntry(Long64_t , Int_t = 0); { return 0; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. void SetInputList(TList* input); { fInput = input; }. void SetStatus(Long64_t status); { fStatus = status; }. TList * GetInputList() const; { return fInput; }. TList * GetOutputList() const; { return fOutput; }. void SlaveTerminate(); { }. void Terminate(); { }. EAbort GetAbort() const; { return fAbort; }. void ResetAbort(); { fAbort = kContinue; }. » Author: Rene Brun 05/02/97 » Copyr",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:5136,Security,Hash,Hash,5136,"virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*GetOption() const; virtual TList*GetOutputList() const; static TSelector*GetSelector(const char* filename); virtual Long64_tGetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tIsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* pt",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:7655,Testability,Test,TestBit,7655,"voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t); virtual Bool_tProcessCut(Long64_t); virtual voidProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetInputList(TList* input); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(const char* option); virtual voidSetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree*); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelector(); virtual voidTObject::UseCurrentStyle(); virtual intVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:7694,Testability,Test,TestBits,7694,"voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t); virtual Bool_tProcessCut(Long64_t); virtual voidProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetInputList(TList* input); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(const char* option); virtual voidSetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree*); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelector(); virtual voidTObject::UseCurrentStyle(); virtual intVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:3373,Usability,Clear,Clear,3373,,MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelector.html:12941,Usability,simpl,simple,12941," in this function. This method is obsolete, use Process(). WARNING when a selector is used with a TChain:; in the Process, ProcessCut, ProcessFill function, you must use; the pointer to the current Tree to call GetEntry(entry).; entry is always the local entry number in the current tree.; Assuming that fChain is the pointer to the TChain being processed,; use fChain->GetTree()->GetEntry(entry);. Bool_t Process(Long64_t ); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either t01::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the return value of TTree::Process(). The return value is currently not used. TSelector(const TSelector& ). TSelector& operator=(const TSelector& ). int Version() const; { return 0; }. void Init(TTree* ); { }. void Begin(TTree* ); { }. void SlaveBegin(TTree* ); { }. Bool_t Notify(); { return kTRUE; }. const char * GetOption() const; { return fOption; }. Long64_t GetStatus() const; { return fStatus; }. Int_t GetEntry(Long64_t , Int_t = 0); { return 0; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. void SetInputList(TList* input); { fInput = input; }. void SetStatus(Long64_t status); { fStatus = status; }. TList * GetInputList() const; { return fInput; }. TList * GetOutputList() const; { return fOutput; }. void SlaveTerminate(); { }. void Terminate(); { }. EAbort GetAbort() const; { return fA",MatchSource.WIKI,root/html602/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelector.html
https://root.cern/root/html602/TSelectorCint.html:1437,Availability,Error,Error,1437,"irtual~TSelectorCint(); virtual voidAbort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual TClass*GetInterpretedClass() const; virtual TSelector*GetInterpretedSelector() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjec",MatchSource.WIKI,root/html602/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorCint.html
https://root.cern/root/html602/TSelectorCint.html:1566,Availability,error,error,1566,"onst char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual TClass*GetInterpretedClass() const; virtual TSelector*GetInterpretedSelector() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSel",MatchSource.WIKI,root/html602/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorCint.html
https://root.cern/root/html602/TSelectorCint.html:1650,Availability,error,error,1650,"tual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual TClass*GetInterpretedClass() const; virtual TSelector*GetInterpretedSelector() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tGetStatus() const; virtual const char*T",MatchSource.WIKI,root/html602/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorCint.html
https://root.cern/root/html602/TSelectorCint.html:7565,Availability,avail,available,7565,"lector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; ClassInfo_t*fClass!; CallFunc_t*fFuncAbort!; CallFunc_t*fFuncBegin!; CallFunc_t*fFuncCut!; CallFunc_t*fFuncFill!; CallFunc_t*fFuncGetAbort!; CallFunc_t*fFuncGetStat!; CallFunc_t*fFuncInit!; CallFunc_t*fFuncInp!; CallFunc_t*fFuncNotif!; CallFunc_t*fFuncObj!; CallFunc_t*fFuncOption!; CallFunc_t*fFuncOut!; CallFunc_t*fFuncProc!; CallFunc_t*fFuncResetAbort!; CallFunc_t*fFuncSlBegin!; CallFunc_t*fFuncSlTerm!; CallFunc_t*fFuncTerm!; CallFunc_t*fFuncVersion!; TList*TSelector::fInputList of objects available during processing; TSelector*fIntSelectorPointer to interpreted selector (if interpreted); Bool_tfIsOwnerTrue if fIntSelector shoudl be deleted when the this object is deleted.; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorCint. Function documentation; TSelectorCint(); Default constructor for a Selector. ~TSelectorCint(); destructor for a Selector. void SetFuncProto(CallFunc_t* cf, ClassInfo_t* cl, const char* fname, const char* argtype, Bool_t required = kTRUE); Set the function prototype. void Build(TSelector* iselector, ClassI",MatchSource.WIKI,root/html602/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorCint.html
https://root.cern/root/html602/TSelectorCint.html:8772,Availability,avail,available,8772,"ect is deleted.; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorCint. Function documentation; TSelectorCint(); Default constructor for a Selector. ~TSelectorCint(); destructor for a Selector. void SetFuncProto(CallFunc_t* cf, ClassInfo_t* cl, const char* fname, const char* argtype, Bool_t required = kTRUE); Set the function prototype. void Build(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); Initialize the CallFunc objects when selector is interpreted. int Version() const; Invoke the Version function via the interpreter. void Init(TTree* ); Invoke the Init function via the interpreter. void Begin(TTree* tree); Invoke the Begin function via the interpreter. void SlaveBegin(TTree* ); Invoke the SlaveBegin function via the interpreter if available. Bool_t Notify(); Invoke the Notify function via the interpreter. Bool_t ProcessCut(Long64_t entry); Invoke the ProcessCut function via the interpreter. void ProcessFill(Long64_t entry); Invoke the ProcessFill function via the interpreter. Bool_t Process(Long64_t entry); Invoke the ProcessCut function via the interpreter. void SetOption(const char* option); Set the selector option. void SetObject(TObject* obj); Set the current object. void SetInputList(TList* input); Set the selector list of input objects. TList * GetOutputList() const; Return the list of output object. void SlaveTerminate(); Invoke the SlaveTerminate function via the interpreter if available. void Terminate(); Invoke the Terminate function via the interpreter. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Invoke the GetAbort function via the interpreter. TSelector::EAbort GetAbort() const; Invoke the GetAbort function via the interpreter. void ResetAb",MatchSource.WIKI,root/html602/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorCint.html
https://root.cern/root/html602/TSelectorCint.html:9440,Availability,avail,available,9440,"tor* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); Initialize the CallFunc objects when selector is interpreted. int Version() const; Invoke the Version function via the interpreter. void Init(TTree* ); Invoke the Init function via the interpreter. void Begin(TTree* tree); Invoke the Begin function via the interpreter. void SlaveBegin(TTree* ); Invoke the SlaveBegin function via the interpreter if available. Bool_t Notify(); Invoke the Notify function via the interpreter. Bool_t ProcessCut(Long64_t entry); Invoke the ProcessCut function via the interpreter. void ProcessFill(Long64_t entry); Invoke the ProcessFill function via the interpreter. Bool_t Process(Long64_t entry); Invoke the ProcessCut function via the interpreter. void SetOption(const char* option); Set the selector option. void SetObject(TObject* obj); Set the current object. void SetInputList(TList* input); Set the selector list of input objects. TList * GetOutputList() const; Return the list of output object. void SlaveTerminate(); Invoke the SlaveTerminate function via the interpreter if available. void Terminate(); Invoke the Terminate function via the interpreter. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Invoke the GetAbort function via the interpreter. TSelector::EAbort GetAbort() const; Invoke the GetAbort function via the interpreter. void ResetAbort(); Invoke the GetAbort function via the interpreter. Long64_t GetStatus() const; Invoke the GetStatus function via the interpreter. TClass * GetInterpretedClass() const; Retrieve the TClass object for the interpreted class. TSelectorCint(). TSelector * GetInterpretedSelector() const; { return fIntSelector; }. » Author: Rene Brun 05/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorCint.html
https://root.cern/root/html602/TSelectorCint.html:119,Modifiability,inherit,inheritance,119,". TSelectorCint. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TSelectorCint. class TSelectorCint: public TSelector. This class is a special version of TSelector for user interpreted; classes. Function Members (Methods); public:. virtual~TSelectorCint(); virtual voidAbort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetD",MatchSource.WIKI,root/html602/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorCint.html
https://root.cern/root/html602/TSelectorCint.html:2908,Modifiability,Inherit,InheritsFrom,2908,"* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual TClass*GetInterpretedClass() const; virtual TSelector*GetInterpretedSelector() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tGetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); v",MatchSource.WIKI,root/html602/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorCint.html
https://root.cern/root/html602/TSelectorCint.html:2974,Modifiability,Inherit,InheritsFrom,2974,"ption_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual TClass*GetInterpretedClass() const; virtual TSelector*GetInterpretedSelector() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tGetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new",MatchSource.WIKI,root/html602/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorCint.html
https://root.cern/root/html602/TSelectorCint.html:8019,Modifiability,Inherit,Inheritance,8019,"or::EAbortTSelector::fAbortAbort status; ClassInfo_t*fClass!; CallFunc_t*fFuncAbort!; CallFunc_t*fFuncBegin!; CallFunc_t*fFuncCut!; CallFunc_t*fFuncFill!; CallFunc_t*fFuncGetAbort!; CallFunc_t*fFuncGetStat!; CallFunc_t*fFuncInit!; CallFunc_t*fFuncInp!; CallFunc_t*fFuncNotif!; CallFunc_t*fFuncObj!; CallFunc_t*fFuncOption!; CallFunc_t*fFuncOut!; CallFunc_t*fFuncProc!; CallFunc_t*fFuncResetAbort!; CallFunc_t*fFuncSlBegin!; CallFunc_t*fFuncSlTerm!; CallFunc_t*fFuncTerm!; CallFunc_t*fFuncVersion!; TList*TSelector::fInputList of objects available during processing; TSelector*fIntSelectorPointer to interpreted selector (if interpreted); Bool_tfIsOwnerTrue if fIntSelector shoudl be deleted when the this object is deleted.; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorCint. Function documentation; TSelectorCint(); Default constructor for a Selector. ~TSelectorCint(); destructor for a Selector. void SetFuncProto(CallFunc_t* cf, ClassInfo_t* cl, const char* fname, const char* argtype, Bool_t required = kTRUE); Set the function prototype. void Build(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); Initialize the CallFunc objects when selector is interpreted. int Version() const; Invoke the Version function via the interpreter. void Init(TTree* ); Invoke the Init function via the interpreter. void Begin(TTree* tree); Invoke the Begin function via the interpreter. void SlaveBegin(TTree* ); Invoke the SlaveBegin function via the interpreter if available. Bool_t Notify(); Invoke the Notify function via the interpreter. Bool_t ProcessCut(Long64_t entry); Invoke the ProcessCut function via the interpreter. void ProcessFill(Long64_t entry); Invoke the ProcessFill function via the interpreter. Bool_t",MatchSource.WIKI,root/html602/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorCint.html
https://root.cern/root/html602/TSelectorCint.html:9525,Safety,Abort,Abort,9525,"tor* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); Initialize the CallFunc objects when selector is interpreted. int Version() const; Invoke the Version function via the interpreter. void Init(TTree* ); Invoke the Init function via the interpreter. void Begin(TTree* tree); Invoke the Begin function via the interpreter. void SlaveBegin(TTree* ); Invoke the SlaveBegin function via the interpreter if available. Bool_t Notify(); Invoke the Notify function via the interpreter. Bool_t ProcessCut(Long64_t entry); Invoke the ProcessCut function via the interpreter. void ProcessFill(Long64_t entry); Invoke the ProcessFill function via the interpreter. Bool_t Process(Long64_t entry); Invoke the ProcessCut function via the interpreter. void SetOption(const char* option); Set the selector option. void SetObject(TObject* obj); Set the current object. void SetInputList(TList* input); Set the selector list of input objects. TList * GetOutputList() const; Return the list of output object. void SlaveTerminate(); Invoke the SlaveTerminate function via the interpreter if available. void Terminate(); Invoke the Terminate function via the interpreter. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Invoke the GetAbort function via the interpreter. TSelector::EAbort GetAbort() const; Invoke the GetAbort function via the interpreter. void ResetAbort(); Invoke the GetAbort function via the interpreter. Long64_t GetStatus() const; Invoke the GetStatus function via the interpreter. TClass * GetInterpretedClass() const; Retrieve the TClass object for the interpreted class. TSelectorCint(). TSelector * GetInterpretedSelector() const; { return fIntSelector; }. » Author: Rene Brun 05/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorCint.html
https://root.cern/root/html602/TSelectorCint.html:2798,Security,Hash,Hash,2798,"st; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual TClass*GetInterpretedClass() const; virtual TSelector*GetInterpretedSelector() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tGetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete",MatchSource.WIKI,root/html602/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorCint.html
https://root.cern/root/html602/TSelectorCint.html:5404,Testability,Test,TestBit,5404,"r new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSelectorCint&operator=(const TSelectorCint&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t entry); virtual Bool_tProcessCut(Long64_t entry); virtual voidProcessFill(Long64_t entry); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetInputList(TList* input); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree*); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorCint(); TSelectorCint(const TSelectorCint&); virtual voidTObject::UseCurrentStyle(); virtual intVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorCint.html
https://root.cern/root/html602/TSelectorCint.html:5443,Testability,Test,TestBits,5443,"r new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSelectorCint&operator=(const TSelectorCint&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t entry); virtual Bool_tProcessCut(Long64_t entry); virtual voidProcessFill(Long64_t entry); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetInputList(TList* input); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree*); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorCint(); TSelectorCint(const TSelectorCint&); virtual voidTObject::UseCurrentStyle(); virtual intVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorCint.html
https://root.cern/root/html602/TSelectorCint.html:897,Usability,Clear,Clear,897," virtual~TSelectorCint(); virtual voidAbort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetD",MatchSource.WIKI,root/html602/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorCint.html
https://root.cern/root/html602/TSelectorDraw.html:1352,Availability,Error,Error,1352," virtual~TSelectorDraw(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Int_tGetAction() const; virtual Bool_tGetCleanElist() const; virtual Int_tGetDimension() const; ",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:1481,Availability,error,error,1481," char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Int_tGetAction() const; virtual Bool_tGetCleanElist() const; virtual Int_tGetDimension() const; virtual Long64_tGetDrawFlag() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; Int_tGetMultiplicity() const; virtual const char*TObject::GetName() const; virtual Int_tGetNfill() const; TObject*GetObject() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_t",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:1565,Availability,error,error,1565,"st char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Int_tGetAction() const; virtual Bool_tGetCleanElist() const; virtual Int_tGetDimension() const; virtual Long64_tGetDrawFlag() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; Int_tGetMultiplicity() const; virtual const char*TObject::GetName() const; virtual Int_tGetNfill() const; TObject*GetObject() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); TH1*GetOldHistogram() const; virtual const char*TSelector:",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:8387,Availability,avail,available,8387,Object::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; Int_tfAction! Action type; Bool_tfCleanElisttrue if original Tree elist must be saved; Long64_tfCurrentSubEntryCurrent subentry when fSelectMultiple is true. Used to fill TEntryListArray; Int_tfDimensionDimension of the current expression; Long64_tfDraw! Last entry loop number when object was drawn; Int_tfForceReadForce Read flag; TList*TSelector::fInputList of objects available during processing; TTreeFormulaManager*fManagerPointer to the formula manager; Int_tfMultiplicityIndicator of the variability of the size of entries; Int_t*fNbins![fDimension] Number of bins per dimension; Int_tfNfill! Total number of histogram fills; Bool_tfObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObject!Current object if processing object (vs. TTree); Long64_tfOldEstimatevalue of Tree fEstimate when selector is called; TH1*fOldHistogram! Pointer to previously used histogram; TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TTreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries; Long64_tTSelector::fStatusSelector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; TEntryListArray*fTreeElistArray! pointer to Tree Event list array; Double_t**fVal![fSelectedRows][fDimension],MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:11993,Availability,avail,available,11993,"sponding to the i-th component; of the formula being processed (where the component are ':' separated).; The actual number of entries is:; GetSelectedRows() % tree->GetEstimate(); Note GetSelectedRows currently returns the actual number of values plotted; and thus if the formula contains arrays, this number might be greater than; the number of entries in the trees.; By default TTree::Draw creates the arrays obtained; with all GetVal and GetW with a length corresponding to the; parameter fEstimate. By default fEstimate=10000 and can be modified; via TTree::SetEstimate. A possible recipee is to do; tree->SetEstimate(tree->GetEntries());; You must call SetEstimate if the expected number of selected rows; is greater than 10000.; See TTree::Draw for additional details. TTreeFormula* GetVar(Int_t i) const; Return the TTreeFormula corresponding to the i-th component; of the request formula (where the component are ':' separated). void InitArrays(Int_t newsize); Initialization of the primitive type arrays if the new size is bigger than the available space. UInt_t SplitNames(const TString& varexp, vector<TString>& names); Build Index array for names in varexp.; This will allocated a C style array of TString and Ints. Bool_t Notify(); This function is called at the first entry of a new tree in a chain. void ProcessFill(Long64_t entry); Called in the entry loop for all entries accepted by Select. void ProcessFillMultiple(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Complex case with multiplicity. void ProcessFillObject(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Case where the only variable returns an object (or pointer to). void SetEstimate(Long64_t n); Set number of entries to estimate variable limits. void TakeAction(); Execute action for object obj fNfill times. void TakeEstimate(); Estimate limits for 1-D, 2-D or 3-D objects. void Terminate(); Called at the end of a loop on a TTree. TSelectorDraw(const T",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:12126,Energy Efficiency,allocate,allocated,12126,"ws currently returns the actual number of values plotted; and thus if the formula contains arrays, this number might be greater than; the number of entries in the trees.; By default TTree::Draw creates the arrays obtained; with all GetVal and GetW with a length corresponding to the; parameter fEstimate. By default fEstimate=10000 and can be modified; via TTree::SetEstimate. A possible recipee is to do; tree->SetEstimate(tree->GetEntries());; You must call SetEstimate if the expected number of selected rows; is greater than 10000.; See TTree::Draw for additional details. TTreeFormula* GetVar(Int_t i) const; Return the TTreeFormula corresponding to the i-th component; of the request formula (where the component are ':' separated). void InitArrays(Int_t newsize); Initialization of the primitive type arrays if the new size is bigger than the available space. UInt_t SplitNames(const TString& varexp, vector<TString>& names); Build Index array for names in varexp.; This will allocated a C style array of TString and Ints. Bool_t Notify(); This function is called at the first entry of a new tree in a chain. void ProcessFill(Long64_t entry); Called in the entry loop for all entries accepted by Select. void ProcessFillMultiple(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Complex case with multiplicity. void ProcessFillObject(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Case where the only variable returns an object (or pointer to). void SetEstimate(Long64_t n); Set number of entries to estimate variable limits. void TakeAction(); Execute action for object obj fNfill times. void TakeEstimate(); Estimate limits for 1-D, 2-D or 3-D objects. void Terminate(); Called at the end of a loop on a TTree. TSelectorDraw(const TSelectorDraw& ). TSelectorDraw& operator=(const TSelectorDraw& ). Int_t GetAction() const; {return fAction;}. Bool_t GetCleanElist() const; {return fCleanElist;}. Int_t GetDimension() const; {return",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:119,Modifiability,inherit,inheritance,119,". TSelectorDraw. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEPLAYER; » TSelectorDraw. class TSelectorDraw: public TSelector. TSelectorDraw. A specialized TSelector for TTree::Draw. Function Members (Methods); public:. virtual~TSelectorDraw(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Int_tGetAction() const; virtual Bool_tGetCleanElist() const; virtual Int_tGetDimension() const; ",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:3471,Modifiability,Inherit,InheritsFrom,3471," Bool_tTObject::GetObjectStat(); TH1*GetOldHistogram() const; virtual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; TTreeFormula*GetSelect() const; virtual Long64_tGetSelectedRows() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; TTree*GetTree() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_t*GetV1() const; virtual Double_t*GetV2() const; virtual Double_t*GetV3() const; virtual Double_t*GetV4() const; virtual Double_t*GetVal(Int_t i) const; TTreeFormula*GetVar(Int_t i) const; TTreeFormula*GetVar1() const; TTreeFormula*GetVar2() const; TTreeFormula*GetVar3() const; TTreeFormula*GetVar4() const; virtual Double_t*GetW() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTSelector::Init(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, v",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:3537,Modifiability,Inherit,InheritsFrom,3537,"ual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; TTreeFormula*GetSelect() const; virtual Long64_tGetSelectedRows() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; TTree*GetTree() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_t*GetV1() const; virtual Double_t*GetV2() const; virtual Double_t*GetV3() const; virtual Double_t*GetV4() const; virtual Double_t*GetVal(Int_t i) const; TTreeFormula*GetVar(Int_t i) const; TTreeFormula*GetVar1() const; TTreeFormula*GetVar2() const; TTreeFormula*GetVar3() const; TTreeFormula*GetVar4() const; virtual Double_t*GetW() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTSelector::Init(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::o",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:8511,Modifiability,variab,variability,8511,Object::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; Int_tfAction! Action type; Bool_tfCleanElisttrue if original Tree elist must be saved; Long64_tfCurrentSubEntryCurrent subentry when fSelectMultiple is true. Used to fill TEntryListArray; Int_tfDimensionDimension of the current expression; Long64_tfDraw! Last entry loop number when object was drawn; Int_tfForceReadForce Read flag; TList*TSelector::fInputList of objects available during processing; TTreeFormulaManager*fManagerPointer to the formula manager; Int_tfMultiplicityIndicator of the variability of the size of entries; Int_t*fNbins![fDimension] Number of bins per dimension; Int_tfNfill! Total number of histogram fills; Bool_tfObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObject!Current object if processing object (vs. TTree); Long64_tfOldEstimatevalue of Tree fEstimate when selector is called; TH1*fOldHistogram! Pointer to previously used histogram; TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TTreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries; Long64_tTSelector::fStatusSelector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; TEntryListArray*fTreeElistArray! pointer to Tree Event list array; Double_t**fVal![fSelectedRows][fDimension],MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:9143,Modifiability,variab,variable,9143,"orce Read flag; TList*TSelector::fInputList of objects available during processing; TTreeFormulaManager*fManagerPointer to the formula manager; Int_tfMultiplicityIndicator of the variability of the size of entries; Int_t*fNbins![fDimension] Number of bins per dimension; Int_tfNfill! Total number of histogram fills; Bool_tfObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObject!Current object if processing object (vs. TTree); Long64_tfOldEstimatevalue of Tree fEstimate when selector is called; TH1*fOldHistogram! Pointer to previously used histogram; TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TTreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries; Long64_tTSelector::fStatusSelector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; TEntryListArray*fTreeElistArray! pointer to Tree Event list array; Double_t**fVal![fSelectedRows][fDimension] Local buffer for the variables; Int_tfValSize; TTreeFormula**fVar![fDimension] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight); static TSelectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input varia",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:9464,Modifiability,variab,variables,9464,"orce Read flag; TList*TSelector::fInputList of objects available during processing; TTreeFormulaManager*fManagerPointer to the formula manager; Int_tfMultiplicityIndicator of the variability of the size of entries; Int_t*fNbins![fDimension] Number of bins per dimension; Int_tfNfill! Total number of histogram fills; Bool_tfObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObject!Current object if processing object (vs. TTree); Long64_tfOldEstimatevalue of Tree fEstimate when selector is called; TH1*fOldHistogram! Pointer to previously used histogram; TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TTreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries; Long64_tTSelector::fStatusSelector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; TEntryListArray*fTreeElistArray! pointer to Tree Event list array; Double_t**fVal![fSelectedRows][fDimension] Local buffer for the variables; Int_tfValSize; TTreeFormula**fVar![fDimension] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight); static TSelectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input varia",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:9543,Modifiability,variab,variables,9543,"orce Read flag; TList*TSelector::fInputList of objects available during processing; TTreeFormulaManager*fManagerPointer to the formula manager; Int_tfMultiplicityIndicator of the variability of the size of entries; Int_t*fNbins![fDimension] Number of bins per dimension; Int_tfNfill! Total number of histogram fills; Bool_tfObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObject!Current object if processing object (vs. TTree); Long64_tfOldEstimatevalue of Tree fEstimate when selector is called; TH1*fOldHistogram! Pointer to previously used histogram; TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TTreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries; Long64_tTSelector::fStatusSelector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; TEntryListArray*fTreeElistArray! pointer to Tree Event list array; Double_t**fVal![fSelectedRows][fDimension] Local buffer for the variables; Int_tfValSize; TTreeFormula**fVar![fDimension] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight); static TSelectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input varia",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:9617,Modifiability,variab,variable,9617,"orce Read flag; TList*TSelector::fInputList of objects available during processing; TTreeFormulaManager*fManagerPointer to the formula manager; Int_tfMultiplicityIndicator of the variability of the size of entries; Int_t*fNbins![fDimension] Number of bins per dimension; Int_tfNfill! Total number of histogram fills; Bool_tfObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObject!Current object if processing object (vs. TTree); Long64_tfOldEstimatevalue of Tree fEstimate when selector is called; TH1*fOldHistogram! Pointer to previously used histogram; TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TTreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries; Long64_tTSelector::fStatusSelector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; TEntryListArray*fTreeElistArray! pointer to Tree Event list array; Double_t**fVal![fSelectedRows][fDimension] Local buffer for the variables; Int_tfValSize; TTreeFormula**fVar![fDimension] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight); static TSelectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input varia",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:9899,Modifiability,Inherit,Inheritance,9899,"ogram; TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TTreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries; Long64_tTSelector::fStatusSelector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; TEntryListArray*fTreeElistArray! pointer to Tree Event list array; Double_t**fVal![fSelectedRows][fDimension] Local buffer for the variables; Int_tfValSize; TTreeFormula**fVar![fDimension] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight); static TSelectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:10327,Modifiability,variab,variables,10327,"eeElistpointer to Tree Event list; TEntryListArray*fTreeElistArray! pointer to Tree Event list array; Double_t**fVal![fSelectedRows][fDimension] Local buffer for the variables; Int_tfValSize; TTreeFormula**fVar![fDimension] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight); static TSelectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i) const; Return the last values corresponding to the i-th component; of the formula being processed (where the component are ':' separated).; The actual number of entries is:; GetSelectedRows() % tree->GetEstimate(); Note GetSelectedRows currently returns the actual number of values plotted; and thus if the formula contains arrays, this number might be greater than; the number of entries",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:10856,Modifiability,variab,variable,10856,"lectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i) const; Return the last values corresponding to the i-th component; of the formula being processed (where the component are ':' separated).; The actual number of entries is:; GetSelectedRows() % tree->GetEstimate(); Note GetSelectedRows currently returns the actual number of values plotted; and thus if the formula contains arrays, this number might be greater than; the number of entries in the trees.; By default TTree::Draw creates the arrays obtained; with all GetVal and GetW with a length corresponding to the; parameter fEstimate. By default fEstimate=10000 and can be modified; via TTree::SetEstimate. A possible recipee is to do; tree->SetEstimate(tree->GetEntries());; You must call SetEstimate if the expected number of selected rows; is greater than 10000.; See TTree::Draw for additional details. TTreeFormula* GetVar(Int_t i) const; Return the TTreeFormula corresponding to the i-th component; of the request formula (where the com",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:12612,Modifiability,variab,variable,12612,"expected number of selected rows; is greater than 10000.; See TTree::Draw for additional details. TTreeFormula* GetVar(Int_t i) const; Return the TTreeFormula corresponding to the i-th component; of the request formula (where the component are ':' separated). void InitArrays(Int_t newsize); Initialization of the primitive type arrays if the new size is bigger than the available space. UInt_t SplitNames(const TString& varexp, vector<TString>& names); Build Index array for names in varexp.; This will allocated a C style array of TString and Ints. Bool_t Notify(); This function is called at the first entry of a new tree in a chain. void ProcessFill(Long64_t entry); Called in the entry loop for all entries accepted by Select. void ProcessFillMultiple(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Complex case with multiplicity. void ProcessFillObject(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Case where the only variable returns an object (or pointer to). void SetEstimate(Long64_t n); Set number of entries to estimate variable limits. void TakeAction(); Execute action for object obj fNfill times. void TakeEstimate(); Estimate limits for 1-D, 2-D or 3-D objects. void Terminate(); Called at the end of a loop on a TTree. TSelectorDraw(const TSelectorDraw& ). TSelectorDraw& operator=(const TSelectorDraw& ). Int_t GetAction() const; {return fAction;}. Bool_t GetCleanElist() const; {return fCleanElist;}. Int_t GetDimension() const; {return fDimension;}. Long64_t GetDrawFlag() const; {return fDraw;}. TObject * GetObject() const; {return fObject;}. Int_t GetMultiplicity() const; {return fMultiplicity;}. Int_t GetNfill() const; {return fNfill;}. TH1 * GetOldHistogram() const; {return fOldHistogram;}. TTreeFormula * GetSelect() const; {return fSelect;}. Long64_t GetSelectedRows() const; {return fSelectedRows;}. TTree * GetTree() const; {return fTree;}. TTreeFormula * GetVar1() const; See TSelectorDraw::GetVar. {re",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:12720,Modifiability,variab,variable,12720," for additional details. TTreeFormula* GetVar(Int_t i) const; Return the TTreeFormula corresponding to the i-th component; of the request formula (where the component are ':' separated). void InitArrays(Int_t newsize); Initialization of the primitive type arrays if the new size is bigger than the available space. UInt_t SplitNames(const TString& varexp, vector<TString>& names); Build Index array for names in varexp.; This will allocated a C style array of TString and Ints. Bool_t Notify(); This function is called at the first entry of a new tree in a chain. void ProcessFill(Long64_t entry); Called in the entry loop for all entries accepted by Select. void ProcessFillMultiple(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Complex case with multiplicity. void ProcessFillObject(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Case where the only variable returns an object (or pointer to). void SetEstimate(Long64_t n); Set number of entries to estimate variable limits. void TakeAction(); Execute action for object obj fNfill times. void TakeEstimate(); Estimate limits for 1-D, 2-D or 3-D objects. void Terminate(); Called at the end of a loop on a TTree. TSelectorDraw(const TSelectorDraw& ). TSelectorDraw& operator=(const TSelectorDraw& ). Int_t GetAction() const; {return fAction;}. Bool_t GetCleanElist() const; {return fCleanElist;}. Int_t GetDimension() const; {return fDimension;}. Long64_t GetDrawFlag() const; {return fDraw;}. TObject * GetObject() const; {return fObject;}. Int_t GetMultiplicity() const; {return fMultiplicity;}. Int_t GetNfill() const; {return fNfill;}. TH1 * GetOldHistogram() const; {return fOldHistogram;}. TTreeFormula * GetSelect() const; {return fSelect;}. Long64_t GetSelectedRows() const; {return fSelectedRows;}. TTree * GetTree() const; {return fTree;}. TTreeFormula * GetVar1() const; See TSelectorDraw::GetVar. {return GetVar(0);}. TTreeFormula * GetVar2() const; See TSelectorDraw::GetV",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:473,Safety,Abort,Abort,473," virtual~TSelectorDraw(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Int_tGetAction() const; virtual Bool_tGetCleanElist() const; virtual Int_tGetDimension() const; ",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:3361,Security,Hash,Hash,3361,"GetNfill() const; TObject*GetObject() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); TH1*GetOldHistogram() const; virtual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; TTreeFormula*GetSelect() const; virtual Long64_tGetSelectedRows() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; TTree*GetTree() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_t*GetV1() const; virtual Double_t*GetV2() const; virtual Double_t*GetV3() const; virtual Double_t*GetV4() const; virtual Double_t*GetVal(Int_t i) const; TTreeFormula*GetVar(Int_t i) const; TTreeFormula*GetVar1() const; TTreeFormula*GetVar2() const; TTreeFormula*GetVar3() const; TTreeFormula*GetVar4() const; virtual Double_t*GetW() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTSelector::Init(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::oper",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:10816,Security,authoriz,authorized,10816,"e_tfWeightTree weight (see TTree::SetWeight); static TSelectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i) const; Return the last values corresponding to the i-th component; of the formula being processed (where the component are ':' separated).; The actual number of entries is:; GetSelectedRows() % tree->GetEstimate(); Note GetSelectedRows currently returns the actual number of values plotted; and thus if the formula contains arrays, this number might be greater than; the number of entries in the trees.; By default TTree::Draw creates the arrays obtained; with all GetVal and GetW with a length corresponding to the; parameter fEstimate. By default fEstimate=10000 and can be modified; via TTree::SetEstimate. A possible recipee is to do; tree->SetEstimate(tree->GetEntries());; You must call SetEstimate if the expected number of selected rows; is greater than 10000.; See TTree::Draw for additional details. TTreeFormula* GetVar(Int_t i) const; Return the TTreeFormula corresponding to t",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:6256,Testability,Test,TestBit,6256,"bject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidProcessFill(Long64_t entry); virtual voidProcessFillMultiple(Long64_t entry); virtual voidProcessFillObject(Long64_t entry); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEstimate(Long64_t n); virtual voidTSelector::SetInputList(TList* input); virtual voidTSelector::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSelector::SetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTSelector::SlaveBegin(TTree*); virtual voidTSelector::SlaveTerminate(); virtual UInt_tSplitNames(const TString& varexp, vector<TString>& names); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTakeAction(); virtual voidTakeEstimate(); virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorDraw(); virtual voidTObject::UseCurrentStyle(); virtual intTSelector::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:6295,Testability,Test,TestBits,6295,"bject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidProcessFill(Long64_t entry); virtual voidProcessFillMultiple(Long64_t entry); virtual voidProcessFillObject(Long64_t entry); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEstimate(Long64_t n); virtual voidTSelector::SetInputList(TList* input); virtual voidTSelector::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSelector::SetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTSelector::SlaveBegin(TTree*); virtual voidTSelector::SlaveTerminate(); virtual UInt_tSplitNames(const TString& varexp, vector<TString>& names); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTakeAction(); virtual voidTakeEstimate(); virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorDraw(); virtual voidTObject::UseCurrentStyle(); virtual intTSelector::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:812,Usability,Clear,Clear,812," virtual~TSelectorDraw(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Int_tGetAction() const; virtual Bool_tGetCleanElist() const; virtual Int_tGetDimension() const; ",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:10194,Usability,Clear,ClearFormula,10194,"g64_tTSelector::fStatusSelector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; TEntryListArray*fTreeElistArray! pointer to Tree Event list array; Double_t**fVal![fSelectedRows][fDimension] Local buffer for the variables; Int_tfValSize; TTreeFormula**fVar![fDimension] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight); static TSelectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i) const; Return the last values corresponding to the i-th component; of the formula being processed (where the component are ':' separated).; The actual number of entries is:; GetSelectedRows() % tree->GetEstimate(); Note GetSelectedRows currently returns the actual number of values plotted; and thus i",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorDraw.html:10506,Usability,simpl,simplest,10506,"nsion] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight); static TSelectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i) const; Return the last values corresponding to the i-th component; of the formula being processed (where the component are ':' separated).; The actual number of entries is:; GetSelectedRows() % tree->GetEstimate(); Note GetSelectedRows currently returns the actual number of values plotted; and thus if the formula contains arrays, this number might be greater than; the number of entries in the trees.; By default TTree::Draw creates the arrays obtained; with all GetVal and GetW with a length corresponding to the; parameter fEstimate. By default fEstimate=10000 and can be modified; via TTree::SetEstim",MatchSource.WIKI,root/html602/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorDraw.html
https://root.cern/root/html602/TSelectorEntries.html:1326,Availability,Error,Error,1326," virtual~TSelectorEntries(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t ",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:1455,Availability,error,error,1455," char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; virtual Long64_tGetSelectedRows() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Lon",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:1539,Availability,error,error,1539,"st char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; virtual Long64_tGetSelectedRows() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; vir",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:7248,Availability,avail,available,7248,"r of selected entries; static TSelector::EAbortTSelector::kAbortFile; static TSelector::EAbortTSelector::kAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorEntries. Function documentation; TSelectorEntries(TTree* tree = 0, const char* selection = 0); Default, constructor. TSelectorEntries(const char* selection); Constructor. ~TSelectorEntries(); Destructor. void Begin(TTree* tree); The Begin() function is called at the start of the query.; When running with PROOF Begin() is only called on the client.; The tree argument is deprecated (on PROOF 0 is passed). void SlaveBegin(TTree* tree); The SlaveBegin() function is called after the Begin() function.; When running with PROOF SlaveBegin() is called on each slave server.; The tree argument is deprecated (on PROOF 0 is passed). Int_t GetEntry(Long64_t en",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:9247,Availability,avail,available,9247,". Int_t GetEntry(Long64_t entry, Int_t getall = 0); read entry. void Init(TTree* tree); The Init() function is called when the selector needs to initialize; a new tree or chain. Typically here the branch addresses and branch; pointers of the tree will be set.; It is normaly not necessary to make changes to the generated; code, but the routine can be extended by the user if needed.; Init() will be called many times when running on PROOF; (once per file to be processed). Bool_t Notify(); This function is called at the first entry of a new tree in a chain. Bool_t Process(Long64_t entry); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either TSelectorEntries::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the return value of TTree::Process(). The return value is currently not used. void SetSelection(const char* selection); set the selection expression. void SlaveTerminate(); The SlaveTerminate() function is called after all entries or objects; have been processed. When running with PROOF SlaveTerminate() is called; on each slave server. void Terminate(); The Terminate() function is the last function to be called during; a query. It always runs on the client, it can be used to present; the results graphically or save the results to file. TSelectorEntries(TTree* tree = 0, const char* selection = 0). Int_t Version() const; { return 2; }. Long64_t GetSelectedRows() const; { return fSe",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:8561,Integrability,rout,routine,8561,"heritance Chart:. TObject. ←; TSelector. ←; TSelectorEntries. Function documentation; TSelectorEntries(TTree* tree = 0, const char* selection = 0); Default, constructor. TSelectorEntries(const char* selection); Constructor. ~TSelectorEntries(); Destructor. void Begin(TTree* tree); The Begin() function is called at the start of the query.; When running with PROOF Begin() is only called on the client.; The tree argument is deprecated (on PROOF 0 is passed). void SlaveBegin(TTree* tree); The SlaveBegin() function is called after the Begin() function.; When running with PROOF SlaveBegin() is called on each slave server.; The tree argument is deprecated (on PROOF 0 is passed). Int_t GetEntry(Long64_t entry, Int_t getall = 0); read entry. void Init(TTree* tree); The Init() function is called when the selector needs to initialize; a new tree or chain. Typically here the branch addresses and branch; pointers of the tree will be set.; It is normaly not necessary to make changes to the generated; code, but the routine can be extended by the user if needed.; Init() will be called many times when running on PROOF; (once per file to be processed). Bool_t Notify(); This function is called at the first entry of a new tree in a chain. Bool_t Process(Long64_t entry); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either TSelectorEntries::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the retu",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:122,Modifiability,inherit,inheritance,122,". TSelectorEntries. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEPLAYER; » TSelectorEntries. class TSelectorEntries: public TSelector. TSelectorEntries. Function Members (Methods); public:. virtual~TSelectorEntries(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t ",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:2768,Modifiability,Inherit,InheritsFrom,2768,"ect::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; virtual Long64_tGetSelectedRows() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree* tree); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* v",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:2834,Modifiability,Inherit,InheritsFrom,2834,"rtTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; virtual Long64_tGetSelectedRows() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree* tree); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operato",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:6210,Modifiability,variab,variable,6210,"Style(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. TTree*fChain! pointer to the analyzed TTree or TChain; TTreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries; static TSelector::EAbortTSelector::kAbortFile; static TSelector::EAbortTSelector::kAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorEntrie",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:7543,Modifiability,Inherit,Inheritance,7543,"ontinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorEntries. Function documentation; TSelectorEntries(TTree* tree = 0, const char* selection = 0); Default, constructor. TSelectorEntries(const char* selection); Constructor. ~TSelectorEntries(); Destructor. void Begin(TTree* tree); The Begin() function is called at the start of the query.; When running with PROOF Begin() is only called on the client.; The tree argument is deprecated (on PROOF 0 is passed). void SlaveBegin(TTree* tree); The SlaveBegin() function is called after the Begin() function.; When running with PROOF SlaveBegin() is called on each slave server.; The tree argument is deprecated (on PROOF 0 is passed). Int_t GetEntry(Long64_t entry, Int_t getall = 0); read entry. void Init(TTree* tree); The Init() function is called when the selector needs to initialize; a new tree or chain. Typically here the branch addresses and branch; pointers of the tree will be set.; It is normaly not necessary to make changes to the generated; code,",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:8576,Modifiability,extend,extended,8576,"heritance Chart:. TObject. ←; TSelector. ←; TSelectorEntries. Function documentation; TSelectorEntries(TTree* tree = 0, const char* selection = 0); Default, constructor. TSelectorEntries(const char* selection); Constructor. ~TSelectorEntries(); Destructor. void Begin(TTree* tree); The Begin() function is called at the start of the query.; When running with PROOF Begin() is only called on the client.; The tree argument is deprecated (on PROOF 0 is passed). void SlaveBegin(TTree* tree); The SlaveBegin() function is called after the Begin() function.; When running with PROOF SlaveBegin() is called on each slave server.; The tree argument is deprecated (on PROOF 0 is passed). Int_t GetEntry(Long64_t entry, Int_t getall = 0); read entry. void Init(TTree* tree); The Init() function is called when the selector needs to initialize; a new tree or chain. Typically here the branch addresses and branch; pointers of the tree will be set.; It is normaly not necessary to make changes to the generated; code, but the routine can be extended by the user if needed.; Init() will be called many times when running on PROOF; (once per file to be processed). Bool_t Notify(); This function is called at the first entry of a new tree in a chain. Bool_t Process(Long64_t entry); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either TSelectorEntries::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the retu",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:9001,Performance,load,loaded,9001,"ROOF 0 is passed). void SlaveBegin(TTree* tree); The SlaveBegin() function is called after the Begin() function.; When running with PROOF SlaveBegin() is called on each slave server.; The tree argument is deprecated (on PROOF 0 is passed). Int_t GetEntry(Long64_t entry, Int_t getall = 0); read entry. void Init(TTree* tree); The Init() function is called when the selector needs to initialize; a new tree or chain. Typically here the branch addresses and branch; pointers of the tree will be set.; It is normaly not necessary to make changes to the generated; code, but the routine can be extended by the user if needed.; Init() will be called many times when running on PROOF; (once per file to be processed). Bool_t Notify(); This function is called at the first entry of a new tree in a chain. Bool_t Process(Long64_t entry); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either TSelectorEntries::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the return value of TTree::Process(). The return value is currently not used. void SetSelection(const char* selection); set the selection expression. void SlaveTerminate(); The SlaveTerminate() function is called after all entries or objects; have been processed. When running with PROOF SlaveTerminate() is called; on each slave server. void Terminate(); The Terminate() function is the last function to be called during; a query. It always runs on ",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:9233,Performance,load,loaded,9233,". Int_t GetEntry(Long64_t entry, Int_t getall = 0); read entry. void Init(TTree* tree); The Init() function is called when the selector needs to initialize; a new tree or chain. Typically here the branch addresses and branch; pointers of the tree will be set.; It is normaly not necessary to make changes to the generated; code, but the routine can be extended by the user if needed.; Init() will be called many times when running on PROOF; (once per file to be processed). Bool_t Notify(); This function is called at the first entry of a new tree in a chain. Bool_t Process(Long64_t entry); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either TSelectorEntries::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the return value of TTree::Process(). The return value is currently not used. void SetSelection(const char* selection); set the selection expression. void SlaveTerminate(); The SlaveTerminate() function is called after all entries or objects; have been processed. When running with PROOF SlaveTerminate() is called; on each slave server. void Terminate(); The Terminate() function is the last function to be called during; a query. It always runs on the client, it can be used to present; the results graphically or save the results to file. TSelectorEntries(TTree* tree = 0, const char* selection = 0). Int_t Version() const; { return 2; }. Long64_t GetSelectedRows() const; { return fSe",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:447,Safety,Abort,Abort,447," virtual~TSelectorEntries(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t ",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:9509,Safety,Abort,Abort,9509,"ormaly not necessary to make changes to the generated; code, but the routine can be extended by the user if needed.; Init() will be called many times when running on PROOF; (once per file to be processed). Bool_t Notify(); This function is called at the first entry of a new tree in a chain. Bool_t Process(Long64_t entry); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either TSelectorEntries::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the return value of TTree::Process(). The return value is currently not used. void SetSelection(const char* selection); set the selection expression. void SlaveTerminate(); The SlaveTerminate() function is called after all entries or objects; have been processed. When running with PROOF SlaveTerminate() is called; on each slave server. void Terminate(); The Terminate() function is the last function to be called during; a query. It always runs on the client, it can be used to present; the results graphically or save the results to file. TSelectorEntries(TTree* tree = 0, const char* selection = 0). Int_t Version() const; { return 2; }. Long64_t GetSelectedRows() const; { return fSelectedRows; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. TList * GetOutputList() const; { return fOutput; }. » Author: Philippe Canal 09/06/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademaker",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:2658,Security,Hash,Hash,2658,"thod, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; virtual Long64_tGetSelectedRows() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree* tree); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator d",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:5361,Testability,Test,TestBit,5361,"const TSelectorEntries&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t entry); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidTSelector::ProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSelector::SetInputList(TList* input); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(const char* option); virtual voidSetSelection(const char* selection); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree* tree); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorEntries(const char* selection); TSelectorEntries(const TSelectorEntries&); TSelectorEntries(TTree* tree = 0, const char* selection = 0); virtual voidTObject::UseCurrentStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:5400,Testability,Test,TestBits,5400,"const TSelectorEntries&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t entry); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidTSelector::ProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSelector::SetInputList(TList* input); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(const char* option); virtual voidSetSelection(const char* selection); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree* tree); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorEntries(const char* selection); TSelectorEntries(const TSelectorEntries&); TSelectorEntries(TTree* tree = 0, const char* selection = 0); virtual voidTObject::UseCurrentStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:786,Usability,Clear,Clear,786," virtual~TSelectorEntries(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t ",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorEntries.html:9356,Usability,simpl,simple,9356,"ypically here the branch addresses and branch; pointers of the tree will be set.; It is normaly not necessary to make changes to the generated; code, but the routine can be extended by the user if needed.; Init() will be called many times when running on PROOF; (once per file to be processed). Bool_t Notify(); This function is called at the first entry of a new tree in a chain. Bool_t Process(Long64_t entry); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either TSelectorEntries::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the return value of TTree::Process(). The return value is currently not used. void SetSelection(const char* selection); set the selection expression. void SlaveTerminate(); The SlaveTerminate() function is called after all entries or objects; have been processed. When running with PROOF SlaveTerminate() is called; on each slave server. void Terminate(); The Terminate() function is the last function to be called during; a query. It always runs on the client, it can be used to present; the results graphically or save the results to file. TSelectorEntries(TTree* tree = 0, const char* selection = 0). Int_t Version() const; { return 2; }. Long64_t GetSelectedRows() const; { return fSelectedRows; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. TList * GetOutputList() const; { return fOutput; }. » ",MatchSource.WIKI,root/html602/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html
https://root.cern/root/html602/TSelectorList.html:2616,Availability,Error,Error,2616,"ect*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTHashList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTHashList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*THashList::FindObject(const char* name) const; virtual TObject*THashList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*THashList::GetListForObject(const char* name) const; TList*THashList::GetListForObje",MatchSource.WIKI,root/html602/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorList.html
https://root.cern/root/html602/TSelectorList.html:2745,Availability,error,error,2745,"TCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTHashList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTHashList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*THashList::FindObject(const char* name) const; virtual TObject*THashList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*THashList::GetListForObject(const char* name) const; TList*THashList::GetListForObject(const TObject* obj) const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_",MatchSource.WIKI,root/html602/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorList.html
https://root.cern/root/html602/TSelectorList.html:2829,Availability,error,error,2829,"assName() const; virtual voidTHashList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTHashList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*THashList::FindObject(const char* name) const; virtual TObject*THashList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*THashList::GetListForObject(const char* name) const; TList*THashList::GetListForObject(const TObject* obj) const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static ",MatchSource.WIKI,root/html602/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorList.html
https://root.cern/root/html602/TSelectorList.html:119,Modifiability,inherit,inheritance,119,". TSelectorList. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TSelectorList. class TSelectorList: public THashList. TSelectorList. A TList derived class that makes sure that objects added to it; are not linked to the currently open file (like histograms,; eventlists and trees). Also it makes sure the name of the added; object is unique. This class is used in the TSelector for the; output list. Function Members (Methods); public:. virtual~TSelectorList(); voidTObject::AbstractMethod(const char* method) const; virtual voidTList::Add(TObject* obj); virtual voidTList::Add(TObject* obj, Option_t* opt); virtual voidAddAfter(const TObject* after, TObject* obj); virtual voidAddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddBefore(TObjLink* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddFirst(TObject* obj, Option_t* opt); virtual voidAddLast(TObject* obj); virtual voidAddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; Float_tTHashList::AverageCollisions() const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTHashList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compa",MatchSource.WIKI,root/html602/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorList.html
https://root.cern/root/html602/TSelectorList.html:4348,Modifiability,Inherit,InheritsFrom,4348,"tic Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*THashList::GetListForObject(const char* name) const; TList*THashList::GetListForObject(const TObject* obj) const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*TList::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method)",MatchSource.WIKI,root/html602/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorList.html
https://root.cern/root/html602/TSelectorList.html:4414,Modifiability,Inherit,InheritsFrom,4414,"ries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*THashList::GetListForObject(const char* name) const; TList*THashList::GetListForObject(const TObject* obj) const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*TList::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method) const; Long64_tTSeqCollection::Merge(TCollection* list); virtual ",MatchSource.WIKI,root/html602/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorList.html
https://root.cern/root/html602/TSelectorList.html:11235,Modifiability,Inherit,Inheritance,11235,"itsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; THashTable*THashList::fTableHashtable used for quick lookup of objects; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. ←; THashList. ←; TSelectorList. Function documentation; Bool_t UnsetDirectory(TObject* obj); If the class of obj has the SetDirectory(TDirectory*) method; call it to unset the directory assiciation. The objects in the; selector list or owned by the list and not by the directory that; was active when they were created. Returns true in case of success. Bool_t CheckDuplicateName(TObject* obj); Check for duplicate object names in the list. If an object with; the same name is added then the merge function will fail that will; look up objects in different output lists by name. Returns true; in case name is unique. void AddFirst(TObject* obj); Add at the start of the list. void AddFirst(TObject* obj, Option_t* opt); Add at the start of the list. void AddLast(TObject* obj); Add at the end of the list. void AddLast(TObject* obj, Option_t* opt); Add at the end of the list. void AddAt(TObject* obj, Int_t idx); Add to the list. void ",MatchSource.WIKI,root/html602/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorList.html
https://root.cern/root/html602/TSelectorList.html:10729,Performance,cache,cache,10729,itsTObject::kHasUUID; static TCollection::(anonymous)TCollection::kInitCapacity; static TCollection::(anonymous)TCollection::kInitHashTableCapacity; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; THashTable*THashList::fTableHashtable used for quick lookup of objects; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. ←; THashList. ←; TSelectorList. Function documentation; Bool_t UnsetDirectory(TObject* obj); If the class of obj has the SetDirectory(TDirectory*) method; call it to unset the directory assiciation. The objects in the; selector list or owned by the list and not by the directory that; was active when they were created. Returns true in case of success. Bool_t CheckDuplicateName(TObject* obj); Check for duplicate object names in the list. If an object with; the same name is added then the merge function will fail that will; look up objects in different output lists by name. Returns true; in case name is uniqu,MatchSource.WIKI,root/html602/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorList.html
https://root.cern/root/html602/TSelectorList.html:4174,Security,Hash,Hash,4174,"stLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*THashList::GetListForObject(const char* name) const; TList*THashList::GetListForObject(const TObject* obj) const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTCollection::ls(Option_t* option = """") con",MatchSource.WIKI,root/html602/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorList.html
https://root.cern/root/html602/TSelectorList.html:1487,Testability,Assert,AssertClass,1487," virtual~TSelectorList(); voidTObject::AbstractMethod(const char* method) const; virtual voidTList::Add(TObject* obj); virtual voidTList::Add(TObject* obj, Option_t* opt); virtual voidAddAfter(const TObject* after, TObject* obj); virtual voidAddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddBefore(TObjLink* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddFirst(TObject* obj, Option_t* opt); virtual voidAddLast(TObject* obj); virtual voidAddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; Float_tTHashList::AverageCollisions() const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTHashList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compa",MatchSource.WIKI,root/html602/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorList.html
https://root.cern/root/html602/TSelectorList.html:8313,Testability,Test,TestBit,8313,"bject::Read(const char* name); virtual voidTHashList::RecursiveRemove(TObject* obj); voidTHashList::Rehash(Int_t newCapacity); virtual TObject*THashList::Remove(TObject* obj); virtual TObject*THashList::Remove(TObjLink* lnk); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTList::Sort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorList(); TSelectorList(TSelectorList&&); TSelectorList(const TSelectorList&); voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorList.html
https://root.cern/root/html602/TSelectorList.html:8352,Testability,Test,TestBits,8352,"bject::Read(const char* name); virtual voidTHashList::RecursiveRemove(TObject* obj); voidTHashList::Rehash(Int_t newCapacity); virtual TObject*THashList::Remove(TObject* obj); virtual TObject*THashList::Remove(TObjLink* lnk); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTList::Sort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorList(); TSelectorList(TSelectorList&&); TSelectorList(const TSelectorList&); voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorList.html
https://root.cern/root/html602/TSelectorList.html:1872,Usability,Clear,Clear,1872,"rtual voidAddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddBefore(TObjLink* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddFirst(TObject* obj, Option_t* opt); virtual voidAddLast(TObject* obj); virtual voidAddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; Float_tTHashList::AverageCollisions() const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTHashList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTHashList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(",MatchSource.WIKI,root/html602/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorList.html
https://root.cern/root/html602/TSelectorScalar.html:1452,Availability,Error,Error,1452," virtual~TSelectorScalar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTParameter<Long64_t>::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Lo",MatchSource.WIKI,root/html602/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorScalar.html
https://root.cern/root/html602/TSelectorScalar.html:1581,Availability,error,error,1581," virtual~TSelectorScalar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTParameter<Long64_t>::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Lo",MatchSource.WIKI,root/html602/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorScalar.html
https://root.cern/root/html602/TSelectorScalar.html:1665,Availability,error,error,1665,":AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTParameter<Long64_t>::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TParameter<Long64_t>::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const Long64_t&TParameter<Long64_t>::GetVal() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTParameter<Long64_t>::Hash() const; voidInc(Long_t n = 1); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const ch",MatchSource.WIKI,root/html602/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorScalar.html
https://root.cern/root/html602/TSelectorScalar.html:121,Modifiability,inherit,inheritance,121,". TSelectorScalar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TSelectorScalar. class TSelectorScalar: public TParameter<Long64_t>. TSelectorScalar. Named scalar type, based on Long64_t, streamable, storable and; mergable. Ideally to be used in tree selectors in the PROOF; environment due to its merge functionality which allows a single; merged value to be returned to the user. Function Members (Methods); public:. virtual~TSelectorScalar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTParameter<Long64_t>::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Lo",MatchSource.WIKI,root/html602/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorScalar.html
https://root.cern/root/html602/TSelectorScalar.html:2647,Modifiability,Inherit,InheritsFrom,2647,"ams, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TParameter<Long64_t>::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const Long64_t&TParameter<Long64_t>::GetVal() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTParameter<Long64_t>::Hash() const; voidInc(Long_t n = 1); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTParameter<Long64_t>::IsConst() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTParameter<Long64_t>::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTParameter<Long64_t>::ls(Option_t*) const; voidTObject::MayNotUse(const char* method) const; virtual Int_tMerge(TCollection* list); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(s",MatchSource.WIKI,root/html602/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorScalar.html
https://root.cern/root/html602/TSelectorScalar.html:2713,Modifiability,Inherit,InheritsFrom,2713,"ent, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TParameter<Long64_t>::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const Long64_t&TParameter<Long64_t>::GetVal() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTParameter<Long64_t>::Hash() const; voidInc(Long_t n = 1); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTParameter<Long64_t>::IsConst() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTParameter<Long64_t>::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTParameter<Long64_t>::ls(Option_t*) const; voidTObject::MayNotUse(const char* method) const; virtual Int_tMerge(TCollection* list); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void",MatchSource.WIKI,root/html602/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorScalar.html
https://root.cern/root/html602/TSelectorScalar.html:6668,Modifiability,Inherit,Inheritance,6668,"nt level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TParameter<Long64_t>::EStatusBitsTParameter<Long64_t>::kFirst; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TParameter<Long64_t>::EStatusBitsTParameter<Long64_t>::kIsConst; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TParameter<Long64_t>::EStatusBitsTParameter<Long64_t>::kLast; static TParameter<Long64_t>::EStatusBitsTParameter<Long64_t>::kMax; static TParameter<Long64_t>::EStatusBitsTParameter<Long64_t>::kMin; static TParameter<Long64_t>::EStatusBitsTParameter<Long64_t>::kMultiply; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance Chart:. TObject. ←; TParameter<Long64_t>. ←; TSelectorScalar. Function documentation; void Inc(Long_t n = 1); Increment scalar value by n. Int_t Merge(TCollection* list); Merge scalars with scalars in the list. The scalar values are added.; Returns the number of scalars that were in the list. TSelectorScalar(const char* name = """", Long64_t val = 0); { }. ~TSelectorScalar(); { }. » Author: Maarten Ballintijn 13/02/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorScalar.html
https://root.cern/root/html602/TSelectorScalar.html:2514,Security,Hash,Hash,2514,"dTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TParameter<Long64_t>::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const Long64_t&TParameter<Long64_t>::GetVal() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTParameter<Long64_t>::Hash() const; voidInc(Long_t n = 1); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTParameter<Long64_t>::IsConst() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTParameter<Long64_t>::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTParameter<Long64_t>::ls(Option_t*) const; voidTObject::MayNotUse(const char* method) const; virtual Int_tMerge(TCollection* list); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator dele",MatchSource.WIKI,root/html602/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorScalar.html
https://root.cern/root/html602/TSelectorScalar.html:4881,Testability,Test,TestBit,4881,"const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSelectorScalar&operator=(const TSelectorScalar&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTParameter<Long64_t>::Print(Option_t*) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTParameter<Long64_t>::SetMergeMode(char mergemode = '+'); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTParameter<Long64_t>::SetVal(const Long64_t& val); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorScalar(const TSelectorScalar&); TSelectorScalar(const char* name = """", Long64_t val = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorScalar.html
https://root.cern/root/html602/TSelectorScalar.html:4920,Testability,Test,TestBits,4920,"const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSelectorScalar&operator=(const TSelectorScalar&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTParameter<Long64_t>::Print(Option_t*) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTParameter<Long64_t>::SetMergeMode(char mergemode = '+'); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTParameter<Long64_t>::SetVal(const Long64_t& val); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorScalar(const TSelectorScalar&); TSelectorScalar(const char* name = """", Long64_t val = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorScalar.html
https://root.cern/root/html602/TSelectorScalar.html:899,Usability,Clear,Clear,899," virtual~TSelectorScalar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTParameter<Long64_t>::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Lo",MatchSource.WIKI,root/html602/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelectorScalar.html
https://root.cern/root/html602/TSelVerifyDataSet.html:1373,Availability,Error,Error,1373," virtual~TSelVerifyDataSet(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(",MatchSource.WIKI,root/html602/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelVerifyDataSet.html
https://root.cern/root/html602/TSelVerifyDataSet.html:1502,Availability,error,error,1502,"const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual ",MatchSource.WIKI,root/html602/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelVerifyDataSet.html
https://root.cern/root/html602/TSelVerifyDataSet.html:1586,Availability,error,error,1586,"d(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; vi",MatchSource.WIKI,root/html602/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelVerifyDataSet.html
https://root.cern/root/html602/TSelVerifyDataSet.html:6950,Availability,avail,available,6950,Data Members; public:. static TSelector::EAbortTSelector::kAbortFile; static TSelector::EAbortTSelector::kAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. private:. Bool_tfAllf; Bool_tfChangedDs; Bool_tfCheckstg; Bool_tfDbg; Int_tfDisappeared; Bool_tfDoall; Int_tfFopt; Bool_tfFullproc; Bool_tfGetlistonly; Bool_tfLocateonly; TStringfMss; Bool_tfNoaction; Bool_tfNonStgf; Int_tfOpened; Bool_tfReopen; Int_tfRopt; Bool_tfScanlist; Int_tfSopt; Bool_tfStageonly; TStringfStageopts; Bool_tfStgf; TFileCollection*fSubDataSetSub-dataset being verified; Bool_tfTouch; Int_tfTouched. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelVerifyDataSet. Function documentation; TSelVerifyDataSet(TTree* ); Constructor. TSelVerifyDataSet(); Constructor. void InitMembers(); Initialize members. void SlaveBegin(TTree* tree); Worker Begin. Bool_t Process(Long64_t entry); Process ,MatchSource.WIKI,root/html602/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelVerifyDataSet.html
https://root.cern/root/html602/TSelVerifyDataSet.html:123,Modifiability,inherit,inheritance,123,". TSelVerifyDataSet. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TSelVerifyDataSet. class TSelVerifyDataSet: public TSelector. TSelVerifyDataSet. Selector to verify dataset in parallel on workers. Function Members (Methods); public:. virtual~TSelVerifyDataSet(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(",MatchSource.WIKI,root/html602/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelVerifyDataSet.html
https://root.cern/root/html602/TSelVerifyDataSet.html:2772,Modifiability,Inherit,InheritsFrom,2772,"nst char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); v",MatchSource.WIKI,root/html602/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelVerifyDataSet.html
https://root.cern/root/html602/TSelVerifyDataSet.html:2838,Modifiability,Inherit,InheritsFrom,2838,"Object* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new",MatchSource.WIKI,root/html602/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelVerifyDataSet.html
https://root.cern/root/html602/TSelVerifyDataSet.html:7666,Modifiability,Inherit,Inheritance,7666,":(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. private:. Bool_tfAllf; Bool_tfChangedDs; Bool_tfCheckstg; Bool_tfDbg; Int_tfDisappeared; Bool_tfDoall; Int_tfFopt; Bool_tfFullproc; Bool_tfGetlistonly; Bool_tfLocateonly; TStringfMss; Bool_tfNoaction; Bool_tfNonStgf; Int_tfOpened; Bool_tfReopen; Int_tfRopt; Bool_tfScanlist; Int_tfSopt; Bool_tfStageonly; TStringfStageopts; Bool_tfStgf; TFileCollection*fSubDataSetSub-dataset being verified; Bool_tfTouch; Int_tfTouched. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelVerifyDataSet. Function documentation; TSelVerifyDataSet(TTree* ); Constructor. TSelVerifyDataSet(); Constructor. void InitMembers(); Initialize members. void SlaveBegin(TTree* tree); Worker Begin. Bool_t Process(Long64_t entry); Process a single entry. void SlaveTerminate(); Worker Terminate. TSelVerifyDataSet(TTree* ). virtual ~TSelVerifyDataSet(); {}. Int_t Version() const; {return 1;}. void Begin(TTree* ); { }. void Init(TTree* ); { }. Bool_t Notify(); { return kTRUE; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. void SetInputList(TList* input); {fInput = input;}. TList * GetOutputList() const; { return fOutput; }. void Terminate(); { }. » Author: Sangsu Ryu 28/06/2011 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: Tue Jun 30 15:29:56 2015 » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions r",MatchSource.WIKI,root/html602/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelVerifyDataSet.html
https://root.cern/root/html602/TSelVerifyDataSet.html:499,Safety,Abort,Abort,499," virtual~TSelVerifyDataSet(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(",MatchSource.WIKI,root/html602/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelVerifyDataSet.html
https://root.cern/root/html602/TSelVerifyDataSet.html:2662,Security,Hash,Hash,2662,"; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete",MatchSource.WIKI,root/html602/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelVerifyDataSet.html
https://root.cern/root/html602/TSelVerifyDataSet.html:5302,Testability,Test,TestBit,5302,"ject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSelVerifyDataSet&operator=(const TSelVerifyDataSet&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t entry); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidTSelector::ProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetInputList(TList* input); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree* tree); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelVerifyDataSet(); TSelVerifyDataSet(TTree*); TSelVerifyDataSet(const TSelVerifyDataSet&); virtual voidTObject::UseCurrentStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelVerifyDataSet.html
https://root.cern/root/html602/TSelVerifyDataSet.html:5341,Testability,Test,TestBits,5341,"ject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSelVerifyDataSet&operator=(const TSelVerifyDataSet&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t entry); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidTSelector::ProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetInputList(TList* input); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree* tree); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelVerifyDataSet(); TSelVerifyDataSet(TTree*); TSelVerifyDataSet(const TSelVerifyDataSet&); virtual voidTObject::UseCurrentStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelVerifyDataSet.html
https://root.cern/root/html602/TSelVerifyDataSet.html:833,Usability,Clear,Clear,833," virtual~TSelVerifyDataSet(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(",MatchSource.WIKI,root/html602/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSelVerifyDataSet.html
https://root.cern/root/html602/TSemaphore.html:1256,Availability,Error,Error,1256," virtual~TSemaphore(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool",MatchSource.WIKI,root/html602/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSemaphore.html
https://root.cern/root/html602/TSemaphore.html:1385,Availability,error,error,1385," virtual~TSemaphore(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool",MatchSource.WIKI,root/html602/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSemaphore.html
https://root.cern/root/html602/TSemaphore.html:1469,Availability,error,error,1469," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html602/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSemaphore.html
https://root.cern/root/html602/TSemaphore.html:393,Integrability,synchroniz,synchronize,393,". TSemaphore. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » THREAD; » TSemaphore. class TSemaphore: public TObject. TSemaphore. This class implements a counting semaphore. Use a semaphore; to synchronize threads. Function Members (Methods); public:. virtual~TSemaphore(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool",MatchSource.WIKI,root/html602/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSemaphore.html
https://root.cern/root/html602/TSemaphore.html:116,Modifiability,inherit,inheritance,116,". TSemaphore. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » THREAD; » TSemaphore. class TSemaphore: public TObject. TSemaphore. This class implements a counting semaphore. Use a semaphore; to synchronize threads. Function Members (Methods); public:. virtual~TSemaphore(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool",MatchSource.WIKI,root/html602/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSemaphore.html
https://root.cern/root/html602/TSemaphore.html:2349,Modifiability,Inherit,InheritsFrom,2349,"d, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html602/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSemaphore.html
https://root.cern/root/html602/TSemaphore.html:2415,Modifiability,Inherit,InheritsFrom,2415,"cute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); ",MatchSource.WIKI,root/html602/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSemaphore.html
https://root.cern/root/html602/TSemaphore.html:5793,Modifiability,variab,variable,5793,"DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TSemaphore&operator=(const TSemaphore& s); TSemaphore(const TSemaphore& s). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TConditionfCondsemaphore condition variable; TMutexfMutexsemaphare mutex; Int_tfValuecounter. Class Charts. Inheritance Chart:. TObject. ←; TSemaphore. Function documentation; TSemaphore(UInt_t initial = 1); Create counting semaphore. Int_t Wait(Int_t millisec = 0); If semaphore value is > 0 then decrement it and carry on. If it's; already 0 then block. If millisec > 0, apply a relative timeout; of millisec milliseconds. Returns 0 in case of success, or mutex errno. Int_t TryWait(); If semaphore value is > 0 then decrement it and return 0. If it's; already 0 then return 1 or mutex errno. Int_t Post(); If any threads are blocked in Wait(), wake one of them up and; increment the value of the semaphore. Returns 0 in case of success, or; mutex errno. TSemaphore(const TSemaphore& s). TSemaphore& operator=(const TSemaphore& s). virtual ~TSemaphore(); { }. » Author: Fons Rademakers 02/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id$ » Last generated: 2015-06-30 15:29; This page has been ",MatchSource.WIKI,root/html602/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSemaphore.html
https://root.cern/root/html602/TSemaphore.html:5866,Modifiability,Inherit,Inheritance,5866,"onst; voidTObject::MakeZombie(). private:. TSemaphore&operator=(const TSemaphore& s); TSemaphore(const TSemaphore& s). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TConditionfCondsemaphore condition variable; TMutexfMutexsemaphare mutex; Int_tfValuecounter. Class Charts. Inheritance Chart:. TObject. ←; TSemaphore. Function documentation; TSemaphore(UInt_t initial = 1); Create counting semaphore. Int_t Wait(Int_t millisec = 0); If semaphore value is > 0 then decrement it and carry on. If it's; already 0 then block. If millisec > 0, apply a relative timeout; of millisec milliseconds. Returns 0 in case of success, or mutex errno. Int_t TryWait(); If semaphore value is > 0 then decrement it and return 0. If it's; already 0 then return 1 or mutex errno. Int_t Post(); If any threads are blocked in Wait(), wake one of them up and; increment the value of the semaphore. Returns 0 in case of success, or; mutex errno. TSemaphore(const TSemaphore& s). TSemaphore& operator=(const TSemaphore& s). virtual ~TSemaphore(); { }. » Author: Fons Rademakers 02/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the docu",MatchSource.WIKI,root/html602/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSemaphore.html
https://root.cern/root/html602/TSemaphore.html:6148,Safety,timeout,timeout,6148,"onst TSemaphore& s); TSemaphore(const TSemaphore& s). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TConditionfCondsemaphore condition variable; TMutexfMutexsemaphare mutex; Int_tfValuecounter. Class Charts. Inheritance Chart:. TObject. ←; TSemaphore. Function documentation; TSemaphore(UInt_t initial = 1); Create counting semaphore. Int_t Wait(Int_t millisec = 0); If semaphore value is > 0 then decrement it and carry on. If it's; already 0 then block. If millisec > 0, apply a relative timeout; of millisec milliseconds. Returns 0 in case of success, or mutex errno. Int_t TryWait(); If semaphore value is > 0 then decrement it and return 0. If it's; already 0 then return 1 or mutex errno. Int_t Post(); If any threads are blocked in Wait(), wake one of them up and; increment the value of the semaphore. Returns 0 in case of success, or; mutex errno. TSemaphore(const TSemaphore& s). TSemaphore& operator=(const TSemaphore& s). virtual ~TSemaphore(); { }. » Author: Fons Rademakers 02/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSemaphore.html
https://root.cern/root/html602/TSemaphore.html:2239,Security,Hash,Hash,2239,"l voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html602/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSemaphore.html
https://root.cern/root/html602/TSemaphore.html:4329,Testability,Test,TestBit,4329,"tual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); Int_tPost(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Int_tTryWait(); TSemaphore(UInt_t initial = 1); virtual voidTObject::UseCurrentStyle(); Int_tWait(Int_t millisec = 0); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSemaphore.html
https://root.cern/root/html602/TSemaphore.html:4368,Testability,Test,TestBits,4368,"tual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); Int_tPost(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Int_tTryWait(); TSemaphore(UInt_t initial = 1); virtual voidTObject::UseCurrentStyle(); Int_tWait(Int_t millisec = 0); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSemaphore.html
https://root.cern/root/html602/TSemaphore.html:716,Usability,Clear,Clear,716," virtual~TSemaphore(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool",MatchSource.WIKI,root/html602/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSemaphore.html
https://root.cern/root/html602/TSeqCollection.html:611,Availability,avail,available,611,". TSeqCollection. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TSeqCollection. class TSeqCollection: public TCollection. TSeqCollection. Sequenceable collection abstract base class. TSeqCollection's have; an ordering relation, i.e. there is a first and last element. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSeqCollection(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAfter(const TObject* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddLast(TObject* obj); voidTCollection::AddVector(TObject* obj1); virtual TObject*After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*At(Int_t idx) const; virtual TObject*Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCollection::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTCollection::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection:",MatchSource.WIKI,root/html602/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSeqCollection.html
https://root.cern/root/html602/TSeqCollection.html:2287,Availability,Error,Error,2287,"Object*Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCollection::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTCollection::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TCollection::FindObject(const char* name) const; virtual TObject*TCollection::FindObject(const TObject* obj) const; virtual TObject*First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TCollection::GetObjectR",MatchSource.WIKI,root/html602/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSeqCollection.html
https://root.cern/root/html602/TSeqCollection.html:2416,Availability,error,error,2416,"lection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCollection::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTCollection::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TCollection::FindObject(const char* name) const; virtual TObject*TCollection::FindObject(const TObject* obj) const; virtual TObject*First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TCollection::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTC",MatchSource.WIKI,root/html602/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSeqCollection.html
https://root.cern/root/html602/TSeqCollection.html:2500,Availability,error,error,2500,"ame() const; virtual voidTCollection::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTCollection::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TCollection::FindObject(const char* name) const; virtual TObject*TCollection::FindObject(const TObject* obj) const; virtual TObject*First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TCollection::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UI",MatchSource.WIKI,root/html602/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSeqCollection.html
https://root.cern/root/html602/TSeqCollection.html:120,Modifiability,inherit,inheritance,120,". TSeqCollection. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TSeqCollection. class TSeqCollection: public TCollection. TSeqCollection. Sequenceable collection abstract base class. TSeqCollection's have; an ordering relation, i.e. there is a first and last element. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSeqCollection(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAfter(const TObject* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddLast(TObject* obj); voidTCollection::AddVector(TObject* obj1); virtual TObject*After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*At(Int_t idx) const; virtual TObject*Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCollection::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTCollection::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection:",MatchSource.WIKI,root/html602/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSeqCollection.html
https://root.cern/root/html602/TSeqCollection.html:3827,Modifiability,Inherit,InheritsFrom,3827,"ection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TCollection::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tIndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tIsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*Last() const; Int_tLastIndex() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*TCollection::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method) const; Long64_tMerge(TCollection* list); virtual Bool_tTObject::Notify(); static Int_tObjCompare(TObje",MatchSource.WIKI,root/html602/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSeqCollection.html
https://root.cern/root/html602/TSeqCollection.html:3893,Modifiability,Inherit,InheritsFrom,3893,"on::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TCollection::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tIndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tIsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*Last() const; Int_tLastIndex() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*TCollection::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method) const; Long64_tMerge(TCollection* list); virtual Bool_tTObject::Notify(); static Int_tObjCompare(TObject* a, TObject* b); voidTObject::Obsolete(const char* method, cons",MatchSource.WIKI,root/html602/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSeqCollection.html
https://root.cern/root/html602/TSeqCollection.html:9324,Modifiability,Inherit,Inheritance,9324,"Object::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TCollection::(anonymous)TCollection::kInitCapacity; static TCollection::(anonymous)TCollection::kInitHashTableCapacity; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tfSortedtrue if collection has been sorted; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←. TBtree. TList; ←. RooList. TGridJobStatusList. TGridResult. THashList; ←. TListOfDataMembers. TListOfEnums; ←. TListOfEnumsWithLock. TListOfFunctionTemplates.  [more...]. Function documentation; Int_t IndexOf(const TObject* obj) const; Return index of object in collection. Returns -1 when object not found.; Uses member IsEqual() to find object. Int_t GetLast() const; Returns index of last object in collection. Returns -1 when no; objects in collection. Int_t ObjCompare(TObject* a, TObject* b); Compare to objects in the collection. Use member Compare() of object a. void QSort(TObject** a, Int_t first, Int_t last); Sort array of TObject pointers using a quicksort algorithm.; The algorithm used is a non stable sort (i.e. already sorted; elements might switch/change places).; Uses ObjCompare() to compare objects. void QSort(TObject** a, Int_t nBs, TObject*** b, Int_t first, Int_t last); Sort array a of TObject pointers using a quick",MatchSource.WIKI,root/html602/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSeqCollection.html
https://root.cern/root/html602/TSeqCollection.html:3669,Security,Hash,Hash,3669,"Collection::FindObject(const char* name) const; virtual TObject*TCollection::FindObject(const TObject* obj) const; virtual TObject*First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TCollection::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tIndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tIsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*Last() const; Int_tLastIndex() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*TCollection::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseI",MatchSource.WIKI,root/html602/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSeqCollection.html
https://root.cern/root/html602/TSeqCollection.html:1213,Testability,Assert,AssertClass,1213," virtual~TSeqCollection(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAfter(const TObject* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddLast(TObject* obj); voidTCollection::AddVector(TObject* obj1); virtual TObject*After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*At(Int_t idx) const; virtual TObject*Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCollection::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTCollection::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection:",MatchSource.WIKI,root/html602/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSeqCollection.html
https://root.cern/root/html602/TSeqCollection.html:7354,Testability,Test,TestBit,7354,"n_t* option, TPRegexp& regexp, Int_t recurse = 1) const; static voidQSort(TObject** a, Int_t first, Int_t last); static voidQSort(TObject** a, TObject** b, Int_t first, Int_t last); static voidQSort(TObject** a, Int_t nBs, TObject*** b, Int_t first, Int_t last); virtual Int_tTObject::Read(const char* name); virtual voidTCollection::RecursiveRemove(TObject* obj); virtual TObject*TCollection::Remove(TObject* obj); virtual voidRemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*RemoveAt(Int_t idx); virtual voidRemoveBefore(TObject* before); virtual voidRemoveFirst(); virtual voidRemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSeqCollection(const TSeqCollection&); voidUnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSeqCollection.html
https://root.cern/root/html602/TSeqCollection.html:7393,Testability,Test,TestBits,7393,"n_t* option, TPRegexp& regexp, Int_t recurse = 1) const; static voidQSort(TObject** a, Int_t first, Int_t last); static voidQSort(TObject** a, TObject** b, Int_t first, Int_t last); static voidQSort(TObject** a, Int_t nBs, TObject*** b, Int_t first, Int_t last); virtual Int_tTObject::Read(const char* name); virtual voidTCollection::RecursiveRemove(TObject* obj); virtual TObject*TCollection::Remove(TObject* obj); virtual voidRemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*RemoveAt(Int_t idx); virtual voidRemoveBefore(TObject* before); virtual voidRemoveFirst(); virtual voidRemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSeqCollection(const TSeqCollection&); voidUnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSeqCollection.html
https://root.cern/root/html602/TSeqCollection.html:1541,Usability,Clear,Clear,1541," virtual~TSeqCollection(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAfter(const TObject* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddLast(TObject* obj); voidTCollection::AddVector(TObject* obj1); virtual TObject*After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*At(Int_t idx) const; virtual TObject*Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCollection::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTCollection::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection:",MatchSource.WIKI,root/html602/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSeqCollection.html
https://root.cern/root/html602/TServerSocket.html:1874,Availability,Error,Error,1874,"owse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTSocket::Close(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static UChar_tGetAcceptOptions(); UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual cons",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:2003,Availability,error,error,2003,"on = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTSocket::Close(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static UChar_tGetAcceptOptions(); UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TIne",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:2087,Availability,error,error,2087,"dTSocket::Close(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static UChar_tGetAcceptOptions(); UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tGetLocalPort(); virtual const char*TName",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:4570,Availability,error,error,4570,":GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTSocket::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tTSocket::Reconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRecv(TMessage*&); virtual Int_tRecv(Int_t&, Int_t&); virtual Int_tRecv(char*, Int_t); virtual Int_tRecv(char*, Int_t, Int_t&); virtual Int_tRecvRaw(void*, Int_t, ESendRecvOptions = kDefault); voidTObject::ResetBit",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:11929,Availability,error,error,11929," ""protocol"" version. private:. TSeqCollection*fSecContextsList of TSecContext with cleanup info; static UChar_tfgAcceptOptDefault accept options; static SrvClup_tfgSrvAuthClupHook; static SrvAuth_tfgSrvAuthHook. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←; TServerSocket. ←. TPServerSocket. Function documentation; TServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object for a named service. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object on a specified port. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections. If port is 0 a port scan will be done to; find a free port. This option is mutual exlusive with the reuse option.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:11968,Availability,error,error,11968,"vAuthHook. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←; TServerSocket. ←. TPServerSocket. Function documentation; TServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object for a named service. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object on a specified port. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections. If port is 0 a port scan will be done to; find a free port. This option is mutual exlusive with the reuse option.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:13052,Availability,error,error,13052,"all failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object on a specified port. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections. If port is 0 a port scan will be done to; find a free port. This option is mutual exlusive with the reuse option.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and n",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:13091,Availability,error,error,13091," closed on; program termination. TServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object on a specified port. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections. If port is 0 a port scan will be done to; find a free port. This option is mutual exlusive with the reuse option.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authenticati",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:13953,Availability,error,error,13953,"t valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; ",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:14037,Availability,avail,available,14037,"t valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; ",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:14693,Availability,error,error,14693,"ll blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ); Check authentication request from the client on new; open connection. TServerSocket(); { }. TServerSocket(const TServerSocket& ). void operator=(const TServerSocket& ). Int_t Send(const TMessage& ); { MayNotUse(""Send(const TMessage &)""); return 0; }. Int_t Send(Int_t ); { MayNotUse(""Send(Int_t)""); return 0; }. Int_t Send(Int_t , Int_t ); { MayNotUse(""Send(Int_t, Int_t)""); return 0; }. Int_t Send(const char* , Int_t = kMESS_STRING); { MayNotUse(""Send(const char *, Int_t)""); return 0; }. Int_t SendObject(const TObject* , Int",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:14817,Availability,error,error,14817,"o added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ); Check authentication request from the client on new; open connection. TServerSocket(); { }. TServerSocket(const TServerSocket& ). void operator=(const TServerSocket& ). Int_t Send(const TMessage& ); { MayNotUse(""Send(const TMessage &)""); return 0; }. Int_t Send(Int_t ); { MayNotUse(""Send(Int_t)""); return 0; }. Int_t Send(Int_t , Int_t ); { MayNotUse(""Send(Int_t, Int_t)""); return 0; }. Int_t Send(const char* , Int_t = kMESS_STRING); { MayNotUse(""Send(const char *, Int_t)""); return 0; }. Int_t SendObject(const TObject* , Int_t = kMESS_OBJECT); { MayNotUse(""SendObject(const TObject *, Int_t)""); return 0; }. Int_t SendRaw(const void* ",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:10897,Integrability,protocol,protocol,10897,"TSocket::kPROOFD; static TSocket::EServiceTypeTSocket::kROOTD; static TSocket::EInterestTSocket::kRead; static TSocket::EServiceTypeTSocket::kSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TSocket::EInterestTSocket::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TSeqCollection*fSecContextsList of TSecContext with cleanup info; static UChar_tfgAcceptOptDefault accept options; static SrvClup_tfgSrvAuthClupHook; static SrvAuth_tfgSrvAuthHook. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←; TServerSocket. ←. TPServerSocket. Function documentation; TServerSocket(const char* ",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:119,Modifiability,inherit,inheritance,119,". TServerSocket. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TServerSocket. class TServerSocket: public TSocket. TServerSocket. This class implements server sockets. A server socket waits for; requests to come in over the network. It performs some operation; based on that request and then possibly returns a full duplex socket; to the requester. The actual work is done via the TSystem class; (either TUnixSystem or TWinNTSystem). Function Members (Methods); public:. virtual~TServerSocket(); voidTObject::AbstractMethod(const char* method) const; virtual TSocket*Accept(UChar_t Opt = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTSocket::Close(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:3909,Modifiability,Inherit,InheritsFrom,3909,"InetAddressTSocket::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tGetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTSocket::GetOption(ESockOptions opt, Int_t& val); Int_tTSocket::GetPort() const; Int_tTSocket::GetRemoteProtocol() const; TSecContext*TSocket::GetSecContext() const; const char*TSocket::GetService() const; Int_tTSocket::GetServType() const; static ULong64_tTSocket::GetSocketBytesRecv(); static ULong64_tTSocket::GetSocketBytesSent(); Int_tTSocket::GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTSocket::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::ope",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:3975,Modifiability,Inherit,InheritsFrom,3975,"LastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tGetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTSocket::GetOption(ESockOptions opt, Int_t& val); Int_tTSocket::GetPort() const; Int_tTSocket::GetRemoteProtocol() const; TSecContext*TSocket::GetSecContext() const; const char*TSocket::GetService() const; Int_tTSocket::GetServType() const; static ULong64_tTSocket::GetSocketBytesRecv(); static ULong64_tTSocket::GetSocketBytesSent(); Int_tTSocket::GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTSocket::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* ",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:11121,Modifiability,Inherit,Inheritance,11121,"tringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TSeqCollection*fSecContextsList of TSecContext with cleanup info; static UChar_tfgAcceptOptDefault accept options; static SrvClup_tfgSrvAuthClupHook; static SrvAuth_tfgSrvAuthHook. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←; TServerSocket. ←. TPServerSocket. Function documentation; TServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object for a named service. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:443,Performance,perform,performs,443,". TServerSocket. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TServerSocket. class TServerSocket: public TSocket. TServerSocket. This class implements server sockets. A server socket waits for; requests to come in over the network. It performs some operation; based on that request and then possibly returns a full duplex socket; to the requester. The actual work is done via the TSystem class; (either TUnixSystem or TWinNTSystem). Function Members (Methods); public:. virtual~TServerSocket(); voidTObject::AbstractMethod(const char* method) const; virtual TSocket*Accept(UChar_t Opt = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTSocket::Close(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:11544,Performance,queue,queue,11544,"bject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TSeqCollection*fSecContextsList of TSecContext with cleanup info; static UChar_tfgAcceptOptDefault accept options; static SrvClup_tfgSrvAuthClupHook; static SrvAuth_tfgSrvAuthHook. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←; TServerSocket. ←. TPServerSocket. Function documentation; TServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object for a named service. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object on a specified port. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the ",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:12553,Performance,queue,queue,12553,"ength; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object on a specified port. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections. If port is 0 a port scan will be done to; find a free port. This option is mutual exlusive with the reuse option.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; ",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:13628,Performance,queue,queue,13628," mutual exlusive with the reuse option.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. ",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:5808,Safety,timeout,timeout,5808,"ct::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tTSocket::Reconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRecv(TMessage*&); virtual Int_tRecv(Int_t&, Int_t&); virtual Int_tRecv(char*, Int_t); virtual Int_tRecv(char*, Int_t, Int_t&); virtual Int_tRecvRaw(void*, Int_t, ESendRecvOptions = kDefault); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTSocket::Select(Int_t interest = kRead, Long_t timeout = -1); virtual Int_tSend(const TMessage&); virtual Int_tSend(Int_t); virtual Int_tSend(Int_t, Int_t); virtual Int_tSend(const char*, Int_t = kMESS_STRING); virtual Int_tSendObject(const TObject*, Int_t = kMESS_OBJECT); virtual Int_tSendRaw(const void*, Int_t, ESendRecvOptions = kDefault); static voidSetAcceptOptions(UChar_t Opt); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTSocket::SetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecConte",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:3799,Security,Hash,Hash,3799,"ng_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tGetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTSocket::GetOption(ESockOptions opt, Int_t& val); Int_tTSocket::GetPort() const; Int_tTSocket::GetRemoteProtocol() const; TSecContext*TSocket::GetSecContext() const; const char*TSocket::GetService() const; Int_tTSocket::GetServType() const; static ULong64_tTSocket::GetSocketBytesRecv(); static ULong64_tTSocket::GetSocketBytesSent(); Int_tTSocket::GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTSocket::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp);",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:10274,Security,Authenticat,Authenticate,10274,"TSocket::kPROOFD; static TSocket::EServiceTypeTSocket::kROOTD; static TSocket::EInterestTSocket::kRead; static TSocket::EServiceTypeTSocket::kSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TSocket::EInterestTSocket::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TSeqCollection*fSecContextsList of TSecContext with cleanup info; static UChar_tfgAcceptOptDefault accept options; static SrvClup_tfgSrvAuthClupHook; static SrvAuth_tfgSrvAuthHook. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←; TServerSocket. ←. TPServerSocket. Function documentation; TServerSocket(const char* ",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:10672,Security,authenticat,authentication,10672,"TSocket::kPROOFD; static TSocket::EServiceTypeTSocket::kROOTD; static TSocket::EInterestTSocket::kRead; static TSocket::EServiceTypeTSocket::kSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TSocket::EInterestTSocket::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TSeqCollection*fSecContextsList of TSecContext with cleanup info; static UChar_tfgAcceptOptDefault accept options; static SrvClup_tfgSrvAuthClupHook; static SrvAuth_tfgSrvAuthHook. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←; TServerSocket. ←. TPServerSocket. Function documentation; TServerSocket(const char* ",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:13413,Security,authenticat,authentication,13413,"et reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections. If port is 0 a port scan will be done to; find a free port. This option is mutual exlusive with the reuse option.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; meth",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:14101,Security,authenticat,authentication,14101,"socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void Show",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:14162,Security,authenticat,authentication,14162,"l failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:14207,Security,authenticat,authentication,14207,"l failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:14269,Security,authenticat,authentication,14269," added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ); Check authentication request from the client on new; open connection. T",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:15025,Security,authenticat,authentication,15025,"lable -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ); Check authentication request from the client on new; open connection. TServerSocket(); { }. TServerSocket(const TServerSocket& ). void operator=(const TServerSocket& ). Int_t Send(const TMessage& ); { MayNotUse(""Send(const TMessage &)""); return 0; }. Int_t Send(Int_t ); { MayNotUse(""Send(Int_t)""); return 0; }. Int_t Send(Int_t , Int_t ); { MayNotUse(""Send(Int_t, Int_t)""); return 0; }. Int_t Send(const char* , Int_t = kMESS_STRING); { MayNotUse(""Send(const char *, Int_t)""); return 0; }. Int_t SendObject(const TObject* , Int_t = kMESS_OBJECT); { MayNotUse(""SendObject(const TObject *, Int_t)""); return 0; }. Int_t SendRaw(const void* , Int_t , ESendRecvOptions = kDefault); { MayNotUse(""SendRaw(const void *, Int_t, ESendRecvOptions)""); return 0; }. Int_t Recv(TMessage*& ); { MayNotUse(""Recv(TMessage *&)""); return 0; }. Int_t Recv(Int_t& , Int_t& ); { M",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:15074,Security,authenticat,authentication,15074,"lable -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ); Check authentication request from the client on new; open connection. TServerSocket(); { }. TServerSocket(const TServerSocket& ). void operator=(const TServerSocket& ). Int_t Send(const TMessage& ); { MayNotUse(""Send(const TMessage &)""); return 0; }. Int_t Send(Int_t ); { MayNotUse(""Send(Int_t)""); return 0; }. Int_t Send(Int_t , Int_t ); { MayNotUse(""Send(Int_t, Int_t)""); return 0; }. Int_t Send(const char* , Int_t = kMESS_STRING); { MayNotUse(""Send(const char *, Int_t)""); return 0; }. Int_t SendObject(const TObject* , Int_t = kMESS_OBJECT); { MayNotUse(""SendObject(const TObject *, Int_t)""); return 0; }. Int_t SendRaw(const void* , Int_t , ESendRecvOptions = kDefault); { MayNotUse(""SendRaw(const void *, Int_t, ESendRecvOptions)""); return 0; }. Int_t Recv(TMessage*& ); { MayNotUse(""Recv(TMessage *&)""); return 0; }. Int_t Recv(Int_t& , Int_t& ); { M",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:15157,Security,Authenticat,Authenticate,15157,"client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ); Check authentication request from the client on new; open connection. TServerSocket(); { }. TServerSocket(const TServerSocket& ). void operator=(const TServerSocket& ). Int_t Send(const TMessage& ); { MayNotUse(""Send(const TMessage &)""); return 0; }. Int_t Send(Int_t ); { MayNotUse(""Send(Int_t)""); return 0; }. Int_t Send(Int_t , Int_t ); { MayNotUse(""Send(Int_t, Int_t)""); return 0; }. Int_t Send(const char* , Int_t = kMESS_STRING); { MayNotUse(""Send(const char *, Int_t)""); return 0; }. Int_t SendObject(const TObject* , Int_t = kMESS_OBJECT); { MayNotUse(""SendObject(const TObject *, Int_t)""); return 0; }. Int_t SendRaw(const void* , Int_t , ESendRecvOptions = kDefault); { MayNotUse(""SendRaw(const void *, Int_t, ESendRecvOptions)""); return 0; }. Int_t Recv(TMessage*& ); { MayNotUse(""Recv(TMessage *&)""); return 0; }. Int_t Recv(Int_t& , Int_t& ); { MayNotUse(""Recv(Int_t &, Int_t &)""); return 0; }. Int_t Recv(char* , Int_t ); { MayNotUse(""Recv(char *, Int_t)""); return 0; }. Int_t Recv(char* , Int_t , Int_t&",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:15188,Security,authenticat,authentication,15188,"client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ); Check authentication request from the client on new; open connection. TServerSocket(); { }. TServerSocket(const TServerSocket& ). void operator=(const TServerSocket& ). Int_t Send(const TMessage& ); { MayNotUse(""Send(const TMessage &)""); return 0; }. Int_t Send(Int_t ); { MayNotUse(""Send(Int_t)""); return 0; }. Int_t Send(Int_t , Int_t ); { MayNotUse(""Send(Int_t, Int_t)""); return 0; }. Int_t Send(const char* , Int_t = kMESS_STRING); { MayNotUse(""Send(const char *, Int_t)""); return 0; }. Int_t SendObject(const TObject* , Int_t = kMESS_OBJECT); { MayNotUse(""SendObject(const TObject *, Int_t)""); return 0; }. Int_t SendRaw(const void* , Int_t , ESendRecvOptions = kDefault); { MayNotUse(""SendRaw(const void *, Int_t, ESendRecvOptions)""); return 0; }. Int_t Recv(TMessage*& ); { MayNotUse(""Recv(TMessage *&)""); return 0; }. Int_t Recv(Int_t& , Int_t& ); { MayNotUse(""Recv(Int_t &, Int_t &)""); return 0; }. Int_t Recv(char* , Int_t ); { MayNotUse(""Recv(char *, Int_t)""); return 0; }. Int_t Recv(char* , Int_t , Int_t&",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:7355,Testability,Test,TestBit,7355,"RING); virtual Int_tSendObject(const TObject*, Int_t = kMESS_OBJECT); virtual Int_tSendRaw(const void*, Int_t, ESendRecvOptions = kDefault); static voidSetAcceptOptions(UChar_t Opt); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTSocket::SetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecContext* ctx); voidTSocket::SetService(const char* service); voidTSocket::SetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTSocket::SetUrl(const char* url); static voidShowAcceptOptions(); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); TServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); TServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:7394,Testability,Test,TestBits,7394,"RING); virtual Int_tSendObject(const TObject*, Int_t = kMESS_OBJECT); virtual Int_tSendRaw(const void*, Int_t, ESendRecvOptions = kDefault); static voidSetAcceptOptions(UChar_t Opt); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTSocket::SetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecContext* ctx); voidTSocket::SetService(const char* service); voidTSocket::SetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTSocket::SetUrl(const char* url); static voidShowAcceptOptions(); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); TServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); TServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TServerSocket.html:986,Usability,Clear,Clear,986," virtual~TServerSocket(); voidTObject::AbstractMethod(const char* method) const; virtual TSocket*Accept(UChar_t Opt = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTSocket::Close(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t",MatchSource.WIKI,root/html602/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TServerSocket.html
https://root.cern/root/html602/TSessionDescription.html:1327,Availability,Error,Error,1327," virtual~TSessionDescription(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char",MatchSource.WIKI,root/html602/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionDescription.html
https://root.cern/root/html602/TSessionDescription.html:1456,Availability,error,error,1456," virtual~TSessionDescription(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char",MatchSource.WIKI,root/html602/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionDescription.html
https://root.cern/root/html602/TSessionDescription.html:1540,Availability,error,error,1540," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect",MatchSource.WIKI,root/html602/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionDescription.html
https://root.cern/root/html602/TSessionDescription.html:125,Modifiability,inherit,inheritance,125,". TSessionDescription. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionDescription. class TSessionDescription: public TObject. TSessionViewer. Widget used to manage PROOF or local sessions, PROOF connections,; queries construction and results handling. Function Members (Methods); public:. virtual~TSessionDescription(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char",MatchSource.WIKI,root/html602/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionDescription.html
https://root.cern/root/html602/TSessionDescription.html:2411,Modifiability,Inherit,InheritsFrom,2411,"ar* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html602/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionDescription.html
https://root.cern/root/html602/TSessionDescription.html:2477,Modifiability,Inherit,InheritsFrom,2477,"ject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSessionDescription&operator=(const TSessionDescrip",MatchSource.WIKI,root/html602/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionDescription.html
https://root.cern/root/html602/TSessionDescription.html:6584,Modifiability,Inherit,Inheritance,6584,"t; voidTObject::MakeZombie(). Data Members; public:. TQueryDescription*fActQuerycurrent (actual) query; TStringfAddressserver address; Bool_tfAttachedkTRUE if attached; Bool_tfAutoEnableenable packages at session startup time; TStringfConfigFileconfiguration file name; Bool_tfConnectedkTRUE if connected; Bool_tfLocalkTRUE if session is local; Int_tfLogLevellog (debug) level; TStringfNamesession name; Int_tfNbHistosnumber of feedback histos; TList*fPackageslist of packages; Int_tfPortcommunication port; TProof*fProofpointer on TProof used by this session; TProofMgr*fProofMgrProof sessions manager; TList*fQuerieslist of queries in this session; Bool_tfSynckTRUE if in sync mode; TStringfTagsession unique identifier; TStringfUserNameuser name (on server); static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance Chart:. TObject. ←; TSessionDescription. Function documentation; const char * GetName() const; { return fQueryName; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionDescription.html
https://root.cern/root/html602/TSessionDescription.html:2301,Security,Hash,Hash,2301," ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html602/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionDescription.html
https://root.cern/root/html602/TSessionDescription.html:4491,Testability,Test,TestBit,4491,"dTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSessionDescription&operator=(const TSessionDescription&); TSessionDescription&operator=(TSessionDescription&&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSessionDescription(); TSessionDescription(TSessionDescription&&); TSessionDescription(const TSessionDescription&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionDescription.html
https://root.cern/root/html602/TSessionDescription.html:4530,Testability,Test,TestBits,4530,"dTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSessionDescription&operator=(const TSessionDescription&); TSessionDescription&operator=(TSessionDescription&&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSessionDescription(); TSessionDescription(TSessionDescription&&); TSessionDescription(const TSessionDescription&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionDescription.html
https://root.cern/root/html602/TSessionDescription.html:787,Usability,Clear,Clear,787," virtual~TSessionDescription(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char",MatchSource.WIKI,root/html602/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionDescription.html
https://root.cern/root/html602/TSessionDescription.html:5505,Usability,feedback,feedback,5505,"n = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. TQueryDescription*fActQuerycurrent (actual) query; TStringfAddressserver address; Bool_tfAttachedkTRUE if attached; Bool_tfAutoEnableenable packages at session startup time; TStringfConfigFileconfiguration file name; Bool_tfConnectedkTRUE if connected; Bool_tfLocalkTRUE if session is local; Int_tfLogLevellog (debug) level; TStringfNamesession name; Int_tfNbHistosnumber of feedback histos; TList*fPackageslist of packages; Int_tfPortcommunication port; TProof*fProofpointer on TProof used by this session; TProofMgr*fProofMgrProof sessions manager; TList*fQuerieslist of queries in this session; Bool_tfSynckTRUE if in sync mode; TStringfTagsession unique identifier; TStringfUserNameuser name (on server); static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance Chart:. TObject. ←; TSessionDescription. Function documentation; const char * GetName() const; { return fQueryName; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » L",MatchSource.WIKI,root/html602/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionDescription.html
https://root.cern/root/html602/TSessionFrame.html:4139,Availability,Error,Error,4139,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:4268,Availability,error,error,4268," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const;",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:4352,Availability,error,error,4352,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() c",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:18208,Availability,mask,mask,18208,,MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:20565,Availability,down,down,20565,::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fApplyLogLevelapply log level button; TGTextButton*fApplyParallelapply parallel nodes button; TGTextButton*fBtnAddadd package button; TGTextButton*fBtnClearclear all packages button; TGTextButton*fBtnDisabledisable packages button; TGTextButton*fBtnDownmove package down button; TGTextButton*fBtnEnableenable packages button; TGTextButton*fBtnGetQueriesget entries button; TGTextButton*fBtnNewQuerynew query button; TGTextButton*fBtnRefreshrefresh list button; TGTextButton*fBtnRemoveremove package button; TGTextButton*fBtnRemoveDSetremove dataset button; TGTextButton*fBtnShowshow packages button; TGTextButton*fBtnShowEnabledshow enabled packages button; TGTextButton*fBtnShowLogshow log button; TGTextButton*fBtnUpmove package up button; TGTextButton*fBtnUploadupload packages button; TGTextButton*fBtnUploadDSetupload dataset button; TGTextButton*fBtnVerifyDSetverify dataset button; TGCheckButton*fChkEnableenable at session startup check; TGCheckButton*fChkMultimultiple selection check; TGCheckButton*fClearCheckclear text view after each command; TGTextBuffer*fCommandBufCommand line text buffer; TGTextEntry*fCommandTxtCommand line text entry; TGCanvas*fDSetViewdataset tree view; TGListTree*fDataSetTreedataset list tree; TGCompositeFrame*fFA; TGCompositeFrame*fFB; TGCompositeFrame*fFC; TGCompositeFrame*fFDfive tabs element; TGCompositeFrame*fFEfive tabs element; TGLabel*fInfoLine[19]infos on session; TGTextView*fInfoTextViewsummary on current query; TGListBox*fLBPackagespackages listbox; TGNumberEntry*fLogLevellog level number entry; TGTab*fTabmain tab frame; TGTextEntry*fTxtParallelparallel nodes text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; T,MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:23589,Availability,down,down,23589,"rify that the files in the selected dataset are present on the cluster. void OnApplyLogLevel(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof session. void OnBtnShowLogClicked(); Show session log. void OnBtnNewQueryClicked(); Call ""New Query"" Dialog. void OnBtnGetQueriesClicked(); Get list of queries from current Proof server and populate the list tree. void OnCommandLine(); Command line handling. void SetLocal(Bool_t local = kTRUE); Switch widgets status/visibility for local/remote sessions. void ShutdownSession(); Shutdown current session. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. TSessionFrame(TGWindow* parent, Int_t w, Int_t h). void CheckAutoEnPack(Bool_t checked = kTRUE). TGTab * GetTab() const; { return fTab; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has ",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:22392,Deployability,Update,UpdateListOfDataSets,22392,"dTxtCommand line text entry; TGCanvas*fDSetViewdataset tree view; TGListTree*fDataSetTreedataset list tree; TGCompositeFrame*fFA; TGCompositeFrame*fFB; TGCompositeFrame*fFC; TGCompositeFrame*fFDfive tabs element; TGCompositeFrame*fFEfive tabs element; TGLabel*fInfoLine[19]infos on session; TGTextView*fInfoTextViewsummary on current query; TGListBox*fLBPackagespackages listbox; TGNumberEntry*fLogLevellog level number entry; TGTab*fTabmain tab frame; TGTextEntry*fTxtParallelparallel nodes text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; TSessionFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionFrame(); Destructor. void Build(TSessionViewer* gui); Build session frame. void ProofInfos(); Display information on current session. void OnBtnUploadDSet(); Open Upload Dataset dialog. void UpdateListOfDataSets(); Update list of dataset present on the cluster. void OnBtnRemoveDSet(); Remove dataset from the list and from the cluster. void OnBtnVerifyDSet(); Verify that the files in the selected dataset are present on the cluster. void OnApplyLogLevel(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected pack",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:22416,Deployability,Update,Update,22416,"dTxtCommand line text entry; TGCanvas*fDSetViewdataset tree view; TGListTree*fDataSetTreedataset list tree; TGCompositeFrame*fFA; TGCompositeFrame*fFB; TGCompositeFrame*fFC; TGCompositeFrame*fFDfive tabs element; TGCompositeFrame*fFEfive tabs element; TGLabel*fInfoLine[19]infos on session; TGTextView*fInfoTextViewsummary on current query; TGListBox*fLBPackagespackages listbox; TGNumberEntry*fLogLevellog level number entry; TGTab*fTabmain tab frame; TGTextEntry*fTxtParallelparallel nodes text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; TSessionFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionFrame(); Destructor. void Build(TSessionViewer* gui); Build session frame. void ProofInfos(); Display information on current session. void OnBtnUploadDSet(); Open Upload Dataset dialog. void UpdateListOfDataSets(); Update list of dataset present on the cluster. void OnBtnRemoveDSet(); Remove dataset from the list and from the cluster. void OnBtnVerifyDSet(); Verify that the files in the selected dataset are present on the cluster. void OnApplyLogLevel(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected pack",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:22943,Deployability,Update,UpdatePackages,22943,"main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; TSessionFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionFrame(); Destructor. void Build(TSessionViewer* gui); Build session frame. void ProofInfos(); Display information on current session. void OnBtnUploadDSet(); Open Upload Dataset dialog. void UpdateListOfDataSets(); Update list of dataset present on the cluster. void OnBtnRemoveDSet(); Remove dataset from the list and from the cluster. void OnBtnVerifyDSet(); Verify that the files in the selected dataset are present on the cluster. void OnApplyLogLevel(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof session. void OnBtnShowLogClicked(); Show session log. void OnBtnNewQueryClicked(); Call ""New Query"" Dialog. void OnBtnGetQueriesClicked(); Get list of queries from current Proof server and populate the list tree. void OnCommandLine(); Command line handling. void SetLocal(Bool_t local = kTRUE",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:22961,Deployability,Update,Update,22961,"main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; TSessionFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionFrame(); Destructor. void Build(TSessionViewer* gui); Build session frame. void ProofInfos(); Display information on current session. void OnBtnUploadDSet(); Open Upload Dataset dialog. void UpdateListOfDataSets(); Update list of dataset present on the cluster. void OnBtnRemoveDSet(); Remove dataset from the list and from the cluster. void OnBtnVerifyDSet(); Verify that the files in the selected dataset are present on the cluster. void OnApplyLogLevel(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof session. void OnBtnShowLogClicked(); Show session log. void OnBtnNewQueryClicked(); Call ""New Query"" Dialog. void OnBtnGetQueriesClicked(); Get list of queries from current Proof server and populate the list tree. void OnCommandLine(); Command line handling. void SetLocal(Bool_t local = kTRUE",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:10316,Integrability,Message,Message,10316,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidOnApplyLogLevel(); voidOnApplyParallel(); voidOnBtnAddClicked(); voidOnBtnDisconnectClicked(); voidOnBtnDownClicked(); voidOnBtnGetQueriesClicked(); voidOnBtnNewQueryClicked(); voidOnBtnRemoveClicked(); voidOnBtnRemoveDSet(); voidOnBtnShowLogClicked(); voidOnBtnUpClicked(); voidOnBtnUploadDSet(); voidOnBtnVerifyDSet(); voidOnClearPackages(); voidOnCommandLine(); voidOnDisablePackages(); voidOnEnablePackages(); voidOnMultipleSelection(Bool_t on); voidOnStartupEnable(Bool_t on); voidOnUploadPackages(); voidTObject::operator delete(void* ptr); voidTObject",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:119,Modifiability,inherit,inheritance,119,". TSessionFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionFrame. class TSessionFrame: public TGCompositeFrame. TSessionViewer. Widget used to manage PROOF or local sessions, PROOF connections,; queries construction and results handling. Function Members (Methods); public:. virtual~TSessionFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); voidCheckAutoEnPack(Bool_t checked = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char*",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:8899,Modifiability,Inherit,InheritsFrom,8899,"irtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:8965,Modifiability,Inherit,InheritsFrom,8965," Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow:",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:21988,Modifiability,Inherit,Inheritance,21988," TGTextButton*fBtnUpmove package up button; TGTextButton*fBtnUploadupload packages button; TGTextButton*fBtnUploadDSetupload dataset button; TGTextButton*fBtnVerifyDSetverify dataset button; TGCheckButton*fChkEnableenable at session startup check; TGCheckButton*fChkMultimultiple selection check; TGCheckButton*fClearCheckclear text view after each command; TGTextBuffer*fCommandBufCommand line text buffer; TGTextEntry*fCommandTxtCommand line text entry; TGCanvas*fDSetViewdataset tree view; TGListTree*fDataSetTreedataset list tree; TGCompositeFrame*fFA; TGCompositeFrame*fFB; TGCompositeFrame*fFC; TGCompositeFrame*fFDfive tabs element; TGCompositeFrame*fFEfive tabs element; TGLabel*fInfoLine[19]infos on session; TGTextView*fInfoTextViewsummary on current query; TGListBox*fLBPackagespackages listbox; TGNumberEntry*fLogLevellog level number entry; TGTab*fTabmain tab frame; TGTextEntry*fTxtParallelparallel nodes text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; TSessionFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionFrame(); Destructor. void Build(TSessionViewer* gui); Build session frame. void ProofInfos(); Display information on current session. void OnBtnUploadDSet(); Open Upload Dataset dialog. void UpdateListOfDataSets(); Update list of dataset present on the cluster. void OnBtnRemoveDSet(); Remove dataset from the list and from the cluster. void OnBtnVerifyDSet(); Verify that the files in the selected dataset are present on the cluster. void OnApplyLogLevel(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUplo",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:8609,Security,Hash,Hash,8609,"t_t, Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:14001,Testability,log,log,14001,"_t parm2); virtual voidTGFrame::SetBackgroundColor(Pixel_t back); virtual voidTGWindow::SetBackgroundPixmap(Pixmap_t pixmap); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTGCompositeFrame::SetCleanup(Int_t mode = kLocalCleanup); voidTGFrame::SetDNDSource(Bool_t onoff); voidTGFrame::SetDNDTarget(Bool_t onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLocal(Bool_t local = kTRUE); voidSetLogLevel(Int_t log); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; voidShutdownSession(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:14926,Testability,Test,TestBit,14926,"::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLocal(Bool_t local = kTRUE); voidSetLogLevel(Int_t log); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; voidShutdownSession(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionFrame(const TSessionFrame&); TSessionFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); voidUpdateListOfDataSets(); voidUpdatePackages(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:14965,Testability,Test,TestBits,14965,"::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLocal(Bool_t local = kTRUE); voidSetLogLevel(Int_t log); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; voidShutdownSession(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionFrame(const TSessionFrame&); TSessionFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); voidUpdateListOfDataSets(); voidUpdatePackages(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:20319,Testability,log,log,20319,::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fApplyLogLevelapply log level button; TGTextButton*fApplyParallelapply parallel nodes button; TGTextButton*fBtnAddadd package button; TGTextButton*fBtnClearclear all packages button; TGTextButton*fBtnDisabledisable packages button; TGTextButton*fBtnDownmove package down button; TGTextButton*fBtnEnableenable packages button; TGTextButton*fBtnGetQueriesget entries button; TGTextButton*fBtnNewQuerynew query button; TGTextButton*fBtnRefreshrefresh list button; TGTextButton*fBtnRemoveremove package button; TGTextButton*fBtnRemoveDSetremove dataset button; TGTextButton*fBtnShowshow packages button; TGTextButton*fBtnShowEnabledshow enabled packages button; TGTextButton*fBtnShowLogshow log button; TGTextButton*fBtnUpmove package up button; TGTextButton*fBtnUploadupload packages button; TGTextButton*fBtnUploadDSetupload dataset button; TGTextButton*fBtnVerifyDSetverify dataset button; TGCheckButton*fChkEnableenable at session startup check; TGCheckButton*fChkMultimultiple selection check; TGCheckButton*fClearCheckclear text view after each command; TGTextBuffer*fCommandBufCommand line text buffer; TGTextEntry*fCommandTxtCommand line text entry; TGCanvas*fDSetViewdataset tree view; TGListTree*fDataSetTreedataset list tree; TGCompositeFrame*fFA; TGCompositeFrame*fFB; TGCompositeFrame*fFC; TGCompositeFrame*fFDfive tabs element; TGCompositeFrame*fFEfive tabs element; TGLabel*fInfoLine[19]infos on session; TGTextView*fInfoTextViewsummary on current query; TGListBox*fLBPackagespackages listbox; TGNumberEntry*fLogLevellog level number entry; TGTab*fTabmain tab frame; TGTextEntry*fTxtParallelparallel nodes text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; T,MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:20986,Testability,log,log,20986,::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fApplyLogLevelapply log level button; TGTextButton*fApplyParallelapply parallel nodes button; TGTextButton*fBtnAddadd package button; TGTextButton*fBtnClearclear all packages button; TGTextButton*fBtnDisabledisable packages button; TGTextButton*fBtnDownmove package down button; TGTextButton*fBtnEnableenable packages button; TGTextButton*fBtnGetQueriesget entries button; TGTextButton*fBtnNewQuerynew query button; TGTextButton*fBtnRefreshrefresh list button; TGTextButton*fBtnRemoveremove package button; TGTextButton*fBtnRemoveDSetremove dataset button; TGTextButton*fBtnShowshow packages button; TGTextButton*fBtnShowEnabledshow enabled packages button; TGTextButton*fBtnShowLogshow log button; TGTextButton*fBtnUpmove package up button; TGTextButton*fBtnUploadupload packages button; TGTextButton*fBtnUploadDSetupload dataset button; TGTextButton*fBtnVerifyDSetverify dataset button; TGCheckButton*fChkEnableenable at session startup check; TGCheckButton*fChkMultimultiple selection check; TGCheckButton*fClearCheckclear text view after each command; TGTextBuffer*fCommandBufCommand line text buffer; TGTextEntry*fCommandTxtCommand line text entry; TGCanvas*fDSetViewdataset tree view; TGListTree*fDataSetTreedataset list tree; TGCompositeFrame*fFA; TGCompositeFrame*fFB; TGCompositeFrame*fFC; TGCompositeFrame*fFDfive tabs element; TGCompositeFrame*fFEfive tabs element; TGLabel*fInfoLine[19]infos on session; TGTextView*fInfoTextViewsummary on current query; TGListBox*fLBPackagespackages listbox; TGNumberEntry*fLogLevellog level number entry; TGTab*fTabmain tab frame; TGTextEntry*fTxtParallelparallel nodes text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; T,MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:22675,Testability,log,log,22675,"ement; TGLabel*fInfoLine[19]infos on session; TGTextView*fInfoTextViewsummary on current query; TGListBox*fLBPackagespackages listbox; TGNumberEntry*fLogLevellog level number entry; TGTab*fTabmain tab frame; TGTextEntry*fTxtParallelparallel nodes text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; TSessionFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionFrame(); Destructor. void Build(TSessionViewer* gui); Build session frame. void ProofInfos(); Display information on current session. void OnBtnUploadDSet(); Open Upload Dataset dialog. void UpdateListOfDataSets(); Update list of dataset present on the cluster. void OnBtnRemoveDSet(); Remove dataset from the list and from the cluster. void OnBtnVerifyDSet(); Verify that the files in the selected dataset are present on the cluster. void OnApplyLogLevel(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof se",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:23718,Testability,log,log,23718,"sion. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof session. void OnBtnShowLogClicked(); Show session log. void OnBtnNewQueryClicked(); Call ""New Query"" Dialog. void OnBtnGetQueriesClicked(); Get list of queries from current Proof server and populate the list tree. void OnCommandLine(); Command line handling. void SetLocal(Bool_t local = kTRUE); Switch widgets status/visibility for local/remote sessions. void ShutdownSession(); Shutdown current session. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. TSessionFrame(TGWindow* parent, Int_t w, Int_t h). void CheckAutoEnPack(Bool_t checked = kTRUE). TGTab * GetTab() const; { return fTab; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT sup",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:24163,Testability,log,log,24163,"void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof session. void OnBtnShowLogClicked(); Show session log. void OnBtnNewQueryClicked(); Call ""New Query"" Dialog. void OnBtnGetQueriesClicked(); Get list of queries from current Proof server and populate the list tree. void OnCommandLine(); Command line handling. void SetLocal(Bool_t local = kTRUE); Switch widgets status/visibility for local/remote sessions. void ShutdownSession(); Shutdown current session. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. TSessionFrame(TGWindow* parent, Int_t w, Int_t h). void CheckAutoEnPack(Bool_t checked = kTRUE). TGTab * GetTab() const; { return fTab; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:24195,Testability,log,log,24195,"void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof session. void OnBtnShowLogClicked(); Show session log. void OnBtnNewQueryClicked(); Call ""New Query"" Dialog. void OnBtnGetQueriesClicked(); Get list of queries from current Proof server and populate the list tree. void OnCommandLine(); Command line handling. void SetLocal(Bool_t local = kTRUE); Switch widgets status/visibility for local/remote sessions. void ShutdownSession(); Shutdown current session. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. TSessionFrame(TGWindow* parent, Int_t w, Int_t h). void CheckAutoEnPack(Bool_t checked = kTRUE). TGTab * GetTab() const; { return fTab; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:1465,Usability,Clear,Clear,1465," virtual~TSessionFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); voidCheckAutoEnPack(Bool_t checked = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char*",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionFrame.html:23240,Usability,Clear,Clear,23240,"; Build session frame. void ProofInfos(); Display information on current session. void OnBtnUploadDSet(); Open Upload Dataset dialog. void UpdateListOfDataSets(); Update list of dataset present on the cluster. void OnBtnRemoveDSet(); Remove dataset from the list and from the cluster. void OnBtnVerifyDSet(); Verify that the files in the selected dataset are present on the cluster. void OnApplyLogLevel(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof session. void OnBtnShowLogClicked(); Show session log. void OnBtnNewQueryClicked(); Call ""New Query"" Dialog. void OnBtnGetQueriesClicked(); Get list of queries from current Proof server and populate the list tree. void OnCommandLine(); Command line handling. void SetLocal(Bool_t local = kTRUE); Switch widgets status/visibility for local/remote sessions. void ShutdownSession(); Shutdown current session. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. TSessionFrame(TGWindow* parent, Int_t w, Int_t h).",MatchSource.WIKI,root/html602/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionFrame.html
https://root.cern/root/html602/TSessionInputFrame.html:4143,Availability,Error,Error,4143,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html602/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionInputFrame.html
https://root.cern/root/html602/TSessionInputFrame.html:4272,Availability,error,error,4272," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const;",MatchSource.WIKI,root/html602/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionInputFrame.html
https://root.cern/root/html602/TSessionInputFrame.html:4356,Availability,error,error,4356,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() c",MatchSource.WIKI,root/html602/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionInputFrame.html
https://root.cern/root/html602/TSessionInputFrame.html:17538,Availability,mask,mask,17538,,MatchSource.WIKI,root/html602/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionInputFrame.html
https://root.cern/root/html602/TSessionInputFrame.html:10304,Integrability,Message,Message,10304,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSessionInputFrame&operator=(const TSessionInputFrame&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* option = """")",MatchSource.WIKI,root/html602/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionInputFrame.html
https://root.cern/root/html602/TSessionInputFrame.html:124,Modifiability,inherit,inheritance,124,". TSessionInputFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionInputFrame. class TSessionInputFrame: public TGCompositeFrame. TSessionViewer. Widget used to manage PROOF or local sessions, PROOF connections,; queries construction and results handling. Function Members (Methods); public:. virtual~TSessionInputFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAddObject(TObject* obj); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const c",MatchSource.WIKI,root/html602/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionInputFrame.html
https://root.cern/root/html602/TSessionInputFrame.html:8887,Modifiability,Inherit,InheritsFrom,8887,"irtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html602/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionInputFrame.html
https://root.cern/root/html602/TSessionInputFrame.html:8953,Modifiability,Inherit,InheritsFrom,8953," Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow:",MatchSource.WIKI,root/html602/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionInputFrame.html
https://root.cern/root/html602/TSessionInputFrame.html:19741,Modifiability,Inherit,Inheritance,19741,"Frame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGLVContainer*fLVContainercontainer for the input list view; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionInputFrame. Function documentation; TSessionInputFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionInputFrame(); Destructor. void Build(TSessionViewer* gui); Build query input information frame. void AddObject(TObject* obj); Add object to input list view. TGLVContainer * GetLVContainer(); { return fLVContainer; }. void RemoveAll(); { fLVContainer->RemoveAll(); }. TSessionInputFrame(TGWindow* parent, Int_t w, Int_t h). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionInputFrame.html
https://root.cern/root/html602/TSessionInputFrame.html:8597,Security,Hash,Hash,8597,"t_t, Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html602/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionInputFrame.html
https://root.cern/root/html602/TSessionInputFrame.html:14291,Testability,Test,TestBit,14291,"""); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionInputFrame(const TSessionInputFrame&); TSessionInputFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionInputFrame.html
https://root.cern/root/html602/TSessionInputFrame.html:14330,Testability,Test,TestBits,14330,"""); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionInputFrame(const TSessionInputFrame&); TSessionInputFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionInputFrame.html
https://root.cern/root/html602/TSessionInputFrame.html:1469,Usability,Clear,Clear,1469," virtual~TSessionInputFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAddObject(TObject* obj); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const c",MatchSource.WIKI,root/html602/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionInputFrame.html
https://root.cern/root/html602/TSessionLogView.html:4342,Availability,Error,Error,4342,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::G",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:4471,Availability,error,error,4471," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:4555,Availability,error,error,4555,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UIn",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:20197,Availability,mask,mask,20197,,MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:11198,Integrability,Message,Message,11198,"rtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); voidLoadBuffer(const char* buffer); voidLoadFile(const char* file); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSessionLogView&operator=(const TSessionLogView&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); voidPopup(); virtual voidTGCompositeFrame::Print(Option_t* optio",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:121,Modifiability,inherit,inheritance,121,". TSessionLogView. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionLogView. class TSessionLogView: public TGTransientFrame. TSessionLogView. Dialog used to display session logs from the session viewer. Function Members (Methods); public:. virtual~TSessionLogView(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidAddBuffer(const char* buffer); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); voidClearLogView(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, co",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:9713,Modifiability,Inherit,InheritsFrom,9713,"TGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:9779,Modifiability,Inherit,InheritsFrom,9779,"e::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); voidLoadBuffer(const ",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:23425,Modifiability,Inherit,Inheritance,23425,"me::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:23823,Performance,Load,Load,23823,"fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:23901,Performance,Load,LoadBuffer,23901,"fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:23933,Performance,Load,Load,23933,"fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:23972,Performance,Load,LoadFile,23972,"fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:24000,Performance,Load,Load,24000,"fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:9423,Security,Hash,Hash,9423,"virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:395,Testability,log,logs,395,". TSessionLogView. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionLogView. class TSessionLogView: public TGTransientFrame. TSessionLogView. Dialog used to display session logs from the session viewer. Function Members (Methods); public:. virtual~TSessionLogView(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidAddBuffer(const char* buffer); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); voidClearLogView(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, co",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:16101,Testability,Test,TestBit,16101,"pm_array); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetTitle(); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionLogView(const TSessionLogView&); TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:16140,Testability,Test,TestBits,16140,"pm_array); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetTitle(); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionLogView(const TSessionLogView&); TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:23884,Testability,log,log,23884,"fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:1587,Usability,Clear,Clear,1587,"Buffer(const char* buffer); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); voidClearLogView(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::D",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:23862,Usability,Clear,ClearLogView,23862,"fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionLogView.html:23878,Usability,Clear,Clear,23878,"fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionLogView.html
https://root.cern/root/html602/TSessionOutputFrame.html:4147,Availability,Error,Error,4147,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html602/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionOutputFrame.html
https://root.cern/root/html602/TSessionOutputFrame.html:4276,Availability,error,error,4276," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const;",MatchSource.WIKI,root/html602/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionOutputFrame.html
https://root.cern/root/html602/TSessionOutputFrame.html:4360,Availability,error,error,4360,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() c",MatchSource.WIKI,root/html602/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionOutputFrame.html
https://root.cern/root/html602/TSessionOutputFrame.html:17688,Availability,mask,mask,17688,,MatchSource.WIKI,root/html602/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionOutputFrame.html
https://root.cern/root/html602/TSessionOutputFrame.html:10308,Integrability,Message,Message,10308,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidOnElementClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); voidOnElementDblClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSessionOutputFrame&operator=(const TSessionOutputFra",MatchSource.WIKI,root/html602/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionOutputFrame.html
https://root.cern/root/html602/TSessionOutputFrame.html:125,Modifiability,inherit,inheritance,125,". TSessionOutputFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionOutputFrame. class TSessionOutputFrame: public TGCompositeFrame. TSessionViewer. Widget used to manage PROOF or local sessions, PROOF connections,; queries construction and results handling. Function Members (Methods); public:. virtual~TSessionOutputFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAddObject(TObject* obj); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, con",MatchSource.WIKI,root/html602/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionOutputFrame.html
https://root.cern/root/html602/TSessionOutputFrame.html:8891,Modifiability,Inherit,InheritsFrom,8891,"irtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html602/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionOutputFrame.html
https://root.cern/root/html602/TSessionOutputFrame.html:8957,Modifiability,Inherit,InheritsFrom,8957," Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow:",MatchSource.WIKI,root/html602/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionOutputFrame.html
https://root.cern/root/html602/TSessionOutputFrame.html:19923,Modifiability,Inherit,Inheritance,19923,"ll signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGLVEntry*fEntryTmpused to transfer to feedback; TGLVContainer*fLVContaineroutput list view; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionOutputFrame. Function documentation; TSessionOutputFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionOutputFrame(); Destructor. void Build(TSessionViewer* gui); Build query output information frame. void OnElementClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks on list view items. void OnElementDblClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); Handle double-clicks on list view items. void AddObject(TObject* obj); Add object to output list view. TSessionOutputFrame(TGWindow* parent, Int_t w, Int_t h). TGLVContainer * GetLVContainer(); { return fLVContainer; }. void RemoveAll(); { fLVContainer->RemoveAll(); }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automat",MatchSource.WIKI,root/html602/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionOutputFrame.html
https://root.cern/root/html602/TSessionOutputFrame.html:8601,Security,Hash,Hash,8601,"t_t, Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html602/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionOutputFrame.html
https://root.cern/root/html602/TSessionOutputFrame.html:14438,Testability,Test,TestBit,14438," virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionOutputFrame(const TSessionOutputFrame&); TSessionOutputFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionOutputFrame.html
https://root.cern/root/html602/TSessionOutputFrame.html:14477,Testability,Test,TestBits,14477," virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionOutputFrame(const TSessionOutputFrame&); TSessionOutputFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionOutputFrame.html
https://root.cern/root/html602/TSessionOutputFrame.html:1473,Usability,Clear,Clear,1473," virtual~TSessionOutputFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAddObject(TObject* obj); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, con",MatchSource.WIKI,root/html602/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionOutputFrame.html
https://root.cern/root/html602/TSessionOutputFrame.html:19805,Usability,feedback,feedback,19805,"me::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGLVEntry*fEntryTmpused to transfer to feedback; TGLVContainer*fLVContaineroutput list view; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionOutputFrame. Function documentation; TSessionOutputFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionOutputFrame(); Destructor. void Build(TSessionViewer* gui); Build query output information frame. void OnElementClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks on list view items. void OnElementDblClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); Handle double-clicks on list view items. void AddObject(TObject* obj); Add object to output list view. TSessionOutputFrame(TGWindow* parent, Int_t w, Int_t h). TGLVContainer * GetLVContainer(); { return fLVContainer; }. void RemoveAll(); { fLVContainer->RemoveAll(); }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last ",MatchSource.WIKI,root/html602/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionOutputFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:4114,Availability,Error,Error,4114,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFeedback(TList* objs); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTG",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:4243,Availability,error,error,4243," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFeedback(TList* objs); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFram",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:4327,Availability,error,error,4327,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFeedback(TList* objs); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual In",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:18405,Availability,mask,mask,18405,,MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:22463,Deployability,update,update,22463," TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* de",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:22496,Deployability,Update,UpdateHistos,22496,"vas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query ",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:22523,Deployability,Update,Update,22523,"vas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query ",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:22602,Deployability,Update,Update,22602,"atusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TG",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:22952,Deployability,Update,Update,22952,"ueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyrig",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:23437,Deployability,Update,UpdateButtons,23437,"Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:23477,Deployability,Update,Update,23477,"Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:23533,Deployability,Update,UpdateInfos,23533,"Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:23548,Deployability,Update,Update,23548,"Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:10401,Integrability,Message,Message,10401,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; voidModified(Bool_t mod = kTRUE); virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidOnBtnAbort(); voidOnBtnFinalize(); voidOnBtnRetrieve(); voidOnBtnShowLog(); voidOnBtnStop(); voidOnBtnSubmit(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSessionQueryFrame&operator=(const TSessionQ",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:124,Modifiability,inherit,inheritance,124,". TSessionQueryFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionQueryFrame. class TSessionQueryFrame: public TGCompositeFrame. TSessionViewer. Widget used to manage PROOF or local sessions, PROOF connections,; queries construction and results handling. Function Members (Methods); public:. virtual~TSessionQueryFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* re",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:8984,Modifiability,Inherit,InheritsFrom,8984,"dleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); voidIndicateStop(Bool_t aborted); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:9050,Modifiability,Inherit,InheritsFrom,9050,"t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); voidIndicateStop(Bool_t aborted); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow:",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:21989,Modifiability,Inherit,Inheritance,21989,"ame*fFBthree tabs element; TGCompositeFrame*fFCthree tabs element; TEditQueryFrame*fFDfourth tab element (edit query frame); Int_tfFilesnumber of files processed; Long64_tfFirstfirst event/entry to process; TGTextView*fInfoTextViewsummary on current query; TGLabel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void In",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:8878,Safety,abort,aborted,8878,"er(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); voidIndicateStop(Bool_t aborted); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:23016,Safety,abort,aborted,23016,"t. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:23374,Safety,Abort,Abort,23374,"Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:8660,Security,Hash,Hash,8660,"t_t, Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); voidIndicateStop(Bool_t aborted); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayout",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:15064,Testability,Test,TestBit,15064,"virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionQueryFrame(const TSessionQueryFrame&); TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); voidUpdateButtons(TQueryDescription* desc); voidUpdateHistos(TList* objs); voidUpdateInfos(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:15103,Testability,Test,TestBits,15103,"virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionQueryFrame(const TSessionQueryFrame&); TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); voidUpdateButtons(TQueryDescription* desc); voidUpdateHistos(TList* objs); voidUpdateInfos(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:20692,Testability,log,log,20692,"on; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fBtnAbortabort process button; TGTextButton*fBtnFinalizefinalize query button; TGTextButton*fBtnRetrieveretrieve query button; TGTextButton*fBtnSavesave query button; TGTextButton*fBtnShowLogshow log button; TGTextButton*fBtnStopstop process button; TGTextButton*fBtnSubmitsubmit query button; TQueryDescription*fDescquery description; TRootEmbeddedCanvas*fECanvasnode statistics embeded canvas; Long64_tfEntriesnumber of events/entries to process; TGCompositeFrame*fFAthree tabs element; TGCompositeFrame*fFBthree tabs element; TGCompositeFrame*fFCthree tabs element; TEditQueryFrame*fFDfourth tab element (edit query frame); Int_tfFilesnumber of files processed; Long64_tfFirstfirst event/entry to process; TGTextView*fInfoTextViewsummary on current query; TGLabel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); De",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:23312,Testability,log,log,23312,"Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:1440,Usability,Clear,Clear,1440," virtual~TSessionQueryFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* re",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:21417,Usability,progress bar,progress bar,21417,"on; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fBtnAbortabort process button; TGTextButton*fBtnFinalizefinalize query button; TGTextButton*fBtnRetrieveretrieve query button; TGTextButton*fBtnSavesave query button; TGTextButton*fBtnShowLogshow log button; TGTextButton*fBtnStopstop process button; TGTextButton*fBtnSubmitsubmit query button; TQueryDescription*fDescquery description; TRootEmbeddedCanvas*fECanvasnode statistics embeded canvas; Long64_tfEntriesnumber of events/entries to process; TGCompositeFrame*fFAthree tabs element; TGCompositeFrame*fFBthree tabs element; TGCompositeFrame*fFCthree tabs element; TEditQueryFrame*fFDfourth tab element (edit query frame); Int_tfFilesnumber of files processed; Long64_tfFirstfirst event/entry to process; TGTextView*fInfoTextViewsummary on current query; TGLabel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); De",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:21458,Usability,progress bar,progress bar,21458,"on; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fBtnAbortabort process button; TGTextButton*fBtnFinalizefinalize query button; TGTextButton*fBtnRetrieveretrieve query button; TGTextButton*fBtnSavesave query button; TGTextButton*fBtnShowLogshow log button; TGTextButton*fBtnStopstop process button; TGTextButton*fBtnSubmitsubmit query button; TQueryDescription*fDescquery description; TRootEmbeddedCanvas*fECanvasnode statistics embeded canvas; Long64_tfEntriesnumber of events/entries to process; TGCompositeFrame*fFAthree tabs element; TGCompositeFrame*fFBthree tabs element; TGCompositeFrame*fFCthree tabs element; TEditQueryFrame*fFDfourth tab element (edit query frame); Int_tfFilesnumber of files processed; Long64_tfFirstfirst event/entry to process; TGTextView*fInfoTextViewsummary on current query; TGLabel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); De",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:21768,Usability,progress bar,progress bar,21768,"on; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fBtnAbortabort process button; TGTextButton*fBtnFinalizefinalize query button; TGTextButton*fBtnRetrieveretrieve query button; TGTextButton*fBtnSavesave query button; TGTextButton*fBtnShowLogshow log button; TGTextButton*fBtnStopstop process button; TGTextButton*fBtnSubmitsubmit query button; TQueryDescription*fDescquery description; TRootEmbeddedCanvas*fECanvasnode statistics embeded canvas; Long64_tfEntriesnumber of events/entries to process; TGCompositeFrame*fFAthree tabs element; TGCompositeFrame*fFBthree tabs element; TGCompositeFrame*fFCthree tabs element; TEditQueryFrame*fFDfourth tab element (edit query frame); Int_tfFilesnumber of files processed; Long64_tfFirstfirst event/entry to process; TGTextView*fInfoTextViewsummary on current query; TGLabel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); De",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:22383,Usability,Feedback,Feedback,22383,"r progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:22406,Usability,Feedback,Feedback,22406,"r progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:22437,Usability,Feedback,Feedback,22437,"r progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:22470,Usability,feedback,feedback,22470," TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* de",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:22530,Usability,feedback,feedback,22530,"vas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query ",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:22609,Usability,progress bar,progress bar,22609,"atusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TG",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionQueryFrame.html:22959,Usability,progress bar,progress bar,22959,"ueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyrig",MatchSource.WIKI,root/html602/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:4118,Availability,Error,Error,4118,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetAddress() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*GetConfigText() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetD",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:4247,Availability,error,error,4247," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetAddress() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*GetConfigText() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize(",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:4331,Availability,error,error,4331,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetAddress() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*GetConfigText() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*T",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:18106,Availability,mask,mask,18106,,MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:21008,Deployability,configurat,configuration,21008,":fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fBtnAdd""Add"" button; TGTextButton*fBtnConnect""Connect"" button; TGCompositeFrame*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { retu",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:21076,Deployability,update,update,21076,"rame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fBtnAdd""Add"" button; TGTextButton*fBtnConnect""Connect"" button; TGCompositeFrame*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return f",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:21209,Deployability,configurat,configuration,21209,"Add""Add"" button; TGTextButton*fBtnConnect""Connect"" button; TGCompositeFrame*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { r",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:21281,Deployability,configurat,configuration,21281,"e*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:21421,Deployability,configurat,configuration,21421,"kButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(co",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:21493,Deployability,configurat,configuration,21493,"s text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(const char* str); { fTxtName->SetText(str); }. void SetAddress(const char* str)",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:21537,Deployability,Update,Update,21537,"tion name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(const char* str); { fTxtName->SetText(str); }. void SetAddress(const char* str); { fTxtAddress->SetText(str); }. void SetPortNumber(Int_t port); { fNumPort->SetIntNumber(po",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:21572,Deployability,Update,Update,21572,"tion name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(const char* str); { fTxtName->SetText(str); }. void SetAddress(const char* str); { fTxtAddress->SetText(str); }. void SetPortNumber(Int_t port); { fNumPort->SetIntNumber(po",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:10400,Integrability,Message,Message,10400," const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsSync() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidOnBtnAddClicked(); voidOnBtnConnectClicked(); voidOnBtnDeleteClicked(); voidOnBtnNewServerClicked(); voidOnConfigFileClicked(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSessionServerFrame&operator=(const TSessionServerFrame&); vir",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:21700,Integrability,message,messages,21700,"e main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(const char* str); { fTxtName->SetText(str); }. void SetAddress(const char* str); { fTxtAddress->SetText(str); }. void SetPortNumber(Int_t port); { fNumPort->SetIntNumber(port); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. void SetConfigText(const char",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:125,Modifiability,inherit,inheritance,125,". TSessionServerFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionServerFrame. class TSessionServerFrame: public TGCompositeFrame. TSessionViewer. Widget used to manage PROOF or local sessions, PROOF connections,; queries construction and results handling. Function Members (Methods); public:. virtual~TSessionServerFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:8961,Modifiability,Inherit,InheritsFrom,8961,"Frame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tHandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsSync() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_t",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:9027,Modifiability,Inherit,InheritsFrom,9027,"); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tHandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsSync() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout();",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:20710,Modifiability,Inherit,Inheritance,20710,"eFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fBtnAdd""Add"" button; TGTextButton*fBtnConnect""Connect"" button; TGCompositeFrame*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for sessio",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:21008,Modifiability,config,configuration,21008,":fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fBtnAdd""Add"" button; TGTextButton*fBtnConnect""Connect"" button; TGCompositeFrame*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { retu",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:21209,Modifiability,config,configuration,21209,"Add""Add"" button; TGTextButton*fBtnConnect""Connect"" button; TGCompositeFrame*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { r",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:21281,Modifiability,config,configuration,21281,"e*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:21421,Modifiability,config,configuration,21421,"kButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(co",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:21493,Modifiability,config,configuration,21493,"s text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(const char* str); { fTxtName->SetText(str); }. void SetAddress(const char* str)",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:8671,Security,Hash,Hash,8671,"Atom_t, Int_t, Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tHandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:21144,Security,expose,expose,21144,"onymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fBtnAdd""Add"" button; TGTextButton*fBtnConnect""Connect"" button; TGCompositeFrame*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { retur",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:13812,Testability,log,log,13812,"undColor(Pixel_t back); virtual voidTGWindow::SetBackgroundPixmap(Pixmap_t pixmap); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTGCompositeFrame::SetCleanup(Int_t mode = kLocalCleanup); voidSetConfigText(const char* str); voidSetConnectEnabled(Bool_t on = kTRUE); voidTGFrame::SetDNDSource(Bool_t onoff); voidTGFrame::SetDNDTarget(Bool_t onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLogLevel(Int_t log); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetName(const char* str); static voidTObject::SetObjectStat(Bool_t stat); voidSetPortNumber(Int_t port); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetSync(Bool_t sync); voidSettingsChanged(); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUserName(const char* str); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObjec",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:14817,Testability,Test,TestBit,14817,"positeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLogLevel(Int_t log); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetName(const char* str); static voidTObject::SetObjectStat(Bool_t stat); voidSetPortNumber(Int_t port); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetSync(Bool_t sync); voidSettingsChanged(); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUserName(const char* str); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionServerFrame(const TSessionServerFrame&); TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); voidUpdate(TSessionDescription* desc); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:14856,Testability,Test,TestBits,14856,"positeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLogLevel(Int_t log); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetName(const char* str); static voidTObject::SetObjectStat(Bool_t stat); voidSetPortNumber(Int_t port); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetSync(Bool_t sync); voidSettingsChanged(); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUserName(const char* str); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionServerFrame(const TSessionServerFrame&); TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); voidUpdate(TSessionDescription* desc); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:22611,Testability,log,log,22611,"id OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(const char* str); { fTxtName->SetText(str); }. void SetAddress(const char* str); { fTxtAddress->SetText(str); }. void SetPortNumber(Int_t port); { fNumPort->SetIntNumber(port); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. void SetConfigText(const char* str); { fTxtConfig->SetText(str); }. void SetUserName(const char* str); { fTxtUsrName->SetText(str); }. void SetSync(Bool_t sync). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:22643,Testability,log,log,22643,"id OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(const char* str); { fTxtName->SetText(str); }. void SetAddress(const char* str); { fTxtAddress->SetText(str); }. void SetPortNumber(Int_t port); { fNumPort->SetIntNumber(port); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. void SetConfigText(const char* str); { fTxtConfig->SetText(str); }. void SetUserName(const char* str); { fTxtUsrName->SetText(str); }. void SetSync(Bool_t sync). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionServerFrame.html:1444,Usability,Clear,Clear,1444," virtual~TSessionServerFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void",MatchSource.WIKI,root/html602/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionServerFrame.html
https://root.cern/root/html602/TSessionViewer.html:4371,Availability,Error,Error,4371,"; voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEnableTimer(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TSessionDescription*GetActDesc() const; virtual Pixel_tTGFrame::GetBackground() const; const TGPicture*GetBasePict() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGPopupMenu*GetCascadeMenu() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resour",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:4500,Availability,error,error,4500,"ect::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEnableTimer(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TSessionDescription*GetActDesc() const; virtual Pixel_tTGFrame::GetBackground() const; const TGPicture*GetBasePict() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGPopupMenu*GetCascadeMenu() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; TGHProgressBar*GetConnectProg() const; TContextMenu*GetContextMenu() const; ",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:4584,Availability,error,error,4584,", Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEnableTimer(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TSessionDescription*GetActDesc() const; virtual Pixel_tTGFrame::GetBackground() const; const TGPicture*GetBasePict() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGPopupMenu*GetCascadeMenu() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; TGHProgressBar*GetConnectProg() const; TContextMenu*GetContextMenu() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:21294,Availability,mask,mask,21294,,MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:26347,Deployability,configurat,configuration,26347,conbase list tree icon picture; Bool_tfBusyKTRUE if busy i.e : connecting; TGPopupMenu*fCascadeMenuoptions menu entry; Bool_tfChangePicKTRUE if animation active; TStringfConfigFileconfiguration file name; TGHProgressBar*fConnectProgconnection progress bar; TContextMenu*fContextMenuinput/output objects context menu; time_tfElapsedtime of connection; TGPopupMenu*fFileMenufile menu entry; TGPopupMenu*fHelpMenuhelp menu entry; TGHorizontalFrame*fHf; TSessionInputFrame*fInputFrameinput frame; const TGPicture*fLocallocal session icon picture; TSessionLogView*fLogWindowexternal log window; TGMenuBar*fMenuBarapplication main menu bar; TGPopupMenu*fOptionsMenuoptions menu entry; TSessionOutputFrame*fOutputFrameoutput frame; TGPopupMenu*fPopupQryquery related popup menu; TGPopupMenu*fPopupSrvserver related popup menu; const TGPicture*fProofConconnected server icon picture; const TGPicture*fProofDiscondisconnected server icon picture; const TGPicture*fQueryConconnected(?) query icon picture; const TGPicture*fQueryDiscondisconnected(?) query icon picture; TSessionQueryFrame*fQueryFrameright side query frame; TGPopupMenu*fQueryMenuquery menu entry; TGIcon*fRightIconassociated picture; TGPicture*fRightIconPicturelower bottom left icon used to show connection status; TSessionServerFrame*fServerFrameright side server frame; TSessionFrame*fSessionFrameright side session frame; TGListTree*fSessionHierarchymain sessions/queries hierarchy list tree; TGListTreeItem*fSessionItembase (main) session list tree item; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←;,MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:26818,Deployability,configurat,configuration,26818,"in sessions/queries hierarchy list tree; TGListTreeItem*fSessionItembase (main) session list tree item; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTim",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:26965,Deployability,Update,UpdateListOfProofs,26965,"ionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:26987,Deployability,Update,Update,26987,"ionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:27032,Deployability,Update,UpdateListOfSessions,27032,"tatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:27056,Deployability,Update,Update,27056,"tatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:27159,Deployability,configurat,configuration,27159,"oolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof sessio",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:27570,Deployability,configurat,configuration,27570," Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void Show",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:28519,Deployability,Update,UpdateListOfPackages,28519,"); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; ",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:28543,Deployability,Update,Update,28543,"); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; ",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:29176,Deployability,configurat,configuration,29176,"Session(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * GetSessionItem() const; { return fSessionItem; }. const TGPicture * GetLocalPict() const; { return fLocal; }. const TGPicture * GetProofConPict() const; { return fProofCon; }. ",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:12042,Integrability,Message,Message,12042,"IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); voidLogMessage(const char* msg, Bool_t all); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; voidMyHandleMenu(Int_t); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidOnCascadeMenu(); voidOnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); voidOnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSessionVi",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:29001,Integrability,message,message,29001," in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * G",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:29261,Integrability,message,messages,29261,"ser if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * GetSessionItem() const; { return fSessionItem; }. const TGPicture * GetLocalPict() const; { return fLocal; }. const TGPicture * GetProofConPict() const; { return fProofCon; }. const TGPicture * GetProofDisconPict() const; { return fProofDiscon; }. const TGPicture *",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:29328,Integrability,message,messages,29328,"rrently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * GetSessionItem() const; { return fSessionItem; }. const TGPicture * GetLocalPict() const; { return fLocal; }. const TGPicture * GetProofConPict() const; { return fProofCon; }. const TGPicture * GetProofDisconPict() const; { return fProofDiscon; }. const TGPicture * GetQueryConPict() const; { return fQueryCon; }. const TGPicture * GetQue",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:120,Modifiability,inherit,inheritance,120,". TSessionViewer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionViewer. class TSessionViewer: public TGMainFrame. TSessionViewer. Widget used to manage PROOF or local sessions, PROOF connections,; queries construction and results handling. Function Members (Methods); public:. virtual~TSessionViewer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); voidChangeRightLogo(const char* name); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); voidCleanupSession(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, ",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:10532,Modifiability,Inherit,InheritsFrom,10532,"ual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tHandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; Bool_tIsAutoSave() const; Bool_tIsBusy() const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameE",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:10598,Modifiability,Inherit,InheritsFrom,10598,"ol_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tHandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; Bool_tIsAutoSave() const; Bool_tIsBusy() const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidT",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:24367,Modifiability,config,config,24367, static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TSessionDescription*fActDescactual session description; TGFrame*fActFrameactual (displayed) frame; Bool_tfAutoSavekTRUE if config is to be saved on exit; const TGPicture*fBaseIconbase list tree icon picture; Bool_tfBusyKTRUE if busy i.e : connecting; TGPopupMenu*fCascadeMenuoptions menu entry; Bool_tfChangePicKTRUE if animation active; TStringfConfigFileconfiguration file name; TGHProgressBar*fConnectProgconnection progress bar; TContextMenu*fContextMenuinput/output objects context menu; time_tfElapsedtime of connection; TGPopupMenu*fFileMenufile menu entry; TGPopupMenu*fHelpMenuhelp menu entry; TGHorizontalFrame*fHf; TSessionInputFrame*fInputFrameinput frame; const TGPicture*fLocallocal session icon picture; TSessionLogView*fLogWindowexternal log window; TGMenuBar*fMenuBarapplication main menu bar; TGPopupMenu*fOptionsMenuoptions menu entry; TSessionOutputFrame*fOutputFrameoutput frame; TGPopupMenu*fPopupQryquery related popup menu; TGPopupMenu*fPopupSrvserver related popup menu; const TGPicture*fProofConconnected server icon picture; const TGPicture*fProofDiscondisconnected server icon picture; con,MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:26347,Modifiability,config,configuration,26347,conbase list tree icon picture; Bool_tfBusyKTRUE if busy i.e : connecting; TGPopupMenu*fCascadeMenuoptions menu entry; Bool_tfChangePicKTRUE if animation active; TStringfConfigFileconfiguration file name; TGHProgressBar*fConnectProgconnection progress bar; TContextMenu*fContextMenuinput/output objects context menu; time_tfElapsedtime of connection; TGPopupMenu*fFileMenufile menu entry; TGPopupMenu*fHelpMenuhelp menu entry; TGHorizontalFrame*fHf; TSessionInputFrame*fInputFrameinput frame; const TGPicture*fLocallocal session icon picture; TSessionLogView*fLogWindowexternal log window; TGMenuBar*fMenuBarapplication main menu bar; TGPopupMenu*fOptionsMenuoptions menu entry; TSessionOutputFrame*fOutputFrameoutput frame; TGPopupMenu*fPopupQryquery related popup menu; TGPopupMenu*fPopupSrvserver related popup menu; const TGPicture*fProofConconnected server icon picture; const TGPicture*fProofDiscondisconnected server icon picture; const TGPicture*fQueryConconnected(?) query icon picture; const TGPicture*fQueryDiscondisconnected(?) query icon picture; TSessionQueryFrame*fQueryFrameright side query frame; TGPopupMenu*fQueryMenuquery menu entry; TGIcon*fRightIconassociated picture; TGPicture*fRightIconPicturelower bottom left icon used to show connection status; TSessionServerFrame*fServerFrameright side server frame; TSessionFrame*fSessionFrameright side session frame; TGListTree*fSessionHierarchymain sessions/queries hierarchy list tree; TGListTreeItem*fSessionItembase (main) session list tree item; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←;,MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:26376,Modifiability,Inherit,Inheritance,26376,"nnected(?) query icon picture; const TGPicture*fQueryDiscondisconnected(?) query icon picture; TSessionQueryFrame*fQueryFrameright side query frame; TGPopupMenu*fQueryMenuquery menu entry; TGIcon*fRightIconassociated picture; TGPicture*fRightIconPicturelower bottom left icon used to show connection status; TSessionServerFrame*fServerFrameright side server frame; TSessionFrame*fSessionFrameright side session frame; TGListTree*fSessionHierarchymain sessions/queries hierarchy list tree; TGListTreeItem*fSessionItembase (main) session list tree item; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clic",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:26818,Modifiability,config,configuration,26818,"in sessions/queries hierarchy list tree; TGListTreeItem*fSessionItembase (main) session list tree item; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTim",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:27159,Modifiability,config,configuration,27159,"oolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof sessio",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:27176,Modifiability,config,config,27176,"oolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof sessio",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:27570,Modifiability,config,configuration,27570," Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void Show",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:29176,Modifiability,config,configuration,29176,"Session(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * GetSessionItem() const; { return fSessionItem; }. const TGPicture * GetLocalPict() const; { return fLocal; }. const TGPicture * GetProofConPict() const; { return fProofCon; }. ",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:27965,Performance,Load,Load,27965,"oid UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, I",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:10242,Security,Hash,Hash,10242,", Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tHandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; Bool_tIsAutoSave() const; Bool_tIsBusy() const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeF",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:16057,Testability,log,log,16057,"lassHints(const char* className, const char* resourceName); virtual voidTGCompositeFrame::SetCleanup(Int_t mode = kLocalCleanup); voidTGFrame::SetDNDSource(Bool_t onoff); voidTGFrame::SetDNDTarget(Bool_t onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); voidTGMainFrame::SetIconName(const char* name); const TGPicture*TGMainFrame::SetIconPixmap(const char* iconName); voidTGMainFrame::SetIconPixmap(char** xpm_array); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLogWindow(TSessionLogView* log); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); voidShowEnabledPackages(); virtual voidTGCompositeFrame::S",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:17529,Testability,Test,TestBit,17529," virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); voidShowEnabledPackages(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); voidShowInfo(const char* txt); voidShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp) const; voidShowPackages(); voidShowStatus(); voidStartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); voidStartViewer(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionViewer(const TSessionViewer&); TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGFrame::UnmapWindow(); voidUpdateListOfPackages(); voidUpdateListOfProofs(); voidUpdateListOfSessions(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidWriteConfiguration(const char* filename = 0).",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:17568,Testability,Test,TestBits,17568," virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); voidShowEnabledPackages(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); voidShowInfo(const char* txt); voidShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp) const; voidShowPackages(); voidShowStatus(); voidStartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); voidStartViewer(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionViewer(const TSessionViewer&); TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGFrame::UnmapWindow(); voidUpdateListOfPackages(); voidUpdateListOfProofs(); voidUpdateListOfSessions(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidWriteConfiguration(const char* filename = 0).",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:24998,Testability,log,log,24998,conbase list tree icon picture; Bool_tfBusyKTRUE if busy i.e : connecting; TGPopupMenu*fCascadeMenuoptions menu entry; Bool_tfChangePicKTRUE if animation active; TStringfConfigFileconfiguration file name; TGHProgressBar*fConnectProgconnection progress bar; TContextMenu*fContextMenuinput/output objects context menu; time_tfElapsedtime of connection; TGPopupMenu*fFileMenufile menu entry; TGPopupMenu*fHelpMenuhelp menu entry; TGHorizontalFrame*fHf; TSessionInputFrame*fInputFrameinput frame; const TGPicture*fLocallocal session icon picture; TSessionLogView*fLogWindowexternal log window; TGMenuBar*fMenuBarapplication main menu bar; TGPopupMenu*fOptionsMenuoptions menu entry; TSessionOutputFrame*fOutputFrameoutput frame; TGPopupMenu*fPopupQryquery related popup menu; TGPopupMenu*fPopupSrvserver related popup menu; const TGPicture*fProofConconnected server icon picture; const TGPicture*fProofDiscondisconnected server icon picture; const TGPicture*fQueryConconnected(?) query icon picture; const TGPicture*fQueryDiscondisconnected(?) query icon picture; TSessionQueryFrame*fQueryFrameright side query frame; TGPopupMenu*fQueryMenuquery menu entry; TGIcon*fRightIconassociated picture; TGPicture*fRightIconPicturelower bottom left icon used to show connection status; TSessionServerFrame*fServerFrameright side server frame; TSessionFrame*fSessionFrameright side session frame; TGListTree*fSessionHierarchymain sessions/queries hierarchy list tree; TGListTreeItem*fSessionItembase (main) session list tree item; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←;,MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:27748,Testability,log,logo,27748,"in Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the co",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:27924,Testability,Log,LogMessage,27924,"oid UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, I",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:27979,Testability,log,log,27979,"oid UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, I",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:27994,Testability,log,log,27994,"oid UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, I",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:28755,Testability,log,log,28755," right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFr",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:31109,Testability,log,log,31109," TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * GetSessionItem() const; { return fSessionItem; }. const TGPicture * GetLocalPict() const; { return fLocal; }. const TGPicture * GetProofConPict() const; { return fProofCon; }. const TGPicture * GetProofDisconPict() const; { return fProofDiscon; }. const TGPicture * GetQueryConPict() const; { return fQueryCon; }. const TGPicture * GetQueryDisconPict() const; { return fQueryDiscon; }. const TGPicture * GetBasePict() const; { return fBaseIcon; }. TGPopupMenu * GetPopupSrv() const; { return fPopupSrv; }. TGPopupMenu * GetPopupQry() const; { return fPopupQry; }. TContextMenu * GetContextMenu() const; { return fContextMenu; }. TGStatusBar * GetStatusBar() const; { return fStatusBar; }. TGHProgressBar * GetConnectProg() const; { return fConnectProg; }. TGPopupMenu * GetCascadeMenu() const; { return fCascadeMenu; }. TGPopupMenu * GetOptionsMenu() const; { return fOptionsMenu; }. Bool_t IsBusy() const; { return fBusy; }. Bool_t IsAutoSave() const; { return fAutoSave; }. void SetBusy(Bool_t busy = kTRUE); { fBusy = busy; }. void SetChangePic(Bool_t change); { fChangePic = change;}. void SetLogWindow(TSessionLogView* log); { fLogWindow = log; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:31130,Testability,log,log,31130," TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * GetSessionItem() const; { return fSessionItem; }. const TGPicture * GetLocalPict() const; { return fLocal; }. const TGPicture * GetProofConPict() const; { return fProofCon; }. const TGPicture * GetProofDisconPict() const; { return fProofDiscon; }. const TGPicture * GetQueryConPict() const; { return fQueryCon; }. const TGPicture * GetQueryDisconPict() const; { return fQueryDiscon; }. const TGPicture * GetBasePict() const; { return fBaseIcon; }. TGPopupMenu * GetPopupSrv() const; { return fPopupSrv; }. TGPopupMenu * GetPopupQry() const; { return fPopupQry; }. TContextMenu * GetContextMenu() const; { return fContextMenu; }. TGStatusBar * GetStatusBar() const; { return fStatusBar; }. TGHProgressBar * GetConnectProg() const; { return fConnectProg; }. TGPopupMenu * GetCascadeMenu() const; { return fCascadeMenu; }. TGPopupMenu * GetOptionsMenu() const; { return fOptionsMenu; }. Bool_t IsBusy() const; { return fBusy; }. Bool_t IsAutoSave() const; { return fAutoSave; }. void SetBusy(Bool_t busy = kTRUE); { fBusy = busy; }. void SetChangePic(Bool_t change); { fChangePic = change;}. void SetLogWindow(TSessionLogView* log); { fLogWindow = log; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:1561,Usability,Clear,Clear,1561,"ar* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); voidChangeRightLogo(const char* name); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); voidCleanupSession(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); voidDeleteQuery(); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); voidDisableTimer()",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:24663,Usability,progress bar,progress bar,24663,conbase list tree icon picture; Bool_tfBusyKTRUE if busy i.e : connecting; TGPopupMenu*fCascadeMenuoptions menu entry; Bool_tfChangePicKTRUE if animation active; TStringfConfigFileconfiguration file name; TGHProgressBar*fConnectProgconnection progress bar; TContextMenu*fContextMenuinput/output objects context menu; time_tfElapsedtime of connection; TGPopupMenu*fFileMenufile menu entry; TGPopupMenu*fHelpMenuhelp menu entry; TGHorizontalFrame*fHf; TSessionInputFrame*fInputFrameinput frame; const TGPicture*fLocallocal session icon picture; TSessionLogView*fLogWindowexternal log window; TGMenuBar*fMenuBarapplication main menu bar; TGPopupMenu*fOptionsMenuoptions menu entry; TSessionOutputFrame*fOutputFrameoutput frame; TGPopupMenu*fPopupQryquery related popup menu; TGPopupMenu*fPopupSrvserver related popup menu; const TGPicture*fProofConconnected server icon picture; const TGPicture*fProofDiscondisconnected server icon picture; const TGPicture*fQueryConconnected(?) query icon picture; const TGPicture*fQueryDiscondisconnected(?) query icon picture; TSessionQueryFrame*fQueryFrameright side query frame; TGPopupMenu*fQueryMenuquery menu entry; TGIcon*fRightIconassociated picture; TGPicture*fRightIconPicturelower bottom left icon used to show connection status; TSessionServerFrame*fServerFrameright side server frame; TSessionFrame*fSessionFrameright side session frame; TGListTree*fSessionHierarchymain sessions/queries hierarchy list tree; TGListTreeItem*fSessionItembase (main) session list tree item; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←;,MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:26943,Usability,feedback,feedback,26943,"tem; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessa",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TSessionViewer.html:29156,Usability,feedback,feedback,29156,"Session(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * GetSessionItem() const; { return fSessionItem; }. const TGPicture * GetLocalPict() const; { return fLocal; }. const TGPicture * GetProofConPict() const; { return fProofCon; }. ",MatchSource.WIKI,root/html602/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSessionViewer.html
https://root.cern/root/html602/TShape.html:1640,Availability,Error,Error,1640," virtual~TShape(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) c",MatchSource.WIKI,root/html602/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TShape.html
https://root.cern/root/html602/TShape.html:1769,Availability,error,error,1769,"hod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py)",MatchSource.WIKI,root/html602/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TShape.html
https://root.cern/root/html602/TShape.html:1853,Availability,error,error,1853,"; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption()",MatchSource.WIKI,root/html602/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TShape.html
https://root.cern/root/html602/TShape.html:9391,Energy Efficiency,allocate,allocate,9391,"le_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tfNumberShape number; TStringTNamed::fTitleobject title; Int_tfVisibilityVisibility flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. TAttLine. TAttFill. TAtt3D. ←; TShape. ←. TBRIK; ←. TGTRA. TPARA. TTRAP. TTRD1. TTRD2. TPCON; ←. TPGON. TPolyLineShape. TSPHE.  [more...]. Function documentation; TShape(); Shape default constructor. TShape(const char* name, const char* title, const char* material); Shape normal constructor. TShape(const TShape& ); copy constructor. TShape& operator=(const TShape& ); assignement operator. ~TShape(); Shape default destructor. Int_t ShapeDistancetoPrimitive(Int_t numPoints, Int_t px, Int_t py); Distance to primitive. void Paint(Option_t* option = """"); This method is used only when a shape is painted outside a TNode. void SetPoints(Double_t* points) const; Set points. void Streamer(TBuffer& ); Stream an object of class TShape. void TransformPoints(Double_t* points, UInt_t NbPnts) const; Tranform points (LocalToMaster). void FillBuffer3D(TBuffer3D& buffer, Int_t reqSections) const; We have to set kRawSize (unless already done) to allocate buffer space; before kRaw can be filled. Int_t GetBasicColor() const; Get basic solor. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Stub to avoid forcing implementation at this stage. void SetName(const char* name); { }. TMaterial * GetMaterial() const; {return fMaterial;}. Int_t GetNumber() const; {return fNumber;}. Int_t GetVisibility() const; {return fVisibility;}. void SetVisibility(Int_t vis); {fVisibility = vis;}. » Author: Nenad Buncic 17/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TShape.html
https://root.cern/root/html602/TShape.html:112,Modifiability,inherit,inheritance,112,". TShape. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » G3D; » TShape. class TShape: public TNamed, public TAttLine, public TAttFill, public TAtt3D. This is the base class for all geometry shapes.; The list of shapes currently supported correspond to the shapes; in Geant version 3:; TBRIK,TCONE,TCONS,TGTRA,TPARA,TPCON,TPGON; ,TTRAP,TTRD1,TTRD2,THYPE, TTUBE and TTUBS. The figure below shows instances of all these shapes. This figure; is generated by the ROOT 3-D viewer. /*. */. /*. */. Function Members (Methods); public:. virtual~TShape(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) c",MatchSource.WIKI,root/html602/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TShape.html
https://root.cern/root/html602/TShape.html:3165,Modifiability,Inherit,InheritsFrom,3165,"const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tGetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); ",MatchSource.WIKI,root/html602/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TShape.html
https://root.cern/root/html602/TShape.html:3231,Modifiability,Inherit,InheritsFrom,3231,"t; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tGetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator ne",MatchSource.WIKI,root/html602/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TShape.html
https://root.cern/root/html602/TShape.html:8411,Modifiability,Inherit,Inheritance,8411,"tatic TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tfNumberShape number; TStringTNamed::fTitleobject title; Int_tfVisibilityVisibility flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. TAttLine. TAttFill. TAtt3D. ←; TShape. ←. TBRIK; ←. TGTRA. TPARA. TTRAP. TTRD1. TTRD2. TPCON; ←. TPGON. TPolyLineShape. TSPHE.  [more...]. Function documentation; TShape(); Shape default constructor. TShape(const char* name, const char* title, const char* material); Shape normal constructor. TShape(const TShape& ); copy constructor. TShape& operator=(const TShape& ); assignement operator. ~TShape(); Shape default destructor. Int_t ShapeDistancetoPrimitive(Int_t numPoints, Int_t px, Int_t py); Distance to primitive. void Paint(Option_t* option = """"); This method is used only when a shape is painted outside a TNode. void SetPoints(Double_t* points) const; Set points. void Streamer(TBuffer& ); Stream an object of class TShape. void TransformPoints(Double_t* points, UInt_t NbPnts) const; Tranform points (LocalToMaster). void FillBuffer3D(TBuffer3D& buffer, Int_t reqSections) const; We have to set kRawSize (unless already done) to allocate buffer space; before",MatchSource.WIKI,root/html602/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TShape.html
https://root.cern/root/html602/TShape.html:9551,Safety,avoid,avoid,9551,"le_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tfNumberShape number; TStringTNamed::fTitleobject title; Int_tfVisibilityVisibility flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. TAttLine. TAttFill. TAtt3D. ←; TShape. ←. TBRIK; ←. TGTRA. TPARA. TTRAP. TTRD1. TTRD2. TPCON; ←. TPGON. TPolyLineShape. TSPHE.  [more...]. Function documentation; TShape(); Shape default constructor. TShape(const char* name, const char* title, const char* material); Shape normal constructor. TShape(const TShape& ); copy constructor. TShape& operator=(const TShape& ); assignement operator. ~TShape(); Shape default destructor. Int_t ShapeDistancetoPrimitive(Int_t numPoints, Int_t px, Int_t py); Distance to primitive. void Paint(Option_t* option = """"); This method is used only when a shape is painted outside a TNode. void SetPoints(Double_t* points) const; Set points. void Streamer(TBuffer& ); Stream an object of class TShape. void TransformPoints(Double_t* points, UInt_t NbPnts) const; Tranform points (LocalToMaster). void FillBuffer3D(TBuffer3D& buffer, Int_t reqSections) const; We have to set kRawSize (unless already done) to allocate buffer space; before kRaw can be filled. Int_t GetBasicColor() const; Get basic solor. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Stub to avoid forcing implementation at this stage. void SetName(const char* name); { }. TMaterial * GetMaterial() const; {return fMaterial;}. Int_t GetNumber() const; {return fNumber;}. Int_t GetVisibility() const; {return fVisibility;}. void SetVisibility(Int_t vis); {fVisibility = vis;}. » Author: Nenad Buncic 17/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TShape.html
https://root.cern/root/html602/TShape.html:3055,Security,Hash,Hash,3055,"tual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tGetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delet",MatchSource.WIKI,root/html602/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TShape.html
https://root.cern/root/html602/TShape.html:6427,Testability,Test,TestBit,6427,"Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidSetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTransformPoints(Double_t* points, UInt_t NbPnts) const; TShape(); TShape(const TShape&); TShape(const char* name, const char* title, const char* material); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TShape.html
https://root.cern/root/html602/TShape.html:6466,Testability,Test,TestBits,6466,"Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidSetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTransformPoints(Double_t* points, UInt_t NbPnts) const; TShape(); TShape(const TShape&); TShape(const char* name, const char* title, const char* material); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html602/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TShape.html
https://root.cern/root/html602/TShape.html:9543,Testability,Stub,Stub,9543,"le_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tfNumberShape number; TStringTNamed::fTitleobject title; Int_tfVisibilityVisibility flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. TAttLine. TAttFill. TAtt3D. ←; TShape. ←. TBRIK; ←. TGTRA. TPARA. TTRAP. TTRD1. TTRD2. TPCON; ←. TPGON. TPolyLineShape. TSPHE.  [more...]. Function documentation; TShape(); Shape default constructor. TShape(const char* name, const char* title, const char* material); Shape normal constructor. TShape(const TShape& ); copy constructor. TShape& operator=(const TShape& ); assignement operator. ~TShape(); Shape default destructor. Int_t ShapeDistancetoPrimitive(Int_t numPoints, Int_t px, Int_t py); Distance to primitive. void Paint(Option_t* option = """"); This method is used only when a shape is painted outside a TNode. void SetPoints(Double_t* points) const; Set points. void Streamer(TBuffer& ); Stream an object of class TShape. void TransformPoints(Double_t* points, UInt_t NbPnts) const; Tranform points (LocalToMaster). void FillBuffer3D(TBuffer3D& buffer, Int_t reqSections) const; We have to set kRawSize (unless already done) to allocate buffer space; before kRaw can be filled. Int_t GetBasicColor() const; Get basic solor. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Stub to avoid forcing implementation at this stage. void SetName(const char* name); { }. TMaterial * GetMaterial() const; {return fMaterial;}. Int_t GetNumber() const; {return fNumber;}. Int_t GetVisibility() const; {return fVisibility;}. void SetVisibility(Int_t vis); {fVisibility = vis;}. » Author: Nenad Buncic 17/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TShape.html
https://root.cern/root/html602/TShape.html:990,Usability,Clear,Clear,990," virtual~TShape(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) c",MatchSource.WIKI,root/html602/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TShape.html
https://root.cern/root/html602/TSignalHandler.html:3634,Availability,Error,Error,3634,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ESignalsGetSignal() const; virtual const char*TObj",MatchSource.WIKI,root/html602/TSignalHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSignalHandler.html
https://root.cern/root/html602/TSignalHandler.html:3763,Availability,error,error,3763," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ESignalsGetSignal() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidHandleDelayedSignal(); virtual Bool_tTObject::HandleTimer(",MatchSource.WIKI,root/html602/TSignalHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSignalHandler.html
https://root.cern/root/html602/TSignalHandler.html:3847,Availability,error,error,3847,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ESignalsGetSignal() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidHandleDelayedSignal(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const",MatchSource.WIKI,root/html602/TSignalHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSignalHandler.html
https://root.cern/root/html602/TSignalHandler.html:5789,Integrability,Message,Message,5789,"l_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTSysEvtHandler::IsActive() const; Bool_tIsAsync() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsSync() const; Bool_tTObject::IsZombie() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTSysEvtHandler::Notified()SIGNAL ; virtual Bool_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSignalHandler&operator=(const TSignalHandler&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(); virtual voidTSysEvtHandler:",MatchSource.WIKI,root/html602/TSignalHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSignalHandler.html
https://root.cern/root/html602/TSignalHandler.html:120,Modifiability,inherit,inheritance,120,". TSignalHandler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TSignalHandler. class TSignalHandler: public TSysEvtHandler. TSysEvtHandler. Abstract base class for handling system events. Function Members (Methods); public:. virtual~TSignalHandler(); voidTObject::AbstractMethod(const char* method) const; voidTSysEvtHandler::Activate(); virtual voidTSysEvtHandler::Activated()SIGNAL ; virtual voidAdd(); virtual voidTSysEvtHandler::Added()SIGNAL ; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; voidTSysEvtHandler::DeActivate(); virtual voidTSysEvtHandler::DeActivated()SIGNAL ; voidDelay(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQObject::Disconnect(const c",MatchSource.WIKI,root/html602/TSignalHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSignalHandler.html
https://root.cern/root/html602/TSignalHandler.html:5074,Modifiability,Inherit,InheritsFrom,5074,"bject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ESignalsGetSignal() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidHandleDelayedSignal(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTSysEvtHandler::IsActive() const; Bool_tIsAsync() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsSync() const; Bool_tTObject::IsZombie() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTSysEvtHandler::Notified()SIGNAL ; virtual Bool_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromV",MatchSource.WIKI,root/html602/TSignalHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSignalHandler.html
https://root.cern/root/html602/TSignalHandler.html:5140,Modifiability,Inherit,InheritsFrom,5140,"ect::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ESignalsGetSignal() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidHandleDelayedSignal(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTSysEvtHandler::IsActive() const; Bool_tIsAsync() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsSync() const; Bool_tTObject::IsZombie() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTSysEvtHandler::Notified()SIGNAL ; virtual Bool_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::",MatchSource.WIKI,root/html602/TSignalHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/TSignalHandler.html
