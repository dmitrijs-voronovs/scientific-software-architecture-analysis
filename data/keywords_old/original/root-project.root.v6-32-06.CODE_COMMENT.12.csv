id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:30,Usability,GUID,GUID,30,// We follow MSVC in mangling GUID declarations as if they were variables; // with a particular reserved name. Continue the pretense here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:298,Testability,test,test,298,"// Match GCC's naming convention for internal linkage symbols, for; // symbols that are not actually visible outside of this TU. GCC; // distinguishes between internal and external linkage symbols in; // its mangling, to support cases like this that were valid C++ prior; // to DR426:; //; // void test() { extern void foo(); }; // static void foo();; //; // Don't bother with the L marker for names in anonymous namespaces; the; // 12_GLOBAL__N_1 mangling is quite sufficient there, and this better; // matches GCC anyway, because GCC does not treat anonymous namespaces as; // implying internal linkage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:321,Safety,safe,safety,321,"// Class extensions have no name as a category, and it's possible; // for them to be the semantic parent of certain declarations; // (primarily, tag decls defined within declarations). Such; // declarations will always have internal linkage, so the name; // doesn't really matter, but we shouldn't crash on them. For; // safety, just handle all ObjC containers here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:35,Modifiability,variab,variable,35,"// A <closure-prefix> represents a variable or field, not a regular; // DeclContext, so needs special handling. In this case we're mangling a; // limited form of <nested-name>:; //; // <nested-name> ::= N <closure-prefix> <closure-type-name> E",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:46,Availability,avail,available,46,"// Implicit ABI tags (from namespace) are not available in the following; // entity; reset to actually emitted tags, which are available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:127,Availability,avail,available,127,"// Implicit ABI tags (from namespace) are not available in the following; // entity; reset to actually emitted tags, which are available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:54,Integrability,depend,dependent,54,// Clang 11 and before mangled the substitution for a dependent template name; // after already having emitted (a substitution for) the prefix.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:54,Modifiability,variab,variable,54,// Only lambdas within the initializer of a non-local variable or non-static; // data member get a <closure-prefix>.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:14,Usability,clear,clear,14,"// FIXME: not clear how to mangle this!; // template <template <class> class T...> class A {; // template <template <class> class U...> void foo(B<T,U> x...);; // };",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:14,Usability,clear,clear,14,// FIXME: not clear how to mangle this!; // template <class T...> class A {; // template <class U...> void foo(decltype(T::foo(U())) x...);; // };,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:14,Usability,clear,clear,14,// FIXME: not clear how to mangle this!; // template <template <class U> class T...> class A {; // template <class U...> void foo(decltype(T<U>::foo) x...);; // };,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:250,Safety,safe,safe,250,"// The __unsafe_unretained qualifier is *not* mangled, so that; // __unsafe_unretained types in ARC produce the same manglings as the; // equivalent (but, naturally, unqualified) types in non-ARC, providing; // better ABI compatibility.; //; // It's safe to do this because unqualified 'id' won't show up; // in any type signatures that need to be mangled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:32,Integrability,depend,dependent,32,"// If our type is instantiation-dependent but not dependent, we mangle; // it as it was written in the source, removing any top-level sugar.; // Otherwise, use the canonical type.; //; // FIXME: This is an approximation of the instantiation-dependent name; // mangling rules, since we should really be using the type as written and; // augmented via semantic analysis (i.e., with implicit conversions and; // default template arguments) for any instantiation-dependent type.; // Unfortunately, that requires several changes to our AST:; // - Instantiation-dependent TemplateSpecializationTypes will need to be; // uniqued, so that we can handle substitutions properly; // - Default template arguments will need to be represented in the; // TemplateSpecializationType, since they need to be mangled even though; // they aren't written.; // - Conversions on non-type template arguments need to be expressed, since; // they can affect the mangling of sizeof/alignof.; //; // FIXME: This is wrong when mapping to the canonical type for a dependent; // type discards instantiation-dependent portions of the type, such as for:; //; // template<typename T, int N> void f(T (&)[sizeof(N)]);; // template<typename T> void f(T() throw(typename T::type)); (pre-C++17); //; // It's also wrong in the opposite direction when instantiation-dependent,; // canonically-equivalent types differ in some irrelevant portion of inner; // type sugar. In such cases, we fail to form correct substitutions, eg:; //; // template<int N> void f(A<sizeof(N)> *, A<sizeof(N)> (*));; //; // We should instead canonicalize the non-instantiation-dependent parts,; // regardless of whether the type as a whole is dependent or instantiation; // dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:50,Integrability,depend,dependent,50,"// If our type is instantiation-dependent but not dependent, we mangle; // it as it was written in the source, removing any top-level sugar.; // Otherwise, use the canonical type.; //; // FIXME: This is an approximation of the instantiation-dependent name; // mangling rules, since we should really be using the type as written and; // augmented via semantic analysis (i.e., with implicit conversions and; // default template arguments) for any instantiation-dependent type.; // Unfortunately, that requires several changes to our AST:; // - Instantiation-dependent TemplateSpecializationTypes will need to be; // uniqued, so that we can handle substitutions properly; // - Default template arguments will need to be represented in the; // TemplateSpecializationType, since they need to be mangled even though; // they aren't written.; // - Conversions on non-type template arguments need to be expressed, since; // they can affect the mangling of sizeof/alignof.; //; // FIXME: This is wrong when mapping to the canonical type for a dependent; // type discards instantiation-dependent portions of the type, such as for:; //; // template<typename T, int N> void f(T (&)[sizeof(N)]);; // template<typename T> void f(T() throw(typename T::type)); (pre-C++17); //; // It's also wrong in the opposite direction when instantiation-dependent,; // canonically-equivalent types differ in some irrelevant portion of inner; // type sugar. In such cases, we fail to form correct substitutions, eg:; //; // template<int N> void f(A<sizeof(N)> *, A<sizeof(N)> (*));; //; // We should instead canonicalize the non-instantiation-dependent parts,; // regardless of whether the type as a whole is dependent or instantiation; // dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:241,Integrability,depend,dependent,241,"// If our type is instantiation-dependent but not dependent, we mangle; // it as it was written in the source, removing any top-level sugar.; // Otherwise, use the canonical type.; //; // FIXME: This is an approximation of the instantiation-dependent name; // mangling rules, since we should really be using the type as written and; // augmented via semantic analysis (i.e., with implicit conversions and; // default template arguments) for any instantiation-dependent type.; // Unfortunately, that requires several changes to our AST:; // - Instantiation-dependent TemplateSpecializationTypes will need to be; // uniqued, so that we can handle substitutions properly; // - Default template arguments will need to be represented in the; // TemplateSpecializationType, since they need to be mangled even though; // they aren't written.; // - Conversions on non-type template arguments need to be expressed, since; // they can affect the mangling of sizeof/alignof.; //; // FIXME: This is wrong when mapping to the canonical type for a dependent; // type discards instantiation-dependent portions of the type, such as for:; //; // template<typename T, int N> void f(T (&)[sizeof(N)]);; // template<typename T> void f(T() throw(typename T::type)); (pre-C++17); //; // It's also wrong in the opposite direction when instantiation-dependent,; // canonically-equivalent types differ in some irrelevant portion of inner; // type sugar. In such cases, we fail to form correct substitutions, eg:; //; // template<int N> void f(A<sizeof(N)> *, A<sizeof(N)> (*));; //; // We should instead canonicalize the non-instantiation-dependent parts,; // regardless of whether the type as a whole is dependent or instantiation; // dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:459,Integrability,depend,dependent,459,"// If our type is instantiation-dependent but not dependent, we mangle; // it as it was written in the source, removing any top-level sugar.; // Otherwise, use the canonical type.; //; // FIXME: This is an approximation of the instantiation-dependent name; // mangling rules, since we should really be using the type as written and; // augmented via semantic analysis (i.e., with implicit conversions and; // default template arguments) for any instantiation-dependent type.; // Unfortunately, that requires several changes to our AST:; // - Instantiation-dependent TemplateSpecializationTypes will need to be; // uniqued, so that we can handle substitutions properly; // - Default template arguments will need to be represented in the; // TemplateSpecializationType, since they need to be mangled even though; // they aren't written.; // - Conversions on non-type template arguments need to be expressed, since; // they can affect the mangling of sizeof/alignof.; //; // FIXME: This is wrong when mapping to the canonical type for a dependent; // type discards instantiation-dependent portions of the type, such as for:; //; // template<typename T, int N> void f(T (&)[sizeof(N)]);; // template<typename T> void f(T() throw(typename T::type)); (pre-C++17); //; // It's also wrong in the opposite direction when instantiation-dependent,; // canonically-equivalent types differ in some irrelevant portion of inner; // type sugar. In such cases, we fail to form correct substitutions, eg:; //; // template<int N> void f(A<sizeof(N)> *, A<sizeof(N)> (*));; //; // We should instead canonicalize the non-instantiation-dependent parts,; // regardless of whether the type as a whole is dependent or instantiation; // dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:556,Integrability,depend,dependent,556,"// If our type is instantiation-dependent but not dependent, we mangle; // it as it was written in the source, removing any top-level sugar.; // Otherwise, use the canonical type.; //; // FIXME: This is an approximation of the instantiation-dependent name; // mangling rules, since we should really be using the type as written and; // augmented via semantic analysis (i.e., with implicit conversions and; // default template arguments) for any instantiation-dependent type.; // Unfortunately, that requires several changes to our AST:; // - Instantiation-dependent TemplateSpecializationTypes will need to be; // uniqued, so that we can handle substitutions properly; // - Default template arguments will need to be represented in the; // TemplateSpecializationType, since they need to be mangled even though; // they aren't written.; // - Conversions on non-type template arguments need to be expressed, since; // they can affect the mangling of sizeof/alignof.; //; // FIXME: This is wrong when mapping to the canonical type for a dependent; // type discards instantiation-dependent portions of the type, such as for:; //; // template<typename T, int N> void f(T (&)[sizeof(N)]);; // template<typename T> void f(T() throw(typename T::type)); (pre-C++17); //; // It's also wrong in the opposite direction when instantiation-dependent,; // canonically-equivalent types differ in some irrelevant portion of inner; // type sugar. In such cases, we fail to form correct substitutions, eg:; //; // template<int N> void f(A<sizeof(N)> *, A<sizeof(N)> (*));; //; // We should instead canonicalize the non-instantiation-dependent parts,; // regardless of whether the type as a whole is dependent or instantiation; // dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:1034,Integrability,depend,dependent,1034,"// If our type is instantiation-dependent but not dependent, we mangle; // it as it was written in the source, removing any top-level sugar.; // Otherwise, use the canonical type.; //; // FIXME: This is an approximation of the instantiation-dependent name; // mangling rules, since we should really be using the type as written and; // augmented via semantic analysis (i.e., with implicit conversions and; // default template arguments) for any instantiation-dependent type.; // Unfortunately, that requires several changes to our AST:; // - Instantiation-dependent TemplateSpecializationTypes will need to be; // uniqued, so that we can handle substitutions properly; // - Default template arguments will need to be represented in the; // TemplateSpecializationType, since they need to be mangled even though; // they aren't written.; // - Conversions on non-type template arguments need to be expressed, since; // they can affect the mangling of sizeof/alignof.; //; // FIXME: This is wrong when mapping to the canonical type for a dependent; // type discards instantiation-dependent portions of the type, such as for:; //; // template<typename T, int N> void f(T (&)[sizeof(N)]);; // template<typename T> void f(T() throw(typename T::type)); (pre-C++17); //; // It's also wrong in the opposite direction when instantiation-dependent,; // canonically-equivalent types differ in some irrelevant portion of inner; // type sugar. In such cases, we fail to form correct substitutions, eg:; //; // template<int N> void f(A<sizeof(N)> *, A<sizeof(N)> (*));; //; // We should instead canonicalize the non-instantiation-dependent parts,; // regardless of whether the type as a whole is dependent or instantiation; // dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:1076,Integrability,depend,dependent,1076,"// If our type is instantiation-dependent but not dependent, we mangle; // it as it was written in the source, removing any top-level sugar.; // Otherwise, use the canonical type.; //; // FIXME: This is an approximation of the instantiation-dependent name; // mangling rules, since we should really be using the type as written and; // augmented via semantic analysis (i.e., with implicit conversions and; // default template arguments) for any instantiation-dependent type.; // Unfortunately, that requires several changes to our AST:; // - Instantiation-dependent TemplateSpecializationTypes will need to be; // uniqued, so that we can handle substitutions properly; // - Default template arguments will need to be represented in the; // TemplateSpecializationType, since they need to be mangled even though; // they aren't written.; // - Conversions on non-type template arguments need to be expressed, since; // they can affect the mangling of sizeof/alignof.; //; // FIXME: This is wrong when mapping to the canonical type for a dependent; // type discards instantiation-dependent portions of the type, such as for:; //; // template<typename T, int N> void f(T (&)[sizeof(N)]);; // template<typename T> void f(T() throw(typename T::type)); (pre-C++17); //; // It's also wrong in the opposite direction when instantiation-dependent,; // canonically-equivalent types differ in some irrelevant portion of inner; // type sugar. In such cases, we fail to form correct substitutions, eg:; //; // template<int N> void f(A<sizeof(N)> *, A<sizeof(N)> (*));; //; // We should instead canonicalize the non-instantiation-dependent parts,; // regardless of whether the type as a whole is dependent or instantiation; // dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:1326,Integrability,depend,dependent,1326,"// If our type is instantiation-dependent but not dependent, we mangle; // it as it was written in the source, removing any top-level sugar.; // Otherwise, use the canonical type.; //; // FIXME: This is an approximation of the instantiation-dependent name; // mangling rules, since we should really be using the type as written and; // augmented via semantic analysis (i.e., with implicit conversions and; // default template arguments) for any instantiation-dependent type.; // Unfortunately, that requires several changes to our AST:; // - Instantiation-dependent TemplateSpecializationTypes will need to be; // uniqued, so that we can handle substitutions properly; // - Default template arguments will need to be represented in the; // TemplateSpecializationType, since they need to be mangled even though; // they aren't written.; // - Conversions on non-type template arguments need to be expressed, since; // they can affect the mangling of sizeof/alignof.; //; // FIXME: This is wrong when mapping to the canonical type for a dependent; // type discards instantiation-dependent portions of the type, such as for:; //; // template<typename T, int N> void f(T (&)[sizeof(N)]);; // template<typename T> void f(T() throw(typename T::type)); (pre-C++17); //; // It's also wrong in the opposite direction when instantiation-dependent,; // canonically-equivalent types differ in some irrelevant portion of inner; // type sugar. In such cases, we fail to form correct substitutions, eg:; //; // template<int N> void f(A<sizeof(N)> *, A<sizeof(N)> (*));; //; // We should instead canonicalize the non-instantiation-dependent parts,; // regardless of whether the type as a whole is dependent or instantiation; // dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:1614,Integrability,depend,dependent,1614,"// If our type is instantiation-dependent but not dependent, we mangle; // it as it was written in the source, removing any top-level sugar.; // Otherwise, use the canonical type.; //; // FIXME: This is an approximation of the instantiation-dependent name; // mangling rules, since we should really be using the type as written and; // augmented via semantic analysis (i.e., with implicit conversions and; // default template arguments) for any instantiation-dependent type.; // Unfortunately, that requires several changes to our AST:; // - Instantiation-dependent TemplateSpecializationTypes will need to be; // uniqued, so that we can handle substitutions properly; // - Default template arguments will need to be represented in the; // TemplateSpecializationType, since they need to be mangled even though; // they aren't written.; // - Conversions on non-type template arguments need to be expressed, since; // they can affect the mangling of sizeof/alignof.; //; // FIXME: This is wrong when mapping to the canonical type for a dependent; // type discards instantiation-dependent portions of the type, such as for:; //; // template<typename T, int N> void f(T (&)[sizeof(N)]);; // template<typename T> void f(T() throw(typename T::type)); (pre-C++17); //; // It's also wrong in the opposite direction when instantiation-dependent,; // canonically-equivalent types differ in some irrelevant portion of inner; // type sugar. In such cases, we fail to form correct substitutions, eg:; //; // template<int N> void f(A<sizeof(N)> *, A<sizeof(N)> (*));; //; // We should instead canonicalize the non-instantiation-dependent parts,; // regardless of whether the type as a whole is dependent or instantiation; // dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:1680,Integrability,depend,dependent,1680,"// If our type is instantiation-dependent but not dependent, we mangle; // it as it was written in the source, removing any top-level sugar.; // Otherwise, use the canonical type.; //; // FIXME: This is an approximation of the instantiation-dependent name; // mangling rules, since we should really be using the type as written and; // augmented via semantic analysis (i.e., with implicit conversions and; // default template arguments) for any instantiation-dependent type.; // Unfortunately, that requires several changes to our AST:; // - Instantiation-dependent TemplateSpecializationTypes will need to be; // uniqued, so that we can handle substitutions properly; // - Default template arguments will need to be represented in the; // TemplateSpecializationType, since they need to be mangled even though; // they aren't written.; // - Conversions on non-type template arguments need to be expressed, since; // they can affect the mangling of sizeof/alignof.; //; // FIXME: This is wrong when mapping to the canonical type for a dependent; // type discards instantiation-dependent portions of the type, such as for:; //; // template<typename T, int N> void f(T (&)[sizeof(N)]);; // template<typename T> void f(T() throw(typename T::type)); (pre-C++17); //; // It's also wrong in the opposite direction when instantiation-dependent,; // canonically-equivalent types differ in some irrelevant portion of inner; // type sugar. In such cases, we fail to form correct substitutions, eg:; //; // template<int N> void f(A<sizeof(N)> *, A<sizeof(N)> (*));; //; // We should instead canonicalize the non-instantiation-dependent parts,; // regardless of whether the type as a whole is dependent or instantiation; // dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:1711,Integrability,depend,dependent,1711,"// If our type is instantiation-dependent but not dependent, we mangle; // it as it was written in the source, removing any top-level sugar.; // Otherwise, use the canonical type.; //; // FIXME: This is an approximation of the instantiation-dependent name; // mangling rules, since we should really be using the type as written and; // augmented via semantic analysis (i.e., with implicit conversions and; // default template arguments) for any instantiation-dependent type.; // Unfortunately, that requires several changes to our AST:; // - Instantiation-dependent TemplateSpecializationTypes will need to be; // uniqued, so that we can handle substitutions properly; // - Default template arguments will need to be represented in the; // TemplateSpecializationType, since they need to be mangled even though; // they aren't written.; // - Conversions on non-type template arguments need to be expressed, since; // they can affect the mangling of sizeof/alignof.; //; // FIXME: This is wrong when mapping to the canonical type for a dependent; // type discards instantiation-dependent portions of the type, such as for:; //; // template<typename T, int N> void f(T (&)[sizeof(N)]);; // template<typename T> void f(T() throw(typename T::type)); (pre-C++17); //; // It's also wrong in the opposite direction when instantiation-dependent,; // canonically-equivalent types differ in some irrelevant portion of inner; // type sugar. In such cases, we fail to form correct substitutions, eg:; //; // template<int N> void f(A<sizeof(N)> *, A<sizeof(N)> (*));; //; // We should instead canonicalize the non-instantiation-dependent parts,; // regardless of whether the type as a whole is dependent or instantiation; // dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:82,Integrability,depend,dependent,82,// FIXME: We presumably shouldn't strip off ElaboratedTypes with; // instantation-dependent qualifiers. See; // https://github.com/itanium-cxx-abi/cxx-abi/issues/114.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:22,Deployability,update,update,22,// Note that we don't update T: we want to add the; // substitution at the original type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:1124,Modifiability,extend,extended,1124,"// <type> ::= <builtin-type>; // <builtin-type> ::= v # void; // ::= w # wchar_t; // ::= b # bool; // ::= c # char; // ::= a # signed char; // ::= h # unsigned char; // ::= s # short; // ::= t # unsigned short; // ::= i # int; // ::= j # unsigned int; // ::= l # long; // ::= m # unsigned long; // ::= x # long long, __int64; // ::= y # unsigned long long, __int64; // ::= n # __int128; // ::= o # unsigned __int128; // ::= f # float; // ::= d # double; // ::= e # long double, __float80; // ::= g # __float128; // ::= g # __ibm128; // UNSUPPORTED: ::= Dd # IEEE 754r decimal floating point (64 bits); // UNSUPPORTED: ::= De # IEEE 754r decimal floating point (128 bits); // UNSUPPORTED: ::= Df # IEEE 754r decimal floating point (32 bits); // ::= Dh # IEEE 754r half-precision floating point (16 bits); // ::= DF <number> _ # ISO/IEC TS 18661 binary floating point type _FloatN (N bits);; // ::= Di # char32_t; // ::= Ds # char16_t; // ::= Dn # std::nullptr_t (i.e., decltype(nullptr)); // ::= [DS] DA # N1169 fixed-point [_Sat] T _Accum; // ::= [DS] DR # N1169 fixed-point [_Sat] T _Fract; // ::= u <source-name> # vendor extended type; //; // <fixed-point-size>; // ::= s # short; // ::= t # unsigned short; // ::= i # plain; // ::= j # unsigned; // ::= l # long; // ::= m # unsigned long",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:37,Modifiability,extend,extended,37,// Normalize integer types as vendor extended types:; // u<length>i<type size>; // u<length>u<type size>,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:24,Integrability,depend,dependent,24,"// Mangle instantiation-dependent exception-specification, if present,; // per cxx-abi-dev proposal on 2016-10-11.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:10,Modifiability,extend,extended,10,// Mangle extended parameter info as order-sensitive qualifiers here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:5,Integrability,Depend,DependentSizedArrayType,5,// A DependentSizedArrayType might not have size expression as below; //; // template<int ...N> int arr[] = {N...};,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:14,Usability,clear,clear,14,// FIXME: not clear how to mangle this!; // template <class T...> class A {; // template <class U...> void foo(T(*)(U) x...);; // };,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:120,Modifiability,extend,extended,120,// GNU extension: vector types; // <type> ::= <vector-type>; // <vector-type> ::= Dv <positive dimension number> _; // <extended element type>; // ::= Dv [<dimension expression>] _ <element type>; // <extended element type> ::= <element type>; // ::= p # AltiVec vector pixel; // ::= b # Altivec vector bool,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:201,Modifiability,extend,extended,201,// GNU extension: vector types; // <type> ::= <vector-type>; // <vector-type> ::= Dv <positive dimension number> _; // <extended element type>; // ::= Dv [<dimension expression>] _ <element type>; // <extended element type> ::= <element type>; // ::= p # AltiVec vector pixel; // ::= b # Altivec vector bool,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:35,Modifiability,extend,extended,35,// Mangle matrix types as a vendor extended type:; // u<Len>matrix_typeI<Rows><Columns><element type>E,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:35,Modifiability,extend,extended,35,// Mangle matrix types as a vendor extended type:; // u<Len>matrix_typeI<row expr><column expr><element type>E,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:30,Modifiability,extend,extended,30,// Treat __kindof as a vendor extended type qualifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:10,Integrability,protocol,protocol,10,// Mangle protocol qualifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:10,Integrability,inject,injected,10,"// Mangle injected class name types as if the user had written the; // specialization out fully. It may not actually be possible to see; // this mangling, though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:10,Security,inject,injected,10,"// Mangle injected class name types as if the user had written the; // specialization out fully. It may not actually be possible to see; // this mangling, though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:102,Integrability,depend,dependent,102,// FIXME: GCC does not appear to mangle the template arguments when; // the template in question is a dependent template name. Should we; // emulate that badness?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:78,Integrability,depend,dependent,78,"// Proposal by cxx-abi-dev, 2014-03-26; // <class-enum-type> ::= <name> # non-dependent or dependent type name or; // # dependent elaborated type specifier using; // # 'typename'; // ::= Ts <name> # dependent elaborated type specifier using; // # 'struct' or 'class'; // ::= Tu <name> # dependent elaborated type specifier using; // # 'union'; // ::= Te <name> # dependent elaborated type specifier using; // # 'enum'",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:91,Integrability,depend,dependent,91,"// Proposal by cxx-abi-dev, 2014-03-26; // <class-enum-type> ::= <name> # non-dependent or dependent type name or; // # dependent elaborated type specifier using; // # 'typename'; // ::= Ts <name> # dependent elaborated type specifier using; // # 'struct' or 'class'; // ::= Tu <name> # dependent elaborated type specifier using; // # 'union'; // ::= Te <name> # dependent elaborated type specifier using; // # 'enum'",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:120,Integrability,depend,dependent,120,"// Proposal by cxx-abi-dev, 2014-03-26; // <class-enum-type> ::= <name> # non-dependent or dependent type name or; // # dependent elaborated type specifier using; // # 'typename'; // ::= Ts <name> # dependent elaborated type specifier using; // # 'struct' or 'class'; // ::= Tu <name> # dependent elaborated type specifier using; // # 'union'; // ::= Te <name> # dependent elaborated type specifier using; // # 'enum'",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:199,Integrability,depend,dependent,199,"// Proposal by cxx-abi-dev, 2014-03-26; // <class-enum-type> ::= <name> # non-dependent or dependent type name or; // # dependent elaborated type specifier using; // # 'typename'; // ::= Ts <name> # dependent elaborated type specifier using; // # 'struct' or 'class'; // ::= Tu <name> # dependent elaborated type specifier using; // # 'union'; // ::= Te <name> # dependent elaborated type specifier using; // # 'enum'",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:287,Integrability,depend,dependent,287,"// Proposal by cxx-abi-dev, 2014-03-26; // <class-enum-type> ::= <name> # non-dependent or dependent type name or; // # dependent elaborated type specifier using; // # 'typename'; // ::= Ts <name> # dependent elaborated type specifier using; // # 'struct' or 'class'; // ::= Tu <name> # dependent elaborated type specifier using; // # 'union'; // ::= Te <name> # dependent elaborated type specifier using; // # 'enum'",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:363,Integrability,depend,dependent,363,"// Proposal by cxx-abi-dev, 2014-03-26; // <class-enum-type> ::= <name> # non-dependent or dependent type name or; // # dependent elaborated type specifier using; // # 'typename'; // ::= Ts <name> # dependent elaborated type specifier using; // # 'struct' or 'class'; // ::= Tu <name> # dependent elaborated type specifier using; // # 'union'; // ::= Te <name> # dependent elaborated type specifier using; // # 'enum'",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:3,Integrability,Depend,Dependently-scoped,3,// Dependently-scoped template types are nested if they have a prefix.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:9,Safety,avoid,avoid,9,// TODO: avoid making this TemplateName.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:102,Integrability,depend,dependent,102,// FIXME: GCC does not appear to mangle the template arguments when; // the template in question is a dependent template name. Should we; // emulate that badness?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:83,Security,access,access,83,// type ::= Dt <expression> E # decltype of an id-expression; // # or class member access; // ::= DT <expression> E # decltype of an expression; // This purports to be an exhaustive list of id-expressions and; // class member accesses. Note that we do not ignore parentheses;; // parentheses change the semantics of decltype for these; // expressions (and cause the mangler to use the other form).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:226,Security,access,accesses,226,// type ::= Dt <expression> E # decltype of an id-expression; // # or class member access; // ::= DT <expression> E # decltype of an expression; // This purports to be an exhaustive list of id-expressions and; // class member accesses. Note that we do not ignore parentheses;; // parentheses change the semantics of decltype for these; // expressions (and cause the mangler to use the other form).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:14,Integrability,depend,dependent,14,"// If this is dependent, we need to record that. If not, we simply; // mangle it as the underlying type since they are equivalent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:60,Usability,simpl,simply,60,"// If this is dependent, we need to record that. If not, we simply; // mangle it as the underlying type since they are equivalent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:46,Modifiability,extend,extended,46,// <type> ::= U <source-name> <type> # vendor extended type qualifier; // (Until there's a standardized mangling...),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:67,Integrability,depend,dependent,67,// 5.1.5.2 Builtin types; // <type> ::= DB <number | instantiation-dependent expression> _; // ::= DU <number | instantiation-dependent expression> _,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:126,Integrability,depend,dependent,126,// 5.1.5.2 Builtin types; // <type> ::= DB <number | instantiation-dependent expression> _; // ::= DU <number | instantiation-dependent expression> _,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:67,Integrability,depend,dependent,67,// 5.1.5.2 Builtin types; // <type> ::= DB <number | instantiation-dependent expression> _; // ::= DU <number | instantiation-dependent expression> _,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:126,Integrability,depend,dependent,126,// 5.1.5.2 Builtin types; // <type> ::= DB <number | instantiation-dependent expression> _; // ::= DU <number | instantiation-dependent expression> _,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:71,Usability,clear,clear,71,// TODO: We can't mangle the result of a failed substitution. It's not clear; // whether we should be mangling the original form prior to any substitution; // instead. See https://lists.isocpp.org/core/2023/04/14118.php,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:811,Integrability,depend,dependent,811,"// <expression> ::= <unary operator-name> <expression>; // ::= <binary operator-name> <expression> <expression>; // ::= <trinary operator-name> <expression> <expression> <expression>; // ::= cv <type> expression # conversion with one argument; // ::= cv <type> _ <expression>* E # conversion with a different number of arguments; // ::= dc <type> <expression> # dynamic_cast<type> (expression); // ::= sc <type> <expression> # static_cast<type> (expression); // ::= cc <type> <expression> # const_cast<type> (expression); // ::= rc <type> <expression> # reinterpret_cast<type> (expression); // ::= st <type> # sizeof (a type); // ::= at <type> # alignof (a type); // ::= <template-param>; // ::= <function-param>; // ::= fpT # 'this' expression (part of <function-param>); // ::= sr <type> <unqualified-name> # dependent name; // ::= sr <type> <unqualified-name> <template-args> # dependent template-id; // ::= ds <expression> <expression> # expr.*expr; // ::= sZ <template-param> # size of a parameter pack; // ::= sZ <function-param> # size of a function parameter pack; // ::= u <source-name> <template-arg>* E # vendor extended expression; // ::= <expr-primary>; // <expr-primary> ::= L <type> <value number> E # integer literal; // ::= L <type> <value float> E # floating literal; // ::= L <type> <string type> E # string literal; // ::= L <nullptr type> E # nullptr literal ""LDnE""; // ::= L <pointer type> 0 E # null pointer template argument; // ::= L <type> <real-part float> _ <imag-part float> E # complex floating point literal (C99); not used by clang; // ::= L <mangled-name> E # external name",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:881,Integrability,depend,dependent,881,"// <expression> ::= <unary operator-name> <expression>; // ::= <binary operator-name> <expression> <expression>; // ::= <trinary operator-name> <expression> <expression> <expression>; // ::= cv <type> expression # conversion with one argument; // ::= cv <type> _ <expression>* E # conversion with a different number of arguments; // ::= dc <type> <expression> # dynamic_cast<type> (expression); // ::= sc <type> <expression> # static_cast<type> (expression); // ::= cc <type> <expression> # const_cast<type> (expression); // ::= rc <type> <expression> # reinterpret_cast<type> (expression); // ::= st <type> # sizeof (a type); // ::= at <type> # alignof (a type); // ::= <template-param>; // ::= <function-param>; // ::= fpT # 'this' expression (part of <function-param>); // ::= sr <type> <unqualified-name> # dependent name; // ::= sr <type> <unqualified-name> <template-args> # dependent template-id; // ::= ds <expression> <expression> # expr.*expr; // ::= sZ <template-param> # size of a parameter pack; // ::= sZ <function-param> # size of a function parameter pack; // ::= u <source-name> <template-arg>* E # vendor extended expression; // ::= <expr-primary>; // <expr-primary> ::= L <type> <value number> E # integer literal; // ::= L <type> <value float> E # floating literal; // ::= L <type> <string type> E # string literal; // ::= L <nullptr type> E # nullptr literal ""LDnE""; // ::= L <pointer type> 0 E # null pointer template argument; // ::= L <type> <real-part float> _ <imag-part float> E # complex floating point literal (C99); not used by clang; // ::= L <mangled-name> E # external name",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:1123,Modifiability,extend,extended,1123,"// <expression> ::= <unary operator-name> <expression>; // ::= <binary operator-name> <expression> <expression>; // ::= <trinary operator-name> <expression> <expression> <expression>; // ::= cv <type> expression # conversion with one argument; // ::= cv <type> _ <expression>* E # conversion with a different number of arguments; // ::= dc <type> <expression> # dynamic_cast<type> (expression); // ::= sc <type> <expression> # static_cast<type> (expression); // ::= cc <type> <expression> # const_cast<type> (expression); // ::= rc <type> <expression> # reinterpret_cast<type> (expression); // ::= st <type> # sizeof (a type); // ::= at <type> # alignof (a type); // ::= <template-param>; // ::= <function-param>; // ::= fpT # 'this' expression (part of <function-param>); // ::= sr <type> <unqualified-name> # dependent name; // ::= sr <type> <unqualified-name> <template-args> # dependent template-id; // ::= ds <expression> <expression> # expr.*expr; // ::= sZ <template-param> # size of a parameter pack; // ::= sZ <function-param> # size of a function parameter pack; // ::= u <source-name> <template-arg>* E # vendor extended expression; // ::= <expr-primary>; // <expr-primary> ::= L <type> <value number> E # integer literal; // ::= L <type> <value float> E # floating literal; // ::= L <type> <string type> E # string literal; // ::= L <nullptr type> E # nullptr literal ""LDnE""; // ::= L <pointer type> 0 E # null pointer template argument; // ::= L <type> <real-part float> _ <imag-part float> E # complex floating point literal (C99); not used by clang; // ::= L <mangled-name> E # external name",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:64,Integrability,wrap,wrapped,64,// A top-level expression that's not <expr-primary> needs to be wrapped in; // X...E in a template arg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:42,Usability,simpl,simple,42,"// 'goto recurse' is used when handling a simple ""unwrapping"" node which; // produces no output, where ImplicitlyConvertedToType and AsTemplateArg need; // to be preserved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:57,Modifiability,variab,variable-initialization,57,// fallthrough; // These all can only appear in local or variable-initialization; // contexts and so should never appear in a mangling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:42,Modifiability,extend,extended,42,"// As of clang 12, uuidof uses the vendor extended expression; // mangling. Previously, it used a special-cased nonstandard extension.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:24,Usability,simpl,simple-id,24,"// <expression> ::= cp <simple-id> <expression>* E; // We use this mangling only when the call would use ADL except; // for being parenthesized. Per discussion with David; // Vandervoorde, 2011.04.25.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:117,Usability,simpl,simple-id,117,// The callee here is a parenthesized UnresolvedLookupExpr with; // no qualifier and should always get mangled as a <simple-id>; // anyway.; // <expression> ::= cl <expression>* E,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:21,Integrability,depend,dependent,21,// Non-instantiation-dependent traits are an <expr-primary> integer literal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:96,Integrability,depend,dependent,96,"// Itanium C++ ABI:; // If the operand of a sizeof or alignof operator is not; // instantiation-dependent it is encoded as an integer literal; // reflecting the result of the operator.; //; // If the result of the operator is implicitly converted to a known; // integer type, that type is used for the literal; otherwise, the type; // of std::size_t or std::ptrdiff_t is used.; //; // FIXME: We still include the operand in the profile in this case. This; // can lead to mangling collisions between function templates that we; // consider to be different.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:38,Modifiability,extend,extended,38,"// Mangle ownership casts as a vendor extended operator __bridge,; // __bridge_transfer, or __bridge_retain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:14,Usability,clear,clear,14,// FIXME: not clear how to mangle this!; // template <unsigned N...> class A {; // template <class U...> void foo(U (&x)[N]...);; // };,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:14,Usability,clear,clear,14,// FIXME: not clear how to mangle this!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:53,Modifiability,variab,variable,53,"/// Mangle an expression which refers to a parameter variable.; ///; /// <expression> ::= <function-param>; /// <function-param> ::= fp <top-level CV-qualifiers> _ # L == 0, I == 0; /// <function-param> ::= fp <top-level CV-qualifiers>; /// <parameter-2 non-negative number> _ # L == 0, I > 0; /// <function-param> ::= fL <L-1 non-negative number>; /// p <top-level CV-qualifiers> _ # L > 0, I == 0; /// <function-param> ::= fL <L-1 non-negative number>; /// p <top-level CV-qualifiers>; /// <I-1 non-negative number> _ # L > 0, I > 0; ///; /// L is the nesting depth of the parameter, defined as 1 if the; /// parameter comes from the innermost function prototype scope; /// enclosing the current context, 2 if from the next enclosing; /// function prototype scope, and so on, with one special case: if; /// we've processed the full parameter clause for the innermost; /// function type, then L is one less. This definition conveniently; /// makes it irrelevant whether a function's result type was written; /// trailing or leading, but is otherwise overly complicated; the; /// numbering was first designed without considering references to; /// parameter in locations other than return types, and then the; /// mangling had to be generalized without changing the existing; /// manglings.; ///; /// I is the zero-based index of the parameter within its parameter; /// declaration clause. Note that the original ABI document describes; /// this using 1-based ordinals.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:124,Modifiability,inherit,inheriting,124,"// <ctor-dtor-name> ::= C1 # complete object constructor; // ::= C2 # base object constructor; // ::= CI1 <type> # complete inheriting constructor; // ::= CI2 <type> # base inheriting constructor; //; // In addition, C5 is a comdat name with C1 and C2 in it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:173,Modifiability,inherit,inheriting,173,"// <ctor-dtor-name> ::= C1 # complete object constructor; // ::= C2 # base object constructor; // ::= CI1 <type> # complete inheriting constructor; // ::= CI2 <type> # base inheriting constructor; //; // In addition, C5 is a comdat name with C1 and C2 in it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:271,Integrability,depend,dependent,271,"// For a non-type template parameter, the natural parameter is `T V` (for a; // prvalue argument) or `T &V` (for a glvalue argument), where `T` is the; // type of the argument, which we require to exactly match. If the actual; // parameter has a deduced or instantiation-dependent type, it is not; // equivalent to the natural parameter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:111,Usability,simpl,simple,111,// <template-arg> ::= <type> # type or template; // ::= X <expression> E # expression; // ::= <expr-primary> # simple expressions; // ::= J <template-arg>* E # argument pack,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:3,Usability,Simpl,Simple,3,// Simple pointer-to-member with no conversion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:215,Usability,guid,guidance,215,"// Consider only the fields in declaration order, searched depth-first. We; // don't care about the active member of the union, as all we are doing is; // looking for a valid name. We also don't check bases, due to guidance from; // the Itanium ABI folks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:61,Integrability,wrap,wrapped,61,// A top-level expression that's not a primary expression is wrapped in X...E.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:3,Testability,log,log,3,// log(2**32) / log(36) ~= 7,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:16,Testability,log,log,16,// log(2**32) / log(36) ~= 7,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:42,Integrability,depend,depending,42,// Plain 'char' is named Char_S or Char_U depending on the target ABI.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:160,Integrability,rout,routine,160,"//; /// Mangles the name of the declaration D and emits that name to the given; /// output stream.; ///; /// If the declaration D requires a mangled name, this routine will emit that; /// mangled name to \p os and return true. Otherwise, \p os will be unchanged; /// and this routine will return false. In this case, the caller should just; /// emit the identifier of the declaration (\c D->getIdentifier()) as its; /// name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:276,Integrability,rout,routine,276,"//; /// Mangles the name of the declaration D and emits that name to the given; /// output stream.; ///; /// If the declaration D requires a mangled name, this routine will emit that; /// mangled name to \p os and return true. Otherwise, \p os will be unchanged; /// and this routine will return false. In this case, the caller should just; /// emit the identifier of the declaration (\c D->getIdentifier()) as its; /// name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:41,Modifiability,variab,variable,41,/// Returns the mangled name for a guard variable for the passed in VarDecl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:47,Modifiability,variab,variable,47,// <special-name> ::= GV <object name> # Guard variable for one-time; // # initialization,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:159,Safety,avoid,avoid,159,"// These symbols are internal in the Itanium ABI, so the names don't matter.; // Clang has traditionally used this symbol and allowed LLVM to adjust it to; // avoid duplicate symbols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp:23,Modifiability,inherit,inheritance,23,"// Because of multiple inheritance, a DeclContext pointer does not produce; // the same pointer representation as a Decl pointer that references the; // same AST Node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp:191,Availability,failure,failures,191,"// If the declaration is dependent or is in a dependent context, then the; // mangling is unlikely to be meaningful (and in some cases may cause; // ""don't know how to mangle this"" assertion failures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp:25,Integrability,depend,dependent,25,"// If the declaration is dependent or is in a dependent context, then the; // mangling is unlikely to be meaningful (and in some cases may cause; // ""don't know how to mangle this"" assertion failures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp:46,Integrability,depend,dependent,46,"// If the declaration is dependent or is in a dependent context, then the; // mangling is unlikely to be meaningful (and in some cases may cause; // ""don't know how to mangle this"" assertion failures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp:181,Testability,assert,assertion,181,"// If the declaration is dependent or is in a dependent context, then the; // mangling is unlikely to be meaningful (and in some cases may cause; // ""don't know how to mangle this"" assertion failures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp:36,Usability,guid,guides,36,// Do not mangle template deduction guides.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/JSONNodeDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Linkage.h:13,Performance,cache,cache,13,"// We have a cache for repeated linkage/visibility computations. This saves us; // from exponential behavior in heavily templated code, such as:; //; // template <typename T, typename V> struct {};; // using A = int;; // using B = Foo<A, A>;; // using C = Foo<B, B>;; // using D = Foo<C, C>;; //; // The integer represents an LVComputationKind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Linkage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Linkage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Mangle.cpp:260,Safety,avoid,avoid,260,"// Adding the prefix can cause problems when one file has a ""foo"" and; // another has a ""\01foo"". That is known to happen on ELF with the; // tricks normally used for producing aliases (PR9177). Fortunately the; // llvm mangler on ELF is a nop, so we can just avoid adding the \01; // marker.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Mangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Mangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Mangle.cpp:148,Usability,simpl,simply,148,// If an argument type is incomplete there is no way to get its size to; // correctly encode into the mangling scheme.; // Follow GCCs behaviour by simply breaking out of the loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Mangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Mangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Mangle.cpp:50,Usability,GUID,GUID,50,"// For now, follow the MSVC naming convention for GUID objects on all; // targets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Mangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Mangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftCXXABI.cpp:119,Modifiability,inherit,inherit,119,"// getNumBases() seems to only give us the number of direct bases, and not the; // total. This function tells us if we inherit from anybody that uses MI, or if; // we have a non-primary base class, which uses the multiple inheritance model.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftCXXABI.cpp:222,Modifiability,inherit,inheritance,222,"// getNumBases() seems to only give us the number of direct bases, and not the; // total. This function tells us if we inherit from anybody that uses MI, or if; // we have a non-primary base class, which uses the multiple inheritance model.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftCXXABI.cpp:259,Modifiability,inherit,inheritance,259,"// Returns the number of pointer and integer slots used to represent a member; // pointer in the MS C++ ABI.; //; // Member function pointers have the following general form; however, fields; // are dropped as permitted (under the MSVC interpretation) by the inheritance; // model of the actual class.; //; // struct {; // // A pointer to the member function to call. If the member function is; // // virtual, this will be a thunk that forwards to the appropriate vftable; // // slot.; // void *FunctionPointerOrVirtualThunk;; //; // // An offset to add to the address of the vbtable pointer after; // // (possibly) selecting the virtual base but before resolving and calling; // // the function.; // // Only needed if the class has any virtual bases or bases at a non-zero; // // offset.; // int NonVirtualBaseAdjustment;; //; // // The offset of the vb-table pointer within the object. Only needed for; // // incomplete types.; // int VBPtrOffset;; //; // // An offset within the vb-table that selects the virtual base containing; // // the member. Loading from this offset produces a new offset that is; // // added to the address of the vb-table pointer to produce the base.; // int VirtualBaseAdjustmentOffset;; // };",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftCXXABI.cpp:1051,Performance,Load,Loading,1051,"// Returns the number of pointer and integer slots used to represent a member; // pointer in the MS C++ ABI.; //; // Member function pointers have the following general form; however, fields; // are dropped as permitted (under the MSVC interpretation) by the inheritance; // model of the actual class.; //; // struct {; // // A pointer to the member function to call. If the member function is; // // virtual, this will be a thunk that forwards to the appropriate vftable; // // slot.; // void *FunctionPointerOrVirtualThunk;; //; // // An offset to add to the address of the vbtable pointer after; // // (possibly) selecting the virtual base but before resolving and calling; // // the function.; // // Only needed if the class has any virtual bases or bases at a non-zero; // // offset.; // int NonVirtualBaseAdjustment;; //; // // The offset of the vb-table pointer within the object. Only needed for; // // incomplete types.; // int VBPtrOffset;; //; // // An offset within the vb-table that selects the virtual base containing; // // the member. Loading from this offset produces a new offset that is; // // added to the address of the vb-table pointer to produce the base.; // int VirtualBaseAdjustmentOffset;; // };",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:3,Performance,Perform,Perform,3,// Perform the same check for block literals.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:35,Security,hash,hash,35,"// To mangle anonymous namespaces, hash the path to the main source file. The; // path should be whatever (probably relative) path was passed on the command; // line. The goal is for the compiler to produce the same output regardless of; // working directory, so use the uncanonicalized relative path.; //; // It's important to make the mangled names unique because, when CodeView; // debug info is in use, the debugger uses mangled type names to distinguish; // between otherwise identically named types in anonymous namespaces.; //; // These symbols are always internal, so there is no need for the hash to; // match what MSVC produces. For the same reason, clang is free to change the; // hash at any time without breaking compatibility with old versions of clang.; // The generated names are intended to look similar to what MSVC generates,; // which are something like ""?A0x01234567@"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:601,Security,hash,hash,601,"// To mangle anonymous namespaces, hash the path to the main source file. The; // path should be whatever (probably relative) path was passed on the command; // line. The goal is for the compiler to produce the same output regardless of; // working directory, so use the uncanonicalized relative path.; //; // It's important to make the mangled names unique because, when CodeView; // debug info is in use, the debugger uses mangled type names to distinguish; // between otherwise identically named types in anonymous namespaces.; //; // These symbols are always internal, so there is no need for the hash to; // match what MSVC produces. For the same reason, clang is free to change the; // hash at any time without breaking compatibility with old versions of clang.; // The generated names are intended to look similar to what MSVC generates,; // which are something like ""?A0x01234567@"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:692,Security,hash,hash,692,"// To mangle anonymous namespaces, hash the path to the main source file. The; // path should be whatever (probably relative) path was passed on the command; // line. The goal is for the compiler to produce the same output regardless of; // working directory, so use the uncanonicalized relative path.; //; // It's important to make the mangled names unique because, when CodeView; // debug info is in use, the debugger uses mangled type names to distinguish; // between otherwise identically named types in anonymous namespaces.; //; // These symbols are always internal, so there is no need for the hash to; // match what MSVC produces. For the same reason, clang is free to change the; // hash at any time without breaking compatibility with old versions of clang.; // The generated names are intended to look similar to what MSVC generates,; // which are something like ""?A0x01234567@"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:16,Security,hash,hash,16,// Truncate the hash so we get 8 characters of hexadecimal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:49,Usability,simpl,simple,49,// C++ functions and those whose names are not a simple identifier need; // mangling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:5,Modifiability,variab,variables,5,// C variables are not mangled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:3,Modifiability,Variab,Variables,3,// Variables at global scope with internal linkage are not mangled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:20,Modifiability,variab,variable,20,// Check for extern variable declared locally.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:48,Modifiability,variab,variables,48,// MSVC appears to mangle GUIDs as if they were variables of type; // 'const struct __s_GUID'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:26,Usability,GUID,GUIDs,26,// MSVC appears to mangle GUIDs as if they were variables of type; // 'const struct __s_GUID'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:40,Modifiability,variab,variable-type,40,// <type-encoding> ::= <storage-class> <variable-type>; // <storage-class> ::= 0 # private static member; // ::= 1 # protected static member; // ::= 2 # public static member; // ::= 3 # global; // ::= 4 # static local; // The first character in the encoding (after the name) is the storage class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:48,Security,access,access,48,"// If it's a static member, it also encodes the access level.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:29,Modifiability,variab,variable-type,29,"// Now mangle the type.; // <variable-type> ::= <type> <cvr-qualifiers>; // ::= <type> <pointee-cvr-qualifiers> # pointers, references; // Pointers and references are odd. The type of 'int * const foo;' gets; // mangled as 'QAHA' instead of 'PAHB', for example.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:15,Modifiability,inherit,inheritance,15,// Null single inheritance member functions are encoded as a simple nullptr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:61,Usability,simpl,simple,61,// Null single inheritance member functions are encoded as a simple nullptr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:22,Modifiability,variab,variable,22,// Check if we have a variable template.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:725,Performance,cache,cache,725,"// Here comes the tricky thing: if we need to mangle something like; // void foo(A::X<Y>, B::X<Y>),; // the X<Y> part is aliased. However, if you need to mangle; // void foo(A::X<A::Y>, A::X<B::Y>),; // the A::X<> part is not aliased.; // That is, from the mangler's perspective we have a structure like this:; // namespace[s] -> type[ -> template-parameters]; // but from the Clang perspective we have; // type [ -> template-parameters]; // \-> namespace[s]; // What we do is we create a new mangler, mangle the same type (without; // a namespace suffix) to a string using the extra mangler and then use; // the mangled type name as a key to check the mangling of different types; // for aliasing.; // It's important to key cache reads off ND, not TD -- the same TD can; // be used with different TemplateArgs, but ND uniquely identifies; // TD / TemplateArg pairs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:40,Modifiability,variab,variable,40,// Mangle a GUID object as if it were a variable with the corresponding; // mangled name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:12,Usability,GUID,GUID,12,// Mangle a GUID object as if it were a variable with the corresponding; // mangled name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:23,Modifiability,variab,variable,23,"// If the context is a variable or a class member and not a parameter,; // it is encoded in a qualified name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:87,Integrability,depend,depends,87,// This is reachable only when constructing an outlined SEH finally; // block. Nothing depends on this mangling and it's used only with; // functinos with internal linkage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:144,Availability,avail,available,144,// See if it's worth creating a back reference.; // Only types longer than 1 character are considered; // and only 10 back references slots are available:,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:7,Integrability,depend,dependent,7,// The dependent expression has to be folded into a constant (TODO).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:39,Availability,down,down,39,"// For pointer size address spaces, go down the same type mangling path as; // non address space types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:8,Integrability,interface,interfaces,8,// ObjC interfaces have structs underlying them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:30,Security,access,access,30,"// Usually the thunk uses the access specifier of the new method, but if this; // is a covariant return thunk, then MSVC always uses the public access; // specifier, and we do the same.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:144,Security,access,access,144,"// Usually the thunk uses the access specifier of the new method, but if this; // is a covariant return thunk, then MSVC always uses the public access; // specifier, and we do the same.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:309,Modifiability,variab,variables,309,"// <guard-name> ::= ?_B <postfix> @5 <scope-depth>; // ::= ?__J <postfix> @5 <scope-depth>; // ::= ?$S <guard-num> @ <postfix> @4IA; // The first mangling is what MSVC uses to guard static locals in inline; // functions. It uses a different mangling in external functions to support; // guarding more than 32 variables. MSVC rejects inline functions with more; // than 32 static locals. We don't fully implement the second mangling; // because those guards are not externally visible, and instead use LLVM's; // default renaming when creating a new guard variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:555,Modifiability,variab,variable,555,"// <guard-name> ::= ?_B <postfix> @5 <scope-depth>; // ::= ?__J <postfix> @5 <scope-depth>; // ::= ?$S <guard-num> @ <postfix> @4IA; // The first mangling is what MSVC uses to guard static locals in inline; // functions. It uses a different mangling in external functions to support; // guarding more than 32 variables. MSVC rejects inline functions with more; // than 32 static locals. We don't fully implement the second mangling; // because those guards are not externally visible, and instead use LLVM's; // default renaming when creating a new guard variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:62,Modifiability,variab,variable,62,"// If we do not have a discriminator and are emitting a guard variable for; // use at global scope, then mangling the nested name will not be enough to; // remove ambiguities.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:46,Testability,stub,stubs,46,"// This is the function class mangling. These stubs are global, non-variadic,; // cdecl functions that return void and take no args.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:355,Usability,simpl,simple,355,"// <char-type> ::= 0 # char, char16_t, char32_t; // # (little endian char data in mangling); // ::= 1 # wchar_t (big endian char data in mangling); //; // <literal-length> ::= <non-negative integer> # the length of the literal; //; // <encoded-crc> ::= <hex digit>+ @ # crc of the literal including; // # trailing null bytes; //; // <encoded-string> ::= <simple character> # uninteresting character; // ::= '?$' <hex digit> <hex digit> # these two nibbles; // # encode the byte for the; // # character; // ::= '?' [a-z] # \xe1 - \xfa; // ::= '?' [A-Z] # \xc1 - \xda; // ::= '?' [0-9] # [,/\:. \n\t'-]; //; // <literal> ::= '??_C@_' <char-type> <literal-length> <encoded-crc>; // <encoded-string> '@'",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp:42,Integrability,depend,dependent,42,// Identifier specifiers always represent dependent types,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp:37,Integrability,depend,dependent,37,// FIXME: must also be instantiation-dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp:287,Integrability,depend,dependent,287,"// Nested-name-specifiers are intended to contain minimally-qualified; // types. An actual ElaboratedType will not occur, since we'll store; // just the type that is referred to in the nested-name-specifier (e.g.,; // a TypedefType, TagType, etc.). However, when we are dealing with; // dependent template-id types (e.g., Outer<T>::template Inner<U>),; // the type requires its own nested-name-specifier for uniqueness, so we; // suppress that nested-name-specifier during printing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp:4,Performance,Load,Load,4,/// Load a (possibly unaligned) source location from a given address; /// and offset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp:4,Performance,Load,Load,4,/// Load a (possibly unaligned) pointer from a given address and; /// offset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp:124,Energy Efficiency,allocate,allocated,124,"// FIXME: After copying the source-location information, should we free; // our (temporary) buffer and adopt the ASTContext-allocated memory?; // Doing so would optimize repeated calls to getWithLocInContext().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp:161,Performance,optimiz,optimize,161,"// FIXME: After copying the source-location information, should we free; // our (temporary) buffer and adopt the ASTContext-allocated memory?; // Doing so would optimize repeated calls to getWithLocInContext().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/NestedNameSpecifier.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp:15,Security,hash,hash,15,// Compute the hash of the method as if it has no body.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp:161,Safety,detect,detecting,161,"// Compare the hash generated to the hash stored. A difference means; // that a body was present in the original source. Due to merging,; // the standard way of detecting a body will not work.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp:15,Security,hash,hash,15,"// Compare the hash generated to the hash stored. A difference means; // that a body was present in the original source. Due to merging,; // the standard way of detecting a body will not work.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp:37,Security,hash,hash,37,"// Compare the hash generated to the hash stored. A difference means; // that a body was present in the original source. Due to merging,; // the standard way of detecting a body will not work.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp:9,Availability,error,error,9,"// If no error has been generated before now, assume the problem is in; // the body and generate a message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp:99,Integrability,message,message,99,"// If no error has been generated before now, assume the problem is in; // the body and generate a message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp:14,Integrability,interface,interfaces,14,// Check both interfaces reference the same protocols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp:44,Integrability,protocol,protocols,44,// Check both interfaces reference the same protocols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp:16,Security,access,access,16,// Check if the access match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp:14,Integrability,protocol,protocols,14,// Check both protocols reference the same protocols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp:43,Integrability,protocol,protocols,43,// Check both protocols reference the same protocols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRDiagsEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp:46,Availability,failure,failures,46,"//===-- ODRHash.cpp - Hashing to diagnose ODR failures ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements the ODRHash class, which calculates a hash based; /// on AST nodes, which is stable across different runs.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp:22,Security,Hash,Hashing,22,"//===-- ODRHash.cpp - Hashing to diagnose ODR failures ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements the ODRHash class, which calculates a hash based; /// on AST nodes, which is stable across different runs.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp:455,Security,hash,hash,455,"//===-- ODRHash.cpp - Hashing to diagnose ODR failures ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements the ODRHash class, which calculates a hash based; /// on AST nodes, which is stable across different runs.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp:119,Security,hash,hash,119,"// There are integrals (e.g.: _BitInt(128)) that cannot be represented as; // any builtin integral type, so we use the hash of APSInt instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp:19,Integrability,protocol,protocols,19,// Hash referenced protocols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp:3,Security,Hash,Hash,3,// Hash referenced protocols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp:38,Integrability,protocol,protocol,38,// Hash the name only as a referenced protocol can be a forward declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp:3,Security,Hash,Hash,3,// Hash the name only as a referenced protocol can be a forward declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp:19,Integrability,protocol,protocols,19,// Hash referenced protocols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp:3,Security,Hash,Hash,3,// Hash referenced protocols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp:38,Integrability,protocol,protocol,38,// Hash the name only as a referenced protocol can be a forward declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp:3,Security,Hash,Hash,3,// Hash the name only as a referenced protocol can be a forward declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp:102,Energy Efficiency,reduce,reduce,102,// If this was a specialization we should take into account its template; // arguments. This helps to reduce collisions coming when visiting template; // specialization types (eg. when processing type template arguments).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp:50,Security,hash,hash,50,"// 'APValue::Profile' uses pointer values to make hash for LValue and; // MemberPointer, but they differ from one compiler invocation to another.; // So, handle them explicitly here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ODRHash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ODRHash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate space for private variables and initializer expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:30,Modifiability,variab,variables,30,// Allocate space for private variables and initializer expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:44,Deployability,Update,Updates,44,"// Allocate space for 5 lists (Vars, Inits, Updates, Finals), 2 expressions; // (Step and CalcStep), list of used expression + step.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate space for 5 lists (Vars, Inits, Updates, Finals), 2 expressions; // (Step and CalcStep), list of used expression + step.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:8,Deployability,update,update,8,"// Fill update and final expressions with zeroes, they are provided later,; // after the directive construction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:44,Deployability,Update,Updates,44,"// Allocate space for 5 lists (Vars, Inits, Updates, Finals), 2 expressions; // (Step and CalcStep), list of used expression + step.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate space for 5 lists (Vars, Inits, Updates, Finals), 2 expressions; // (Step and CalcStep), list of used expression + step.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate space for private variables and initializer expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:30,Modifiability,variab,variables,30,// Allocate space for private variables and initializer expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:2,Integrability,depend,depend-modifier,2,/*depend-modifier*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:2,Integrability,depend,depend-modifier,2,/*depend-modifier*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:14,Energy Efficiency,allocate,allocate,14,// We need to allocate:; // 2 x NumVars x Expr* - we have an original list expression and an associated; // user-defined mapper for each clause list entry.; // NumUniqueDeclarations x ValueDecl* - unique base declarations associated; // with each component list.; // (NumUniqueDeclarations + NumComponentLists) x unsigned - we specify the; // number of lists for each unique declaration and the size of each component; // list.; // NumComponents x MappableComponent - the total of all the components in all; // the lists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:14,Energy Efficiency,allocate,allocate,14,// We need to allocate:; // 2 x NumVars x Expr* - we have an original list expression and an associated; // user-defined mapper for each clause list entry.; // NumUniqueDeclarations x ValueDecl* - unique base declarations associated; // with each component list.; // (NumUniqueDeclarations + NumComponentLists) x unsigned - we specify the; // number of lists for each unique declaration and the size of each component; // list.; // NumComponents x MappableComponent - the total of all the components in all; // the lists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:14,Energy Efficiency,allocate,allocate,14,// We need to allocate:; // 2 x NumVars x Expr* - we have an original list expression and an associated; // user-defined mapper for each clause list entry.; // NumUniqueDeclarations x ValueDecl* - unique base declarations associated; // with each component list.; // (NumUniqueDeclarations + NumComponentLists) x unsigned - we specify the; // number of lists for each unique declaration and the size of each component; // list.; // NumComponents x MappableComponent - the total of all the components in all; // the lists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:14,Energy Efficiency,allocate,allocate,14,// We need to allocate:; // NumVars x Expr* - we have an original list expression for each clause; // list entry.; // NumUniqueDeclarations x ValueDecl* - unique base declarations associated; // with each component list.; // (NumUniqueDeclarations + NumComponentLists) x unsigned - we specify the; // number of lists for each unique declaration and the size of each component; // list.; // NumComponents x MappableComponent - the total of all the components in all; // the lists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:14,Energy Efficiency,allocate,allocate,14,// We need to allocate:; // 3 x NumVars x Expr* - we have an original list expression for each clause; // list entry and an equal number of private copies and inits.; // NumUniqueDeclarations x ValueDecl* - unique base declarations associated; // with each component list.; // (NumUniqueDeclarations + NumComponentLists) x unsigned - we specify the; // number of lists for each unique declaration and the size of each component; // list.; // NumComponents x MappableComponent - the total of all the components in all; // the lists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:14,Energy Efficiency,allocate,allocate,14,// We need to allocate:; // NumVars x Expr* - we have an original list expression for each clause list; // entry.; // NumUniqueDeclarations x ValueDecl* - unique base declarations associated; // with each component list.; // (NumUniqueDeclarations + NumComponentLists) x unsigned - we specify the; // number of lists for each unique declaration and the size of each component; // list.; // NumComponents x MappableComponent - the total of all the components in all; // the lists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:14,Energy Efficiency,allocate,allocate,14,// We need to allocate:; // NumVars x Expr* - we have an original list expression for each clause list; // entry.; // NumUniqueDeclarations x ValueDecl* - unique base declarations associated; // with each component list.; // (NumUniqueDeclarations + NumComponentLists) x unsigned - we specify the; // number of lists for each unique declaration and the size of each component; // list.; // NumComponents x MappableComponent - the total of all the components in all; // the lists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate space for nontemporal variables + private references.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp:34,Modifiability,variab,variables,34,// Allocate space for nontemporal variables + private references.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/OpenMPClause.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ParentMap.cpp:33,Usability,clear,clear,33,"// If we are rebuilding the map, clear out any existing state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ParentMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ParentMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ParentMap.cpp:39,Energy Efficiency,consumption,consumption,39,// Ignore parents that don't guarantee consumption.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ParentMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ParentMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ParentMapContext.cpp:100,Availability,avail,available,100,"// FIXME: Currently we add the same parent multiple times, but only; // when no memoization data is available for the type.; // For example when we visit all subexpressions of template; // instantiations; this is suboptimal, but benign: the only way to; // visit those is with hasAncestor / hasParent, and those do not create; // new matches.; // The plan is to enable DynTypedNode to be storable in a map or hash; // map. The main problem there is to implement hash functions /; // comparison operators for all types that DynTypedNode supports that; // do not have pointer identity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ParentMapContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ParentMapContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ParentMapContext.cpp:409,Security,hash,hash,409,"// FIXME: Currently we add the same parent multiple times, but only; // when no memoization data is available for the type.; // For example when we visit all subexpressions of template; // instantiations; this is suboptimal, but benign: the only way to; // visit those is with hasAncestor / hasParent, and those do not create; // new matches.; // The plan is to enable DynTypedNode to be storable in a map or hash; // map. The main problem there is to implement hash functions /; // comparison operators for all types that DynTypedNode supports that; // do not have pointer identity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ParentMapContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ParentMapContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ParentMapContext.cpp:462,Security,hash,hash,462,"// FIXME: Currently we add the same parent multiple times, but only; // when no memoization data is available for the type.; // For example when we visit all subexpressions of template; // instantiations; this is suboptimal, but benign: the only way to; // visit those is with hasAncestor / hasParent, and those do not create; // new matches.; // The plan is to enable DynTypedNode to be storable in a map or hash; // map. The main problem there is to implement hash functions /; // comparison operators for all types that DynTypedNode supports that; // do not have pointer identity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ParentMapContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ParentMapContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp:53,Availability,error,errors,53,"// Detect spurious null characters, which are likely errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp:3,Safety,Detect,Detect,3,"// Detect spurious null characters, which are likely errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp:152,Availability,error,error,152,"// Look for the Objective-C modifier flags, if any.; // We parse these here, even if they don't apply to; // the conversion specifier, and then emit an error; // later if the conversion specifier isn't '@'. This; // enables better recovery, and we don't know if; // these flags are applicable until later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp:231,Availability,recover,recovery,231,"// Look for the Objective-C modifier flags, if any.; // We parse these here, even if they don't apply to; // the conversion specifier, and then emit an error; // later if the conversion specifier isn't '@'. This; // enables better recovery, and we don't know if; // these flags are applicable until later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp:231,Safety,recover,recovery,231,"// Look for the Objective-C modifier flags, if any.; // We parse these here, even if they don't apply to; // the conversion specifier, and then emit an error; // later if the conversion specifier isn't '@'. This; // enables better recovery, and we don't know if; // these flags are applicable until later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp:53,Availability,error,errors,53,"// Detect spurious null characters, which are likely errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp:3,Safety,Detect,Detect,3,"// Detect spurious null characters, which are likely errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp:19,Availability,error,error,19,"// Did a fail-stop error of any kind occur when parsing the specifier?; // If so, don't do any more processing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp:45,Availability,error,error,45,// Did we exhaust the string or encounter an error that; // we can recover from?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp:67,Availability,recover,recover,67,// Did we exhaust the string or encounter an error that; // we can recover from?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp:67,Safety,recover,recover,67,// Did we exhaust the string or encounter an error that; // we can recover from?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp:19,Availability,error,error,19,"// Did a fail-stop error of any kind occur when parsing the specifier?; // If so, don't do any more processing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp:45,Availability,error,error,45,// Did we exhaust the string or encounter an error that; // we can recover from?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp:67,Availability,recover,recover,67,// Did we exhaust the string or encounter an error that; // we can recover from?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp:67,Safety,recover,recover,67,// Did we exhaust the string or encounter an error that; // we can recover from?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp:3,Testability,Test,Test,3,// Test for Floating type first as LongDouble can pass isUnsignedIntegerType,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp:68,Integrability,depend,dependent,68,// ArgTDecl won't be NULL because we asserted that this isn't a; // dependent context very early in the call chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp:37,Testability,assert,asserted,37,// ArgTDecl won't be NULL because we asserted that this isn't a; // dependent context very early in the call chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp:191,Availability,error,error,191,"// DependentTemplateTypes exist within template declarations and; // definitions. Therefore we shouldn't encounter them at the end of; // a translation unit. If we do, the caller has made an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp:3,Integrability,Depend,DependentTemplateTypes,3,"// DependentTemplateTypes exist within template declarations and; // definitions. Therefore we shouldn't encounter them at the end of; // a translation unit. If we do, the caller has made an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp:71,Energy Efficiency,allocate,allocate,71,"// If a fully qualified arg is different from the unqualified arg,; // allocate new type in the AST.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp:71,Energy Efficiency,allocate,allocate,71,"// If a fully qualified arg is different from the unqualified arg,; // allocate new type in the AST.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp:97,Integrability,depend,dependent,97,"// We are in the case of a type(def) that was declared in a; // class template but is *not* type dependent. In clang, it; // gets attached to the class template declaration rather than; // any specific class template instantiation. This result in; // 'odd' fully qualified typename:; //; // vector<_Tp,_Alloc>::size_type; //; // Make the situation is 'useable' but looking a bit odd by; // picking a random instance as the declaring context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp:125,Security,access,accessible,125,"// Decl's context was neither the TU, a namespace, nor a; // TagDecl, which means it is a type local to a scope, and not; // accessible at the end of the TU.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/QualTypeNames.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Randstruct.cpp:74,Performance,cache,cache-line,74,// The Bucket class holds the struct fields we're trying to fill to a; // cache-line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Randstruct.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Randstruct.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Randstruct.cpp:46,Performance,cache,cache-line,46,// All of the Buckets produced by best-effort cache-line algorithm.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Randstruct.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Randstruct.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Randstruct.cpp:64,Performance,cache,cache-line,64,// The current bucket of fields that we are trying to fill to a cache-line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Randstruct.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Randstruct.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Randstruct.cpp:27,Modifiability,flexible,flexible,27,"// Struct might end with a flexible array or an array of size 0 or 1,; // in which case we don't want to randomize it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Randstruct.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Randstruct.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Randstruct.cpp:16,Modifiability,flexible,flexible,16,// Add back the flexible array.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Randstruct.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Randstruct.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RawCommentList.cpp:39,Security,access,accessor,39,// Lazily initialize RawText using the accessor before using it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RawCommentList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RawCommentList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RawCommentList.cpp:39,Security,access,accessor,39,// Lazily initialize RawText using the accessor before using it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RawCommentList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RawCommentList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayout.cpp:418,Integrability,interface,interface,418,"//===- RecordLayout.cpp - Layout information for a struct/union -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the RecordLayout interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:373,Energy Efficiency,allocate,allocated,373,"/// BaseSubobjectInfo - Represents a single base subobject in a complete class.; /// For a class hierarchy like; ///; /// class A { };; /// class B : A { };; /// class C : A, B { };; ///; /// The BaseSubobjectInfo graph for C will have three BaseSubobjectInfo; /// instances, one for B and two for A.; ///; /// If a base is virtual, it will only have one BaseSubobjectInfo allocated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:123,Availability,avail,available,123,"/// Externally provided layout. Typically used when the AST source, such; /// as DWARF, lacks all the information that was available at compile time, such; /// as alignment attributes on fields and pragmas in effect.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:92,Safety,avoid,avoid,92,"// If we have empty structures inside a union, we can assign both; // the same offset. Just avoid pushing them twice in the list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:3,Deployability,Update,Update,3,// Update the empty class offset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:23,Modifiability,variab,variables,23,// Traverse all member variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:23,Modifiability,variab,variables,23,// Traverse all member variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:62,Deployability,update,update,62,// We are able to place the base at this offset. Make sure to update the; // empty base subobject map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:23,Modifiability,variab,variables,23,// Traverse all member variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:77,Deployability,update,update,77,// We are able to place the member variable at this offset.; // Make sure to update the empty field subobject map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:35,Modifiability,variab,variable,35,// We are able to place the member variable at this offset.; // Make sure to update the empty field subobject map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:23,Modifiability,variab,variables,23,// Traverse all member variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:39,Deployability,update,update,39,// If we have an array type we need to update every element.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:94,Modifiability,inherit,inheriting,94,"/// HasOwnVFPtr - Whether the class provides its own vtable/vftbl; /// pointer, as opposed to inheriting one from a primary base class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:78,Modifiability,inherit,inheritance,78,/// FirstNearlyEmptyVBase - The first nearly empty virtual base class in; /// inheritance graph order. Used for determining the primary base class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:79,Safety,avoid,avoid,79,"/// VisitedVirtualBases - A set of all the visited virtual bases, used to; /// avoid visiting virtual bases more than once.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:3,Deployability,Update,Update,3,// Update the alignment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:8,Energy Efficiency,power,power,8,// AIX `power` alignment does not apply the preferred alignment for; // non-union classes if the source of the alignment (the current base in; // this context) follows introduction of the first subobject with; // exclusively allocated space or zero-extent array.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:225,Energy Efficiency,allocate,allocated,225,// AIX `power` alignment does not apply the preferred alignment for; // non-union classes if the source of the alignment (the current base in; // this context) follows introduction of the first subobject with; // exclusively allocated space or zero-extent array.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:78,Modifiability,inherit,inherited,78,"// By handling a base class that is not empty, we're handling the; // ""first (inherited) member"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:21,Deployability,update,update,21,"// On PS4/PS5, don't update the alignment, to preserve compatibility.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:3,Deployability,Update,Update,3,// Update the data size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:3,Deployability,Update,Update,3,// Update based on external alignment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:19,Energy Efficiency,allocate,allocated,19,"// The bitfield is allocated starting at the next offset aligned; // appropriately for T', with length n bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:3,Deployability,Update,Update,3,// Update the size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:122,Availability,avail,available,122,"// UnfilledBitsInLastUnit is the difference between the end of the; // last allocated bitfield (i.e. the first bit offset available for; // bitfields) and the end of the current data size in bits (i.e. the; // first bit offset available for non-bitfields). The current data; // size in bits is always a multiple of the char size; additionally,; // for ms_struct records it's also a multiple of the; // LastBitfieldStorageUnitSize (if set).; // The struct-layout algorithm is dictated by the platform ABI,; // which in principle could use almost any rules it likes. In; // practice, UNIXy targets tend to inherit the algorithm described; // in the System V generic ABI. The basic bitfield layout rule in; // System V is to place bitfields at the next available bit offset; // where the entire bitfield would fit in an aligned storage unit of; // the declared type; it's okay if an earlier or later non-bitfield; // is allocated in the same storage unit. However, some targets; // (those that !useBitFieldTypeAlignment(), e.g. ARM APCS) don't; // require this storage unit to be aligned, and therefore always put; // the bitfield at the next available bit offset.; // ms_struct basically requests a complete replacement of the; // platform ABI's struct-layout algorithm, with the high-level goal; // of duplicating MSVC's layout. For non-bitfields, this follows; // the standard algorithm. The basic bitfield layout rule is to; // allocate an entire unit of the bitfield's declared type; // (e.g. 'unsigned long'), then parcel it up among successive; // bitfields whose declared types have the same size, making a new; // unit as soon as the last can no longer store the whole value.; // Since it completely replaces the platform ABI's algorithm,; // settings like !useBitFieldTypeAlignment() do not apply.; // A zero-width bitfield forces the use of a new storage unit for; // later bitfields. In general, this occurs by rounding up the; // current size of the struct as if the algorithm were about to;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:227,Availability,avail,available,227,"// UnfilledBitsInLastUnit is the difference between the end of the; // last allocated bitfield (i.e. the first bit offset available for; // bitfields) and the end of the current data size in bits (i.e. the; // first bit offset available for non-bitfields). The current data; // size in bits is always a multiple of the char size; additionally,; // for ms_struct records it's also a multiple of the; // LastBitfieldStorageUnitSize (if set).; // The struct-layout algorithm is dictated by the platform ABI,; // which in principle could use almost any rules it likes. In; // practice, UNIXy targets tend to inherit the algorithm described; // in the System V generic ABI. The basic bitfield layout rule in; // System V is to place bitfields at the next available bit offset; // where the entire bitfield would fit in an aligned storage unit of; // the declared type; it's okay if an earlier or later non-bitfield; // is allocated in the same storage unit. However, some targets; // (those that !useBitFieldTypeAlignment(), e.g. ARM APCS) don't; // require this storage unit to be aligned, and therefore always put; // the bitfield at the next available bit offset.; // ms_struct basically requests a complete replacement of the; // platform ABI's struct-layout algorithm, with the high-level goal; // of duplicating MSVC's layout. For non-bitfields, this follows; // the standard algorithm. The basic bitfield layout rule is to; // allocate an entire unit of the bitfield's declared type; // (e.g. 'unsigned long'), then parcel it up among successive; // bitfields whose declared types have the same size, making a new; // unit as soon as the last can no longer store the whole value.; // Since it completely replaces the platform ABI's algorithm,; // settings like !useBitFieldTypeAlignment() do not apply.; // A zero-width bitfield forces the use of a new storage unit for; // later bitfields. In general, this occurs by rounding up the; // current size of the struct as if the algorithm were about to;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:750,Availability,avail,available,750,"// UnfilledBitsInLastUnit is the difference between the end of the; // last allocated bitfield (i.e. the first bit offset available for; // bitfields) and the end of the current data size in bits (i.e. the; // first bit offset available for non-bitfields). The current data; // size in bits is always a multiple of the char size; additionally,; // for ms_struct records it's also a multiple of the; // LastBitfieldStorageUnitSize (if set).; // The struct-layout algorithm is dictated by the platform ABI,; // which in principle could use almost any rules it likes. In; // practice, UNIXy targets tend to inherit the algorithm described; // in the System V generic ABI. The basic bitfield layout rule in; // System V is to place bitfields at the next available bit offset; // where the entire bitfield would fit in an aligned storage unit of; // the declared type; it's okay if an earlier or later non-bitfield; // is allocated in the same storage unit. However, some targets; // (those that !useBitFieldTypeAlignment(), e.g. ARM APCS) don't; // require this storage unit to be aligned, and therefore always put; // the bitfield at the next available bit offset.; // ms_struct basically requests a complete replacement of the; // platform ABI's struct-layout algorithm, with the high-level goal; // of duplicating MSVC's layout. For non-bitfields, this follows; // the standard algorithm. The basic bitfield layout rule is to; // allocate an entire unit of the bitfield's declared type; // (e.g. 'unsigned long'), then parcel it up among successive; // bitfields whose declared types have the same size, making a new; // unit as soon as the last can no longer store the whole value.; // Since it completely replaces the platform ABI's algorithm,; // settings like !useBitFieldTypeAlignment() do not apply.; // A zero-width bitfield forces the use of a new storage unit for; // later bitfields. In general, this occurs by rounding up the; // current size of the struct as if the algorithm were about to;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:1140,Availability,avail,available,1140,"ld (i.e. the first bit offset available for; // bitfields) and the end of the current data size in bits (i.e. the; // first bit offset available for non-bitfields). The current data; // size in bits is always a multiple of the char size; additionally,; // for ms_struct records it's also a multiple of the; // LastBitfieldStorageUnitSize (if set).; // The struct-layout algorithm is dictated by the platform ABI,; // which in principle could use almost any rules it likes. In; // practice, UNIXy targets tend to inherit the algorithm described; // in the System V generic ABI. The basic bitfield layout rule in; // System V is to place bitfields at the next available bit offset; // where the entire bitfield would fit in an aligned storage unit of; // the declared type; it's okay if an earlier or later non-bitfield; // is allocated in the same storage unit. However, some targets; // (those that !useBitFieldTypeAlignment(), e.g. ARM APCS) don't; // require this storage unit to be aligned, and therefore always put; // the bitfield at the next available bit offset.; // ms_struct basically requests a complete replacement of the; // platform ABI's struct-layout algorithm, with the high-level goal; // of duplicating MSVC's layout. For non-bitfields, this follows; // the standard algorithm. The basic bitfield layout rule is to; // allocate an entire unit of the bitfield's declared type; // (e.g. 'unsigned long'), then parcel it up among successive; // bitfields whose declared types have the same size, making a new; // unit as soon as the last can no longer store the whole value.; // Since it completely replaces the platform ABI's algorithm,; // settings like !useBitFieldTypeAlignment() do not apply.; // A zero-width bitfield forces the use of a new storage unit for; // later bitfields. In general, this occurs by rounding up the; // current size of the struct as if the algorithm were about to; // place a non-bitfield of the field's formal type. Usually this; // does not change the al",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:2866,Availability,avail,available,2866,"/ platform ABI's struct-layout algorithm, with the high-level goal; // of duplicating MSVC's layout. For non-bitfields, this follows; // the standard algorithm. The basic bitfield layout rule is to; // allocate an entire unit of the bitfield's declared type; // (e.g. 'unsigned long'), then parcel it up among successive; // bitfields whose declared types have the same size, making a new; // unit as soon as the last can no longer store the whole value.; // Since it completely replaces the platform ABI's algorithm,; // settings like !useBitFieldTypeAlignment() do not apply.; // A zero-width bitfield forces the use of a new storage unit for; // later bitfields. In general, this occurs by rounding up the; // current size of the struct as if the algorithm were about to; // place a non-bitfield of the field's formal type. Usually this; // does not change the alignment of the struct itself, but it does; // on some targets (those that useZeroLengthBitfieldAlignment(),; // e.g. ARM). In ms_struct layout, zero-width bitfields are; // ignored unless they follow a non-zero-width bitfield.; // A field alignment restriction (e.g. from #pragma pack) or; // specification (e.g. from __attribute__((aligned))) changes the; // formal alignment of the field. For System V, this alters the; // required alignment of the notional storage unit that must contain; // the bitfield. For ms_struct, this only affects the placement of; // new storage units. In both cases, the effect of #pragma pack is; // ignored on zero-width bitfields.; // On System V, a packed field (e.g. from #pragma pack or; // __attribute__((packed))) always uses the next available bit; // offset.; // In an ms_struct struct, the alignment of a fundamental type is; // always equal to its size. This is necessary in order to mimic; // the i386 alignment rules on targets which might not fully align; // all types (e.g. Darwin PPC32, where alignof(long long) == 4).; // First, some simple bookkeeping to perform for ms_struct structs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:76,Energy Efficiency,allocate,allocated,76,"// UnfilledBitsInLastUnit is the difference between the end of the; // last allocated bitfield (i.e. the first bit offset available for; // bitfields) and the end of the current data size in bits (i.e. the; // first bit offset available for non-bitfields). The current data; // size in bits is always a multiple of the char size; additionally,; // for ms_struct records it's also a multiple of the; // LastBitfieldStorageUnitSize (if set).; // The struct-layout algorithm is dictated by the platform ABI,; // which in principle could use almost any rules it likes. In; // practice, UNIXy targets tend to inherit the algorithm described; // in the System V generic ABI. The basic bitfield layout rule in; // System V is to place bitfields at the next available bit offset; // where the entire bitfield would fit in an aligned storage unit of; // the declared type; it's okay if an earlier or later non-bitfield; // is allocated in the same storage unit. However, some targets; // (those that !useBitFieldTypeAlignment(), e.g. ARM APCS) don't; // require this storage unit to be aligned, and therefore always put; // the bitfield at the next available bit offset.; // ms_struct basically requests a complete replacement of the; // platform ABI's struct-layout algorithm, with the high-level goal; // of duplicating MSVC's layout. For non-bitfields, this follows; // the standard algorithm. The basic bitfield layout rule is to; // allocate an entire unit of the bitfield's declared type; // (e.g. 'unsigned long'), then parcel it up among successive; // bitfields whose declared types have the same size, making a new; // unit as soon as the last can no longer store the whole value.; // Since it completely replaces the platform ABI's algorithm,; // settings like !useBitFieldTypeAlignment() do not apply.; // A zero-width bitfield forces the use of a new storage unit for; // later bitfields. In general, this occurs by rounding up the; // current size of the struct as if the algorithm were about to;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:917,Energy Efficiency,allocate,allocated,917,"// UnfilledBitsInLastUnit is the difference between the end of the; // last allocated bitfield (i.e. the first bit offset available for; // bitfields) and the end of the current data size in bits (i.e. the; // first bit offset available for non-bitfields). The current data; // size in bits is always a multiple of the char size; additionally,; // for ms_struct records it's also a multiple of the; // LastBitfieldStorageUnitSize (if set).; // The struct-layout algorithm is dictated by the platform ABI,; // which in principle could use almost any rules it likes. In; // practice, UNIXy targets tend to inherit the algorithm described; // in the System V generic ABI. The basic bitfield layout rule in; // System V is to place bitfields at the next available bit offset; // where the entire bitfield would fit in an aligned storage unit of; // the declared type; it's okay if an earlier or later non-bitfield; // is allocated in the same storage unit. However, some targets; // (those that !useBitFieldTypeAlignment(), e.g. ARM APCS) don't; // require this storage unit to be aligned, and therefore always put; // the bitfield at the next available bit offset.; // ms_struct basically requests a complete replacement of the; // platform ABI's struct-layout algorithm, with the high-level goal; // of duplicating MSVC's layout. For non-bitfields, this follows; // the standard algorithm. The basic bitfield layout rule is to; // allocate an entire unit of the bitfield's declared type; // (e.g. 'unsigned long'), then parcel it up among successive; // bitfields whose declared types have the same size, making a new; // unit as soon as the last can no longer store the whole value.; // Since it completely replaces the platform ABI's algorithm,; // settings like !useBitFieldTypeAlignment() do not apply.; // A zero-width bitfield forces the use of a new storage unit for; // later bitfields. In general, this occurs by rounding up the; // current size of the struct as if the algorithm were about to;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:1429,Energy Efficiency,allocate,allocate,1429,"; // The struct-layout algorithm is dictated by the platform ABI,; // which in principle could use almost any rules it likes. In; // practice, UNIXy targets tend to inherit the algorithm described; // in the System V generic ABI. The basic bitfield layout rule in; // System V is to place bitfields at the next available bit offset; // where the entire bitfield would fit in an aligned storage unit of; // the declared type; it's okay if an earlier or later non-bitfield; // is allocated in the same storage unit. However, some targets; // (those that !useBitFieldTypeAlignment(), e.g. ARM APCS) don't; // require this storage unit to be aligned, and therefore always put; // the bitfield at the next available bit offset.; // ms_struct basically requests a complete replacement of the; // platform ABI's struct-layout algorithm, with the high-level goal; // of duplicating MSVC's layout. For non-bitfields, this follows; // the standard algorithm. The basic bitfield layout rule is to; // allocate an entire unit of the bitfield's declared type; // (e.g. 'unsigned long'), then parcel it up among successive; // bitfields whose declared types have the same size, making a new; // unit as soon as the last can no longer store the whole value.; // Since it completely replaces the platform ABI's algorithm,; // settings like !useBitFieldTypeAlignment() do not apply.; // A zero-width bitfield forces the use of a new storage unit for; // later bitfields. In general, this occurs by rounding up the; // current size of the struct as if the algorithm were about to; // place a non-bitfield of the field's formal type. Usually this; // does not change the alignment of the struct itself, but it does; // on some targets (those that useZeroLengthBitfieldAlignment(),; // e.g. ARM). In ms_struct layout, zero-width bitfields are; // ignored unless they follow a non-zero-width bitfield.; // A field alignment restriction (e.g. from #pragma pack) or; // specification (e.g. from __attribute__((aligned))) cha",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:604,Modifiability,inherit,inherit,604,"// UnfilledBitsInLastUnit is the difference between the end of the; // last allocated bitfield (i.e. the first bit offset available for; // bitfields) and the end of the current data size in bits (i.e. the; // first bit offset available for non-bitfields). The current data; // size in bits is always a multiple of the char size; additionally,; // for ms_struct records it's also a multiple of the; // LastBitfieldStorageUnitSize (if set).; // The struct-layout algorithm is dictated by the platform ABI,; // which in principle could use almost any rules it likes. In; // practice, UNIXy targets tend to inherit the algorithm described; // in the System V generic ABI. The basic bitfield layout rule in; // System V is to place bitfields at the next available bit offset; // where the entire bitfield would fit in an aligned storage unit of; // the declared type; it's okay if an earlier or later non-bitfield; // is allocated in the same storage unit. However, some targets; // (those that !useBitFieldTypeAlignment(), e.g. ARM APCS) don't; // require this storage unit to be aligned, and therefore always put; // the bitfield at the next available bit offset.; // ms_struct basically requests a complete replacement of the; // platform ABI's struct-layout algorithm, with the high-level goal; // of duplicating MSVC's layout. For non-bitfields, this follows; // the standard algorithm. The basic bitfield layout rule is to; // allocate an entire unit of the bitfield's declared type; // (e.g. 'unsigned long'), then parcel it up among successive; // bitfields whose declared types have the same size, making a new; // unit as soon as the last can no longer store the whole value.; // Since it completely replaces the platform ABI's algorithm,; // settings like !useBitFieldTypeAlignment() do not apply.; // A zero-width bitfield forces the use of a new storage unit for; // later bitfields. In general, this occurs by rounding up the; // current size of the struct as if the algorithm were about to;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:3197,Performance,perform,perform,3197,"/ platform ABI's struct-layout algorithm, with the high-level goal; // of duplicating MSVC's layout. For non-bitfields, this follows; // the standard algorithm. The basic bitfield layout rule is to; // allocate an entire unit of the bitfield's declared type; // (e.g. 'unsigned long'), then parcel it up among successive; // bitfields whose declared types have the same size, making a new; // unit as soon as the last can no longer store the whole value.; // Since it completely replaces the platform ABI's algorithm,; // settings like !useBitFieldTypeAlignment() do not apply.; // A zero-width bitfield forces the use of a new storage unit for; // later bitfields. In general, this occurs by rounding up the; // current size of the struct as if the algorithm were about to; // place a non-bitfield of the field's formal type. Usually this; // does not change the alignment of the struct itself, but it does; // on some targets (those that useZeroLengthBitfieldAlignment(),; // e.g. ARM). In ms_struct layout, zero-width bitfields are; // ignored unless they follow a non-zero-width bitfield.; // A field alignment restriction (e.g. from #pragma pack) or; // specification (e.g. from __attribute__((aligned))) changes the; // formal alignment of the field. For System V, this alters the; // required alignment of the notional storage unit that must contain; // the bitfield. For ms_struct, this only affects the placement of; // new storage units. In both cases, the effect of #pragma pack is; // ignored on zero-width bitfields.; // On System V, a packed field (e.g. from #pragma pack or; // __attribute__((packed))) always uses the next available bit; // offset.; // In an ms_struct struct, the alignment of a fundamental type is; // always equal to its size. This is necessary in order to mimic; // the i386 alignment rules on targets which might not fully align; // all types (e.g. Darwin PPC32, where alignof(long long) == 4).; // First, some simple bookkeeping to perform for ms_struct structs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:3175,Usability,simpl,simple,3175,"/ platform ABI's struct-layout algorithm, with the high-level goal; // of duplicating MSVC's layout. For non-bitfields, this follows; // the standard algorithm. The basic bitfield layout rule is to; // allocate an entire unit of the bitfield's declared type; // (e.g. 'unsigned long'), then parcel it up among successive; // bitfields whose declared types have the same size, making a new; // unit as soon as the last can no longer store the whole value.; // Since it completely replaces the platform ABI's algorithm,; // settings like !useBitFieldTypeAlignment() do not apply.; // A zero-width bitfield forces the use of a new storage unit for; // later bitfields. In general, this occurs by rounding up the; // current size of the struct as if the algorithm were about to; // place a non-bitfield of the field's formal type. Usually this; // does not change the alignment of the struct itself, but it does; // on some targets (those that useZeroLengthBitfieldAlignment(),; // e.g. ARM). In ms_struct layout, zero-width bitfields are; // ignored unless they follow a non-zero-width bitfield.; // A field alignment restriction (e.g. from #pragma pack) or; // specification (e.g. from __attribute__((aligned))) changes the; // formal alignment of the field. For System V, this alters the; // required alignment of the notional storage unit that must contain; // the bitfield. For ms_struct, this only affects the placement of; // new storage units. In both cases, the effect of #pragma pack is; // ignored on zero-width bitfields.; // On System V, a packed field (e.g. from #pragma pack or; // __attribute__((packed))) always uses the next available bit; // offset.; // In an ms_struct struct, the alignment of a fundamental type is; // always equal to its size. This is necessary in order to mimic; // the i386 alignment rules on targets which might not fully align; // all types (e.g. Darwin PPC32, where alignof(long long) == 4).; // First, some simple bookkeeping to perform for ms_struct structs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:20,Availability,avail,available,20,// Compute the next available bit offset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:3,Deployability,Update,Update,3,"// Update DataSize to include the last byte containing (part of) the bitfield.; // For unions, this is just a max operation, as usual.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:18,Energy Efficiency,allocate,allocate,18,"// For ms_struct, allocate the entire storage unit --- unless this; // is a zero-width bitfield, in which case just use a size of 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:14,Energy Efficiency,allocate,allocate,14,"// Otherwise, allocate just the number of bytes required to store; // the bitfield.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:54,Energy Efficiency,allocate,allocate,54,"// For non-zero-width bitfields in ms_struct structs, allocate a new; // storage unit if necessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:18,Usability,clear,cleared,18,// We should have cleared UnfilledBitsInLastUnit in every case; // where we changed storage units.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:3,Deployability,Update,Update,3,// Update the size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:3,Modifiability,Flexible,Flexible,3,"// Flexible array members don't have any size, but they have to be; // aligned appropriately for their element type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:153,Availability,down,down,153,"// If MS bitfield layout is required, figure out what type is being; // laid out and align the field to the width of that type.; // Resolve all typedefs down to their base type and round up the field; // alignment if necessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:997,Availability,error,error,997,"// Base types with sizes that aren't a power of two don't work; // with the layout rules for MS structs. This isn't an issue in; // MSVC itself since there are no such base data types there.; // On e.g. x86_32 mingw and linux, long double is 12 bytes though.; // Any structs involving that data type obviously can't be ABI; // compatible with MSVC regardless of how it is laid out.; // Since ms_struct can be mass enabled (via a pragma or via the; // -mms-bitfields command line parameter), this can trigger for; // structs that don't actually need MSVC compatibility, so we; // need to be able to sidestep the ms_struct layout for these types.; // Since the combination of -mms-bitfields together with structs; // like max_align_t (which contains a long double) for mingw is; // quite common (and GCC handles it silently), just handle it; // silently there. For other targets that have ms_struct enabled; // (most probably via a pragma or attribute), trigger a diagnostic; // that defaults to an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:39,Energy Efficiency,power,power,39,"// Base types with sizes that aren't a power of two don't work; // with the layout rules for MS structs. This isn't an issue in; // MSVC itself since there are no such base data types there.; // On e.g. x86_32 mingw and linux, long double is 12 bytes though.; // Any structs involving that data type obviously can't be ABI; // compatible with MSVC regardless of how it is laid out.; // Since ms_struct can be mass enabled (via a pragma or via the; // -mms-bitfields command line parameter), this can trigger for; // structs that don't actually need MSVC compatibility, so we; // need to be able to sidestep the ms_struct layout for these types.; // Since the combination of -mms-bitfields together with structs; // like max_align_t (which contains a long double) for mingw is; // quite common (and GCC handles it silently), just handle it; // silently there. For other targets that have ms_struct enabled; // (most probably via a pragma or attribute), trigger a diagnostic; // that defaults to an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:224,Deployability,upgrade,upgrade,224,"// When used as part of a typedef, or together with a 'packed' attribute, the; // 'aligned' attribute can be used to decrease alignment. In that case, it; // overrides any computed alignment we have, and there is no need to upgrade; // the alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:123,Deployability,upgrade,upgrade,123,"// Enum alignment sources can be safely ignored here, because this only; // helps decide whether we need the AIX alignment upgrade, which only; // applies to floating-point types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:33,Safety,safe,safely,33,"// Enum alignment sources can be safely ignored here, because this only; // helps decide whether we need the AIX alignment upgrade, which only; // applies to floating-point types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:12,Energy Efficiency,power,power,12,"// The AIX `power` alignment rules apply the natural alignment of the; // ""first member"" if it is of a floating-point data type (or is an aggregate; // whose recursively ""first"" member or element is such a type). The alignment; // associated with these types for subsequent members use an alignment value; // where the floating-point data type is considered to have 4-byte alignment.; //; // For the purposes of the foregoing: vtable pointers, non-empty base classes,; // and zero-width bit-fields count as prior members; members of empty class; // types marked `no_unique_address` are not considered to be prior members.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:80,Integrability,message,message,80,/// Get diagnostic %select index for tag kind for; /// field padding diagnostic message.; /// WARNING: Indexes apply to particular diagnostics only!; ///; /// \returns diagnostic %select index.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:43,Integrability,interface,interfaces,43,"// We let objc ivars without warning, objc interfaces generally are not used; // for padding tricks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:20,Modifiability,polymorphi,polymorphic,20,// If a class isn't polymorphic it doesn't have a key function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:115,Security,access,accessible,115,"// While compiler may see key method in this TU, during CUDA; // compilation we should ignore methods that are not accessible; // on this side of compilation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:5636,Availability,fault,fault,5636,"t from all of its fields and bases.; // * __declspec(align) on bitfields has the effect of changing the bitfield's; // alignment instead of its required alignment. This is the only known way; // to make the alignment of a struct bigger than 8. Interestingly enough; // this alignment is also immune to the effects of #pragma pack and can be; // used to create structures with large alignment under #pragma pack.; // However, because it does not impact required alignment, such a structure,; // when used as a field or base, will not be aligned if #pragma pack is; // still active at the time of use.; //; // Known incompatibilities:; // * all: #pragma pack between fields in a record; // * 2010 and back: If the last field in a record is a bitfield, every object; // laid out after the record will have extra padding inserted before it. The; // extra padding will have size equal to the size of the storage class of the; // bitfield. 0 sized bitfields don't exhibit this behavior and the extra; // padding can be avoided by adding a 0 sized bitfield after the non-zero-; // sized bitfield.; // * 2012 and back: In 64-bit mode, if the alignment of a record is 16 or; // greater due to __declspec(align()) then a second layout phase occurs after; // The locations of the vf and vb pointers are known. This layout phase; // suffers from the ""last field is a bitfield"" bug in 2010 and results in; // _every_ field getting padding put in front of it, potentially including the; // vfptr, leaving the vfprt at a non-zero location which results in a fault if; // anything tries to read the vftbl. The second layout phase also treats; // bitfields as separate entities and gives them each storage rather than; // packing them. Additionally, because this phase appears to perform a; // (an unstable) sort on the members before laying them out and because merged; // bitfields have the same address, the bitfields end up in whatever order; // the sort left them in, a behavior we could never hope to replicate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:1477,Energy Efficiency,allocate,allocated,1477," the purposes of layout. All bases; // with vfptrs are laid out first, followed by all bases without vfptrs.; // * The Itanium equivalent vtable pointers are split into a vfptr (virtual; // function pointer) and a vbptr (virtual base pointer). They can each be; // shared with a, non-virtual bases. These bases need not be the same. vfptrs; // always occur at offset 0. vbptrs can occur at an arbitrary offset and are; // placed after the lexicographically last non-virtual base. This placement; // is always before fields but can be in the middle of the non-virtual bases; // due to the two-pass layout scheme for non-virtual-bases.; // * Virtual bases sometimes require a 'vtordisp' field that is laid out before; // the virtual base and is used in conjunction with virtual overrides during; // construction and destruction. This is always a 4 byte value and is used as; // an alternative to constructor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbp",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:1752,Integrability,inject,injected,1752," base pointer). They can each be; // shared with a, non-virtual bases. These bases need not be the same. vfptrs; // always occur at offset 0. vbptrs can occur at an arbitrary offset and are; // placed after the lexicographically last non-virtual base. This placement; // is always before fields but can be in the middle of the non-virtual bases; // due to the two-pass layout scheme for non-virtual-bases.; // * Virtual bases sometimes require a 'vtordisp' field that is laid out before; // the virtual base and is used in conjunction with virtual overrides during; // construction and destruction. This is always a 4 byte value and is used as; // an alternative to constructor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbptr is placed at the next properly aligned location. Enough padding; // is added to guarantee a fit.; // * The last zero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:1876,Integrability,inject,injection,1876," occur at offset 0. vbptrs can occur at an arbitrary offset and are; // placed after the lexicographically last non-virtual base. This placement; // is always before fields but can be in the middle of the non-virtual bases; // due to the two-pass layout scheme for non-virtual-bases.; // * Virtual bases sometimes require a 'vtordisp' field that is laid out before; // the virtual base and is used in conjunction with virtual overrides during; // construction and destruction. This is always a 4 byte value and is used as; // an alternative to constructor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbptr is placed at the next properly aligned location. Enough padding; // is added to guarantee a fit.; // * The last zero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or may alias with the first; // field, even if they are of the same type.; // * The last zero size virtual base may be placed",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:2059,Integrability,inject,injected,2059,"fields but can be in the middle of the non-virtual bases; // due to the two-pass layout scheme for non-virtual-bases.; // * Virtual bases sometimes require a 'vtordisp' field that is laid out before; // the virtual base and is used in conjunction with virtual overrides during; // construction and destruction. This is always a 4 byte value and is used as; // an alternative to constructor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbptr is placed at the next properly aligned location. Enough padding; // is added to guarantee a fit.; // * The last zero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or may alias with the first; // field, even if they are of the same type.; // * The last zero size virtual base may be placed at the end of the struct; // potentially aliasing another object.; // * The ABI attempts to avoid aliasing of zero sized bases by adding padding; // between bases o",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:2098,Integrability,inject,injected,2098,"// due to the two-pass layout scheme for non-virtual-bases.; // * Virtual bases sometimes require a 'vtordisp' field that is laid out before; // the virtual base and is used in conjunction with virtual overrides during; // construction and destruction. This is always a 4 byte value and is used as; // an alternative to constructor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbptr is placed at the next properly aligned location. Enough padding; // is added to guarantee a fit.; // * The last zero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or may alias with the first; // field, even if they are of the same type.; // * The last zero size virtual base may be placed at the end of the struct; // potentially aliasing another object.; // * The ABI attempts to avoid aliasing of zero sized bases by adding padding; // between bases or vbases with specific properties. The criteria for; // add",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:2222,Integrability,inject,injection,2222,"is laid out before; // the virtual base and is used in conjunction with virtual overrides during; // construction and destruction. This is always a 4 byte value and is used as; // an alternative to constructor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbptr is placed at the next properly aligned location. Enough padding; // is added to guarantee a fit.; // * The last zero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or may alias with the first; // field, even if they are of the same type.; // * The last zero size virtual base may be placed at the end of the struct; // potentially aliasing another object.; // * The ABI attempts to avoid aliasing of zero sized bases by adding padding; // between bases or vbases with specific properties. The criteria for; // additional padding between two bases is that the first base is zero sized; // or ends with a zero sized subobject and the sec",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:2398,Integrability,inject,injected,2398,"structor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbptr is placed at the next properly aligned location. Enough padding; // is added to guarantee a fit.; // * The last zero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or may alias with the first; // field, even if they are of the same type.; // * The last zero size virtual base may be placed at the end of the struct; // potentially aliasing another object.; // * The ABI attempts to avoid aliasing of zero sized bases by adding padding; // between bases or vbases with specific properties. The criteria for; // additional padding between two bases is that the first base is zero sized; // or ends with a zero sized subobject and the second base is zero sized or; // trails with a zero sized base or field (sharing of vfptrs can reorder the; // layout of the so the leading base is not always the first one declared).; // This rule does ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:3628,Integrability,depend,depends,3628,"ero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or may alias with the first; // field, even if they are of the same type.; // * The last zero size virtual base may be placed at the end of the struct; // potentially aliasing another object.; // * The ABI attempts to avoid aliasing of zero sized bases by adding padding; // between bases or vbases with specific properties. The criteria for; // additional padding between two bases is that the first base is zero sized; // or ends with a zero sized subobject and the second base is zero sized or; // trails with a zero sized base or field (sharing of vfptrs can reorder the; // layout of the so the leading base is not always the first one declared).; // This rule does take into account fields that are not records, so padding; // will occur even if the last field is, e.g. an int. The padding added for; // bases is 1 byte. The padding added between vbases depends on the alignment; // of the object but is at least 4 bytes (in both 32 and 64 bit modes).; // * There is no concept of non-virtual alignment, non-virtual alignment and; // alignment are always identical.; // * There is a distinction between alignment and required alignment.; // __declspec(align) changes the required alignment of a struct. This; // alignment is _always_ obeyed, even in the presence of #pragma pack. A; // record inherits required alignment from all of its fields and bases.; // * __declspec(align) on bitfields has the effect of changing the bitfield's; // alignment instead of its required alignment. This is the only known way; // to make the alignment of a struct bigger than 8. Interestingly enough; // this alignment is also immune to the effects of #pragma pack and can be; // used to create structures with large alignment under #pragma pack.; // However, because it does not impact required alignment, such a structure,; // when used as a field or base, will not be aligned if #pragma pack is; // ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:4067,Modifiability,inherit,inherits,4067,"s. The criteria for; // additional padding between two bases is that the first base is zero sized; // or ends with a zero sized subobject and the second base is zero sized or; // trails with a zero sized base or field (sharing of vfptrs can reorder the; // layout of the so the leading base is not always the first one declared).; // This rule does take into account fields that are not records, so padding; // will occur even if the last field is, e.g. an int. The padding added for; // bases is 1 byte. The padding added between vbases depends on the alignment; // of the object but is at least 4 bytes (in both 32 and 64 bit modes).; // * There is no concept of non-virtual alignment, non-virtual alignment and; // alignment are always identical.; // * There is a distinction between alignment and required alignment.; // __declspec(align) changes the required alignment of a struct. This; // alignment is _always_ obeyed, even in the presence of #pragma pack. A; // record inherits required alignment from all of its fields and bases.; // * __declspec(align) on bitfields has the effect of changing the bitfield's; // alignment instead of its required alignment. This is the only known way; // to make the alignment of a struct bigger than 8. Interestingly enough; // this alignment is also immune to the effects of #pragma pack and can be; // used to create structures with large alignment under #pragma pack.; // However, because it does not impact required alignment, such a structure,; // when used as a field or base, will not be aligned if #pragma pack is; // still active at the time of use.; //; // Known incompatibilities:; // * all: #pragma pack between fields in a record; // * 2010 and back: If the last field in a record is a bitfield, every object; // laid out after the record will have extra padding inserted before it. The; // extra padding will have size equal to the size of the storage class of the; // bitfield. 0 sized bitfields don't exhibit this behavior and the extra; // ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:5856,Performance,perform,perform,5856,"t from all of its fields and bases.; // * __declspec(align) on bitfields has the effect of changing the bitfield's; // alignment instead of its required alignment. This is the only known way; // to make the alignment of a struct bigger than 8. Interestingly enough; // this alignment is also immune to the effects of #pragma pack and can be; // used to create structures with large alignment under #pragma pack.; // However, because it does not impact required alignment, such a structure,; // when used as a field or base, will not be aligned if #pragma pack is; // still active at the time of use.; //; // Known incompatibilities:; // * all: #pragma pack between fields in a record; // * 2010 and back: If the last field in a record is a bitfield, every object; // laid out after the record will have extra padding inserted before it. The; // extra padding will have size equal to the size of the storage class of the; // bitfield. 0 sized bitfields don't exhibit this behavior and the extra; // padding can be avoided by adding a 0 sized bitfield after the non-zero-; // sized bitfield.; // * 2012 and back: In 64-bit mode, if the alignment of a record is 16 or; // greater due to __declspec(align()) then a second layout phase occurs after; // The locations of the vf and vb pointers are known. This layout phase; // suffers from the ""last field is a bitfield"" bug in 2010 and results in; // _every_ field getting padding put in front of it, potentially including the; // vfptr, leaving the vfprt at a non-zero location which results in a fault if; // anything tries to read the vftbl. The second layout phase also treats; // bitfields as separate entities and gives them each storage rather than; // packing them. Additionally, because this phase appears to perform a; // (an unstable) sort on the members before laying them out and because merged; // bitfields have the same address, the bitfields end up in whatever order; // the sort left them in, a behavior we could never hope to replicate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:2986,Safety,avoid,avoid,2986,"of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbptr is placed at the next properly aligned location. Enough padding; // is added to guarantee a fit.; // * The last zero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or may alias with the first; // field, even if they are of the same type.; // * The last zero size virtual base may be placed at the end of the struct; // potentially aliasing another object.; // * The ABI attempts to avoid aliasing of zero sized bases by adding padding; // between bases or vbases with specific properties. The criteria for; // additional padding between two bases is that the first base is zero sized; // or ends with a zero sized subobject and the second base is zero sized or; // trails with a zero sized base or field (sharing of vfptrs can reorder the; // layout of the so the leading base is not always the first one declared).; // This rule does take into account fields that are not records, so padding; // will occur even if the last field is, e.g. an int. The padding added for; // bases is 1 byte. The padding added between vbases depends on the alignment; // of the object but is at least 4 bytes (in both 32 and 64 bit modes).; // * There is no concept of non-virtual alignment, non-virtual alignment and; // alignment are always identical.; // * There is a distinction between alignment and required alignment.; // __declspec(align) changes the required alignment of a struct. This; // alignment is _always_ obeyed, even in th",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:5106,Safety,avoid,avoided,5106,"t from all of its fields and bases.; // * __declspec(align) on bitfields has the effect of changing the bitfield's; // alignment instead of its required alignment. This is the only known way; // to make the alignment of a struct bigger than 8. Interestingly enough; // this alignment is also immune to the effects of #pragma pack and can be; // used to create structures with large alignment under #pragma pack.; // However, because it does not impact required alignment, such a structure,; // when used as a field or base, will not be aligned if #pragma pack is; // still active at the time of use.; //; // Known incompatibilities:; // * all: #pragma pack between fields in a record; // * 2010 and back: If the last field in a record is a bitfield, every object; // laid out after the record will have extra padding inserted before it. The; // extra padding will have size equal to the size of the storage class of the; // bitfield. 0 sized bitfields don't exhibit this behavior and the extra; // padding can be avoided by adding a 0 sized bitfield after the non-zero-; // sized bitfield.; // * 2012 and back: In 64-bit mode, if the alignment of a record is 16 or; // greater due to __declspec(align()) then a second layout phase occurs after; // The locations of the vf and vb pointers are known. This layout phase; // suffers from the ""last field is a bitfield"" bug in 2010 and results in; // _every_ field getting padding put in front of it, potentially including the; // vfptr, leaving the vfprt at a non-zero location which results in a fault if; // anything tries to read the vftbl. The second layout phase also treats; // bitfields as separate entities and gives them each storage rather than; // packing them. Additionally, because this phase appears to perform a; // (an unstable) sort on the members before laying them out and because merged; // bitfields have the same address, the bitfields end up in whatever order; // the sort left them in, a behavior we could never hope to replicate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:1752,Security,inject,injected,1752," base pointer). They can each be; // shared with a, non-virtual bases. These bases need not be the same. vfptrs; // always occur at offset 0. vbptrs can occur at an arbitrary offset and are; // placed after the lexicographically last non-virtual base. This placement; // is always before fields but can be in the middle of the non-virtual bases; // due to the two-pass layout scheme for non-virtual-bases.; // * Virtual bases sometimes require a 'vtordisp' field that is laid out before; // the virtual base and is used in conjunction with virtual overrides during; // construction and destruction. This is always a 4 byte value and is used as; // an alternative to constructor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbptr is placed at the next properly aligned location. Enough padding; // is added to guarantee a fit.; // * The last zero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:1876,Security,inject,injection,1876," occur at offset 0. vbptrs can occur at an arbitrary offset and are; // placed after the lexicographically last non-virtual base. This placement; // is always before fields but can be in the middle of the non-virtual bases; // due to the two-pass layout scheme for non-virtual-bases.; // * Virtual bases sometimes require a 'vtordisp' field that is laid out before; // the virtual base and is used in conjunction with virtual overrides during; // construction and destruction. This is always a 4 byte value and is used as; // an alternative to constructor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbptr is placed at the next properly aligned location. Enough padding; // is added to guarantee a fit.; // * The last zero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or may alias with the first; // field, even if they are of the same type.; // * The last zero size virtual base may be placed",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:2059,Security,inject,injected,2059,"fields but can be in the middle of the non-virtual bases; // due to the two-pass layout scheme for non-virtual-bases.; // * Virtual bases sometimes require a 'vtordisp' field that is laid out before; // the virtual base and is used in conjunction with virtual overrides during; // construction and destruction. This is always a 4 byte value and is used as; // an alternative to constructor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbptr is placed at the next properly aligned location. Enough padding; // is added to guarantee a fit.; // * The last zero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or may alias with the first; // field, even if they are of the same type.; // * The last zero size virtual base may be placed at the end of the struct; // potentially aliasing another object.; // * The ABI attempts to avoid aliasing of zero sized bases by adding padding; // between bases o",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:2098,Security,inject,injected,2098,"// due to the two-pass layout scheme for non-virtual-bases.; // * Virtual bases sometimes require a 'vtordisp' field that is laid out before; // the virtual base and is used in conjunction with virtual overrides during; // construction and destruction. This is always a 4 byte value and is used as; // an alternative to constructor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbptr is placed at the next properly aligned location. Enough padding; // is added to guarantee a fit.; // * The last zero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or may alias with the first; // field, even if they are of the same type.; // * The last zero size virtual base may be placed at the end of the struct; // potentially aliasing another object.; // * The ABI attempts to avoid aliasing of zero sized bases by adding padding; // between bases or vbases with specific properties. The criteria for; // add",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:2222,Security,inject,injection,2222,"is laid out before; // the virtual base and is used in conjunction with virtual overrides during; // construction and destruction. This is always a 4 byte value and is used as; // an alternative to constructor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbptr is placed at the next properly aligned location. Enough padding; // is added to guarantee a fit.; // * The last zero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or may alias with the first; // field, even if they are of the same type.; // * The last zero size virtual base may be placed at the end of the struct; // potentially aliasing another object.; // * The ABI attempts to avoid aliasing of zero sized bases by adding padding; // between bases or vbases with specific properties. The criteria for; // additional padding between two bases is that the first base is zero sized; // or ends with a zero sized subobject and the sec",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:2398,Security,inject,injected,2398,"structor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vfptrs are always injected at offset 0.; // * vbptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially add a significant amount of padding.; // vbptrs are injected immediately after the last non-virtual base as; // lexicographically ordered in the code. If this site isn't pointer aligned; // the vbptr is placed at the next properly aligned location. Enough padding; // is added to guarantee a fit.; // * The last zero sized non-virtual base can be placed at the end of the; // struct (potentially aliasing another object), or may alias with the first; // field, even if they are of the same type.; // * The last zero size virtual base may be placed at the end of the struct; // potentially aliasing another object.; // * The ABI attempts to avoid aliasing of zero sized bases by adding padding; // between bases or vbases with specific properties. The criteria for; // additional padding between two bases is that the first base is zero sized; // or ends with a zero sized subobject and the second base is zero sized or; // trails with a zero sized base or field (sharing of vfptrs can reorder the; // layout of the so the leading base is not always the first one declared).; // This rule does ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:92,Testability,test,tests,92,"// This section contains an implementation of struct layout that is, up to the; // included tests, compatible with cl.exe (2013). The layout produced is; // significantly different than those produced by the Itanium ABI. Here we note; // the most important differences.; //; // * The alignment of bitfields in unions is ignored when computing the; // alignment of the union.; // * The existence of zero-width bitfield that occurs after anything other than; // a non-zero length bitfield is ignored.; // * There is no explicit primary base for the purposes of layout. All bases; // with vfptrs are laid out first, followed by all bases without vfptrs.; // * The Itanium equivalent vtable pointers are split into a vfptr (virtual; // function pointer) and a vbptr (virtual base pointer). They can each be; // shared with a, non-virtual bases. These bases need not be the same. vfptrs; // always occur at offset 0. vbptrs can occur at an arbitrary offset and are; // placed after the lexicographically last non-virtual base. This placement; // is always before fields but can be in the middle of the non-virtual bases; // due to the two-pass layout scheme for non-virtual-bases.; // * Virtual bases sometimes require a 'vtordisp' field that is laid out before; // the virtual base and is used in conjunction with virtual overrides during; // construction and destruction. This is always a 4 byte value and is used as; // an alternative to constructor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially a",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:111,Deployability,update,updates,111,/// Gets the size and alignment of a field taking pragma pack and; /// __declspec(align) into account. It also updates RequiredAlignment as a; /// side effect because it is most convenient to do so here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:55,Availability,avail,available,55,// Track zero-sized subobjects here where it's already available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:28,Performance,perform,perform,28,// In 64-bit mode we always perform an alignment step after laying out vbases.; // In 32-bit mode we do not. The check to see if we need to perform alignment; // checks the RequiredAlignment field and performs alignment if it isn't 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:140,Performance,perform,perform,140,// In 64-bit mode we always perform an alignment step after laying out vbases.; // In 32-bit mode we do not. The check to see if we need to perform alignment; // checks the RequiredAlignment field and performs alignment if it isn't 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:201,Performance,perform,performs,201,// In 64-bit mode we always perform an alignment step after laying out vbases.; // In 32-bit mode we do not. The check to see if we need to perform alignment; // checks the RequiredAlignment field and performs alignment if it isn't 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:80,Integrability,inject,injection,80,// Calculate pointer size and alignment. These are used for vfptr and vbprt; // injection.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:80,Security,inject,injection,80,// Calculate pointer size and alignment. These are used for vfptr and vbprt; // injection.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:27,Modifiability,extend,extendable,27,// Only lay out bases with extendable VFPtrs on the first pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:25,Modifiability,polymorphi,polymorphism,25,"// This class introduces polymorphism, so we need a vftable to store the; // RTTI information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:13,Modifiability,polymorphi,polymorphic,13,// We have a polymorphic base class but can't extend its vftable. Add a; // new vfptr if we would use any vftable slots.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:46,Modifiability,extend,extend,46,// We have a polymorphic base class but can't extend its vftable. Add a; // new vfptr if we would use any vftable slots.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:30,Modifiability,extend,extendable,30,// Only lay out bases without extendable VFPtrs on the second pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:111,Availability,error,error,111,// Clamp the bitfield to a containable size for the sake of being able; // to lay them out. Sema will throw an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate a new block of memory and place the bitfield in it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:3,Integrability,Inject,Inject,3,// Inject the VBPointer at the injection site.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:31,Integrability,inject,injection,31,// Inject the VBPointer at the injection site.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:3,Security,Inject,Inject,3,// Inject the VBPointer at the injection site.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:31,Security,inject,injection,31,// Inject the VBPointer at the injection site.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:36,Availability,down,down,36,"// Shift everything after the vbptr down, unless we're using an external; // layout.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:55,Integrability,interface,interface,55,// The class may have size 0 and a vfptr (e.g. it's an interface class). The; // size was not correctly set before in this case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:150,Integrability,inject,injection,150,// The alignment of the vtordisp is at least the required alignment of the; // entire record. This requirement may be present to support vtordisp; // injection.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:150,Security,inject,injection,150,// The alignment of the vtordisp is at least the required alignment of the; // entire record. This requirement may be present to support vtordisp; // injection.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:113,Deployability,update,updated,113,// Respect required alignment. Note that in 32-bit mode Required alignment; // may be 0 and cause size not to be updated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:9,Testability,assert,asserts,9,// These asserts test different things. A record has a definition; // as soon as we begin to parse the definition. That definition is; // not a complete definition (which is what isDefinition() tests); // until we *finish* parsing the definition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:17,Testability,test,test,17,// These asserts test different things. A record has a definition; // as soon as we begin to parse the definition. That definition is; // not a complete definition (which is what isDefinition() tests); // until we *finish* parsing the definition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:194,Testability,test,tests,194,// These asserts test different things. A record has a definition; // as soon as we begin to parse the definition. That definition is; // not a complete definition (which is what isDefinition() tests); // until we *finish* parsing the definition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:113,Integrability,depend,dependent,113,"// In certain situations, we are allowed to lay out objects in the; // tail-padding of base classes. This is ABI-dependent.; // FIXME: this should be stored in the record layout.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:15,Performance,cache,cache,15,"// Look up the cache entry. Since we're working with the first; // declaration, its parent must be the class definition, which is; // the correct key for the KeyFunctions hash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:171,Security,hash,hash,171,"// Look up the cache entry. Since we're working with the first; // declaration, its parent must be the class definition, which is; // the correct key for the KeyFunctions hash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:15,Performance,cache,cached,15,"// If it's not cached, there's nothing to do.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:12,Performance,cache,cached,12,"// If it is cached, check whether it's the target method, and if so,; // remove it from the cache. Note, the call to 'get' might invalidate; // the iterator and the LazyDeclPtr object within the map.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:92,Performance,cache,cache,92,"// If it is cached, check whether it's the target method, and if so,; // remove it from the cache. Note, the call to 'get' might invalidate; // the iterator and the LazyDeclPtr object within the map.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:82,Integrability,interface,interface,82,"/// getObjCLayout - Get or compute information about the layout of the; /// given interface.; ///; /// \param Impl - If given, also include the layout of the interface's; /// implementation. This may differ by including synthesized ivars.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:158,Integrability,interface,interface,158,"/// getObjCLayout - Get or compute information about the layout of the; /// given interface.; ///; /// \param Impl - If given, also include the layout of the interface's; /// implementation. This may differ by including synthesized ivars.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:56,Integrability,interface,interface,56,// If there aren't any synthesized ivars then reuse the interface; // entry. Note we can't cache this because we simply free all; // entries later; however we shouldn't look up implementations; // frequently.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:91,Performance,cache,cache,91,// If there aren't any synthesized ivars then reuse the interface; // entry. Note we can't cache this because we simply free all; // entries later; however we shouldn't look up implementations; // frequently.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:113,Usability,simpl,simply,113,// If there aren't any synthesized ivars then reuse the interface; // entry. Note we can't cache this because we simply free all; // entries later; however we shouldn't look up implementations; // frequently.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:291,Deployability,update,update,291,"// The ""simple"" format is designed to be parsed by the; // layout-override testing code. There shouldn't be any external; // uses of this format --- when LLDB overrides a layout, it sets up; // the data structures directly --- so feel free to adjust this as; // you like as long as you also update the rudimentary parser for it; // in libFrontend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:75,Testability,test,testing,75,"// The ""simple"" format is designed to be parsed by the; // layout-override testing code. There shouldn't be any external; // uses of this format --- when LLDB overrides a layout, it sets up; // the data structures directly --- so feel free to adjust this as; // you like as long as you also update the rudimentary parser for it; // in libFrontend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:8,Usability,simpl,simple,8,"// The ""simple"" format is designed to be parsed by the; // layout-override testing code. There shouldn't be any external; // uses of this format --- when LLDB overrides a layout, it sets up; // the data structures directly --- so feel free to adjust this as; // you like as long as you also update the rudimentary parser for it; // in libFrontend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp:84,Modifiability,refactor,refactor,84,// FIXME: Much of this is copy-paste from ParsePrintfSpecifier.; // We can possibly refactor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp:53,Availability,error,errors,53,"// Detect spurious null characters, which are likely errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp:3,Safety,Detect,Detect,3,"// Detect spurious null characters, which are likely errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp:53,Availability,error,errors,53,"// Detect spurious null characters, which are likely errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp:3,Safety,Detect,Detect,3,"// Detect spurious null characters, which are likely errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp:19,Availability,error,error,19,"// Did a fail-stop error of any kind occur when parsing the specifier?; // If so, don't do any more processing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp:45,Availability,error,error,45,// Did we exhaust the string or encounter an error that; // we can recover from?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp:67,Availability,recover,recover,67,// Did we exhaust the string or encounter an error that; // we can recover from?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp:67,Safety,recover,recover,67,// Did we exhaust the string or encounter an error that; // we can recover from?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ScanfFormatString.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Stmt.cpp:49,Modifiability,polymorphi,polymorphic,49,// Check that no statement / expression class is polymorphic. LLVM style RTTI; // should be used instead. If absolutely needed an exception can still be added; // here by defining the appropriate macro (but please don't do this).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Stmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Stmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Stmt.cpp:110,Energy Efficiency,allocate,allocated,110,// Check that no statement / expression class has a non-trival destructor.; // Statements and expressions are allocated with the BumpPtrAllocator from; // ASTContext and therefore their destructor is not executed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Stmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Stmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Stmt.cpp:136,Availability,error,errors,136,"/// AnalyzeAsmString - Analyze the asm string of the current asm, decomposing; /// it into pieces. If the asm string is erroneous, emit errors and return; /// true, otherwise return false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Stmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Stmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Stmt.cpp:4,Usability,Simpl,Simple,4,"// ""Simple"" inline asms have no constraints or operands, just convert the asm; // string to escape $'s.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Stmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Stmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Stmt.cpp:10,Safety,Avoid,Avoid,10,// FIXME: Avoid the allocation/copy if at all possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Stmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Stmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtIterator.cpp:26,Integrability,depend,dependent-sized,26,// FIXME: Add support for dependent-sized array types in C++?; // Does it even make sense to build a CFG for an uninstantiated template?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/StmtIterator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtIterator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtOpenMP.cpp:82,Deployability,update,update,82,"// Special case: 'omp target enter data', 'omp target exit data',; // 'omp target update' are stand-alone directives, but for implementation; // reasons they have empty synthetic structured block, to simplify codegen.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/StmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtOpenMP.cpp:200,Usability,simpl,simplify,200,"// Special case: 'omp target enter data', 'omp target exit data',; // 'omp target update' are stand-alone directives, but for implementation; // reasons they have empty synthetic structured block, to simplify codegen.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/StmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtOpenMP.cpp:122,Integrability,depend,dependent,122,"// The loop transformation construct has generated loops, but these; // may not have been generated yet due to being in a dependent; // context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/StmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtPrinter.cpp:30,Usability,simpl,simply,30,"// No need to print anything, simply forward to the subexpression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/StmtPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtPrinter.cpp:129,Usability,clear,clear,129,"// There's no way to express this expression in any of our supported; // languages, so just emit something terse and (hopefully) clear.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/StmtPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp:33,Modifiability,variab,variables,33,/// Process clauses with list of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp:155,Usability,simpl,simple-requirement,155,// C++2a [expr.prim.req.compound]p1 Example:; // [...] The compound-requirement in C1 requires that x++ is a valid; // expression. It is equivalent to the simple-requirement x++; [...]; // We therefore do not profile isSimple() here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp:150,Deployability,update,update,150,"// Work around https://developercommunity.visualstudio.com/content/problem/84002/clang-cl-when-built-with-vc-2017-crashes-cause-vc.html; // MSVC 2017 update 3 miscompiles this function, and a clang built with it; // will crash in stage 2 of a bootstrap build.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp:8,Integrability,depend,dependent,8,"// Type-dependent operator calls are profiled like their underlying; // syntactic operator.; //; // An operator call to operator-> is always implicit, so just skip it. The; // enclosing MemberExpr will profile the actual member access.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp:228,Security,access,access,228,"// Type-dependent operator calls are profiled like their underlying; // syntactic operator.; //; // An operator call to operator-> is always implicit, so just skip it. The; // enclosing MemberExpr will profile the actual member access.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp:48,Integrability,depend,dependent,48,"// If a rewritten operator were ever to be type-dependent, we should profile; // it following its syntactic operator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp:129,Safety,safe,safe,129,"// Do not recursively visit the children of this expression. Profiling the; // body would result in unnecessary work, and is not safe to do during; // deserialization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/StmtProfile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TemplateBase.cpp:73,Modifiability,extend,extended,73,"// In Sema::CheckTemplateArugment, enum template arguments value are; // extended to the size of the integer underlying the enum type. This; // may create a size difference between the enum value and template; // argument value, requiring isSameValue here instead of operator==.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TemplateBase.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TemplateBase.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TemplateBase.cpp:38,Security,expose,expose,38,// FIXME: The Declaration form should expose a const ValueDecl*.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TemplateBase.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TemplateBase.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TemplateName.cpp:418,Integrability,interface,interface,418,"//===- TemplateName.cpp - C++ Template Name Representation ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the TemplateName interface and subclasses.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TemplateName.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TemplateName.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TemplateName.cpp:18,Integrability,depend,dependent,18,// Substituting a dependent template name: preserve it as written.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TemplateName.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TemplateName.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TextNodeDumper.cpp:95,Usability,simpl,simple,95,// To save some vertical space we print up to MaxChildrenPerLine APValues; // considered to be simple (by isSimpleAPValue) on a single line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TextNodeDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TextNodeDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TextNodeDumper.cpp:42,Usability,simpl,simple,42,"// If the union value is considered to be simple, fold it into the; // current line to save some vertical space.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TextNodeDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TextNodeDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TextNodeDumper.cpp:54,Availability,avail,available,54,// Can't translate locations if a SourceManager isn't available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TextNodeDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TextNodeDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TextNodeDumper.cpp:59,Availability,error,error,59,"// We could dump the deallocation function used in case of error, but it's; // usually not that interesting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TextNodeDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TextNodeDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:40,Integrability,depend,dependent,40,"// C++ [temp.dep.type]p1:; // A type is dependent if it is...; // - an array type constructed from any dependent type or whose; // size is specified by a constant expression that is; // value-dependent,",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:103,Integrability,depend,dependent,103,"// C++ [temp.dep.type]p1:; // A type is dependent if it is...; // - an array type constructed from any dependent type or whose; // size is specified by a constant expression that is; // value-dependent,",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:192,Integrability,depend,dependent,192,"// C++ [temp.dep.type]p1:; // A type is dependent if it is...; // - an array type constructed from any dependent type or whose; // size is specified by a constant expression that is; // value-dependent,",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:30,Integrability,Depend,DependentSizedArrayType,30,"// Note, we need to check for DependentSizedArrayType explicitly here; // because we use a DependentSizedArrayType with no size expression as the; // type of a dependent array of unknown bound with a dependent braced; // initializer:; //; // template<int ...N> int arr[] = {N...};",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:91,Integrability,Depend,DependentSizedArrayType,91,"// Note, we need to check for DependentSizedArrayType explicitly here; // because we use a DependentSizedArrayType with no size expression as the; // type of a dependent array of unknown bound with a dependent braced; // initializer:; //; // template<int ...N> int arr[] = {N...};",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:160,Integrability,depend,dependent,160,"// Note, we need to check for DependentSizedArrayType explicitly here; // because we use a DependentSizedArrayType with no size expression as the; // type of a dependent array of unknown bound with a dependent braced; // initializer:; //; // template<int ...N> int arr[] = {N...};",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:200,Integrability,depend,dependent,200,"// Note, we need to check for DependentSizedArrayType explicitly here; // because we use a DependentSizedArrayType with no size expression as the; // type of a dependent array of unknown bound with a dependent braced; // initializer:; //; // template<int ...N> int arr[] = {N...};",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:108,Energy Efficiency,allocate,allocates,108,"// Fast path the common cases so we can avoid the conservative computation; // below, which in common cases allocates ""large"" APSInt values, which are; // slow.; // If the element size is a power of 2, we can directly compute the additional; // number of addressing bits beyond those required for the element count.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:190,Energy Efficiency,power,power,190,"// Fast path the common cases so we can avoid the conservative computation; // below, which in common cases allocates ""large"" APSInt values, which are; // slow.; // If the element size is a power of 2, we can directly compute the additional; // number of addressing bits beyond those required for the element count.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:40,Safety,avoid,avoid,40,"// Fast path the common cases so we can avoid the conservative computation; // below, which in common cases allocates ""large"" APSInt values, which are; // slow.; // If the element size is a power of 2, we can directly compute the additional; // number of addressing bits beyond those required for the element count.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:31,Modifiability,polymorphi,polymorphic,31,// Check that no type class is polymorphic. LLVM style RTTI should be used; // instead. If absolutely needed an exception can still be added here by; // defining the appropriate macro (but please don't do this).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:71,Energy Efficiency,allocate,allocated,71,// Check that no type class has a non-trival destructor. Types are; // allocated with the BumpPtrAllocator from ASTContext and therefore; // their destructor is not executed.; //; // FIXME: ConstantArrayType is not trivially destructible because of its; // APInt member. It should be replaced in favor of ASTContext allocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:29,Safety,abort,aborting,29,"// Do a single-step desugar, aborting the loop if the type isn't; // sugared.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:72,Deployability,update,update,72,"// Otherwise, split the underlying type. If that yields qualifiers,; // update the information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:46,Safety,safe,safe,46,// FIXME: this seems inherently un-qualifiers-safe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:18,Integrability,protocol,protocol,18,// Initialize the protocol qualifiers. The protocol storage is known; // after we set number of type arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:43,Integrability,protocol,protocol,43,// Initialize the protocol qualifiers. The protocol storage is known; // after we set number of type arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:30,Integrability,interface,interface,30,// Terminate when we reach an interface type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:30,Integrability,interface,interface,30,// Terminate when we reach an interface type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:30,Integrability,interface,interface,30,// Terminate when we reach an interface type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:2,Integrability,protocol,protocols,2,/*protocols=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:20,Performance,perform,perform,20,/// Visitor used to perform a simple type transformation that does not change; /// the semantics of the type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:30,Usability,simpl,simple,30,/// Visitor used to perform a simple type transformation that does not change; /// the semantics of the type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:76,Integrability,depend,dependent,76,"// None of the clients of this transformation can occur where; // there are dependent types, so skip dependent types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:101,Integrability,depend,dependent,101,"// None of the clients of this transformation can occur where; // there are dependent types, so skip dependent types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:13,Modifiability,extend,extended,13,// Transform extended info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:9,Integrability,protocol,protocol,9,// Apply protocol lists if exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:31,Deployability,update,update,31,"// If we have a function type, update the substitution context; // appropriately.; //Substitute result type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:13,Modifiability,extend,extended,13,// Transform extended info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:56,Availability,down,down,56,"// Rebuild the ""equivalent"" type, which pushes __kindof down into; // the object type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:79,Performance,perform,perform,79,"// If we are in neither a class nor a category, there's no; // substitution to perform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:88,Performance,perform,perform,88,"// If the superclass doesn't have type parameters, then there is no; // substitution to perform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:26,Modifiability,parameteriz,parameterized,26,"// If the subclass is not parameterized, there aren't any type; // parameters in the superclass reference to substitute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:68,Integrability,rout,routine,68,"/// Determine whether this type is an integral type.; ///; /// This routine determines whether the given type is an integral type per; /// C++ [basic.fundamental]p7. Although the C standard does not define the; /// term ""integral type"", it has a similar term ""integer type"", and in C++; /// the two terms are equivalent. However, C's ""integer type"" includes; /// enumeration types, while C++'s ""integer type"" does not. The \c ASTContext; /// parameter is used to determine whether we should be following the C or; /// C++ rules when determining whether this type is an integral/integer type.; ///; /// For cases where C permits ""an integer type"" and C++ permits ""an integral; /// type"", use this routine.; ///; /// For cases where C permits ""an integer type"" and C++ permits ""an integral; /// or enumeration type"", use \c isIntegralOrEnumerationType() instead.; ///; /// \param Ctx The context in which this type occurs.; ///; /// \returns true if the type is considered an integral type, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:696,Integrability,rout,routine,696,"/// Determine whether this type is an integral type.; ///; /// This routine determines whether the given type is an integral type per; /// C++ [basic.fundamental]p7. Although the C standard does not define the; /// term ""integral type"", it has a similar term ""integer type"", and in C++; /// the two terms are equivalent. However, C's ""integer type"" includes; /// enumeration types, while C++'s ""integer type"" does not. The \c ASTContext; /// parameter is used to determine whether we should be following the C or; /// C++ rules when determining whether this type is an integral/integer type.; ///; /// For cases where C permits ""an integer type"" and C++ permits ""an integral; /// type"", use this routine.; ///; /// For cases where C permits ""an integer type"" and C++ permits ""an integral; /// or enumeration type"", use \c isIntegralOrEnumerationType() instead.; ///; /// \param Ctx The context in which this type occurs.; ///; /// \returns true if the type is considered an integral type, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:176,Integrability,depend,dependent,176,"/// isConstantSizeType - Return true if this is not a variable sized type,; /// according to the rules of C99 6.7.5p3. It is not legal to call this on; /// incomplete types or dependent types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:54,Modifiability,variab,variable,54,"/// isConstantSizeType - Return true if this is not a variable sized type,; /// according to the rules of C99 6.7.5p3. It is not legal to call this on; /// incomplete types or dependent types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:105,Integrability,depend,dependent-sized,105,// An array is incomplete if its element type is incomplete; // (C++ [dcl.array]p1).; // We don't handle dependent-sized arrays (dependent types are never treated; // as incomplete).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:129,Integrability,depend,dependent,129,// An array is incomplete if its element type is incomplete; // (C++ [dcl.array]p1).; // We don't handle dependent-sized arrays (dependent types are never treated; // as incomplete).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:158,Modifiability,inherit,inheritance,158,// Member pointers in the MS ABI have special behavior in; // RequireCompleteType: they attach a MSInheritanceAttr to the CXXRecordDecl; // to indicate which inheritance model to use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:24,Integrability,depend,dependent,24,// Member pointers with dependent class types don't get special treatment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:7,Modifiability,inherit,inheritance,7,"// The inheritance attribute might only be present on the most recent; // CXXRecordDecl, use that one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:36,Modifiability,inherit,inheritance,36,// Nothing interesting to do if the inheritance attribute is already set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:8,Integrability,interface,interfaces,8,"// ObjC interfaces are incomplete if they are @class, not @interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:59,Integrability,interface,interface,59,"// ObjC interfaces are incomplete if they are @class, not @interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:104,Performance,scalab,scalable,104,// Represent predicates as i8 rather than i1 to avoid any layout issues.; // The type is bitcasted to a scalable predicate type when casting between; // scalable and fixed-length vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:153,Performance,scalab,scalable,153,// Represent predicates as i8 rather than i1 to avoid any layout issues.; // The type is bitcasted to a scalable predicate type when casting between; // scalable and fixed-length vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:48,Safety,avoid,avoid,48,// Represent predicates as i8 rather than i1 to avoid any layout issues.; // The type is bitcasted to a scalable predicate type when casting between; // scalable and fixed-length vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:121,Availability,redundant,redundant,121,// This is effectively the intersection of isTrivialType and; // isStandardLayoutType. We implement it directly to avoid redundant; // conversions from a type to a CXXRecordDecl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:115,Safety,avoid,avoid,115,// This is effectively the intersection of isTrivialType and; // isStandardLayoutType. We implement it directly to avoid redundant; // conversions from a type to a CXXRecordDecl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:121,Safety,redund,redundant,121,// This is effectively the intersection of isTrivialType and; // isStandardLayoutType. We implement it directly to avoid redundant; // conversions from a type to a CXXRecordDecl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:12,Integrability,wrap,wrap,12,// We never wrap type sugar around a PackExpansionType.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:30,Integrability,depend,dependent,30,"// Note that, before C++17, a dependent exception specification does; // *not* make a type dependent; it's not even part of the C++ type; // system.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:91,Integrability,depend,dependent,91,"// Note that, before C++17, a dependent exception specification does; // *not* make a type dependent; it's not even part of the C++ type; // system.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:54,Integrability,depend,dependent,54,"// This exception specification doesn't make the type dependent, because; // it's not instantiated as part of instantiating the type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:67,Integrability,depend,dependent,67,"// If this is a canonical type, and its exception specification is dependent,; // then it's a dependent type. This only happens in C++17 onwards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:94,Integrability,depend,dependent,94,"// If this is a canonical type, and its exception specification is dependent,; // then it's a dependent type. This only happens in C++17 onwards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:66,Integrability,depend,dependent,66,// Ask our canonical type whether our exception specification was dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:31,Integrability,depend,dependent,31,"// A pack expansion with a non-dependent pattern is still dependent,; // because we don't know whether the pattern is in the exception spec; // or not (that depends on whether the pack has 0 expansions).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:58,Integrability,depend,dependent,58,"// A pack expansion with a non-dependent pattern is still dependent,; // because we don't know whether the pattern is in the exception spec; // or not (that depends on whether the pack has 0 expansions).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:157,Integrability,depend,depends,157,"// A pack expansion with a non-dependent pattern is still dependent,; // because we don't know whether the pattern is in the exception spec; // or not (that depends on whether the pack has 0 expansions).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:29,Performance,perform,performance,29,"// This method is relatively performance sensitive, so as a performance; // shortcut, use one AddInteger call instead of four for the next four; // fields.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:60,Performance,perform,performance,60,"// This method is relatively performance sensitive, so as a performance; // shortcut, use one AddInteger call instead of four for the next four; // fields.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:108,Integrability,depend,dependent,108,"// C++11 [temp.type]p2: ""If an expression e involves a template parameter,; // decltype(e) denotes a unique dependent type."" Hence a decltype type is; // type-dependent even if its expression is only instantiation-dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:159,Integrability,depend,dependent,159,"// C++11 [temp.type]p2: ""If an expression e involves a template parameter,; // decltype(e) denotes a unique dependent type."" Hence a decltype type is; // type-dependent even if its expression is only instantiation-dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:214,Integrability,depend,dependent,214,"// C++11 [temp.type]p2: ""If an expression e involves a template parameter,; // decltype(e) denotes a unique dependent type."" Hence a decltype type is; // type-dependent even if its expression is only instantiation-dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:108,Modifiability,variab,variable,108,"// These are type qualifiers in the traditional C sense: they annotate; // something about a specific value/variable of a type. (They aren't; // always part of the canonical type, though.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:53,Modifiability,rewrite,rewrite,53,// All other type attributes aren't qualifiers; they rewrite the modified; // type to be a semantically different type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:58,Availability,error,error,58,"// Update instantiation-dependent, variably-modified, and error bits.; // If the canonical type exists and is non-dependent, the template; // specialization type can be non-dependent even if one of the type; // arguments is. Given:; // template<typename T> using U = int;; // U<T> is always non-dependent, irrespective of the type T.; // However, U<Ts> contains an unexpanded parameter pack, even though; // its expansion (and thus its desugared type) doesn't.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:3,Deployability,Update,Update,3,"// Update instantiation-dependent, variably-modified, and error bits.; // If the canonical type exists and is non-dependent, the template; // specialization type can be non-dependent even if one of the type; // arguments is. Given:; // template<typename T> using U = int;; // U<T> is always non-dependent, irrespective of the type T.; // However, U<Ts> contains an unexpanded parameter pack, even though; // its expansion (and thus its desugared type) doesn't.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:24,Integrability,depend,dependent,24,"// Update instantiation-dependent, variably-modified, and error bits.; // If the canonical type exists and is non-dependent, the template; // specialization type can be non-dependent even if one of the type; // arguments is. Given:; // template<typename T> using U = int;; // U<T> is always non-dependent, irrespective of the type T.; // However, U<Ts> contains an unexpanded parameter pack, even though; // its expansion (and thus its desugared type) doesn't.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:114,Integrability,depend,dependent,114,"// Update instantiation-dependent, variably-modified, and error bits.; // If the canonical type exists and is non-dependent, the template; // specialization type can be non-dependent even if one of the type; // arguments is. Given:; // template<typename T> using U = int;; // U<T> is always non-dependent, irrespective of the type T.; // However, U<Ts> contains an unexpanded parameter pack, even though; // its expansion (and thus its desugared type) doesn't.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:173,Integrability,depend,dependent,173,"// Update instantiation-dependent, variably-modified, and error bits.; // If the canonical type exists and is non-dependent, the template; // specialization type can be non-dependent even if one of the type; // arguments is. Given:; // template<typename T> using U = int;; // U<T> is always non-dependent, irrespective of the type T.; // However, U<Ts> contains an unexpanded parameter pack, even though; // its expansion (and thus its desugared type) doesn't.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:295,Integrability,depend,dependent,295,"// Update instantiation-dependent, variably-modified, and error bits.; // If the canonical type exists and is non-dependent, the template; // specialization type can be non-dependent even if one of the type; // arguments is. Given:; // template<typename T> using U = int;; // U<T> is always non-dependent, irrespective of the type T.; // However, U<Ts> contains an unexpanded parameter pack, even though; // its expansion (and thus its desugared type) doesn't.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:35,Modifiability,variab,variably-modified,35,"// Update instantiation-dependent, variably-modified, and error bits.; // If the canonical type exists and is non-dependent, the template; // specialization type can be non-dependent even if one of the type; // arguments is. Given:; // template<typename T> using U = int;; // U<T> is always non-dependent, irrespective of the type T.; // However, U<Ts> contains an unexpanded parameter pack, even though; // its expansion (and thus its desugared type) doesn't.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:8,Performance,cache,cached,8,/// The cached properties of a type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:22,Performance,cache,cache,22,/// The type-property cache. This is templated so as to be; /// instantiated at an internal type to prevent unnecessary symbol; /// leakage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:10,Performance,cache,cache,10,"// If the cache is valid, we're okay.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:15,Performance,cache,cached,15,// Compute the cached properties and then set the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:50,Performance,cache,cache,50,// Compute the cached properties and then set the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:23,Integrability,depend,dependent,23,// Treat instantiation-dependent types as external.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:87,Availability,error,error,87,// Give non-deduced 'auto' types external linkage. We should only see them; // here in error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:93,Availability,recover,recovery,93,// Give non-deduced 'auto' types external linkage. We should only see them; // here in error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:93,Safety,recover,recovery,93,// Give non-deduced 'auto' types external linkage. We should only see them; // here in error recovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:23,Integrability,depend,dependent,23,// Treat instantiation-dependent types as external.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:3,Integrability,Depend,Dependent,3,// Dependent types that could instantiate to pointer types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:3,Integrability,Depend,Dependent,3,// Dependent template specializations can instantiate to pointer; // types unless they're known to be specializations of a class; // template.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:3,Integrability,Depend,Dependent,3,// Dependent types that could instantiate to a pointer type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:9,Integrability,protocol,protocol,9,// Check protocol qualifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:8,Availability,down,down,8,// Walk down to the base type. We don't care about qualifiers for this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:19,Integrability,Protocol,Protocol,19,// Class and Class<Protocol> don't require retention.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:45,Integrability,bridg,bridgable,45,"/// Determine whether the given type T is a ""bridgable"" Objective-C type,; /// which is either an Objective-C object pointer type or an",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:45,Integrability,bridg,bridgeable,45,"/// Determine whether the given type T is a ""bridgeable"" C type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:25,Integrability,depend,depend,25,"// We only syntactically depend on the constraint arguments. They don't; // affect the deduced type, only its validity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Type.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypeLoc.cpp:38,Integrability,Wrap,Wrapper,38,"//===- TypeLoc.cpp - Type Source Info Wrapper -----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the TypeLoc subclasses implementations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TypeLoc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypeLoc.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp:332,Usability,simpl,simple,332,"// CanPrefixQualifiers - We prefer to print type qualifiers before the type,; // so that we get ""const int"" instead of ""int const"", but we can't do this if; // the type is complex. For example if the type is ""int*"", we *must* print; // ""int * const"", printing ""const int *"" is different. Only do this when the; // type expands to a simple string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp:60,Integrability,depend,dependent,60,// FIXME:Is it useful to print out the expression for a non-dependent; // noexcept specification?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp:37,Integrability,wrap,wrap,37,"// If needed for precedence reasons, wrap the inner part in grouping parens.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp:37,Integrability,wrap,wrap,37,"// If needed for precedence reasons, wrap the inner part in grouping parens.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp:33,Availability,avail,available,33,// Do nothing. These CCs are not available as attributes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp:37,Integrability,wrap,wrap,37,"// If needed for precedence reasons, wrap the inner part in grouping parens.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp:37,Integrability,wrap,wrap,37,"// If needed for precedence reasons, wrap the inner part in grouping parens.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp:16,Availability,redundant,redundant,16,// Suppress the redundant tag keyword if we just printed one.; // We don't have to worry about ElaboratedTypes here because you can't; // refer to an anonymous type with one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp:16,Safety,redund,redundant,16,// Suppress the redundant tag keyword if we just printed one.; // We don't have to worry about ElaboratedTypes here because you can't; // refer to an anonymous type with one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp:38,Testability,test,test,38,// FIXME: Null TD never excercised in test suite.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp:10,Deployability,Update,Update,10,// FIXME: Update printAttributedBefore to print these once we generate; // AttributedType nodes for them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp:56,Safety,avoid,avoid,56,"// FIXME: When Sema learns to form this AttributedType, avoid printing the; // attribute again in printFunctionProtoAfter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp:20,Usability,learn,learns,20,"// FIXME: When Sema learns to form this AttributedType, avoid printing the; // attribute again in printFunctionProtoAfter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp:24,Integrability,depend,dependent,24,// Can't evaluate value-dependent expressions so bail early,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp:136,Safety,avoid,avoid,136,"// If this is the first argument and its string representation; // begins with the global scope specifier ('::foo'), add a space; // to avoid printing the diagraph '<:'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp:3,Integrability,Wrap,Wrap,3,// Wrap target address space into an attribute syntax,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/TypePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:2,Safety,Detect,DetectVirtual,2,/*DetectVirtual=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:114,Modifiability,inherit,inheritance,114,// Force the signatures to match. We can't rely on the overrides; // list here because there isn't necessarily an inheritance; // relationship between the two methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:413,Energy Efficiency,allocate,allocated,413,"/// IsOverriderUsed - Returns whether the overrider will ever be used in this; /// part of the vtable.; ///; /// Itanium C++ ABI 2.5.2:; ///; /// struct A { virtual void f(); };; /// struct B : virtual public A { int i; };; /// struct C : virtual public A { int j; };; /// struct D : public B, public C {};; ///; /// When B and C are declared, A is a primary base in each case, so although; /// vcall offsets are allocated in the A-in-B and A-in-C vtables, no this; /// adjustment is required and no thunk is generated. However, inside D; /// objects, A is no longer a primary base of C, so if we allowed calls to; /// C::f() to use the copy of A's vtable in the C subobject, we would need; /// to adjust this from C* to B::A*, which would require a third-party; /// thunk. Since we require that a call to C::f() first convert to A*,; /// C-in-D's copy of A's vtable is never referenced, so this is not; /// necessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:4,Usability,Clear,Clear,4,/// Clear the method info map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:2,Safety,Detect,DetectVirtual,2,/*DetectVirtual=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:81,Modifiability,inherit,inheritance,81,"// Itanium C++ ABI 2.5.2:; // Then come the virtual base virtual tables, also in inheritance graph; // order, and again excluding primary bases (which share virtual tables with; // the classes for which they are primary).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:21,Testability,test,tests,21,// FIXME: write more tests that actually use the dumpLayout output to prevent; // ItaniumVTableBuilder regressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:1666,Availability,redundant,redundant,1666,"ifferences are:; // 1. Separate vftable and vbtable.; //; // 2. Each subobject with a vfptr gets its own vftable rather than an address; // point in a single vtable shared between all the subobjects.; // Each vftable is represented by a separate section and virtual calls; // must be done using the vftable which has a slot for the function to be; // called.; //; // 3. Virtual method definitions expect their 'this' parameter to point to the; // first vfptr whose table provides a compatible overridden method. In many; // cases, this permits the original vf-table entry to directly call; // the method instead of passing through a thunk.; // See example before VFTableBuilder::ComputeThisOffset below.; //; // A compatible overridden method is one which does not have a non-trivial; // covariant-return adjustment.; //; // The first vfptr is the one with the lowest offset in the complete-object; // layout of the defining class, and the method definition will subtract; // that constant offset from the parameter value to get the real 'this'; // value. Therefore, if the offset isn't really constant (e.g. if a virtual; // function defined in a virtual base is overridden in a more derived; // virtual base and these bases have a reverse order in the complete; // object), the vf-table may require a this-adjustment thunk.; //; // 4. vftables do not contain new entries for overrides that merely require; // this-adjustment. Together with #3, this keeps vf-tables smaller and; // eliminates the need for this-adjustment thunks in many cases, at the cost; // of often requiring redundant work to adjust the ""this"" pointer.; //; // 5. Instead of VTT and constructor vtables, vbtables and vtordisps are used.; // Vtordisps are emitted into the class layout if a class has; // a) a user-defined ctor/dtor; // and; // b) a method overriding a method in a virtual base.; //; // To get a better understanding of this code,; // you might want to see examples in test/CodeGenCXX/microsoft-abi-vtables-*.cpp",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:1666,Safety,redund,redundant,1666,"ifferences are:; // 1. Separate vftable and vbtable.; //; // 2. Each subobject with a vfptr gets its own vftable rather than an address; // point in a single vtable shared between all the subobjects.; // Each vftable is represented by a separate section and virtual calls; // must be done using the vftable which has a slot for the function to be; // called.; //; // 3. Virtual method definitions expect their 'this' parameter to point to the; // first vfptr whose table provides a compatible overridden method. In many; // cases, this permits the original vf-table entry to directly call; // the method instead of passing through a thunk.; // See example before VFTableBuilder::ComputeThisOffset below.; //; // A compatible overridden method is one which does not have a non-trivial; // covariant-return adjustment.; //; // The first vfptr is the one with the lowest offset in the complete-object; // layout of the defining class, and the method definition will subtract; // that constant offset from the parameter value to get the real 'this'; // value. Therefore, if the offset isn't really constant (e.g. if a virtual; // function defined in a virtual base is overridden in a more derived; // virtual base and these bases have a reverse order in the complete; // object), the vf-table may require a this-adjustment thunk.; //; // 4. vftables do not contain new entries for overrides that merely require; // this-adjustment. Together with #3, this keeps vf-tables smaller and; // eliminates the need for this-adjustment thunks in many cases, at the cost; // of often requiring redundant work to adjust the ""this"" pointer.; //; // 5. Instead of VTT and constructor vtables, vbtables and vtordisps are used.; // Vtordisps are emitted into the class layout if a class has; // a) a user-defined ctor/dtor; // and; // b) a method overriding a method in a virtual base.; //; // To get a better understanding of this code,; // you might want to see examples in test/CodeGenCXX/microsoft-abi-vtables-*.cpp",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:2043,Testability,test,test,2043,"ifferences are:; // 1. Separate vftable and vbtable.; //; // 2. Each subobject with a vfptr gets its own vftable rather than an address; // point in a single vtable shared between all the subobjects.; // Each vftable is represented by a separate section and virtual calls; // must be done using the vftable which has a slot for the function to be; // called.; //; // 3. Virtual method definitions expect their 'this' parameter to point to the; // first vfptr whose table provides a compatible overridden method. In many; // cases, this permits the original vf-table entry to directly call; // the method instead of passing through a thunk.; // See example before VFTableBuilder::ComputeThisOffset below.; //; // A compatible overridden method is one which does not have a non-trivial; // covariant-return adjustment.; //; // The first vfptr is the one with the lowest offset in the complete-object; // layout of the defining class, and the method definition will subtract; // that constant offset from the parameter value to get the real 'this'; // value. Therefore, if the offset isn't really constant (e.g. if a virtual; // function defined in a virtual base is overridden in a more derived; // virtual base and these bases have a reverse order in the complete; // object), the vf-table may require a this-adjustment thunk.; //; // 4. vftables do not contain new entries for overrides that merely require; // this-adjustment. Together with #3, this keeps vf-tables smaller and; // eliminates the need for this-adjustment thunks in many cases, at the cost; // of often requiring redundant work to adjust the ""this"" pointer.; //; // 5. Instead of VTT and constructor vtables, vbtables and vtordisps are used.; // Vtordisps are emitted into the class layout if a class has; // a) a user-defined ctor/dtor; // and; // b) a method overriding a method in a virtual base.; //; // To get a better understanding of this code,; // you might want to see examples in test/CodeGenCXX/microsoft-abi-vtables-*.cpp",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:82,Availability,avail,available,82,"// Provide the RTTI component if RTTIData is enabled. If the vftable would; // be available externally, we should not provide the RTTI componenent. It; // is currently impossible to get available externally vftables with either; // dllimport or extern template instantiations, but eventually we may add a; // flag to support additional devirtualization that needs this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:186,Availability,avail,available,186,"// Provide the RTTI component if RTTIData is enabled. If the vftable would; // be available externally, we should not provide the RTTI componenent. It; // is currently impossible to get available externally vftables with either; // dllimport or extern template instantiations, but eventually we may add a; // flag to support additional devirtualization that needs this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:728,Performance,perform,performed,728,"// end namespace; // Let's study one class hierarchy as an example:; // struct A {; // virtual void f();; // int x;; // };; //; // struct B : virtual A {; // virtual void f();; // };; //; // Record layouts:; // struct A:; // 0 | (A vftable pointer); // 4 | int x; //; // struct B:; // 0 | (B vbtable pointer); // 4 | struct A (virtual base); // 4 | (A vftable pointer); // 8 | int x; //; // Let's assume we have a pointer to the A part of an object of dynamic type B:; // B b;; // A *a = (A*)&b;; // a->f();; //; // In this hierarchy, f() belongs to the vftable of A, so B::f() expects; // ""this"" parameter to point at the A subobject, which is B+4.; // In the B::f() prologue, it adjusts ""this"" back to B by subtracting 4,; // performed as a *static* adjustment.; //; // Interesting thing happens when we alter the relative placement of A and B; // subobjects in a class:; // struct C : virtual B { };; //; // C c;; // A *a = (A*)&c;; // a->f();; //; // Respective record layout is:; // 0 | (C vbtable pointer); // 4 | struct A (virtual base); // 4 | (A vftable pointer); // 8 | int x; // 12 | struct B (virtual base); // 12 | (B vbtable pointer); //; // The final overrider of f() in class C is still B::f(), so B+4 should be; // passed as ""this"" to that code. However, ""a"" points at B-8, so the respective; // vftable entry should hold a thunk that adds 12 to the ""this"" argument before; // performing a tail call to B::f().; //; // With this example in mind, we can now calculate the 'this' argument offset; // for the given method, relative to the beginning of the MostDerivedClass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:1394,Performance,perform,performing,1394,"// end namespace; // Let's study one class hierarchy as an example:; // struct A {; // virtual void f();; // int x;; // };; //; // struct B : virtual A {; // virtual void f();; // };; //; // Record layouts:; // struct A:; // 0 | (A vftable pointer); // 4 | int x; //; // struct B:; // 0 | (B vbtable pointer); // 4 | struct A (virtual base); // 4 | (A vftable pointer); // 8 | int x; //; // Let's assume we have a pointer to the A part of an object of dynamic type B:; // B b;; // A *a = (A*)&b;; // a->f();; //; // In this hierarchy, f() belongs to the vftable of A, so B::f() expects; // ""this"" parameter to point at the A subobject, which is B+4.; // In the B::f() prologue, it adjusts ""this"" back to B by subtracting 4,; // performed as a *static* adjustment.; //; // Interesting thing happens when we alter the relative placement of A and B; // subobjects in a class:; // struct C : virtual B { };; //; // C c;; // A *a = (A*)&c;; // a->f();; //; // Respective record layout is:; // 0 | (C vbtable pointer); // 4 | struct A (virtual base); // 4 | (A vftable pointer); // 8 | int x; // 12 | struct B (virtual base); // 12 | (B vbtable pointer); //; // The final overrider of f() in class C is still B::f(), so B+4 should be; // passed as ""this"" to that code. However, ""a"" points at B-8, so the respective; // vftable entry should hold a thunk that adds 12 to the ""this"" argument before; // performing a tail call to B::f().; //; // With this example in mind, we can now calculate the 'this' argument offset; // for the given method, relative to the beginning of the MostDerivedClass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:182,Energy Efficiency,reduce,reduce,182,// This will hold the smallest this offset among overridees of MD.; // This implies that an offset of a non-virtual base will dominate an offset; // of a virtual base to potentially reduce the number of thunks required; // in the derived classes that inherit this method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:251,Modifiability,inherit,inherit,251,// This will hold the smallest this offset among overridees of MD.; // This implies that an offset of a non-virtual base will dominate an offset; // of a virtual base to potentially reduce the number of thunks required; // in the derived classes that inherit this method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:54,Modifiability,inherit,inheritance,54,"// The interesting things begin when you have virtual inheritance.; // The final overrider will use a static adjustment equal to the offset; // of the vbase in the final overrider class.; // For example, if the final overrider is in a vbase B of the most; // derived class and it overrides a method of the B's own vbase A,; // it uses A* as ""this"". In its prologue, it can cast A* to B* with; // a static offset. This offset is used regardless of the actual; // offset of A from B in the most derived class, requiring an; // this-adjusting thunk in the vftable if A and B are laid out; // differently in the most derived class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:5,Usability,simpl,simple,5,// A simple vtordisp thunk will suffice if the final overrider is defined; // in either the most derived class or its non-virtual base.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:56,Deployability,update,update,56,"// If MD overrides anything in this vftable, we need to update the; // entries.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:457,Modifiability,inherit,inheritance,457,"/// Produces MSVC-compatible vbtable data. The symbols produced by this; /// algorithm match those produced by MSVC 2012 and newer, which is different; /// from MSVC 2010.; ///; /// MSVC 2012 appears to minimize the vbtable names using the following; /// algorithm. First, walk the class hierarchy in the usual order, depth first,; /// left to right, to find all of the subobjects which contain a vbptr field.; /// Visiting each class node yields a list of inheritance paths to vbptrs. Each; /// record with a vbptr creates an initially empty path.; ///; /// To combine paths from child nodes, the paths are compared to check for; /// ambiguity. Paths are ""ambiguous"" if multiple paths have the same set of; /// components in the same order. Each group of ambiguous paths is extended by; /// appending the class of the base from which it came. If the current class; /// node produced an ambiguous path, its path is extended with the current class.; /// After extending paths, MSVC again checks for ambiguity, and extends any; /// ambiguous path which wasn't already extended. Because each node yields an; /// unambiguous set of paths, MSVC doesn't need to extend any path more than once; /// to produce an unambiguous set of paths.; ///; /// TODO: Presumably vftables use the same algorithm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:775,Modifiability,extend,extended,775,"/// Produces MSVC-compatible vbtable data. The symbols produced by this; /// algorithm match those produced by MSVC 2012 and newer, which is different; /// from MSVC 2010.; ///; /// MSVC 2012 appears to minimize the vbtable names using the following; /// algorithm. First, walk the class hierarchy in the usual order, depth first,; /// left to right, to find all of the subobjects which contain a vbptr field.; /// Visiting each class node yields a list of inheritance paths to vbptrs. Each; /// record with a vbptr creates an initially empty path.; ///; /// To combine paths from child nodes, the paths are compared to check for; /// ambiguity. Paths are ""ambiguous"" if multiple paths have the same set of; /// components in the same order. Each group of ambiguous paths is extended by; /// appending the class of the base from which it came. If the current class; /// node produced an ambiguous path, its path is extended with the current class.; /// After extending paths, MSVC again checks for ambiguity, and extends any; /// ambiguous path which wasn't already extended. Because each node yields an; /// unambiguous set of paths, MSVC doesn't need to extend any path more than once; /// to produce an unambiguous set of paths.; ///; /// TODO: Presumably vftables use the same algorithm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:915,Modifiability,extend,extended,915,"/// Produces MSVC-compatible vbtable data. The symbols produced by this; /// algorithm match those produced by MSVC 2012 and newer, which is different; /// from MSVC 2010.; ///; /// MSVC 2012 appears to minimize the vbtable names using the following; /// algorithm. First, walk the class hierarchy in the usual order, depth first,; /// left to right, to find all of the subobjects which contain a vbptr field.; /// Visiting each class node yields a list of inheritance paths to vbptrs. Each; /// record with a vbptr creates an initially empty path.; ///; /// To combine paths from child nodes, the paths are compared to check for; /// ambiguity. Paths are ""ambiguous"" if multiple paths have the same set of; /// components in the same order. Each group of ambiguous paths is extended by; /// appending the class of the base from which it came. If the current class; /// node produced an ambiguous path, its path is extended with the current class.; /// After extending paths, MSVC again checks for ambiguity, and extends any; /// ambiguous path which wasn't already extended. Because each node yields an; /// unambiguous set of paths, MSVC doesn't need to extend any path more than once; /// to produce an unambiguous set of paths.; ///; /// TODO: Presumably vftables use the same algorithm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:959,Modifiability,extend,extending,959,"/// Produces MSVC-compatible vbtable data. The symbols produced by this; /// algorithm match those produced by MSVC 2012 and newer, which is different; /// from MSVC 2010.; ///; /// MSVC 2012 appears to minimize the vbtable names using the following; /// algorithm. First, walk the class hierarchy in the usual order, depth first,; /// left to right, to find all of the subobjects which contain a vbptr field.; /// Visiting each class node yields a list of inheritance paths to vbptrs. Each; /// record with a vbptr creates an initially empty path.; ///; /// To combine paths from child nodes, the paths are compared to check for; /// ambiguity. Paths are ""ambiguous"" if multiple paths have the same set of; /// components in the same order. Each group of ambiguous paths is extended by; /// appending the class of the base from which it came. If the current class; /// node produced an ambiguous path, its path is extended with the current class.; /// After extending paths, MSVC again checks for ambiguity, and extends any; /// ambiguous path which wasn't already extended. Because each node yields an; /// unambiguous set of paths, MSVC doesn't need to extend any path more than once; /// to produce an unambiguous set of paths.; ///; /// TODO: Presumably vftables use the same algorithm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:1013,Modifiability,extend,extends,1013,"/// Produces MSVC-compatible vbtable data. The symbols produced by this; /// algorithm match those produced by MSVC 2012 and newer, which is different; /// from MSVC 2010.; ///; /// MSVC 2012 appears to minimize the vbtable names using the following; /// algorithm. First, walk the class hierarchy in the usual order, depth first,; /// left to right, to find all of the subobjects which contain a vbptr field.; /// Visiting each class node yields a list of inheritance paths to vbptrs. Each; /// record with a vbptr creates an initially empty path.; ///; /// To combine paths from child nodes, the paths are compared to check for; /// ambiguity. Paths are ""ambiguous"" if multiple paths have the same set of; /// components in the same order. Each group of ambiguous paths is extended by; /// appending the class of the base from which it came. If the current class; /// node produced an ambiguous path, its path is extended with the current class.; /// After extending paths, MSVC again checks for ambiguity, and extends any; /// ambiguous path which wasn't already extended. Because each node yields an; /// unambiguous set of paths, MSVC doesn't need to extend any path more than once; /// to produce an unambiguous set of paths.; ///; /// TODO: Presumably vftables use the same algorithm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:1066,Modifiability,extend,extended,1066,"/// Produces MSVC-compatible vbtable data. The symbols produced by this; /// algorithm match those produced by MSVC 2012 and newer, which is different; /// from MSVC 2010.; ///; /// MSVC 2012 appears to minimize the vbtable names using the following; /// algorithm. First, walk the class hierarchy in the usual order, depth first,; /// left to right, to find all of the subobjects which contain a vbptr field.; /// Visiting each class node yields a list of inheritance paths to vbptrs. Each; /// record with a vbptr creates an initially empty path.; ///; /// To combine paths from child nodes, the paths are compared to check for; /// ambiguity. Paths are ""ambiguous"" if multiple paths have the same set of; /// components in the same order. Each group of ambiguous paths is extended by; /// appending the class of the base from which it came. If the current class; /// node produced an ambiguous path, its path is extended with the current class.; /// After extending paths, MSVC again checks for ambiguity, and extends any; /// ambiguous path which wasn't already extended. Because each node yields an; /// unambiguous set of paths, MSVC doesn't need to extend any path more than once; /// to produce an unambiguous set of paths.; ///; /// TODO: Presumably vftables use the same algorithm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:1156,Modifiability,extend,extend,1156,"/// Produces MSVC-compatible vbtable data. The symbols produced by this; /// algorithm match those produced by MSVC 2012 and newer, which is different; /// from MSVC 2010.; ///; /// MSVC 2012 appears to minimize the vbtable names using the following; /// algorithm. First, walk the class hierarchy in the usual order, depth first,; /// left to right, to find all of the subobjects which contain a vbptr field.; /// Visiting each class node yields a list of inheritance paths to vbptrs. Each; /// record with a vbptr creates an initially empty path.; ///; /// To combine paths from child nodes, the paths are compared to check for; /// ambiguity. Paths are ""ambiguous"" if multiple paths have the same set of; /// components in the same order. Each group of ambiguous paths is extended by; /// appending the class of the base from which it came. If the current class; /// node produced an ambiguous path, its path is extended with the current class.; /// After extending paths, MSVC again checks for ambiguity, and extends any; /// ambiguous path which wasn't already extended. Because each node yields an; /// unambiguous set of paths, MSVC doesn't need to extend any path more than once; /// to produce an unambiguous set of paths.; ///; /// TODO: Presumably vftables use the same algorithm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:94,Modifiability,extend,extended,94,// We mangle Base into the path if the path would've been ambiguous and it; // wasn't already extended with Base.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:60,Modifiability,extend,extend,60,"// Keep track of which vtable the derived class is going to extend with; // new methods or bases. We append to either the vftable of our primary; // base, or the first non-virtual base that has a vbtable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:3,Deployability,Update,Update,3,// Update the full offset in the MDC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:66,Modifiability,extend,extend,66,"// Sort the paths into buckets, and if any of them are ambiguous, extend all; // paths in ambiguous buckets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:31,Modifiability,extend,extended,31,// Prevent the path from being extended twice.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:126,Modifiability,extend,extended,126,"// What we're essentially doing here is bucketing together ambiguous paths.; // Any bucket with more than one path in it gets extended by NextBase, which; // is usually the direct base of the inherited the vbptr. This code uses a; // sorted vector to implement a multiset to form the buckets. Note that the; // ordering is based on pointers, but it doesn't change our output order. The; // current algorithm is designed to match MSVC 2012's names.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:192,Modifiability,inherit,inherited,192,"// What we're essentially doing here is bucketing together ambiguous paths.; // Any bucket with more than one path in it gets extended by NextBase, which; // is usually the direct base of the inherited the vbptr. This code uses a; // sorted vector to implement a multiset to form the buckets. Note that the; // ordering is based on pointers, but it doesn't change our output order. The; // current algorithm is designed to match MSVC 2012's names.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:38,Modifiability,extend,extend,38,"// If this bucket has multiple paths, extend them all.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Boolean.h:21,Integrability,Wrap,Wrapper,21,"//===--- Boolean.h - Wrapper for boolean types for the VM -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Boolean.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Boolean.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Boolean.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper around boolean types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Boolean.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Boolean.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.cpp:3,Modifiability,Rewrite,Rewrite,3,// Rewrite the operand of all jumps to this label.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.cpp:3,Security,Access,Access,3,// Access must be aligned!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.cpp:3,Security,Access,Access,3,// Access must be aligned!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.h:22,Availability,avail,available,22,/// Index of the next available label.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.h:29,Modifiability,variab,variable,29,/// Offset of the next local variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:49,Modifiability,variab,variable,49,/// Scope used to handle temporaries in toplevel variable declarations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:9,Performance,load,loaded,9,// Value loaded - nothing to do here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:58,Energy Efficiency,allocate,allocate,58,"// We're creating a complex value here, so we need to; // allocate storage for it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:23,Modifiability,variab,variable,23,// We need a temporary variable holding our return value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:4,Performance,Perform,Perform,4,/// Perform addition/subtraction of a pointer and an integer or; /// subtraction of two pointers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:3,Testability,Log,Logical,3,// Logical OR. Visit LHS and only evaluate RHS if LHS was FALSE.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:3,Testability,Log,Logical,3,// Logical AND.; // Visit LHS. Only visit RHS if LHS was TRUE.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:54,Testability,log,logic,54,"// The kinds of expressions that we have special-case logic here for; // should be kept up to date with the special checks for those; // expressions in Sema.; // alignof decl is always accepted, even if it doesn't make sense: we; // default to 1 in those cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:100,Performance,cache,cached,100,"// If the common expression is an opaque expression, we visit it; // here once so we have its value cached.; // FIXME: This might be necessary (or useful) for all expressions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:134,Modifiability,variab,variable,134,// At this point we either have the evaluated source expression or a pointer; // to an object on the stack. We want to create a local variable that stores; // this value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:18,Modifiability,variab,variable,18,"// Here the local variable is created but the value is removed from the stack,; // so we put it back, because the caller might need it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:22,Performance,cache,cached,22,// FIXME: Ideally the cached value should be cleaned up later.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:100,Modifiability,variab,variable,100,// C++17 onwards require that we evaluate the RHS first.; // Compute RHS and save it in a temporary variable so we can; // load it again later.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:123,Performance,load,load,123,// C++17 onwards require that we evaluate the RHS first.; // Compute RHS and save it in a temporary variable so we can; // load it again later.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:7,Performance,load,load,7,// Now load RHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:100,Modifiability,variab,variable,100,"// C++17 onwards require that we evaluate the RHS first.; // Compute RHS and save it in a temporary variable so we can; // load it again later.; // FIXME: Compound assignments are unsequenced in C, so we might; // have to figure out how to reject them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:123,Performance,load,load,123,"// C++17 onwards require that we evaluate the RHS first.; // Compute RHS and save it in a temporary variable so we can; // load it again later.; // FIXME: Compound assignments are unsequenced in C, so we might; // have to figure out how to reject them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:20,Performance,load,load,20,"// Get LHS pointer, load its value and cast it to the; // computation type if necessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:3,Performance,Perform,Perform,3,// Perform operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:36,Modifiability,variab,variable,36,"// When we're initializing a global variable *or* the storage duration of; // the temporary is explicitly static, create a global variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:130,Modifiability,variab,variable,130,"// When we're initializing a global variable *or* the storage duration of; // the temporary is explicitly static, create a global variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:33,Modifiability,variab,variables,33,"// For everyhing else, use local variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:26,Modifiability,variab,variable,26,"// Otherwise, use a local variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:68,Energy Efficiency,allocate,allocate,68,"// If we're discarding a construct expression, we still need; // to allocate a variable and call the constructor and destructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:79,Modifiability,variab,variable,79,"// If we're discarding a construct expression, we still need; // to allocate a variable and call the constructor and destructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:16,Modifiability,variab,variable,16,// Create local variable to hold the return value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:136,Security,access,access,136,"// If the declaration is a constant value, emit it here even; // though the declaration was not evaluated in the current scope.; // The access mode can only be read in this case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:29,Modifiability,variab,variable,29,// Create and initialize the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:24,Modifiability,variab,variable,24,// Get a pointer to the variable,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:247,Availability,fault,faulty,247,"// If the function is being compiled right now, this is a recursive call.; // In that case, the function can't be valid yet, even though it will be; // later.; // If the function is already fully compiled but not constexpr, it was; // found to be faulty earlier on, so bail out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:26,Modifiability,variab,variables,26,// Check for local/global variables and parameters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:117,Modifiability,variab,variable,117,"/// Evaluates an expression and places the result on the stack. If the; /// expression is of composite type, a local variable will be created; /// and a pointer to said variable will be placed on the stack.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:169,Modifiability,variab,variable,169,"/// Evaluates an expression and places the result on the stack. If the; /// expression is of composite type, a local variable will be created; /// and a pointer to said variable will be placed on the stack.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:82,Modifiability,variab,variable,82,/// Compiles an initializer. This is like visit() but it will never; /// create a variable and instead rely on a variable already having; /// been created. visitInitializer() then relies on a pointer to this; /// variable being on top of the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:113,Modifiability,variab,variable,113,/// Compiles an initializer. This is like visit() but it will never; /// create a variable and instead rely on a variable already having; /// been created. visitInitializer() then relies on a pointer to this; /// variable being on top of the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:213,Modifiability,variab,variable,213,/// Compiles an initializer. This is like visit() but it will never; /// create a variable and instead rely on a variable already having; /// been created. visitInitializer() then relies on a pointer to this; /// variable being on top of the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:30,Modifiability,variab,variable,30,/// Creates and initializes a variable from the given decl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:4,Energy Efficiency,Allocate,Allocates,4,/// Allocates a space storing a local given its type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:23,Performance,load,load,23,"/// Method to directly load a value. If the value can be fetched directly,; /// the direct handler is called. Otherwise, a pointer is left on the stack; /// and the indirect handler is expected to operate on that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:4,Modifiability,Variab,Variable,4,/// Variable to storage mapping.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:67,Modifiability,variab,variable,67,/// Flag inidicating if we're initializing an already created; /// variable. This is set in visitInitializer().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:51,Modifiability,variab,variable,51,/// Flag indicating if we're initializing a global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:29,Modifiability,variab,variable,29,/// Scope chain managing the variable lifetimes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:28,Modifiability,variab,variables,28,/// Generic scope for local variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:35,Modifiability,variab,variables,35,// Emit destructor calls for local variables of record; // type with a destructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:33,Modifiability,variab,variables,33,"/// Emits the destructors of the variables of \param OtherScope; /// when this scope is destroyed. Does not create a Scope in the bytecode at; /// all, this is just a RAII object to emit destructors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:77,Modifiability,variab,variables,77,"/// Like a regular LocalScope, except that the destructors of all local; /// variables are automatically emitted when the AutoScope is destroyed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:37,Modifiability,variab,variable,37,"// If we to this point, just add the variable as a normal local; // variable. It will be destroyed at the end of the block just; // like all others.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:68,Modifiability,variab,variable,68,"// If we to this point, just add the variable as a normal local; // variable. It will be destroyed at the end of the block just; // like all others.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:55,Modifiability,extend,extended,55,/// Expression scope which tracks potentially lifetime extended; /// temporaries which are hoisted to the parent scope on exit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeGenError.cpp:51,Availability,error,error,51,"//===--- ByteCodeGenError.h - Byte code generation error --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeGenError.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeGenError.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeGenError.h:51,Availability,error,error,51,"//===--- ByteCodeGenError.h - Byte code generation error ----------*- C -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeGenError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeGenError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeGenError.h:4,Availability,Error,Error,4,/// Error thrown by the compiler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeGenError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeGenError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeGenError.h:31,Availability,error,error,31,// Range of the item where the error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeGenError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeGenError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeStmtGen.cpp:49,Modifiability,variab,variable,49,/// Visits the given statment without creating a variable; /// scope for it in case it is a compound statement.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeStmtGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeStmtGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeStmtGen.cpp:23,Usability,simpl,simply,23,// Primitive types are simply returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeStmtGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeStmtGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeStmtGen.cpp:41,Modifiability,variab,variable,41,// Now the condition as well as the loop variable assignment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeStmtGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeStmtGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeStmtGen.cpp:24,Modifiability,variab,variable,24,// Initialize condition variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeStmtGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeStmtGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp:53,Availability,alive,alive,53,// Make sure we don't rely on some value being still alive in; // InterpStack memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp:53,Availability,alive,alive,53,// Make sure we don't rely on some value being still alive in; // InterpStack memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp:53,Availability,alive,alive,53,// Make sure we don't rely on some value being still alive in; // InterpStack memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp:17,Modifiability,variab,variables,17,// Ensure global variables are fully initialized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp:11,Integrability,wrap,wrapper,11,/// Simple wrapper around getFloatTypeSemantics() to make code a; /// little shorter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp:4,Usability,Simpl,Simple,4,/// Simple wrapper around getFloatTypeSemantics() to make code a; /// little shorter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp:123,Security,access,access,123,"// State gets destroyed here, so the Stk.clear() below doesn't accidentally; // remove values the State's destructor might access.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp:41,Usability,clear,clear,41,"// State gets destroyed here, so the Stk.clear() below doesn't accidentally; // remove values the State's destructor might access.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.h:559,Availability,error,errors,559,"//===--- Context.h - Context for the constexpr VM ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Defines the constexpr execution context.; //; // The execution context manages cached bytecode and the global context.; // It invokes the compiler and interpreter, propagating errors.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Context.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.h:462,Performance,cache,cached,462,"//===--- Context.h - Context for the constexpr VM ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Defines the constexpr execution context.; //; // The execution context manages cached bytecode and the global context.; // It invokes the compiler and interpreter, propagating errors.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Context.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.h:46,Modifiability,variab,variable,46,/// Returns whether we should create a global variable for the; /// given ValueDecl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Context.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.cpp:107,Energy Efficiency,allocate,allocate,107,"// Floating types are special. They are primitives, but need their; // destructor called, since they might allocate memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h:328,Energy Efficiency,allocate,allocated,328,"/// Inline descriptor embedded in structures and arrays.; ///; /// Such descriptors precede all composite array elements and structure fields.; /// If the base of a pointer is not zero, the base points to the end of this; /// structure. The offset field is used to traverse the pointer chain up; /// to the root structure which allocated the object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h:43,Availability,error,error,43,"/// Original declaration, used to emit the error message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h:49,Integrability,message,message,49,"/// Original declaration, used to emit the error message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h:4,Energy Efficiency,Allocate,Allocates,4,/// Allocates a descriptor for a primitive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h:4,Energy Efficiency,Allocate,Allocates,4,/// Allocates a descriptor for an array of primitives.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h:4,Energy Efficiency,Allocate,Allocates,4,/// Allocates a descriptor for an array of primitives of unknown size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h:4,Energy Efficiency,Allocate,Allocates,4,/// Allocates a descriptor for an array of composites.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h:4,Energy Efficiency,Allocate,Allocates,4,/// Allocates a descriptor for an array of composites of unknown size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h:4,Energy Efficiency,Allocate,Allocates,4,/// Allocates a descriptor for a record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h:16,Energy Efficiency,allocate,allocated,16,"/// Returns the allocated size, including metadata.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Descriptor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/EvalEmitter.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate memory for a local.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/EvalEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/EvalEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/EvalEmitter.cpp:20,Modifiability,variab,variable,20,// Initialize local variable inline descriptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/EvalEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/EvalEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/EvaluationResult.h:49,Availability,error,error,49,// Leave everything empty. Can be used as an; // error marker or for void return values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/EvaluationResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/EvaluationResult.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Function.h:505,Modifiability,variab,variables,505,"//===--- Function.h - Bytecode function for the VM --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Defines the Function class which holds all bytecode function-specific data.; //; // The scope class which describes local variables is also defined here.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Function.h:147,Modifiability,variab,variables,147,"/// Bytecode function.; ///; /// Contains links to the bytecode of the function, as well as metadata; /// describing all arguments and stack-local variables.; ///; /// # Calling Convention; ///; /// When calling a function, all argument values must be on the stack.; ///; /// If the function has a This pointer (i.e. hasThisPointer() returns true,; /// the argument values need to be preceeded by a Pointer for the This object.; ///; /// If the function uses Return Value Optimization, the arguments (and; /// potentially the This pointer) need to be preceeded by a Pointer pointing; /// to the location to construct the returned value.; ///; /// After the function has been called, it will remove all arguments,; /// including RVO and This pointer, from the stack.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Function.h:472,Performance,Optimiz,Optimization,472,"/// Bytecode function.; ///; /// Contains links to the bytecode of the function, as well as metadata; /// describing all arguments and stack-local variables.; ///; /// # Calling Convention; ///; /// When calling a function, all argument values must be on the stack.; ///; /// If the function has a This pointer (i.e. hasThisPointer() returns true,; /// the argument values need to be preceeded by a Pointer for the This object.; ///; /// If the function uses Return Value Optimization, the arguments (and; /// potentially the This pointer) need to be preceeded by a Pointer pointing; /// to the location to construct the returned value.; ///; /// After the function has been called, it will remove all arguments,; /// including RVO and This pointer, from the stack.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Function.h:43,Performance,Optimiz,Optimization,43,"/// Whether this function has Return Value Optimization, i.e.; /// the return value is constructed in the caller's stack frame.; /// This is done for functions that return non-primive values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Function.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Function.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Integral.h:22,Integrability,Wrap,Wrapper,22,"//===--- Integral.h - Wrapper for numeric types for the VM ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Defines the VM types and helpers operating on types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Integral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Integral.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Integral.h:4,Integrability,Wrap,Wrapper,4,"/// Wrapper around numeric types.; ///; /// These wrappers are required to shared an interface between APSint and; /// builtin primitive numeral types, while optimising for storage and; /// allowing methods operating on primitive type to compile to fast code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Integral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Integral.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Integral.h:50,Integrability,wrap,wrappers,50,"/// Wrapper around numeric types.; ///; /// These wrappers are required to shared an interface between APSint and; /// builtin primitive numeral types, while optimising for storage and; /// allowing methods operating on primitive type to compile to fast code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Integral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Integral.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Integral.h:85,Integrability,interface,interface,85,"/// Wrapper around numeric types.; ///; /// These wrappers are required to shared an interface between APSint and; /// builtin primitive numeral types, while optimising for storage and; /// allowing methods operating on primitive type to compile to fast code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Integral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Integral.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/IntegralAP.h:22,Integrability,Wrap,Wrapper,22,"//===--- Integral.h - Wrapper for numeric types for the VM ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Defines the VM types and helpers operating on types.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/IntegralAP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/IntegralAP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/IntegralAP.h:38,Modifiability,variab,variables,38,/// Arbitrary value for uninitialized variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/IntegralAP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/IntegralAP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.cpp:54,Modifiability,inherit,inherited,54,"// If this function is not constexpr because it is an inherited; // non-constexpr constructor, diagnose that directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Interp.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.cpp:82,Modifiability,inherit,inheriting,82,"// FIXME: If DiagDecl is an implicitly-declared special member function; // or an inheriting constructor, we should be much more explicit about why; // it's not constexpr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Interp.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.cpp:32,Integrability,depend,depends,32,"// Inexact result means that it depends on rounding mode. If the requested; // mode is dynamic, the evaluation cannot be made in compile time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Interp.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:18,Modifiability,variab,variable,18,/// Checks if the variable has externally defined storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:36,Security,access,accessible,36,/// Checks if a pointer is live and accessible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:63,Modifiability,variab,variable,63,/// Checks if the Descriptor is of a constexpr or const global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:29,Performance,load,loaded,29,/// Checks if a value can be loaded from a block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:108,Modifiability,variab,variable,108,"// Make sure returned pointers are live. We might be trying to return a; // pointer or reference to a local variable.; // Just return false, since a diagnostic has already been emitted in Sema.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:45,Performance,Load,Load,45,/// 1) Pops a pointer from the stack; /// 2) Load the value from the pointer; /// 3) Writes the value increased by one back to the pointer; /// 4) Pushes the original (pre-inc) value on the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:45,Performance,Load,Load,45,/// 1) Pops a pointer from the stack; /// 2) Load the value from the pointer; /// 3) Writes the value increased by one back to the pointer,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:45,Performance,Load,Load,45,/// 1) Pops a pointer from the stack; /// 2) Load the value from the pointer; /// 3) Writes the value decreased by one back to the pointer; /// 4) Pushes the original (pre-dec) value on the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:45,Performance,Load,Load,45,/// 1) Pops a pointer from the stack; /// 2) Load the value from the pointer; /// 3) Writes the value decreased by one back to the pointer,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:95,Testability,Test,Test,95,"//===----------------------------------------------------------------------===//; // Dup, Pop, Test; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:76,Modifiability,variab,variable,76,/// 1) Pops the value from the stack.; /// 2) Writes the value to the local variable with the; /// given offset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:85,Performance,Load,Load,85,"//===----------------------------------------------------------------------===//; // Load, Store, Init; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:23,Testability,assert,assert,23,// Note that we cannot assert(CallResult.hasValue()) here since; // Ret() above only sets the APValue if the curent frame doesn't; // have a caller set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:38,Availability,DOWN,DOWN,38,"// If the function we call is further DOWN the hierarchy than the; // FieldDesc of our pointer, just get the DeclDesc instead, which; // is the furthest we might go up in the hierarchy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpBlock.cpp:21,Energy Efficiency,Allocate,Allocated,21,"//===--- Block.cpp - Allocated blocks for the interpreter -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Defines the classes describing allocated blocks.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/InterpBlock.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpBlock.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpBlock.cpp:414,Energy Efficiency,allocate,allocated,414,"//===--- Block.cpp - Allocated blocks for the interpreter -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Defines the classes describing allocated blocks.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/InterpBlock.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpBlock.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpBlock.h:24,Energy Efficiency,Allocate,Allocated,24,"//===-- InterpBlock.h - Allocated blocks for the interpreter -*- C++ ----*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Defines the classes describing allocated blocks.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/InterpBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpBlock.h:414,Energy Efficiency,allocate,allocated,414,"//===-- InterpBlock.h - Allocated blocks for the interpreter -*- C++ ----*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Defines the classes describing allocated blocks.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/InterpBlock.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpBlock.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpBuiltin.cpp:44,Integrability,depend,dependent,44,"/// Pushes \p Val to the stack, as a target-dependent 'int'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/InterpBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpBuiltin.cpp:44,Integrability,depend,dependent,44,"/// Pushes \p Val to the stack, as a target-dependent 'long'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/InterpBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpBuiltin.cpp:23,Usability,simpl,simply,23,// The return value is simply the value of the first parameter.; // We ignore the probability.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/InterpBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate memory to store the parameter and the block metadata.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h:24,Modifiability,variab,variables,24,/// Frame storing local variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h:33,Modifiability,variab,variable,33,/// Returns the value of a local variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h:20,Modifiability,variab,variable,20,/// Mutates a local variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h:33,Modifiability,variab,variables,33,/// Returns a pointer to a local variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h:43,Modifiability,variab,variables,43,"/// Fixed, initial storage for known local variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpStack.h:4,Usability,Clear,Clears,4,/// Clears the stack without calling any destructors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/InterpStack.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpStack.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpStack.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate stack space in 1Mb chunks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/InterpStack.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpStack.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpState.cpp:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate a new block, transferring over pointers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/InterpState.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpState.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpState.h:15,Security,access,accessors,15,// Stack frame accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/InterpState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpState.h:3,Security,Access,Access,3,// Access objects from the walker context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/InterpState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpState.h:29,Deployability,update,updates,29,// Forward status checks and updates to the walker.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/InterpState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h:76,Energy Efficiency,allocate,allocated,76,"/// A pointer to a memory block, live or dead.; ///; /// This object can be allocated into interpreter stack frames. If pointing to; /// a live block, it is a link in the chain of pointers pointing to the block.; ///; /// In the simplest form, a Pointer has a Block* (the pointee) and both Base; /// and Offset are 0, which means it will point to raw data.; ///; /// The Base field is used to access metadata about the data. For primitive; /// arrays, the Base is followed by an InitMap. In a variety of cases, the; /// Base is preceded by an InlineDescriptor, which is used to track the; /// initialization state, among other things.; ///; /// The Offset field is used to access the actual data. In other words, the; /// data the pointer decribes can be found at; /// Pointee->rawData() + Pointer.Offset.; ///; ///; /// Pointee Offset; /// │ │; /// │ │; /// ▼ ▼; /// ┌───────┬────────────┬─────────┬────────────────────────────┐; /// │ Block │ InlineDesc │ InitMap │ Actual Data │; /// └───────┴────────────┴─────────┴────────────────────────────┘; /// ▲; /// │; /// │; /// Base",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h:393,Security,access,access,393,"/// A pointer to a memory block, live or dead.; ///; /// This object can be allocated into interpreter stack frames. If pointing to; /// a live block, it is a link in the chain of pointers pointing to the block.; ///; /// In the simplest form, a Pointer has a Block* (the pointee) and both Base; /// and Offset are 0, which means it will point to raw data.; ///; /// The Base field is used to access metadata about the data. For primitive; /// arrays, the Base is followed by an InitMap. In a variety of cases, the; /// Base is preceded by an InlineDescriptor, which is used to track the; /// initialization state, among other things.; ///; /// The Offset field is used to access the actual data. In other words, the; /// data the pointer decribes can be found at; /// Pointee->rawData() + Pointer.Offset.; ///; ///; /// Pointee Offset; /// │ │; /// │ │; /// ▼ ▼; /// ┌───────┬────────────┬─────────┬────────────────────────────┐; /// │ Block │ InlineDesc │ InitMap │ Actual Data │; /// └───────┴────────────┴─────────┴────────────────────────────┘; /// ▲; /// │; /// │; /// Base",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h:673,Security,access,access,673,"/// A pointer to a memory block, live or dead.; ///; /// This object can be allocated into interpreter stack frames. If pointing to; /// a live block, it is a link in the chain of pointers pointing to the block.; ///; /// In the simplest form, a Pointer has a Block* (the pointee) and both Base; /// and Offset are 0, which means it will point to raw data.; ///; /// The Base field is used to access metadata about the data. For primitive; /// arrays, the Base is followed by an InitMap. In a variety of cases, the; /// Base is preceded by an InlineDescriptor, which is used to track the; /// initialization state, among other things.; ///; /// The Offset field is used to access the actual data. In other words, the; /// data the pointer decribes can be found at; /// Pointee->rawData() + Pointer.Offset.; ///; ///; /// Pointee Offset; /// │ │; /// │ │; /// ▼ ▼; /// ┌───────┬────────────┬─────────┬────────────────────────────┐; /// │ Block │ InlineDesc │ InitMap │ Actual Data │; /// └───────┴────────────┴─────────┴────────────────────────────┘; /// ▲; /// │; /// │; /// Base",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h:229,Usability,simpl,simplest,229,"/// A pointer to a memory block, live or dead.; ///; /// This object can be allocated into interpreter stack frames. If pointing to; /// a live block, it is a link in the chain of pointers pointing to the block.; ///; /// In the simplest form, a Pointer has a Block* (the pointee) and both Base; /// and Offset are 0, which means it will point to raw data.; ///; /// The Base field is used to access metadata about the data. For primitive; /// arrays, the Base is followed by an InitMap. In a variety of cases, the; /// Base is preceded by an InlineDescriptor, which is used to track the; /// initialization state, among other things.; ///; /// The Offset field is used to access the actual data. In other words, the; /// data the pointer decribes can be found at; /// Pointee->rawData() + Pointer.Offset.; ///; ///; /// Pointee Offset; /// │ │; /// │ │; /// ▼ ▼; /// ┌───────┬────────────┬─────────┬────────────────────────────┐; /// │ Block │ InlineDesc │ InitMap │ Actual Data │; /// └───────┴────────────┴─────────┴────────────────────────────┘; /// ▲; /// │; /// │; /// Base",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h:36,Testability,test,tests,36,/// Equality operators are just for tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h:37,Usability,usab,usable,37,/// Converts the pointer to a string usable in diagnostics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h:47,Usability,undo,undoing,47,"/// Expands a pointer to the containing array, undoing narrowing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h:4,Security,Access,Accessor,4,/// Accessor for information about the declaration site.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h:4,Security,Access,Accessors,4,/// Accessors for information about the innermost field.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Pointer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/PrimType.h:90,Security,expose,exposes,90,// namespace clang; /// Helper macro to simplify type switches.; /// The macro implicitly exposes a type T in the scope of the inner block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/PrimType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/PrimType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/PrimType.h:40,Usability,simpl,simplify,40,// namespace clang; /// Helper macro to simplify type switches.; /// The macro implicitly exposes a type T in the scope of the inner block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/PrimType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/PrimType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate storage for the string.; // The byte length does not include the null terminator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Program.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate a block for storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Program.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate a block for storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Program.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.cpp:39,Security,access,accessed,39,// Array of unknown bounds - cannot be accessed and pointer arithmetic; // is forbidden on pointers to such objects.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Program.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.h:119,Energy Efficiency,allocate,allocated,119,"// Manually destroy all the blocks. They are almost all harmless,; // but primitive arrays might have an InitMap* heap allocated and; // that needs to be freed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.h:26,Energy Efficiency,allocate,allocate,26,"// Records might actually allocate memory themselves, but they; // are allocated using a BumpPtrAllocator. Call their desctructors; // here manually so they are properly freeing their resources.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.h:71,Energy Efficiency,allocate,allocated,71,"// Records might actually allocate memory themselves, but they; // are allocated using a BumpPtrAllocator. Call their desctructors; // here manually so they are properly freeing their resources.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.h:37,Modifiability,extend,extended,37,/// Creates a global from a lifetime-extended temporary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.h:26,Performance,cache,cached,26,/// Mapping from decls to cached bytecode functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.h:4,Performance,Cache,Cached,4,/// Cached native pointer indices.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.h:4,Energy Efficiency,Allocate,Allocates,4,"/// Allocates the global in the pool, reserving storate for data.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.h:4,Performance,Cache,Cached,4,/// Cached global indices.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Program.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Source.h:4,Integrability,Interface,Interface,4,/// Interface for classes which map locations to sources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/Source.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Source.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.cpp:31,Modifiability,inherit,inheriting,31,"// Use a different note for an inheriting constructor, because from the; // user's perspective it's not really a function at all.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/State.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.h:27,Performance,perform,perform,27,"/// Kinds of access we can perform on an object, for diagnostics. Note that; /// we consider a member function call to be a kind of access, even though; /// it is not formally an access of the object, because it has (largely) the; /// same set of semantic restrictions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/State.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.h:13,Security,access,access,13,"/// Kinds of access we can perform on an object, for diagnostics. Note that; /// we consider a member function call to be a kind of access, even though; /// it is not formally an access of the object, because it has (largely) the; /// same set of semantic restrictions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/State.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.h:132,Security,access,access,132,"/// Kinds of access we can perform on an object, for diagnostics. Note that; /// we consider a member function call to be a kind of access, even though; /// it is not formally an access of the object, because it has (largely) the; /// same set of semantic restrictions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/State.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.h:179,Security,access,access,179,"/// Kinds of access we can perform on an object, for diagnostics. Note that; /// we consider a member function call to be a kind of access, even though; /// it is not formally an access of the object, because it has (largely) the; /// same set of semantic restrictions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/State.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.h:4,Integrability,Interface,Interface,4,/// Interface for the VM to interact with the AST walker's context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/State.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.h:34,Integrability,message,message,34,/// Directly reports a diagnostic message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/AST/Interp/State.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp:105,Energy Efficiency,reduce,reduce,105,"// We only ever need one instance of TrueMatcherImpl, so we create a static; // instance and reuse it to reduce the overhead of the matcher and increase; // the chance of cache hits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp:171,Performance,cache,cache,171,"// We only ever need one instance of TrueMatcherImpl, so we create a static; // instance and reuse it to reduce the overhead of the matcher and increase; // the chance of cache hits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp:369,Integrability,depend,depend,369,"// The 'unless' matcher will always discard the result:; // If the inner matcher doesn't match, unless returns true,; // but the inner matcher cannot have bound anything.; // If the inner matcher matches, the result is false, and; // any possible binding will be discarded.; // We still need to hand in all the bound nodes up to this; // point so the inner matcher can depend on bound nodes,; // and we need to actively discard the bound nodes, otherwise; // the inner matcher will reset the bound nodes if it doesn't; // match, but this would be inversed by 'unless'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp:3,Usability,Simpl,Simple,3,// Simple name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp:185,Availability,failure,failure,185,"// This function is copied and adapted from NamedDecl::printQualifiedName(); // By matching each part individually we optimize in a couple of ways:; // - We can exit early on the first failure.; // - We can skip inline/anonymous namespaces without another pass.; // - We print one name at a time, reducing the chance of overflowing the; // inlined space of the SmallString.; // First, match the name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp:31,Energy Efficiency,adapt,adapted,31,"// This function is copied and adapted from NamedDecl::printQualifiedName(); // By matching each part individually we optimize in a couple of ways:; // - We can exit early on the first failure.; // - We can skip inline/anonymous namespaces without another pass.; // - We print one name at a time, reducing the chance of overflowing the; // inlined space of the SmallString.; // First, match the name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp:31,Modifiability,adapt,adapted,31,"// This function is copied and adapted from NamedDecl::printQualifiedName(); // By matching each part individually we optimize in a couple of ways:; // - We can exit early on the first failure.; // - We can skip inline/anonymous namespaces without another pass.; // - We print one name at a time, reducing the chance of overflowing the; // inlined space of the SmallString.; // First, match the name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp:118,Performance,optimiz,optimize,118,"// This function is copied and adapted from NamedDecl::printQualifiedName(); // By matching each part individually we optimize in a couple of ways:; // - We can exit early on the first failure.; // - We can skip inline/anonymous namespaces without another pass.; // - We print one name at a time, reducing the chance of overflowing the; // inlined space of the SmallString.; // First, match the name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp:87,Safety,safe,safely,87,// Linkage Spec can just be ignored; // FIXME: Any other DeclContext kinds that can be safely disregarded,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:410,Energy Efficiency,efficient,efficiently,410,"//===--- ASTMatchFinder.cpp - Structural query framework ------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements an algorithm to efficiently search for matches on AST nodes.; // Uses memoization to support recursive matches like HasDescendant.; //; // The general idea is to visit all AST nodes with a RecursiveASTVisitor,; // calling the Matches(...) method of each matcher we are running on each; // AST node. The matcher can recurse via the ASTMatchFinder interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:740,Integrability,interface,interface,740,"//===--- ASTMatchFinder.cpp - Structural query framework ------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements an algorithm to efficiently search for matches on AST nodes.; // Uses memoization to support recursive matches like HasDescendant.; //; // The general idea is to visit all AST nodes with a RecursiveASTVisitor,; // calling the Matches(...) method of each matcher we are running on each; // AST node. The matcher can recurse via the ASTMatchFinder interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:148,Energy Efficiency,consumption,consumption,148,"// The maximum number of memoization entries to store.; // 10k has been experimentally found to give a good trade-off; // of performance vs. memory consumption by running matcher; // that match on every statement over a very large codebase.; //; // FIXME: Do some performance optimization in general and; // revisit this number; also, put up micro-benchmarks that we can; // optimize this on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:125,Performance,perform,performance,125,"// The maximum number of memoization entries to store.; // 10k has been experimentally found to give a good trade-off; // of performance vs. memory consumption by running matcher; // that match on every statement over a very large codebase.; //; // FIXME: Do some performance optimization in general and; // revisit this number; also, put up micro-benchmarks that we can; // optimize this on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:264,Performance,perform,performance,264,"// The maximum number of memoization entries to store.; // 10k has been experimentally found to give a good trade-off; // of performance vs. memory consumption by running matcher; // that match on every statement over a very large codebase.; //; // FIXME: Do some performance optimization in general and; // revisit this number; also, put up micro-benchmarks that we can; // optimize this on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:276,Performance,optimiz,optimization,276,"// The maximum number of memoization entries to store.; // 10k has been experimentally found to give a good trade-off; // of performance vs. memory consumption by running matcher; // that match on every statement over a very large codebase.; //; // FIXME: Do some performance optimization in general and; // revisit this number; also, put up micro-benchmarks that we can; // optimize this on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:375,Performance,optimiz,optimize,375,"// The maximum number of memoization entries to store.; // 10k has been experimentally found to give a good trade-off; // of performance vs. memory consumption by running matcher; // that match on every statement over a very large codebase.; //; // FIXME: Do some performance optimization in general and; // revisit this number; also, put up micro-benchmarks that we can; // optimize this on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:348,Testability,benchmark,benchmarks,348,"// The maximum number of memoization entries to store.; // 10k has been experimentally found to give a good trade-off; // of performance vs. memory consumption by running matcher; // that match on every statement over a very large codebase.; //; // FIXME: Do some performance optimization in general and; // revisit this number; also, put up micro-benchmarks that we can; // optimize this on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:25,Safety,avoid,avoid,25,"// We use memoization to avoid running the same matcher on the same; // AST node twice. This struct is the key for looking up match; // result. It consists of an ID of the MatcherInterface (for; // identifying the matcher), a pointer to the AST node and the; // bound nodes before the matcher was executed.; //; // We currently only memoize on nodes whose pointers identify the; // nodes (\c Stmt and \c Decl, but not \c QualType or \c TypeLoc).; // For \c QualType and \c TypeLoc it is possible to implement; // generation of keys for each type.; // FIXME: Benchmark whether memoization of non-pointer typed nodes; // provides enough benefit for the additional amount of code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:558,Testability,Benchmark,Benchmark,558,"// We use memoization to avoid running the same matcher on the same; // AST node twice. This struct is the key for looking up match; // result. It consists of an ID of the MatcherInterface (for; // identifying the matcher), a pointer to the AST node and the; // bound nodes before the matcher was executed.; //; // We currently only memoize on nodes whose pointers identify the; // nodes (\c Stmt and \c Decl, but not \c QualType or \c TypeLoc).; // For \c QualType and \c TypeLoc it is possible to implement; // generation of keys for each type.; // FIXME: Benchmark whether memoization of non-pointer typed nodes; // provides enough benefit for the additional amount of code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:44,Testability,test,tests,44,"// FIXME: Add other base types after adding tests.; // It's OK to always overwrite the bound nodes, as if there was; // no match in this recursive branch, the result set is empty; // anyway.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:51,Performance,perform,perform,51,"// If we need to keep track of the depth, we can't perform data recursion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:3,Safety,Abort,Abort,3,// Abort as soon as a match is found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:747,Usability,simpl,simply,747,"// When we see 'typedef A B', we add name 'B' to the set of names; // A's canonical type maps to. This is necessary for implementing; // isDerivedFrom(x) properly, where x can be the name of the base; // class or any of its aliases.; //; // In general, the is-alias-of (as defined by typedefs) relation; // is tree-shaped, as you can typedef a type more than once. For; // example,; //; // typedef A B;; // typedef A C;; // typedef C D;; // typedef C E;; //; // gives you; //; // A; // |- B; // `- C; // |- D; // `- E; //; // It is wrong to assume that the relation is a chain. A correct; // implementation of isDerivedFrom() needs to recognize that B and; // E are aliases, even though neither is a typedef of the other.; // Therefore, we cannot simply walk through one typedef chain to; // find out whether the type name matches.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:33,Modifiability,variab,variable,33,// Don't traverse under the loop variable,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:13,Performance,cache,cache,13,// Reset the cache outside of the recursive call to make sure we; // don't invalidate any iterators.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:652,Safety,avoid,avoid,652,"// Returns whether an ancestor of \p Node matches \p Matcher.; //; // The order of matching (which can lead to different nodes being bound in; // case there are multiple matches) is breadth first search.; //; // To allow memoization in the very common case of having deeply nested; // expressions inside a template function, we first walk up the AST, memoizing; // the result of the match along the way, as long as there is only a single; // parent.; //; // Once there are multiple parents, the breadth first search order does not; // allow simple memoization on the ancestors. Thus, we only memoize as long; // as there is a single parent.; //; // We avoid a recursive implementation to prevent excessive stack use on; // very deep ASTs (similarly to RecursiveASTVisitor's data recursion).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:541,Usability,simpl,simple,541,"// Returns whether an ancestor of \p Node matches \p Matcher.; //; // The order of matching (which can lead to different nodes being bound in; // case there are multiple matches) is breadth first search.; //; // To allow memoization in the very common case of having deeply nested; // expressions inside a template function, we first walk up the AST, memoizing; // the result of the match along the way, as long as there is only a single; // parent.; //; // Once there are multiple parents, the breadth first search order does not; // allow simple memoization on the ancestors. Thus, we only memoize as long; // as there is a single parent.; //; // We avoid a recursive implementation to prevent excessive stack use on; // very deep ASTs (similarly to RecursiveASTVisitor's data recursion).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:32,Deployability,update,updated,32,"// Memoization keys that can be updated with the result.; // These are the memoizable nodes in the chain of unique parents, which; // terminates when a node has multiple parents, or matches, or is the root.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:19,Deployability,update,update,19,"// When returning, update the memoization cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:42,Performance,cache,cache,42,"// When returning, update the memoization cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:5,Performance,cache,cache,5,// A cache key only makes sense if memoization is possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:13,Performance,cache,cache,13,// Check the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:22,Performance,cache,cache,22,// Don't populate the cache for the matching node!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:329,Testability,assert,asserting,329,"// Nodes may have no parents if:; // a) the node is the TranslationUnitDecl; // b) we have a limited traversal scope that excludes the parent edges; // c) there is a bug in the AST, and the node is not reachable; // Usually the traversal scope is the whole AST, which precludes b.; // Bugs are common enough that it's worthwhile asserting when we can.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:122,Deployability,update,update,122,// BFS starting from the parents not yet considered.; // Memoization of newly visited nodes is not possible (but we still update; // results for the elements in the chain we found above).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:142,Availability,down,down,142,"// Make sure we do not visit the same node twice.; // Otherwise, we'll visit the common ancestors as often as there; // are splits on the way down.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:23,Integrability,interface,interface,23,// Maps an Objective-C interface to its ObjCCompatibleAliasDecls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:29,Integrability,depend,dependent,29,"// If this is the name of a (dependent) template specialization, use the; // definition of the template, even though it might be specialized later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:207,Integrability,interface,interface,207,"// FIXME: Going to the primary template here isn't really correct, but; // unfortunately we accept a Decl matcher for the base class not a Type; // matcher, so it's the best thing we can do with our current interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp:818,Energy Efficiency,efficient,efficient,818,"//===- GtestMatchers.cpp - AST Matchers for Gtest ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements several matchers for popular gtest macros. In general,; // AST matchers cannot match calls to macros. However, we can simulate such; // matches if the macro definition has identifiable elements that themselves can; // be matched. In that case, we can match on those elements and then check that; // the match occurs within an expansion of the desired macro. The more uncommon; // the identified elements, the more efficient this process will be.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp:141,Testability,mock,mocker,141,"// Under the hood, ON_CALL is expanded to a call to `InternalDefaultActionSetAt`; // to set a default action spec to the underlying function mocker, while; // EXPECT_CALL is expanded to a call to `InternalExpectedAt` to set a new; // expectation spec.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp:370,Energy Efficiency,efficient,efficient,370,"// In general, AST matchers cannot match calls to macros. However, we can; // simulate such matches if the macro definition has identifiable elements that; // themselves can be matched. In that case, we can match on those elements and; // then check that the match occurs within an expansion of the desired; // macro. The more uncommon the identified elements, the more efficient this; // process will be.; //; // We use this approach to implement the derived matchers gtestAssert and; // gtestExpect.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp:74,Integrability,depend,depending,74,// A ON_CALL or EXPECT_CALL macro expands to different AST structures; // depending on whether the mock method has arguments or not.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp:99,Testability,mock,mock,99,// A ON_CALL or EXPECT_CALL macro expands to different AST structures; // depending on whether the mock method has arguments or not.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp:29,Testability,mock,mock,29,"// For example,; // `ON_CALL(mock, TwoParamMethod)` is expanded to; // `mock.gmock_TwoArgsMethod(WithoutMatchers(),; // nullptr).InternalDefaultActionSetAt(...)`.; // EXPECT_CALL is the same except; // that it calls `InternalExpectedAt` instead of `InternalDefaultActionSetAt`; // in the end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp:72,Testability,mock,mock,72,"// For example,; // `ON_CALL(mock, TwoParamMethod)` is expanded to; // `mock.gmock_TwoArgsMethod(WithoutMatchers(),; // nullptr).InternalDefaultActionSetAt(...)`.; // EXPECT_CALL is the same except; // that it calls `InternalExpectedAt` instead of `InternalDefaultActionSetAt`; // in the end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp:29,Testability,mock,mock,29,"// For example,; // `ON_CALL(mock, TwoParamMethod(m1, m2))` is expanded to; // `mock.gmock_TwoParamMethod(m1,m2)(WithoutMatchers(),; // nullptr).InternalDefaultActionSetAt(...)`.; // EXPECT_CALL is the same except that it calls `InternalExpectedAt` instead; // of `InternalDefaultActionSetAt` in the end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp:80,Testability,mock,mock,80,"// For example,; // `ON_CALL(mock, TwoParamMethod(m1, m2))` is expanded to; // `mock.gmock_TwoParamMethod(m1,m2)(WithoutMatchers(),; // nullptr).InternalDefaultActionSetAt(...)`.; // EXPECT_CALL is the same except that it calls `InternalExpectedAt` instead; // of `InternalDefaultActionSetAt` in the end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Diagnostics.cpp:44,Availability,error,error,44,"//===--- Diagnostics.cpp - Helper class for error diagnostics ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Diagnostics.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Diagnostics.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Diagnostics.cpp:13,Availability,error,errors,13,// Merge all errors that happened while in this context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Diagnostics.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Diagnostics.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Diagnostics.cpp:14,Availability,error,errors,14,// Revert the errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Diagnostics.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Diagnostics.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Diagnostics.cpp:42,Availability,error,error,42,// TODO: Add type info about the overload error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Diagnostics.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Diagnostics.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:430,Integrability,wrap,wrap,430,"//===- Marshallers.h - Generic matcher function marshallers -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Functions templates and classes to wrap matcher construct functions.; ///; /// A collection of template function and classes that provide a generic; /// marshalling layer on top of matcher construct functions.; /// These are used by the registry to export all marshaller constructors with; /// the same generic interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:706,Integrability,interface,interface,706,"//===- Marshallers.h - Generic matcher function marshallers -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Functions templates and classes to wrap matcher construct functions.; ///; /// A collection of template function and classes that provide a generic; /// marshalling layer on top of matcher construct functions.; /// These are used by the registry to export all marshaller constructors with; /// the same generic interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:23,Integrability,interface,interface,23,"/// Matcher descriptor interface.; ///; /// Provides a \c create() method that constructs the matcher from the provided; /// arguments, and various other methods for type introspection.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:218,Energy Efficiency,charge,charge,218,"/// Simple callback implementation. Marshaller and function are provided.; ///; /// This class wraps a function of arbitrary signature and a marshaller; /// function into a MatcherDescriptor.; /// The marshaller is in charge of taking the VariantValue arguments, checking; /// their types, unpacking them and calling the underlying function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:95,Integrability,wrap,wraps,95,"/// Simple callback implementation. Marshaller and function are provided.; ///; /// This class wraps a function of arbitrary signature and a marshaller; /// function into a MatcherDescriptor.; /// The marshaller is in charge of taking the VariantValue arguments, checking; /// their types, unpacking them and calling the underlying function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:4,Usability,Simpl,Simple,4,"/// Simple callback implementation. Marshaller and function are provided.; ///; /// This class wraps a function of arbitrary signature and a marshaller; /// function into a MatcherDescriptor.; /// The marshaller is in charge of taking the VariantValue arguments, checking; /// their types, unpacking them and calling the underlying function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:84,Modifiability,polymorphi,polymorphic,84,/// Helper methods to extract and merge all possible typed matchers; /// out of the polymorphic object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:155,Modifiability,polymorphi,polymorphic,155,"/// Convert the return values of the functions into a VariantMatcher.; ///; /// There are 2 cases right now: The return value is a Matcher<T> or is a; /// polymorphic matcher. For the former, we just construct the VariantMatcher.; /// For the latter, we instantiate all the possible Matcher<T> of the poly; /// matcher.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:79,Availability,error,error,79,"// This isn't ideal, but it's better than reporting an empty string as; // the error in this case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:75,Integrability,wrap,wraps,75,"/// Matcher descriptor for variadic functions.; ///; /// This class simply wraps a VariadicFunction with the right signature to export; /// it as a MatcherDescriptor.; /// This allows us to have one implementation of the interface for as many free; /// functions as we want, reducing the number of symbols and size of the; /// object file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:221,Integrability,interface,interface,221,"/// Matcher descriptor for variadic functions.; ///; /// This class simply wraps a VariadicFunction with the right signature to export; /// it as a MatcherDescriptor.; /// This allows us to have one implementation of the interface for as many free; /// functions as we want, reducing the number of symbols and size of the; /// object file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:68,Usability,simpl,simply,68,"/// Matcher descriptor for variadic functions.; ///; /// This class simply wraps a VariadicFunction with the right signature to export; /// it as a MatcherDescriptor.; /// This allows us to have one implementation of the interface for as many free; /// functions as we want, reducing the number of symbols and size of the; /// object file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:80,Energy Efficiency,adapt,adaptative,80,/// Helper class used to collect all the possible overloads of an; /// argument adaptative matcher function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:80,Modifiability,adapt,adaptative,80,/// Helper class used to collect all the possible overloads of an; /// argument adaptative matcher function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:142,Availability,error,errors,142,"/// MatcherDescriptor that wraps multiple ""overloads"" of the same; /// matcher.; ///; /// It will try every overload and generate appropriate errors for when none or; /// more than one overloads match the arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:27,Integrability,wrap,wraps,27,"/// MatcherDescriptor that wraps multiple ""overloads"" of the same; /// matcher.; ///; /// It will try every overload and generate appropriate errors for when none or; /// more than one overloads match the arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:42,Availability,error,errors,42,// No overload matched.; // We ignore the errors if any matcher succeeded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:79,Safety,detect,detect,79,"/// Helper functions to select the appropriate marshaller functions.; /// They detect the number of arguments, arguments types and return type.; /// 0-arg overload",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:13,Energy Efficiency,adapt,adaptative,13,/// Argument adaptative overload.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:13,Modifiability,adapt,adaptative,13,/// Argument adaptative overload.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp:4,Usability,Simpl,Simple,4,/// Simple structure to hold information for one token from the parser.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp:4,Usability,Simpl,Simple,4,/// Simple tokenizer for the parser.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp:130,Availability,failure,failure,130,/// Parse expressions that start with an identifier.; ///; /// This function can parse named values and matchers.; /// In case of failure it will try to determine the user's intent to give; /// an appropriate error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp:209,Availability,error,error,209,/// Parse expressions that start with an identifier.; ///; /// This function can parse named values and matchers.; /// In case of failure it will try to determine the user's intent to give; /// an appropriate error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp:215,Integrability,message,message,215,/// Parse expressions that start with an identifier.; ///; /// This function can parse named values and matchers.; /// In case of failure it will try to determine the user's intent to give; /// an appropriate error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp:32,Availability,error,error,32,// TODO: We could use different error codes for each/some to be more; // explicit about the syntax error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp:99,Availability,error,error,99,// TODO: We could use different error codes for each/some to be more; // explicit about the syntax error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp:181,Availability,error,error,181,"/// Parse and validate a matcher expression.; /// \return \c true on success, in which case \c Value has the matcher parsed.; /// If the input is malformed, or some argument has an error, it; /// returns \c false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp:14,Security,validat,validate,14,"/// Parse and validate a matcher expression.; /// \return \c true on success, in which case \c Value has the matcher parsed.; /// If the input is malformed, or some argument has an error, it; /// returns \c false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp:8,Availability,error,error,8,// This error was already reported by the tokenizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Parser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Registry.cpp:78,Modifiability,Polymorphi,Polymorphic,78,"// TODO: Here is the list of the missing matchers, grouped by reason.; //; // Polymorphic + argument overload:; // findAll; //; // Other:; // equalsNode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Registry.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Registry.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/VariantValue.cpp:28,Modifiability,Polymorphi,Polymorphic,28,"//===--- VariantValue.cpp - Polymorphic value type --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Polymorphic value type.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/VariantValue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/VariantValue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/VariantValue.cpp:396,Modifiability,Polymorphi,Polymorphic,396,"//===--- VariantValue.cpp - Polymorphic value type --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Polymorphic value type.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/VariantValue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/VariantValue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/VariantValue.cpp:3,Safety,Abort,Abort,3,// Abort if any of the inner matchers can't be converted to; // Matcher<T>.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/VariantValue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/VariantValue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Attributes.cpp:428,Integrability,interface,interface,428,"//===--- Attributes.cpp ---------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the AttributeCommonInfo interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Attributes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Attributes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Attributes.cpp:16,Modifiability,plugin,plugin,16,// Check if any plugin provides this attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Attributes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Attributes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Attributes.cpp:8,Modifiability,variab,variables,8,// Both variables will be used in tablegen generated; // attribute spell list index matching code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Attributes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Attributes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Builtins.cpp:125,Modifiability,portab,portable,125,/// initializeBuiltins - Mark the identifiers for all the builtins with their; /// appropriate builtin ID # and mark any non-portable builtin identifiers as; /// such.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Builtins.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Builtins.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/CLWarnings.cpp:426,Integrability,interface,interfaces,426,"//===--- CLWarnings.h - Maps some cl.exe warning ids -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the Diagnostic-related interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/CLWarnings.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/CLWarnings.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Cuda.cpp:19,Integrability,depend,depend,19,// AMD GPUs do not depend on CUDA versions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Cuda.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Cuda.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Cuda.cpp:19,Integrability,depend,depend,19,// AMD GPUs do not depend on CUDA versions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Cuda.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Cuda.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DarwinSDKInfo.cpp:118,Safety,avoid,avoid,118,"// If no exact entry found, try just the major key version. Only do so when; // a minor version number is present, to avoid recursing indefinitely into; // the major-only check.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DarwinSDKInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DarwinSDKInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:427,Integrability,interface,interfaces,427,"//===- Diagnostic.cpp - C Language Family Diagnostic Handling -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the Diagnostic-related interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:68,Security,access,access,68,"// If we own the diagnostic client, destroy it first so that it can access the; // engine from its destructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:3,Usability,Clear,Clear,3,// Clear state related to #pragma diagnostic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:358,Testability,assert,assert,358,"// Deal with a state change induce by recursive parsing. The first parsing is; // suspended and a (recursive) parsing is started between associated (in the upper/outer; // file) with a newer line (hence greater offset). After the end of the recursive; // parsing, we go back to the first parsing and any state change will done 'earlier'; // and trigger:; // assert(Last.Offset <= Offset && ""state transitions added out of order"");",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:50,Availability,error,error,50,// Don't allow a mapping to a warning override an error/fatal mapping.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:218,Deployability,update,update,218,"// FIXME: This is theoretically wrong: if the current state is shared with; // some other location (via push/pop) we will change the state for that; // other location as well. This cannot currently happen, as we can't update; // the diagnostic state at the same location at which we pop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:83,Availability,error,errors,83,"// If we are enabling this feature, just set the diagnostic mappings to map to; // errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:91,Availability,down,downgrade,91,"// Otherwise, we want to set the diagnostic mapping's ""no Werror"" bit, and; // potentially downgrade anything already mapped to be a warning.; // Get the diagnostics in this group.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:3,Performance,Perform,Perform,3,// Perform the mapping change.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:89,Availability,error,errors,89,"// If we are enabling this feature, just set the diagnostic mappings to map to; // fatal errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:65,Availability,error,errors,65,"// Otherwise, we want to set the diagnostic mapping's ""no Wfatal-errors"" bit,; // and potentially downgrade anything already mapped to be a fatal error.; // Get the diagnostics in this group.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:98,Availability,down,downgrade,98,"// Otherwise, we want to set the diagnostic mapping's ""no Wfatal-errors"" bit,; // and potentially downgrade anything already mapped to be a fatal error.; // Get the diagnostics in this group.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:146,Availability,error,error,146,"// Otherwise, we want to set the diagnostic mapping's ""no Wfatal-errors"" bit,; // and potentially downgrade anything already mapped to be a fatal error.; // Get the diagnostics in this group.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:3,Performance,Perform,Perform,3,// Perform the mapping change.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:43,Integrability,message,message,43,// Figure out the diagnostic level of this message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:3,Usability,Clear,Clear,3,// Clear out the current diagnostic object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:4,Testability,Test,TestPluralRange,4,/// TestPluralRange - Test if Val is in the parsed range. Modifies Start.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:22,Testability,Test,Test,22,/// TestPluralRange - Test if Val is in the parsed range. Modifies Start.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:258,Testability,test,tested,258,"/// HandlePluralModifier - Handle the integer 'plural' modifier. This is used; /// for complex plural forms, or in languages where all plurals are complex.; /// The syntax is: %plural{cond1:form1|cond2:form2|:form3}, where condn are; /// conditions that are tested in order, the form corresponding to the first; /// that applies being emitted. The empty condition is always true, making the; /// last form a default case.; /// Conditions are simple boolean expressions, where n is the number argument.; /// Here are the rules.; /// condition := expression | empty; /// empty := -> always true; /// expression := numeric [',' expression] -> logical or; /// numeric := range -> true if n in range; /// | '%' number '=' range -> true if n % number in range; /// range := number; /// | '[' number ',' number ']' -> ranges are inclusive both ends; ///; /// Here are some examples from the GNU gettext manual written in this form:; /// English:; /// {1:form0|:form1}; /// Latvian:; /// {0:form2|%100=11,%10=0,%10=[2,9]:form1|:form0}; /// Gaeilge:; /// {1:form0|2:form1|:form2}; /// Romanian:; /// {1:form0|0,%100=[1,19]:form1|:form2}; /// Lithuanian:; /// {%10=0,%100=[10,19]:form2|%10=1:form0|:form1}; /// Russian (requires repeated form):; /// {%100=[11,14]:form2|%10=1:form0|%10=[2,4]:form1|:form2}; /// Slovak; /// {1:form0|[2,4]:form1|:form2}; /// Polish (requires repeated form):; /// {1:form0|%100=[10,20]:form2|%10=[2,4]:form1|:form2}",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:640,Testability,log,logical,640,"/// HandlePluralModifier - Handle the integer 'plural' modifier. This is used; /// for complex plural forms, or in languages where all plurals are complex.; /// The syntax is: %plural{cond1:form1|cond2:form2|:form3}, where condn are; /// conditions that are tested in order, the form corresponding to the first; /// that applies being emitted. The empty condition is always true, making the; /// last form a default case.; /// Conditions are simple boolean expressions, where n is the number argument.; /// Here are the rules.; /// condition := expression | empty; /// empty := -> always true; /// expression := numeric [',' expression] -> logical or; /// numeric := range -> true if n in range; /// | '%' number '=' range -> true if n % number in range; /// range := number; /// | '[' number ',' number ']' -> ranges are inclusive both ends; ///; /// Here are some examples from the GNU gettext manual written in this form:; /// English:; /// {1:form0|:form1}; /// Latvian:; /// {0:form2|%100=11,%10=0,%10=[2,9]:form1|:form0}; /// Gaeilge:; /// {1:form0|2:form1|:form2}; /// Romanian:; /// {1:form0|0,%100=[1,19]:form1|:form2}; /// Lithuanian:; /// {%10=0,%100=[10,19]:form2|%10=1:form0|:form1}; /// Russian (requires repeated form):; /// {%100=[11,14]:form2|%10=1:form0|%10=[2,4]:form1|:form2}; /// Slovak; /// {1:form0|[2,4]:form1|:form2}; /// Polish (requires repeated form):; /// {1:form0|%100=[10,20]:form2|%10=[2,4]:form1|:form2}",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:442,Usability,simpl,simple,442,"/// HandlePluralModifier - Handle the integer 'plural' modifier. This is used; /// for complex plural forms, or in languages where all plurals are complex.; /// The syntax is: %plural{cond1:form1|cond2:form2|:form3}, where condn are; /// conditions that are tested in order, the form corresponding to the first; /// that applies being emitted. The empty condition is always true, making the; /// last form a default case.; /// Conditions are simple boolean expressions, where n is the number argument.; /// Here are the rules.; /// condition := expression | empty; /// empty := -> always true; /// expression := numeric [',' expression] -> logical or; /// numeric := range -> true if n in range; /// | '%' number '=' range -> true if n % number in range; /// range := number; /// | '[' number ',' number ']' -> ranges are inclusive both ends; ///; /// Here are some examples from the GNU gettext manual written in this form:; /// English:; /// {1:form0|:form1}; /// Latvian:; /// {0:form2|%100=11,%10=0,%10=[2,9]:form1|:form0}; /// Gaeilge:; /// {1:form0|2:form1|:form2}; /// Romanian:; /// {1:form0|0,%100=[1,19]:form1|:form2}; /// Lithuanian:; /// {%10=0,%100=[10,19]:form2|%10=1:form0|:form1}; /// Russian (requires repeated form):; /// {%100=[11,14]:form2|%10=1:form0|%10=[2,4]:form1|:form2}; /// Slovak; /// {1:form0|[2,4]:form1|:form2}; /// Polish (requires repeated form):; /// {1:form0|%100=[10,20]:form2|%10=[2,4]:form1|:form2}",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:105,Integrability,message,messages,105,/// Returns the friendly description for a token kind that will appear; /// without quotes in diagnostic messages. These strings may be translatable in; /// future.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:187,Safety,avoid,avoid,187,"/// FormattedArgs - Keep track of all of the arguments formatted by; /// ConvertArgToString and pass them into subsequent calls to; /// ConvertArgToString, allowing the implementation to avoid redundancies in; /// obvious cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:193,Safety,redund,redundancies,193,"/// FormattedArgs - Keep track of all of the arguments formatted by; /// ConvertArgToString and pass them into subsequent calls to; /// ConvertArgToString, allowing the implementation to avoid redundancies in; /// obvious cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp:9,Testability,assert,assert,9,"// Don't assert if we are in a CrashRecovery context, as this invariant may; // be invalidated during a crash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Diagnostic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:431,Integrability,interface,interfaces,431,"//===--- DiagnosticIDs.cpp - Diagnostic IDs Handling ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the Diagnostic IDs-related interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:49,Safety,avoid,avoid,49,"// Store the descriptions in a separate table to avoid pointers that need to; // be relocated, and also decrease the amount of data needed on 64-bit; // platforms. See ""How To Write Shared Libraries"" by Ulrich Drepper.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:3,Safety,Avoid,Avoid,3,// Avoid out of bounds reads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:59,Safety,abort,abort,59,"// If the diag id doesn't match we found a different diag, abort. This can; // happen when this function is called with an ID that points into a hole in; // the diagID space.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:71,Integrability,message,message,71,"/// getCustomDiagID - Return an ID for a diagnostic with the specified message; /// and level. If this is the first request for this diagnostic, it is; /// registered and created, otherwise the existing ID is returned.; ///; /// \param FormatString A fixed diagnostic format string that will be hashed and; /// mapped to a unique DiagID.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:295,Security,hash,hashed,295,"/// getCustomDiagID - Return an ID for a diagnostic with the specified message; /// and level. If this is the first request for this diagnostic, it is; /// registered and created, otherwise the existing ID is returned.; ///; /// \param FormatString A fixed diagnostic format string that will be hashed and; /// mapped to a unique DiagID.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:296,Availability,error,error,296,"/// isBuiltinExtensionDiag - Determine whether the given built-in diagnostic; /// ID is for an extension of some sort. This also returns EnabledByDefault,; /// which is set to indicate whether the diagnostic is ignored by default (in; /// which case -pedantic enables it) or treated as a warning/error by default.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:53,Modifiability,config,configured,53,"/// getDiagnosticLevel - Based on the way the client configured the; /// DiagnosticsEngine object, classify the specified diagnostic ID into a Level,; /// by consumable the DiagnosticClient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:32,Modifiability,config,configured,32,"/// Based on the way the client configured the Diagnostic; /// object, classify the specified diagnostic ID into a Level, consumable by; /// the DiagnosticClient.; ///; /// \param Loc The source location we are interested in finding out the; /// diagnostic state. Can be null in order to query the latest state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:16,Availability,error,error,16,// Specific non-error diagnostics may be mapped to various levels from ignored; // to error. Errors can only be mapped to fatal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:86,Availability,error,error,86,// Specific non-error diagnostics may be mapped to various levels from ignored; // to error. Errors can only be mapped to fatal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:93,Availability,Error,Errors,93,// Specific non-error diagnostics may be mapped to various levels from ignored; // to error. Errors can only be mapped to fatal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:3,Deployability,Upgrade,Upgrade,3,// Upgrade ignored diagnostics if -Weverything is enabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:89,Deployability,upgrade,upgrade,89,"// For extension diagnostics that haven't been explicitly mapped, check if we; // should upgrade the diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:26,Availability,error,errors,26,"// At this point, ignored errors can no longer be upgraded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:50,Deployability,upgrade,upgraded,50,"// At this point, ignored errors can no longer be upgraded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:54,Availability,Error,Error,54,"// Honor -w: this disables all messages which are not Error/Fatal by; // default (disregarding attempts to upgrade severity from Warning to Error),; // as well as disabling all messages which are currently mapped to Warning; // (whether by default or downgraded from Error via e.g. -Wno-error or #pragma; // diagnostic.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:140,Availability,Error,Error,140,"// Honor -w: this disables all messages which are not Error/Fatal by; // default (disregarding attempts to upgrade severity from Warning to Error),; // as well as disabling all messages which are currently mapped to Warning; // (whether by default or downgraded from Error via e.g. -Wno-error or #pragma; // diagnostic.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:251,Availability,down,downgraded,251,"// Honor -w: this disables all messages which are not Error/Fatal by; // default (disregarding attempts to upgrade severity from Warning to Error),; // as well as disabling all messages which are currently mapped to Warning; // (whether by default or downgraded from Error via e.g. -Wno-error or #pragma; // diagnostic.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:267,Availability,Error,Error,267,"// Honor -w: this disables all messages which are not Error/Fatal by; // default (disregarding attempts to upgrade severity from Warning to Error),; // as well as disabling all messages which are currently mapped to Warning; // (whether by default or downgraded from Error via e.g. -Wno-error or #pragma; // diagnostic.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:287,Availability,error,error,287,"// Honor -w: this disables all messages which are not Error/Fatal by; // default (disregarding attempts to upgrade severity from Warning to Error),; // as well as disabling all messages which are currently mapped to Warning; // (whether by default or downgraded from Error via e.g. -Wno-error or #pragma; // diagnostic.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:107,Deployability,upgrade,upgrade,107,"// Honor -w: this disables all messages which are not Error/Fatal by; // default (disregarding attempts to upgrade severity from Warning to Error),; // as well as disabling all messages which are currently mapped to Warning; // (whether by default or downgraded from Error via e.g. -Wno-error or #pragma; // diagnostic.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:31,Integrability,message,messages,31,"// Honor -w: this disables all messages which are not Error/Fatal by; // default (disregarding attempts to upgrade severity from Warning to Error),; // as well as disabling all messages which are currently mapped to Warning; // (whether by default or downgraded from Error via e.g. -Wno-error or #pragma; // diagnostic.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:177,Integrability,message,messages,177,"// Honor -w: this disables all messages which are not Error/Fatal by; // default (disregarding attempts to upgrade severity from Warning to Error),; // as well as disabling all messages which are currently mapped to Warning; // (whether by default or downgraded from Error via e.g. -Wno-error or #pragma; // diagnostic.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:42,Availability,error,errors,42,"// If -Werror is enabled, map warnings to errors unless explicitly disabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:14,Availability,error,errors,14,"// If -Wfatal-errors is enabled, map errors to fatal unless explicitly; // disabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:37,Availability,error,errors,37,"// If -Wfatal-errors is enabled, map errors to fatal unless explicitly; // disabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:38,Availability,error,errors,38,"// If explicitly requested, map fatal errors to errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:48,Availability,error,errors,48,"// If explicitly requested, map fatal errors to errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:167,Availability,error,errors,167,"// If we are in a system header, we ignore it. We look at the diagnostic class; // because we also want to ignore extensions and warnings in -Werror and; // -pedantic-errors modes, which *map* warnings/extensions to errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:216,Availability,error,errors,216,"// If we are in a system header, we ignore it. We look at the diagnostic class; // because we also want to ignore extensions and warnings in -Werror and; // -pedantic-errors modes, which *map* warnings/extensions to errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:43,Integrability,message,message,43,// Figure out the diagnostic level of this message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:57,Availability,error,error,57,// Update counts for DiagnosticErrorTrap even if a fatal error occurred; // or diagnostics are suppressed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:3,Deployability,Update,Update,3,// Update counts for DiagnosticErrorTrap even if a fatal error occurred; // or diagnostics are suppressed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:23,Availability,error,error,23,"// Record that a fatal error occurred only when we see a second; // non-note diagnostic. This allows notes to be attached to the; // fatal error, but suppresses any diagnostics that follow those; // notes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:139,Availability,error,error,139,"// Record that a fatal error occurred only when we see a second; // non-note diagnostic. This allows notes to be attached to the; // fatal error, but suppresses any diagnostics that follow those; // notes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:14,Availability,error,error,14,"// If a fatal error has already been emitted, silence all subsequent; // diagnostics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:41,Integrability,message,message,41,"// If the client doesn't care about this message, don't issue it. If this is; // a note and the last real diagnostic was ignored, ignore it too.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:40,Availability,error,errors,40,// Warnings which have been upgraded to errors do not prevent compilation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:28,Deployability,upgrade,upgraded,28,// Warnings which have been upgraded to errors do not prevent compilation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:29,Availability,error,errors,29,"// If we've emitted a lot of errors, emit a fatal error instead of it to; // stop a flood of bogus errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:50,Availability,error,error,50,"// If we've emitted a lot of errors, emit a fatal error instead of it to; // stop a flood of bogus errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:99,Availability,error,errors,99,"// If we've emitted a lot of errors, emit a fatal error instead of it to; // stop a flood of bogus errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:8,Availability,error,errors,8,// Only errors may be unrecoverable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:33,Availability,error,errors,33,// Currently we consider all ARC errors as recoverable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:43,Availability,recover,recoverable,43,// Currently we consider all ARC errors as recoverable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:43,Safety,recover,recoverable,43,// Currently we consider all ARC errors as recoverable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticOptions.cpp:434,Integrability,interface,interfaces,434,"//===- DiagnosticOptions.cpp - C Language Family Diagnostic Handling ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the DiagnosticOptions related interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/DiagnosticOptions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticOptions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:420,Integrability,interface,interface,420,"//===--- FileManager.cpp - File System Probing and Caching ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the FileManager interface.; //; //===----------------------------------------------------------------------===//; //; // TODO: This should index all interesting directories with dirent calls.; // getdirentries ?; // opendir/readdir_r/closedir ?; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:92,Testability,log,logic,92,//===----------------------------------------------------------------------===//; // Common logic.; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:47,Performance,cache,cache,47,"// When caching a virtual directory, we always cache its ancestors; // at the same time. Therefore, if DirName is already in the cache,; // we don't need to recurse as its ancestors must also already be in; // the cache (or it's a known non-virtual directory).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:129,Performance,cache,cache,129,"// When caching a virtual directory, we always cache its ancestors; // at the same time. Therefore, if DirName is already in the cache,; // we don't need to recurse as its ancestors must also already be in; // the cache (or it's a known non-virtual directory).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:214,Performance,cache,cache,214,"// When caching a virtual directory, we always cache its ancestors; // at the same time. Therefore, if DirName is already in the cache,; // we don't need to recurse as its ancestors must also already be in; // the cache (or it's a known non-virtual directory).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:36,Performance,cache,cache,36,// Add the virtual directory to the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:34,Testability,test,test,34,"// Fixing a problem with ""clang C:test.c"" on Windows.; // Stat(""C:"") does not recognize ""C:"" as a valid directory",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:349,Availability,failure,failure,349,"// Look up the directory for the file. When looking up something like; // sys/foo.h we'll discover all of the search directories that have a 'sys'; // subdirectory. This will let us avoid having to waste time on known-to-fail; // searches when we go to find sys/bar.h, because all the search directories; // without a 'sys' subdir will get a cached failure result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:342,Performance,cache,cached,342,"// Look up the directory for the file. When looking up something like; // sys/foo.h we'll discover all of the search directories that have a 'sys'; // subdirectory. This will let us avoid having to waste time on known-to-fail; // searches when we go to find sys/bar.h, because all the search directories; // without a 'sys' subdir will get a cached failure result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:182,Safety,avoid,avoid,182,"// Look up the directory for the file. When looking up something like; // sys/foo.h we'll discover all of the search directories that have a 'sys'; // subdirectory. This will let us avoid having to waste time on known-to-fail; // searches when we go to find sys/bar.h, because all the search directories; // without a 'sys' subdir will get a cached failure result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:100,Energy Efficiency,reduce,reduce,100,"// FIXME: Use the directory info to prune this, before doing the stat syscall.; // FIXME: This will reduce the # syscalls.; // Check to see if the file exists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:1024,Availability,avail,available,1024,"// Name mismatch. We need a redirect. First grab the actual entry we want; // to return.; //; // This redirection logic intentionally leaks the external name of a; // redirected file that uses 'use-external-name' in \a; // vfs::RedirectionFileSystem. This allows clang to report the external; // name to users (in diagnostics) and to tools that don't have access to; // the VFS (in debug info and dependency '.d' files).; //; // FIXME: This is pretty complex and has some very complicated interactions; // with the rest of clang. It's also inconsistent with how ""real""; // filesystems behave and confuses parts of clang expect to see the; // name-as-accessed on the \a FileEntryRef.; //; // A potential plan to remove this is as follows -; // - Update callers such as `HeaderSearch::findUsableModuleForHeader()`; // to explicitly use the `getNameAsRequested()` rather than just using; // `getName()`.; // - Add a `FileManager::getExternalPath` API for explicitly getting the; // remapped external filename when there is one available. Adopt it in; // callers like diagnostics/deps reporting instead of calling; // `getName()` directly.; // - Switch the meaning of `FileEntryRef::getName()` to get the requested; // name, not the external name. Once that sticks, revert callers that; // want the requested name back to calling `getName()`.; // - Update the VFS to always return the requested name. This could also; // return the external name, or just have an API to request it; // lazily. The latter has the benefit of making accesses of the; // external path easily tracked, but may also require extra work than; // just returning up front.; // - (Optionally) Add an API to VFS to get the external filename lazily; // and update `FileManager::getExternalPath()` to use it instead. This; // has the benefit of making such accesses easily tracked, though isn't; // necessarily required (and could cause extra work than just adding to; // eg. `vfs::Status` up front).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:745,Deployability,Update,Update,745,"// Name mismatch. We need a redirect. First grab the actual entry we want; // to return.; //; // This redirection logic intentionally leaks the external name of a; // redirected file that uses 'use-external-name' in \a; // vfs::RedirectionFileSystem. This allows clang to report the external; // name to users (in diagnostics) and to tools that don't have access to; // the VFS (in debug info and dependency '.d' files).; //; // FIXME: This is pretty complex and has some very complicated interactions; // with the rest of clang. It's also inconsistent with how ""real""; // filesystems behave and confuses parts of clang expect to see the; // name-as-accessed on the \a FileEntryRef.; //; // A potential plan to remove this is as follows -; // - Update callers such as `HeaderSearch::findUsableModuleForHeader()`; // to explicitly use the `getNameAsRequested()` rather than just using; // `getName()`.; // - Add a `FileManager::getExternalPath` API for explicitly getting the; // remapped external filename when there is one available. Adopt it in; // callers like diagnostics/deps reporting instead of calling; // `getName()` directly.; // - Switch the meaning of `FileEntryRef::getName()` to get the requested; // name, not the external name. Once that sticks, revert callers that; // want the requested name back to calling `getName()`.; // - Update the VFS to always return the requested name. This could also; // return the external name, or just have an API to request it; // lazily. The latter has the benefit of making accesses of the; // external path easily tracked, but may also require extra work than; // just returning up front.; // - (Optionally) Add an API to VFS to get the external filename lazily; // and update `FileManager::getExternalPath()` to use it instead. This; // has the benefit of making such accesses easily tracked, though isn't; // necessarily required (and could cause extra work than just adding to; // eg. `vfs::Status` up front).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:1345,Deployability,Update,Update,1345,"// Name mismatch. We need a redirect. First grab the actual entry we want; // to return.; //; // This redirection logic intentionally leaks the external name of a; // redirected file that uses 'use-external-name' in \a; // vfs::RedirectionFileSystem. This allows clang to report the external; // name to users (in diagnostics) and to tools that don't have access to; // the VFS (in debug info and dependency '.d' files).; //; // FIXME: This is pretty complex and has some very complicated interactions; // with the rest of clang. It's also inconsistent with how ""real""; // filesystems behave and confuses parts of clang expect to see the; // name-as-accessed on the \a FileEntryRef.; //; // A potential plan to remove this is as follows -; // - Update callers such as `HeaderSearch::findUsableModuleForHeader()`; // to explicitly use the `getNameAsRequested()` rather than just using; // `getName()`.; // - Add a `FileManager::getExternalPath` API for explicitly getting the; // remapped external filename when there is one available. Adopt it in; // callers like diagnostics/deps reporting instead of calling; // `getName()` directly.; // - Switch the meaning of `FileEntryRef::getName()` to get the requested; // name, not the external name. Once that sticks, revert callers that; // want the requested name back to calling `getName()`.; // - Update the VFS to always return the requested name. This could also; // return the external name, or just have an API to request it; // lazily. The latter has the benefit of making accesses of the; // external path easily tracked, but may also require extra work than; // just returning up front.; // - (Optionally) Add an API to VFS to get the external filename lazily; // and update `FileManager::getExternalPath()` to use it instead. This; // has the benefit of making such accesses easily tracked, though isn't; // necessarily required (and could cause extra work than just adding to; // eg. `vfs::Status` up front).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:1723,Deployability,update,update,1723,"// Name mismatch. We need a redirect. First grab the actual entry we want; // to return.; //; // This redirection logic intentionally leaks the external name of a; // redirected file that uses 'use-external-name' in \a; // vfs::RedirectionFileSystem. This allows clang to report the external; // name to users (in diagnostics) and to tools that don't have access to; // the VFS (in debug info and dependency '.d' files).; //; // FIXME: This is pretty complex and has some very complicated interactions; // with the rest of clang. It's also inconsistent with how ""real""; // filesystems behave and confuses parts of clang expect to see the; // name-as-accessed on the \a FileEntryRef.; //; // A potential plan to remove this is as follows -; // - Update callers such as `HeaderSearch::findUsableModuleForHeader()`; // to explicitly use the `getNameAsRequested()` rather than just using; // `getName()`.; // - Add a `FileManager::getExternalPath` API for explicitly getting the; // remapped external filename when there is one available. Adopt it in; // callers like diagnostics/deps reporting instead of calling; // `getName()` directly.; // - Switch the meaning of `FileEntryRef::getName()` to get the requested; // name, not the external name. Once that sticks, revert callers that; // want the requested name back to calling `getName()`.; // - Update the VFS to always return the requested name. This could also; // return the external name, or just have an API to request it; // lazily. The latter has the benefit of making accesses of the; // external path easily tracked, but may also require extra work than; // just returning up front.; // - (Optionally) Add an API to VFS to get the external filename lazily; // and update `FileManager::getExternalPath()` to use it instead. This; // has the benefit of making such accesses easily tracked, though isn't; // necessarily required (and could cause extra work than just adding to; // eg. `vfs::Status` up front).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:397,Integrability,depend,dependency,397,"// Name mismatch. We need a redirect. First grab the actual entry we want; // to return.; //; // This redirection logic intentionally leaks the external name of a; // redirected file that uses 'use-external-name' in \a; // vfs::RedirectionFileSystem. This allows clang to report the external; // name to users (in diagnostics) and to tools that don't have access to; // the VFS (in debug info and dependency '.d' files).; //; // FIXME: This is pretty complex and has some very complicated interactions; // with the rest of clang. It's also inconsistent with how ""real""; // filesystems behave and confuses parts of clang expect to see the; // name-as-accessed on the \a FileEntryRef.; //; // A potential plan to remove this is as follows -; // - Update callers such as `HeaderSearch::findUsableModuleForHeader()`; // to explicitly use the `getNameAsRequested()` rather than just using; // `getName()`.; // - Add a `FileManager::getExternalPath` API for explicitly getting the; // remapped external filename when there is one available. Adopt it in; // callers like diagnostics/deps reporting instead of calling; // `getName()` directly.; // - Switch the meaning of `FileEntryRef::getName()` to get the requested; // name, not the external name. Once that sticks, revert callers that; // want the requested name back to calling `getName()`.; // - Update the VFS to always return the requested name. This could also; // return the external name, or just have an API to request it; // lazily. The latter has the benefit of making accesses of the; // external path easily tracked, but may also require extra work than; // just returning up front.; // - (Optionally) Add an API to VFS to get the external filename lazily; // and update `FileManager::getExternalPath()` to use it instead. This; // has the benefit of making such accesses easily tracked, though isn't; // necessarily required (and could cause extra work than just adding to; // eg. `vfs::Status` up front).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:356,Security,access,access,356,"// Name mismatch. We need a redirect. First grab the actual entry we want; // to return.; //; // This redirection logic intentionally leaks the external name of a; // redirected file that uses 'use-external-name' in \a; // vfs::RedirectionFileSystem. This allows clang to report the external; // name to users (in diagnostics) and to tools that don't have access to; // the VFS (in debug info and dependency '.d' files).; //; // FIXME: This is pretty complex and has some very complicated interactions; // with the rest of clang. It's also inconsistent with how ""real""; // filesystems behave and confuses parts of clang expect to see the; // name-as-accessed on the \a FileEntryRef.; //; // A potential plan to remove this is as follows -; // - Update callers such as `HeaderSearch::findUsableModuleForHeader()`; // to explicitly use the `getNameAsRequested()` rather than just using; // `getName()`.; // - Add a `FileManager::getExternalPath` API for explicitly getting the; // remapped external filename when there is one available. Adopt it in; // callers like diagnostics/deps reporting instead of calling; // `getName()` directly.; // - Switch the meaning of `FileEntryRef::getName()` to get the requested; // name, not the external name. Once that sticks, revert callers that; // want the requested name back to calling `getName()`.; // - Update the VFS to always return the requested name. This could also; // return the external name, or just have an API to request it; // lazily. The latter has the benefit of making accesses of the; // external path easily tracked, but may also require extra work than; // just returning up front.; // - (Optionally) Add an API to VFS to get the external filename lazily; // and update `FileManager::getExternalPath()` to use it instead. This; // has the benefit of making such accesses easily tracked, though isn't; // necessarily required (and could cause extra work than just adding to; // eg. `vfs::Status` up front).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:650,Security,access,accessed,650,"// Name mismatch. We need a redirect. First grab the actual entry we want; // to return.; //; // This redirection logic intentionally leaks the external name of a; // redirected file that uses 'use-external-name' in \a; // vfs::RedirectionFileSystem. This allows clang to report the external; // name to users (in diagnostics) and to tools that don't have access to; // the VFS (in debug info and dependency '.d' files).; //; // FIXME: This is pretty complex and has some very complicated interactions; // with the rest of clang. It's also inconsistent with how ""real""; // filesystems behave and confuses parts of clang expect to see the; // name-as-accessed on the \a FileEntryRef.; //; // A potential plan to remove this is as follows -; // - Update callers such as `HeaderSearch::findUsableModuleForHeader()`; // to explicitly use the `getNameAsRequested()` rather than just using; // `getName()`.; // - Add a `FileManager::getExternalPath` API for explicitly getting the; // remapped external filename when there is one available. Adopt it in; // callers like diagnostics/deps reporting instead of calling; // `getName()` directly.; // - Switch the meaning of `FileEntryRef::getName()` to get the requested; // name, not the external name. Once that sticks, revert callers that; // want the requested name back to calling `getName()`.; // - Update the VFS to always return the requested name. This could also; // return the external name, or just have an API to request it; // lazily. The latter has the benefit of making accesses of the; // external path easily tracked, but may also require extra work than; // just returning up front.; // - (Optionally) Add an API to VFS to get the external filename lazily; // and update `FileManager::getExternalPath()` to use it instead. This; // has the benefit of making such accesses easily tracked, though isn't; // necessarily required (and could cause extra work than just adding to; // eg. `vfs::Status` up front).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:1526,Security,access,accesses,1526,"// Name mismatch. We need a redirect. First grab the actual entry we want; // to return.; //; // This redirection logic intentionally leaks the external name of a; // redirected file that uses 'use-external-name' in \a; // vfs::RedirectionFileSystem. This allows clang to report the external; // name to users (in diagnostics) and to tools that don't have access to; // the VFS (in debug info and dependency '.d' files).; //; // FIXME: This is pretty complex and has some very complicated interactions; // with the rest of clang. It's also inconsistent with how ""real""; // filesystems behave and confuses parts of clang expect to see the; // name-as-accessed on the \a FileEntryRef.; //; // A potential plan to remove this is as follows -; // - Update callers such as `HeaderSearch::findUsableModuleForHeader()`; // to explicitly use the `getNameAsRequested()` rather than just using; // `getName()`.; // - Add a `FileManager::getExternalPath` API for explicitly getting the; // remapped external filename when there is one available. Adopt it in; // callers like diagnostics/deps reporting instead of calling; // `getName()` directly.; // - Switch the meaning of `FileEntryRef::getName()` to get the requested; // name, not the external name. Once that sticks, revert callers that; // want the requested name back to calling `getName()`.; // - Update the VFS to always return the requested name. This could also; // return the external name, or just have an API to request it; // lazily. The latter has the benefit of making accesses of the; // external path easily tracked, but may also require extra work than; // just returning up front.; // - (Optionally) Add an API to VFS to get the external filename lazily; // and update `FileManager::getExternalPath()` to use it instead. This; // has the benefit of making such accesses easily tracked, though isn't; // necessarily required (and could cause extra work than just adding to; // eg. `vfs::Status` up front).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:1822,Security,access,accesses,1822,"// Name mismatch. We need a redirect. First grab the actual entry we want; // to return.; //; // This redirection logic intentionally leaks the external name of a; // redirected file that uses 'use-external-name' in \a; // vfs::RedirectionFileSystem. This allows clang to report the external; // name to users (in diagnostics) and to tools that don't have access to; // the VFS (in debug info and dependency '.d' files).; //; // FIXME: This is pretty complex and has some very complicated interactions; // with the rest of clang. It's also inconsistent with how ""real""; // filesystems behave and confuses parts of clang expect to see the; // name-as-accessed on the \a FileEntryRef.; //; // A potential plan to remove this is as follows -; // - Update callers such as `HeaderSearch::findUsableModuleForHeader()`; // to explicitly use the `getNameAsRequested()` rather than just using; // `getName()`.; // - Add a `FileManager::getExternalPath` API for explicitly getting the; // remapped external filename when there is one available. Adopt it in; // callers like diagnostics/deps reporting instead of calling; // `getName()` directly.; // - Switch the meaning of `FileEntryRef::getName()` to get the requested; // name, not the external name. Once that sticks, revert callers that; // want the requested name back to calling `getName()`.; // - Update the VFS to always return the requested name. This could also; // return the external name, or just have an API to request it; // lazily. The latter has the benefit of making accesses of the; // external path easily tracked, but may also require extra work than; // just returning up front.; // - (Optionally) Add an API to VFS to get the external filename lazily; // and update `FileManager::getExternalPath()` to use it instead. This; // has the benefit of making such accesses easily tracked, though isn't; // necessarily required (and could cause extra work than just adding to; // eg. `vfs::Status` up front).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:114,Testability,log,logic,114,"// Name mismatch. We need a redirect. First grab the actual entry we want; // to return.; //; // This redirection logic intentionally leaks the external name of a; // redirected file that uses 'use-external-name' in \a; // vfs::RedirectionFileSystem. This allows clang to report the external; // name to users (in diagnostics) and to tools that don't have access to; // the VFS (in debug info and dependency '.d' files).; //; // FIXME: This is pretty complex and has some very complicated interactions; // with the rest of clang. It's also inconsistent with how ""real""; // filesystems behave and confuses parts of clang expect to see the; // name-as-accessed on the \a FileEntryRef.; //; // A potential plan to remove this is as follows -; // - Update callers such as `HeaderSearch::findUsableModuleForHeader()`; // to explicitly use the `getNameAsRequested()` rather than just using; // `getName()`.; // - Add a `FileManager::getExternalPath` API for explicitly getting the; // remapped external filename when there is one available. Adopt it in; // callers like diagnostics/deps reporting instead of calling; // `getName()` directly.; // - Switch the meaning of `FileEntryRef::getName()` to get the requested; // name, not the external name. Once that sticks, revert callers that; // want the requested name back to calling `getName()`.; // - Update the VFS to always return the requested name. This could also; // return the external name, or just have an API to request it; // lazily. The latter has the benefit of making accesses of the; // external path easily tracked, but may also require extra work than; // just returning up front.; // - (Optionally) Add an API to VFS to get the external filename lazily; // and update `FileManager::getExternalPath()` to use it instead. This; // has the benefit of making such accesses easily tracked, though isn't; // necessarily required (and could cause extra work than just adding to; // eg. `vfs::Status` up front).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:65,Availability,avail,available,65,"// Cache the redirection in the previously-inserted entry, still available; // in the tentative return value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:3,Performance,Cache,Cache,3,"// Cache the redirection in the previously-inserted entry, still available; // in the tentative return value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:474,Integrability,depend,depend,474,"// Already have an entry with this inode, return it.; // FIXME: This hack ensures that `getDir()` will use the path that was; // used to lookup this file, even if we found a file by different path; // first. This is required in order to find a module's structure when its; // headers/module map are mapped in the VFS.; //; // See above for how this will eventually be removed. `IsVFSMapped`; // *cannot* be narrowed to `ExposesExternalVFSPath` as crash reproducers; // also depend on this logic and they have `use-external-paths: false`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:420,Security,Expose,ExposesExternalVFSPath,420,"// Already have an entry with this inode, return it.; // FIXME: This hack ensures that `getDir()` will use the path that was; // used to lookup this file, even if we found a file by different path; // first. This is required in order to find a module's structure when its; // headers/module map are mapped in the VFS.; //; // See above for how this will eventually be removed. `IsVFSMapped`; // *cannot* be narrowed to `ExposesExternalVFSPath` as crash reproducers; // also depend on this logic and they have `use-external-paths: false`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:489,Testability,log,logic,489,"// Already have an entry with this inode, return it.; // FIXME: This hack ensures that `getDir()` will use the path that was; // used to lookup this file, even if we found a file by different path; // first. This is required in order to find a module's structure when its; // headers/module map are mapped in the VFS.; //; // See above for how this will eventually be removed. `IsVFSMapped`; // *cannot* be narrowed to `ExposesExternalVFSPath` as crash reproducers; // also depend on this logic and they have `use-external-paths: false`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:10,Deployability,update,update,10,// Always update LastRef to the last name by which a file was accessed.; // FIXME: Neither this nor always using the first reference is correct; we; // want to switch towards a design where we return a FileName object that; // encapsulates both the name by which the file was accessed and the; // corresponding FileEntry.; // FIXME: LastRef should be removed from FileEntry once all clients adopt; // FileEntryRef.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:62,Security,access,accessed,62,// Always update LastRef to the last name by which a file was accessed.; // FIXME: Neither this nor always using the first reference is correct; we; // want to switch towards a design where we return a FileName object that; // encapsulates both the name by which the file was accessed and the; // corresponding FileEntry.; // FIXME: LastRef should be removed from FileEntry once all clients adopt; // FileEntryRef.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:276,Security,access,accessed,276,// Always update LastRef to the last name by which a file was accessed.; // FIXME: Neither this nor always using the first reference is correct; we; // want to switch towards a design where we return a FileName object that; // encapsulates both the name by which the file was accessed and the; // corresponding FileEntry.; // FIXME: LastRef should be removed from FileEntry once all clients adopt; // FileEntryRef.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:38,Deployability,update,update,38,// Find occurrences of old FileEntry; update with new one:,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:46,Performance,cache,cached,46,"// We've not seen this before, or the file is cached as non-existent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:49,Performance,cache,cache,49,"// Now that all ancestors of Filename are in the cache, the; // following call is guaranteed to find the DirectoryEntry from the; // cache. A virtual file can also have an empty filename, that could come; // from a source location preprocessor directive with an empty filename as; // an example, so we need to pretend it has a name to ensure a valid directory; // entry can be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:133,Performance,cache,cache,133,"// Now that all ancestors of Filename are in the cache, the; // following call is guaranteed to find the DirectoryEntry from the; // cache. A virtual file can also have an empty filename, that could come; // from a source location preprocessor directive with an empty filename as; // an example, so we need to pretend it has a name to ensure a valid directory; // entry can be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:2,Performance,Cache,CacheFailure,2,/*CacheFailure=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:239,Integrability,interface,interface,239,"// This is not the same as `VFS::getRealPath()`, which resolves symlinks; // but can be very expensive on real file systems.; // FIXME: the semantic of RealPathName is unclear, and the name might be; // misleading. We need to clean up the interface here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:85,Performance,cache,cache,85,"/// getStatValue - Get the 'stat' information for the specified path,; /// using the cache to accelerate it if possible. This returns true; /// if the path points to a virtual file or does not exist, or returns; /// false if it's an existent real file. If FileDescriptor is NULL,; /// do directory look-up instead of file look-up.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:65,Safety,safe,safe,65,"// Name comes from FileEntry/DirectoryEntry::getName(), so it is safe to; // store it in the DenseMap below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:112,Safety,avoid,avoid,112,"// For Windows paths, only use the real path if it doesn't resolve; // a substitute drive, as those are used to avoid MAX_PATH issues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:44,Usability,Simpl,Simplifying,44,// Fallback to using the absolute path.; // Simplifying /../ is semantically valid on Windows even in the; // presence of symbolic links.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp:425,Integrability,interface,interface,425,"//===- FileSystemStatCache.cpp - Caching for 'stat' calls -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the FileSystemStatCache interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp:97,Performance,cache,cache,97,"/// FileSystemStatCache::get - Get the 'stat' information for the specified; /// path, using the cache to accelerate it if possible. This returns true if; /// the path does not exist or false if it exists.; ///; /// If isFile is true, then this lookup should only return success for files; /// (not directories). If it is false this lookup should only return; /// success for directories (not files). On a successful file lookup, the; /// implementation can optionally fill in FileDescriptor with a valid; /// descriptor and the client guarantees that it will close it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp:16,Performance,cache,cache,16,"// If we have a cache, use it to resolve the stat query.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp:80,Performance,cache,cache,80,"// If this is a directory or a file descriptor is not needed and we have; // no cache, just go to the file system.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp:210,Energy Efficiency,efficient,efficient,210,"// Otherwise, we have to go to the filesystem. We can always just use; // 'stat' here, but (for files) the client is asking whether the file exists; // because it wants to turn around and *open* it. It is more efficient to; // do ""open+fstat"" on success than it is to do ""stat+open"".; //; // Because of this, check to see if the file exists with 'open'. If the; // open succeeds, use fstat to get the stat info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp:37,Availability,failure,failure,37,"// If the path doesn't exist, return failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp:10,Performance,cache,cache,10,"// Do not cache failed stats, it is easy to construct common inconsistent; // situations if we do, and they are not important for PCH performance; // (which currently only needs the stats to construct the initial; // FileManager entries).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp:134,Performance,perform,performance,134,"// Do not cache failed stats, it is easy to construct common inconsistent; // situations if we do, and they are not important for PCH performance; // (which currently only needs the stats to construct the initial; // FileManager entries).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp:3,Performance,Cache,Cache,3,// Cache file 'stat' results and directories with absolutely paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileSystemStatCache.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp:467,Integrability,interface,interfaces,467,"//===- IdentifierTable.cpp - Hash table for identifier lookup -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the IdentifierInfo, IdentifierVisitor, and; // IdentifierTable interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp:29,Security,Hash,Hash,29,"//===- IdentifierTable.cpp - Hash table for identifier lookup -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the IdentifierInfo, IdentifierVisitor, and; // IdentifierTable interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp:6,Usability,simpl,simple,6,/// A simple identifier lookup iterator that represents an; /// empty sequence of identifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp:12,Integrability,bridg,bridge,12,// We treat bridge casts as objective-C keywords so we can warn on them; // in non-arc mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp:13,Testability,test,tests,13,"// These are tests that need to 'always win', as they are special in that they; // disable based on certain conditions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp:258,Integrability,depend,depends,258,"// We use a perfect hash function here involving the length of the keyword,; // the first and third character. For preprocessor ID's there are no; // collisions (if there were, the switch below would complain about duplicate; // case values). Note that this depends on 'if' being null terminated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp:20,Security,hash,hash,20,"// We use a perfect hash function here involving the length of the keyword,; // the first and third character. For preprocessor ID's there are no; // collisions (if there were, the switch below would complain about duplicate; // case values). Note that this depends on 'if' being null terminated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp:276,Security,hash,hashing,276,//===----------------------------------------------------------------------===//; // Stats Implementation; //===----------------------------------------------------------------------===//; /// PrintStats - Print statistics about how well the identifier table is doing; /// at hashing identifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp:39,Energy Efficiency,allocate,allocated,39,// Compute statistics about the memory allocated for identifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp:40,Energy Efficiency,allocate,allocated,40,// MultiKeywordSelector objects are not allocated with new because they have a; // variable size array (for parameter types) at the end of them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp:83,Modifiability,variab,variable,83,// MultiKeywordSelector objects are not allocated with new because they have a; // variable size array (for parameter types) at the end of them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/LangOptions.cpp:116,Safety,avoid,avoids,116,"// Reset ""benign"" options with implied values (Options.td ImpliedBy relations); // rather than their defaults. This avoids unexpected combinations and; // invocations that cannot be round-tripped to arguments.; // FIXME: we should derive this automatically from ImpliedBy in tablegen.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/LangOptions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/LangOptions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/LangOptions.cpp:29,Integrability,depend,depend,29,"// Set some properties which depend solely on the input kind; it would be nice; // to move these to the language standard, and have the driver resolve the; // input kind + language standard.; //; // FIXME: Perhaps a better model would be for a single source file to have; // multiple language standards (C / C++ std, ObjC std, OpenCL std, OpenMP std); // simultaneously active?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/LangOptions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/LangOptions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/LangOptions.cpp:128,Integrability,contract,contract,128,"// HIP toolchain does not support 'Fast' FPOpFusion in backends since it; // fuses multiplication/addition instructions without contract flag from; // device library functions in LLVM bitcode, which causes accuracy loss in; // certain math functions, e.g. tan(-1e20) becomes -0.933 instead of 0.8446.; // For device library functions in bitcode to work, 'Strict' or 'Standard'; // FPOpFusion options in backends is needed. Therefore 'fast-honor-pragmas'; // FP contract option is used to allow fuse across statements in frontend; // whereas respecting contract flag in backend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/LangOptions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/LangOptions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/LangOptions.cpp:461,Integrability,contract,contract,461,"// HIP toolchain does not support 'Fast' FPOpFusion in backends since it; // fuses multiplication/addition instructions without contract flag from; // device library functions in LLVM bitcode, which causes accuracy loss in; // certain math functions, e.g. tan(-1e20) becomes -0.933 instead of 0.8446.; // For device library functions in bitcode to work, 'Strict' or 'Standard'; // FPOpFusion options in backends is needed. Therefore 'fast-honor-pragmas'; // FP contract option is used to allow fuse across statements in frontend; // whereas respecting contract flag in backend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/LangOptions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/LangOptions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/LangOptions.cpp:552,Integrability,contract,contract,552,"// HIP toolchain does not support 'Fast' FPOpFusion in backends since it; // fuses multiplication/addition instructions without contract flag from; // device library functions in LLVM bitcode, which causes accuracy loss in; // certain math functions, e.g. tan(-1e20) becomes -0.933 instead of 0.8446.; // For device library functions in bitcode to work, 'Strict' or 'Standard'; // FPOpFusion options in backends is needed. Therefore 'fast-honor-pragmas'; // FP contract option is used to allow fuse across statements in frontend; // whereas respecting contract flag in backend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/LangOptions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/LangOptions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Module.cpp:384,Deployability,install,installed,384,"// The -fmodule-name option tells the compiler to textually include headers in; // the specified module, meaning Clang won't build the specified module. This; // is useful in a number of situations, for instance, when building a library; // that vends a module map, one might want to avoid hitting intermediate build; // products containing the module map or avoid finding the system installed; // modulemap for that library.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Module.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Module.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Module.cpp:284,Safety,avoid,avoid,284,"// The -fmodule-name option tells the compiler to textually include headers in; // the specified module, meaning Clang won't build the specified module. This; // is useful in a number of situations, for instance, when building a library; // that vends a module map, one might want to avoid hitting intermediate build; // products containing the module map or avoid finding the system installed; // modulemap for that library.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Module.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Module.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Module.cpp:359,Safety,avoid,avoid,359,"// The -fmodule-name option tells the compiler to textually include headers in; // the specified module, meaning Clang won't build the specified module. This; // is useful in a number of situations, for instance, when building a library; // that vends a module map, one might want to avoid hitting intermediate build; // products containing the module map or avoid finding the system installed; // modulemap for that library.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Module.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Module.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Module.cpp:32,Availability,avail,available,32,"// If this feature is currently available, we're done.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Module.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Module.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/NoSanitizeList.cpp:47,Security,sanitiz,sanitizers,47,"//===--- NoSanitizeList.cpp - Ignored list for sanitizers ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // User-provided ignore-list used to disable/alter instrumentation done in; // sanitizers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/NoSanitizeList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/NoSanitizeList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/NoSanitizeList.cpp:458,Security,sanitiz,sanitizers,458,"//===--- NoSanitizeList.cpp - Ignored list for sanitizers ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // User-provided ignore-list used to disable/alter instrumentation done in; // sanitizers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/NoSanitizeList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/NoSanitizeList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/OpenMPKinds.cpp:54,Integrability,depend,depending,54,// TODO: 'loop' may require different capture regions depending on the bind; // clause or the parent directive when there is no bind clause. Use; // OMPD_unknown for now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/OpenMPKinds.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/OpenMPKinds.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/ParsedAttrInfo.cpp:51,Modifiability,plugin,plugins,51,"//===- ParsedAttrInfo.cpp - Registry for attribute plugins ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the Registry of attributes added by plugins which; // derive the ParsedAttrInfo class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/ParsedAttrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/ParsedAttrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/ParsedAttrInfo.cpp:438,Modifiability,plugin,plugins,438,"//===- ParsedAttrInfo.cpp - Registry for attribute plugins ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the Registry of attributes added by plugins which; // derive the ParsedAttrInfo class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/ParsedAttrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/ParsedAttrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Sanitizers.cpp:7,Security,Sanitiz,Sanitizers,7,"//===- Sanitizers.cpp - C Language Family Language Options ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the classes from Sanitizers.h; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Sanitizers.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Sanitizers.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Sanitizers.cpp:418,Security,Sanitiz,Sanitizers,418,"//===- Sanitizers.cpp - C Language Family Language Options ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the classes from Sanitizers.h; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Sanitizers.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Sanitizers.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Sanitizers.cpp:46,Modifiability,variab,variables,46,"// Once LLVM switches to C++17, the constexpr variables can be inline and we; // won't need this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Sanitizers.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Sanitizers.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SanitizerSpecialCaseList.cpp:9,Security,Sanitiz,SanitizerSpecialCaseList,9,"//===--- SanitizerSpecialCaseList.cpp - SCL for sanitizers ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An extension of SpecialCaseList to allowing querying sections by; // SanitizerMask.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SanitizerSpecialCaseList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SanitizerSpecialCaseList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SanitizerSpecialCaseList.cpp:48,Security,sanitiz,sanitizers,48,"//===--- SanitizerSpecialCaseList.cpp - SCL for sanitizers ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An extension of SpecialCaseList to allowing querying sections by; // SanitizerMask.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SanitizerSpecialCaseList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SanitizerSpecialCaseList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SanitizerSpecialCaseList.cpp:452,Security,Sanitiz,SanitizerMask,452,"//===--- SanitizerSpecialCaseList.cpp - SCL for sanitizers ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An extension of SpecialCaseList to allowing querying sections by; // SanitizerMask.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SanitizerSpecialCaseList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SanitizerSpecialCaseList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Sarif.cpp:105,Availability,down,downstream,105,"// If inserted, ensure the original iterator points to the newly inserted; // element, so it can be used downstream.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Sarif.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Sarif.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Sarif.cpp:3,Usability,Clear,Clear,3,"// Clear, reset temporaries before next run.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Sarif.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Sarif.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Sarif.cpp:3,Usability,Clear,Clear,3,// Clear resources associated with a previous run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Sarif.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Sarif.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceLocation.cpp:401,Security,access,accessor,401,"//===- SourceLocation.cpp - Compact identifier for Source Files -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines accessor methods for the FullSourceLoc class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceLocation.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceLocation.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:422,Integrability,interface,interface,422,"//===- SourceManager.cpp - Track and cache source files -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the SourceManager interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:37,Performance,cache,cache,37,"//===- SourceManager.cpp - Track and cache source files -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the SourceManager interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:84,Performance,cache,cache,84,/// Returns the kind of memory used to back the memory buffer for; /// this content cache. This is used for performance analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:108,Performance,perform,performance,108,/// Returns the kind of memory used to back the memory buffer for; /// this content cache. This is used for performance analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:51,Integrability,wrap,wrap,51,"// Lazily create the Buffer for ContentCaches that wrap files. If we already; // computed it, just return what we have.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:59,Usability,simpl,simplify,59,// Start with the assumption that the buffer is invalid to simplify early; // return paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:102,Performance,cache,cache,102,"// If we were unable to open the file, then we are in an inconsistent; // situation where the content cache referenced a file which no longer; // exists. Most likely, we were using a stat cache with an invalid entry but; // the file could also have been removed during processing. Since we can't; // really deal with this situation, just create an empty buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:188,Performance,cache,cache,188,"// If we were unable to open the file, then we are in an inconsistent; // situation where the content cache referenced a file which no longer; // exists. Most likely, we were using a stat cache with an invalid entry but; // the file could also have been removed during processing. Since we can't; // really deal with this situation, just create an empty buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:174,Performance,cache,cache,174,"// Unless this is a named pipe (in which case we can handle a mismatch),; // check that the file's size is the same as in the file entry (which may; // have come from a stat cache).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:19,Security,validat,validated,19,// Buffer has been validated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:84,Availability,avail,available,84,"// An unspecified FilenameID means use the previous (or containing); // filename if available, or the main source file otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:121,Energy Efficiency,allocate,allocated,121,"// Delete FileEntry objects corresponding to content caches. Since the actual; // content cache objects are bump pointer allocated, we just have to run the; // dtors, but we call the deallocate method for completeness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:53,Performance,cache,caches,53,"// Delete FileEntry objects corresponding to content caches. Since the actual; // content cache objects are bump pointer allocated, we just have to run the; // dtors, but we call the deallocate method for completeness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:90,Performance,cache,cache,90,"// Delete FileEntry objects corresponding to content caches. Since the actual; // content cache objects are bump pointer allocated, we just have to run the; // dtors, but we call the deallocate method for completeness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:30,Performance,load,loaded,30,// Ensure all SLocEntries are loaded from the external source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:3,Modifiability,Inherit,Inherit,3,// Inherit any content cache data from the old source manager.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:23,Performance,cache,cache,23,// Inherit any content cache data from the old source manager.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:22,Performance,Cache,Cache,22,"// Nope, create a new Cache entry.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:60,Performance,load,loaded,60,// If the file of the SLocEntry changed we could still have loaded it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:10,Availability,recover,recover,10,// Try to recover; create a SLocEntry so the rest of clang can handle it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:10,Safety,recover,recover,10,// Try to recover; create a SLocEntry so the rest of clang can handle it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:15,Availability,recover,recovering,15,"/// As part of recovering from missing or changed content, produce a; /// fake, non-empty buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:15,Safety,recover,recovering,15,"/// As part of recovering from missing or changed content, produce a; /// fake, non-empty buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:15,Availability,recover,recovering,15,"/// As part of recovering from missing or changed content, produce a; /// fake content cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:87,Performance,cache,cache,87,"/// As part of recovering from missing or changed content, produce a; /// fake content cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:15,Safety,recover,recovering,15,"/// As part of recovering from missing or changed content, produce a; /// fake content cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:40,Performance,load,load,40,"// If this is a named pipe, immediately load the buffer to ensure subsequent; // calls to ContentCache::getSize() are accurate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:127,Availability,error,error,127,"// FIXME: call `noteSLocAddressSpaceUsage` to report details to users and; // use a source location from `Info` to point at an error.; // Currently, both cause Clang to run indefinitely, this needs to be fixed.; // FIXME: return an error instead of crashing. Returning invalid source; // locations causes compiler to run indefinitely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:232,Availability,error,error,232,"// FIXME: call `noteSLocAddressSpaceUsage` to report details to users and; // use a source location from `Info` to point at an error.; // Currently, both cause Clang to run indefinitely, this needs to be fixed.; // FIXME: return an error instead of crashing. Returning invalid source; // locations causes compiler to run indefinitely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:271,Performance,cache,cache-miss,271,"//===----------------------------------------------------------------------===//; // SourceLocation manipulation methods.; //===----------------------------------------------------------------------===//; /// Return the FileID for a SourceLocation.; ///; /// This is the cache-miss path of getFileID. Not as hot as that function, but; /// still very important. It is responsible for finding the entry in the; /// SLocEntry tables that contains the specified location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:124,Performance,load,loaded,124,// Now it is time to search for the correct file. See where the SLocOffset; // sits in the global view and consult local or loaded buffers for it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:149,Performance,load,loaded,149,"/// Return the FileID for a SourceLocation with a low offset.; ///; /// This function knows that the SourceLocation is in a local buffer, not a; /// loaded one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:395,Energy Efficiency,efficient,efficient,395,"// After the first and second level caches, I see two common sorts of; // behavior: 1) a lot of searched FileID's are ""near"" the cached file; // location or are ""near"" the cached expansion location. 2) others are just; // completely random and may be a very long way away.; //; // To handle this, we do a linear search for up to 8 steps to catch #1 quickly; // then we fall back to a less cache efficient, but more scalable, binary; // search to find the location.; // See if this is near the file point - worst case we start scanning from the; // most newly created FileID.; // LessIndex - This is the lower bound of the range that we're searching.; // We know that the offset corresponding to the FileID is less than; // SLocOffset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:36,Performance,cache,caches,36,"// After the first and second level caches, I see two common sorts of; // behavior: 1) a lot of searched FileID's are ""near"" the cached file; // location or are ""near"" the cached expansion location. 2) others are just; // completely random and may be a very long way away.; //; // To handle this, we do a linear search for up to 8 steps to catch #1 quickly; // then we fall back to a less cache efficient, but more scalable, binary; // search to find the location.; // See if this is near the file point - worst case we start scanning from the; // most newly created FileID.; // LessIndex - This is the lower bound of the range that we're searching.; // We know that the offset corresponding to the FileID is less than; // SLocOffset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:129,Performance,cache,cached,129,"// After the first and second level caches, I see two common sorts of; // behavior: 1) a lot of searched FileID's are ""near"" the cached file; // location or are ""near"" the cached expansion location. 2) others are just; // completely random and may be a very long way away.; //; // To handle this, we do a linear search for up to 8 steps to catch #1 quickly; // then we fall back to a less cache efficient, but more scalable, binary; // search to find the location.; // See if this is near the file point - worst case we start scanning from the; // most newly created FileID.; // LessIndex - This is the lower bound of the range that we're searching.; // We know that the offset corresponding to the FileID is less than; // SLocOffset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:172,Performance,cache,cached,172,"// After the first and second level caches, I see two common sorts of; // behavior: 1) a lot of searched FileID's are ""near"" the cached file; // location or are ""near"" the cached expansion location. 2) others are just; // completely random and may be a very long way away.; //; // To handle this, we do a linear search for up to 8 steps to catch #1 quickly; // then we fall back to a less cache efficient, but more scalable, binary; // search to find the location.; // See if this is near the file point - worst case we start scanning from the; // most newly created FileID.; // LessIndex - This is the lower bound of the range that we're searching.; // We know that the offset corresponding to the FileID is less than; // SLocOffset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:389,Performance,cache,cache,389,"// After the first and second level caches, I see two common sorts of; // behavior: 1) a lot of searched FileID's are ""near"" the cached file; // location or are ""near"" the cached expansion location. 2) others are just; // completely random and may be a very long way away.; //; // To handle this, we do a linear search for up to 8 steps to catch #1 quickly; // then we fall back to a less cache efficient, but more scalable, binary; // search to find the location.; // See if this is near the file point - worst case we start scanning from the; // most newly created FileID.; // LessIndex - This is the lower bound of the range that we're searching.; // We know that the offset corresponding to the FileID is less than; // SLocOffset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:415,Performance,scalab,scalable,415,"// After the first and second level caches, I see two common sorts of; // behavior: 1) a lot of searched FileID's are ""near"" the cached file; // location or are ""near"" the cached expansion location. 2) others are just; // completely random and may be a very long way away.; //; // To handle this, we do a linear search for up to 8 steps to catch #1 quickly; // then we fall back to a less cache efficient, but more scalable, binary; // search to find the location.; // See if this is near the file point - worst case we start scanning from the; // most newly created FileID.; // LessIndex - This is the lower bound of the range that we're searching.; // We know that the offset corresponding to the FileID is less than; // SLocOffset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:125,Performance,load,loaded,125,"/// Return the FileID for a SourceLocation with a high offset.; ///; /// This function knows that the SourceLocation is in a loaded buffer, not a; /// local one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:141,Availability,down,down,141,"/// getImmediateSpellingLoc - Given a SourceLocation object, return the; /// spelling location referenced by the ID. This is the first level down; /// towards the place where the characters that make up the lexed token can be; /// found. This should not generally be used by clients.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:18,Availability,Mask,Mask,18,"// At that point, Mask contains 0x80 set at each byte that holds a value; // in [\n, \r + 1 [; // Scan for the next newline - it's very likely there's one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:158,Performance,optimiz,optimized,158,"// FIXME: I would like to be convinced that this code is worth being as; // complicated as it is, binary search isn't that slow.; //; // If it is worth being optimized, then in my opinion it could be more; // performant, simpler, and more obviously correct by just ""galloping"" outward; // from the queried file position. In fact, this could be incorporated into a; // generic algorithm such as lower_bound_with_hint.; //; // If someone gives me a test case where this matters, and I will do it! - DWD; // If the previous query was to the same file, we know both the file pos from; // that query and the line number returned. This allows us to narrow the; // search space from the entire file to something near the match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:209,Performance,perform,performant,209,"// FIXME: I would like to be convinced that this code is worth being as; // complicated as it is, binary search isn't that slow.; //; // If it is worth being optimized, then in my opinion it could be more; // performant, simpler, and more obviously correct by just ""galloping"" outward; // from the queried file position. In fact, this could be incorporated into a; // generic algorithm such as lower_bound_with_hint.; //; // If someone gives me a test case where this matters, and I will do it! - DWD; // If the previous query was to the same file, we know both the file pos from; // that query and the line number returned. This allows us to narrow the; // search space from the entire file to something near the match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:447,Testability,test,test,447,"// FIXME: I would like to be convinced that this code is worth being as; // complicated as it is, binary search isn't that slow.; //; // If it is worth being optimized, then in my opinion it could be more; // performant, simpler, and more obviously correct by just ""galloping"" outward; // from the queried file position. In fact, this could be incorporated into a; // generic algorithm such as lower_bound_with_hint.; //; // If someone gives me a test case where this matters, and I will do it! - DWD; // If the previous query was to the same file, we know both the file pos from; // that query and the line number returned. This allows us to narrow the; // search space from the entire file to something near the match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:221,Usability,simpl,simpler,221,"// FIXME: I would like to be convinced that this code is worth being as; // complicated as it is, binary search isn't that slow.; //; // If it is worth being optimized, then in my opinion it could be more; // performant, simpler, and more obviously correct by just ""galloping"" outward; // from the queried file position. In fact, this could be incorporated into a; // generic algorithm such as lower_bound_with_hint.; //; // If someone gives me a test case where this matters, and I will do it! - DWD; // If the previous query was to the same file, we know both the file pos from; // that query and the line number returned. This allows us to narrow the; // search space from the entire file to something near the match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:109,Safety,avoid,avoid,109,"// To get the source name, first consult the FileEntry (if one exists); // before the MemBuffer as this will avoid unnecessarily paging in the; // MemBuffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:45,Deployability,update,update,45,"// If we have #line directives in this file, update and overwrite the physical; // location info if appropriate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:94,Availability,down,down,94,// Use the line number specified by the LineEntry. This line number may; // be multiple lines down from the line entry. Add the difference in; // physical line numbers from the query point and the line marker to the; // total.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:69,Testability,assert,assert,69,// Lines are used as a one-based index into a zero-based array. This assert; // checks for possible buffer underruns.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:627,Deployability,update,update,627,"// Add a new chunk for this macro argument. A previous macro argument chunk; // may have been lexed again, so e.g. if the map is; // 0 -> SourceLocation(); // 100 -> Expanded loc #1; // 110 -> SourceLocation(); // and we found a new macro FileID that lexed from offset 105 with length 3,; // the new map will be:; // 0 -> SourceLocation(); // 100 -> Expanded loc #1; // 105 -> Expanded loc #2; // 108 -> Expanded loc #1; // 110 -> SourceLocation(); //; // Since re-lexed macro chunks will always be the same size or less of; // previous chunks, we only need to find where the ending of the new macro; // chunk is mapped to and update the map with new begin/end mappings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:35,Performance,cache,cache,35,// Uses IncludedLocMap to retrieve/cache the decomposed loc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:38,Performance,load,loaded,38,// If one is local while the other is loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:3,Performance,Load,Loaded,3,"// Loaded FileIDs are negative, we store the lowest FileID from each; // allocation, later allocations have lower FileIDs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:15,Performance,load,loaded,15,// If both are loaded from different AST files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:15,Performance,cache,cache,15,/// Return the cache entry for comparing the given file IDs; /// for isBeforeInTranslationUnit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:43,Performance,cache,cache,43,// This is a magic number for limiting the cache size. It was experimentally; // derived from a small Objective-C project (where the cache filled; // out to ~250 items). We can make it larger if necessary.; // FIXME: this is almost certainly full these days. Use an LRU cache?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:133,Performance,cache,cache,133,// This is a magic number for limiting the cache size. It was experimentally; // derived from a small Objective-C project (where the cache filled; // out to ~250 items). We can make it larger if necessary.; // FIXME: this is almost certainly full these days. Use an LRU cache?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:270,Performance,cache,cache,270,// This is a magic number for limiting the cache size. It was experimentally; // derived from a small Objective-C project (where the cache filled; // out to ~250 items). We can make it larger if necessary.; // FIXME: this is almost certainly full these days. Use an LRU cache?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:165,Deployability,update,update,165,"// If the cache size isn't too large, do a lookup and if necessary default; // construct an entry. We can then return it to the caller for direct; // use. When they update the value, the cache will get automatically; // updated as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:220,Deployability,update,updated,220,"// If the cache size isn't too large, do a lookup and if necessary default; // construct an entry. We can then return it to the caller for direct; // use. When they update the value, the cache will get automatically; // updated as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:10,Performance,cache,cache,10,"// If the cache size isn't too large, do a lookup and if necessary default; // construct an entry. We can then return it to the caller for direct; // use. When they update the value, the cache will get automatically; // updated as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:187,Performance,cache,cache,187,"// If the cache size isn't too large, do a lookup and if necessary default; // construct an entry. We can then return it to the caller for direct; // use. When they update the value, the cache will get automatically; // updated as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:148,Performance,load,loaded,148,"// getDecomposedLoc may have failed to return a valid FileID because, e.g. it; // is a serialized one referring to a file that was removed after we loaded; // the PCH.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:26,Performance,cache,cache,26,"// Okay, we missed in the cache, we'll compute the answer and populate it.; // We need to find the common ancestor. The only way of doing this is to; // build the complete include chain for one and then walking up the chain; // of the other looking for a match.; // A location within a FileID on the path up from LOffs to the main file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:10,Availability,redundant,redundant,10,"// FileID redundant, but clearer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:10,Safety,redund,redundant,10,"// FileID redundant, but clearer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:25,Usability,clear,clearer,25,"// FileID redundant, but clearer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:52,Performance,cache,cache,52,// Compare the locations within the common file and cache them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:358,Performance,load,loaded,358,"// The relative order of LChild and RChild is a tiebreaker when; // - locs expand to the same location (occurs in macro arg expansion); // - one loc is a parent of the other (we consider the parent as ""first""); // For the parent entry to be first, its invalid child file ID must; // compare smaller to the valid child file ID of the other entry.; // However loaded FileIDs are <0, so we perform *unsigned* comparison!; // This changes the relative order of local vs loaded FileIDs, but it; // doesn't matter as these are never mixed in macro expansion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:387,Performance,perform,perform,387,"// The relative order of LChild and RChild is a tiebreaker when; // - locs expand to the same location (occurs in macro arg expansion); // - one loc is a parent of the other (we consider the parent as ""first""); // For the parent entry to be first, its invalid child file ID must; // compare smaller to the valid child file ID of the other entry.; // However loaded FileIDs are <0, so we perform *unsigned* comparison!; // This changes the relative order of local vs loaded FileIDs, but it; // doesn't matter as these are never mixed in macro expansion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:466,Performance,load,loaded,466,"// The relative order of LChild and RChild is a tiebreaker when; // - locs expand to the same location (occurs in macro arg expansion); // - one loc is a parent of the other (we consider the parent as ""first""); // For the parent entry to be first, its invalid child file ID must; // compare smaller to the valid child file ID of the other entry.; // However loaded FileIDs are <0, so we perform *unsigned* comparison!; // This changes the relative order of local vs loaded FileIDs, but it; // doesn't matter as these are never mixed in macro expansion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:8,Performance,load,loaded,8,// Dump loaded SLocEntries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:44,Availability,down,downwards,44,// Loaded SLocEntries have indexes counting downwards from -2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:3,Performance,Load,Loaded,3,// Loaded SLocEntries have indexes counting downwards from -2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:65,Availability,down,down,65,"/// Return the amount of memory used by memory buffers, breaking down; /// by heap-backed versus mmap'ed memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp:47,Deployability,release,released,47,// This is referenced by `FileMgr` and will be released by `FileMgr` when it; // is deleted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp:56,Energy Efficiency,Adapt,Adapter,56,"//=== SourceMgrAdapter.cpp - SourceMgr to SourceManager Adapter -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the adapter that maps diagnostics from llvm::SourceMgr; // to Clang's SourceManager.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp:408,Energy Efficiency,adapt,adapter,408,"//=== SourceMgrAdapter.cpp - SourceMgr to SourceManager Adapter -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the adapter that maps diagnostics from llvm::SourceMgr; // to Clang's SourceManager.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp:56,Integrability,Adapter,Adapter,56,"//=== SourceMgrAdapter.cpp - SourceMgr to SourceManager Adapter -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the adapter that maps diagnostics from llvm::SourceMgr; // to Clang's SourceManager.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp:408,Integrability,adapter,adapter,408,"//=== SourceMgrAdapter.cpp - SourceMgr to SourceManager Adapter -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the adapter that maps diagnostics from llvm::SourceMgr; // to Clang's SourceManager.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp:56,Modifiability,Adapt,Adapter,56,"//=== SourceMgrAdapter.cpp - SourceMgr to SourceManager Adapter -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the adapter that maps diagnostics from llvm::SourceMgr; // to Clang's SourceManager.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp:408,Modifiability,adapt,adapter,408,"//=== SourceMgrAdapter.cpp - SourceMgr to SourceManager Adapter -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the adapter that maps diagnostics from llvm::SourceMgr; // to Clang's SourceManager.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp:15,Integrability,message,message,15,// Extract the message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/SourceMgrAdapter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Stack.cpp:59,Modifiability,variab,variable,59,"// The volatile store here is intended to escape the local variable, to; // prevent the compiler from optimizing CharOnStack into anything other; // than a char on the stack.; //; // Tested on: MSVC 2015 - 2019, GCC 4.9 - 9, Clang 3.2 - 9, ICC 13 - 19.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Stack.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Stack.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Stack.cpp:102,Performance,optimiz,optimizing,102,"// The volatile store here is intended to escape the local variable, to; // prevent the compiler from optimizing CharOnStack into anything other; // than a char on the stack.; //; // Tested on: MSVC 2015 - 2019, GCC 4.9 - 9, Clang 3.2 - 9, ICC 13 - 19.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Stack.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Stack.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Stack.cpp:183,Testability,Test,Tested,183,"// The volatile store here is intended to escape the local variable, to; // prevent the compiler from optimizing CharOnStack into anything other; // than a char on the stack.; //; // Tested on: MSVC 2015 - 2019, GCC 4.9 - 9, Clang 3.2 - 9, ICC 13 - 19.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Stack.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Stack.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Stack.cpp:118,Energy Efficiency,allocate,allocates,118,"// If the stack pointer has a surprising value, we do not understand this; // stack usage scheme. (Perhaps the target allocates new stack regions on; // demand for us.) Don't try to guess what's going on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Stack.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Stack.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/TargetInfo.cpp:419,Integrability,interface,interface,419,"//===--- TargetInfo.cpp - Information about Target machine ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the TargetInfo interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/TargetInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/TargetInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/TargetInfo.cpp:157,Deployability,configurat,configuration,157,/// adjust - Set forced language options.; /// Apply changes to the target information with respect to certain; /// language options which change the target configuration and adjust; /// the language based on the target options where applicable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/TargetInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/TargetInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/TargetInfo.cpp:157,Modifiability,config,configuration,157,/// adjust - Set forced language options.; /// Apply changes to the target information with respect to certain; /// language options which change the target configuration and adjust; /// the language based on the target options where applicable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/TargetInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/TargetInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/TargetInfo.cpp:379,Security,access,access,379,// OpenCL C v3.0 s6.7.5 - The generic address space requires support for; // OpenCL C 2.0 or OpenCL C 3.0 with the __opencl_c_generic_address_space; // feature; // OpenCL C v3.0 s6.2.1 - OpenCL pipes require support of OpenCL C 2.0; // or later and __opencl_c_pipes feature; // FIXME: These language options are also defined in setLangDefaults(); // for OpenCL C 2.0 but with no access to target capabilities. Target; // should be immutable once created and thus these language options need; // to be defined only once.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/TargetInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/TargetInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/TargetInfo.cpp:51,Availability,error,erroring,51,// Go ahead and trim whitespace rather than either erroring or; // accepting it weirdly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/TargetInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/TargetInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/TargetInfo.cpp:15,Availability,error,error,15,"// FIXME: This error return is in place temporarily so we can; // add more constraints as we hit it. Eventually, an unknown; // constraint should just be treated as 'g'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/TargetInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/TargetInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets.cpp:134,Availability,avail,available,134,"// Provide macros for all the calling convention keywords. Provide both; // single and double underscore prefixed variants. These are available on; // x64 as well as x86, even though they have no effect.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets.cpp:13,Performance,Tune,TuneCPU,13,// Check the TuneCPU name if specified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets.cpp:104,Integrability,depend,dependencies,104,"// Compute the default target features, we need the target to handle this; // because features may have dependencies on one another.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets.cpp:45,Safety,predict,predictable,45,"// Sort here, so we handle the features in a predictable order. (This matters; // when we're dealing with features that overlap.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets.cpp:4,Security,validat,validateOpenCLTarget,4,/// validateOpenCLTarget - Check that OpenCL target has valid; /// options setting based on OpenCL version.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets.cpp:3,Security,Validat,Validate,3,// Validate that feature macros are set properly for OpenCL C 3.0.; // In other cases assume that target is always valid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp:731,Availability,error,errors,731,"//===--- Warnings.cpp - C-Language Front-end ------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Command line warning options handler.; //; //===----------------------------------------------------------------------===//; //; // This file is responsible for handling all warning options. This includes; // a number of -Wfoo options and their variants, which are driven by TableGen-; // generated data, and the special cases -pedantic, -pedantic-errors, -w,; // -Werror and -Wfatal-errors.; //; // Each warning option controls any number of actual warnings.; // Given a warning option 'foo', the following are valid:; // -Wfoo, -Wno-foo, -Werror=foo, -Wfatal-errors=foo; //; // Remark options are also handled here, analogously, except that they are much; // simpler because a remark can't be promoted to an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Warnings.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp:767,Availability,error,errors,767,"//===--- Warnings.cpp - C-Language Front-end ------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Command line warning options handler.; //; //===----------------------------------------------------------------------===//; //; // This file is responsible for handling all warning options. This includes; // a number of -Wfoo options and their variants, which are driven by TableGen-; // generated data, and the special cases -pedantic, -pedantic-errors, -w,; // -Werror and -Wfatal-errors.; //; // Each warning option controls any number of actual warnings.; // Given a warning option 'foo', the following are valid:; // -Wfoo, -Wno-foo, -Werror=foo, -Wfatal-errors=foo; //; // Remark options are also handled here, analogously, except that they are much; // simpler because a remark can't be promoted to an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Warnings.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp:944,Availability,error,errors,944,"//===--- Warnings.cpp - C-Language Front-end ------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Command line warning options handler.; //; //===----------------------------------------------------------------------===//; //; // This file is responsible for handling all warning options. This includes; // a number of -Wfoo options and their variants, which are driven by TableGen-; // generated data, and the special cases -pedantic, -pedantic-errors, -w,; // -Werror and -Wfatal-errors.; //; // Each warning option controls any number of actual warnings.; // Given a warning option 'foo', the following are valid:; // -Wfoo, -Wno-foo, -Werror=foo, -Wfatal-errors=foo; //; // Remark options are also handled here, analogously, except that they are much; // simpler because a remark can't be promoted to an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Warnings.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp:1093,Availability,error,error,1093,"//===--- Warnings.cpp - C-Language Front-end ------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Command line warning options handler.; //; //===----------------------------------------------------------------------===//; //; // This file is responsible for handling all warning options. This includes; // a number of -Wfoo options and their variants, which are driven by TableGen-; // generated data, and the special cases -pedantic, -pedantic-errors, -w,; // -Werror and -Wfatal-errors.; //; // Each warning option controls any number of actual warnings.; // Given a warning option 'foo', the following are valid:; // -Wfoo, -Wno-foo, -Werror=foo, -Wfatal-errors=foo; //; // Remark options are also handled here, analogously, except that they are much; // simpler because a remark can't be promoted to an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Warnings.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp:1044,Usability,simpl,simpler,1044,"//===--- Warnings.cpp - C-Language Front-end ------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Command line warning options handler.; //; //===----------------------------------------------------------------------===//; //; // This file is responsible for handling all warning options. This includes; // a number of -Wfoo options and their variants, which are driven by TableGen-; // generated data, and the special cases -pedantic, -pedantic-errors, -w,; // -Werror and -Wfatal-errors.; //; // Each warning option controls any number of actual warnings.; // Given a warning option 'foo', the following are valid:; // -Wfoo, -Wno-foo, -Werror=foo, -Wfatal-errors=foo; //; // Remark options are also handled here, analogously, except that they are much; // simpler because a remark can't be promoted to an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Warnings.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp:29,Availability,error,errors,29,"// If -pedantic or -pedantic-errors was specified, then we want to map all; // extension diagnostics onto WARNING or ERROR unless the user has futz'd; // around with them explicitly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Warnings.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp:117,Availability,ERROR,ERROR,117,"// If -pedantic or -pedantic-errors was specified, then we want to map all; // extension diagnostics onto WARNING or ERROR unless the user has futz'd; // around with them explicitly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Warnings.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp:120,Availability,error,errors,120,"// We parse the warning options twice. The first pass sets diagnostic state,; // while the second pass reports warnings/errors. This has the effect that; // we follow the more canonical ""last option wins"" paradigm when there are; // conflicting options.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Warnings.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp:16,Availability,error,error,16,"// -Werror/-Wno-error is a special case, not controlled by the option; // table. It also has the ""specifier"" form of -Werror=foo. GCC supports; // the deprecated -Werror-implicit-function-declaration which is used by; // a few projects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Warnings.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp:22,Availability,error,error,22,// Set the warning as error flag for this specifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Warnings.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp:11,Availability,error,errors,11,// -Wfatal-errors is yet another special case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Warnings.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp:11,Availability,error,error,11,// Set the error as fatal flag for this specifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Warnings.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Warnings.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp:29,Availability,avail,available,29,// Make __builtin_ms_va_list available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp:22,Availability,avail,available,22,"// Make the SVE types available. Note that this deliberately doesn't; // depend on SveMode, since in principle it should be possible to turn; // SVE on and off within a translation unit. It should also be possible; // to compile the global declaration:; //; // __SVInt8_t *ptr;; //; // even without SVE.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp:73,Integrability,depend,depend,73,"// Make the SVE types available. Note that this deliberately doesn't; // depend on SveMode, since in principle it should be possible to turn; // SVE on and off within a translation unit. It should also be possible; // to compile the global declaration:; //; // __SVInt8_t *ptr;; //; // even without SVE.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp:9,Safety,detect,detection,9,// Allow detection of fast FMA support.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp:110,Integrability,depend,dependant,110,"// If the feature is an architecture feature (like v8.2a), add all previous; // architecture versions and any dependant target features.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp:98,Integrability,depend,dependent,98,"// Not an architecture, nothing more to do.; // Disabling an architecture feature does not affect dependent features",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp:93,Deployability,Update,UpdatedFeaturesVec,93,"// Process target and dependent features. This is done in two loops collecting; // them into UpdatedFeaturesVec: first to add dependent '+'features, second to; // add target '+/-'features that can later disable some of features added on; // the first loop. Function Multi Versioning features begin with '?'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp:22,Integrability,depend,dependent,22,"// Process target and dependent features. This is done in two loops collecting; // them into UpdatedFeaturesVec: first to add dependent '+'features, second to; // add target '+/-'features that can later disable some of features added on; // the first loop. Function Multi Versioning features begin with '?'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp:126,Integrability,depend,dependent,126,"// Process target and dependent features. This is done in two loops collecting; // them into UpdatedFeaturesVec: first to add dependent '+'features, second to; // add target '+/-'features that can later disable some of features added on; // the first loop. Function Multi Versioning features begin with '?'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp:210,Performance,tune,tune,210,"// Parse AArch64 Target attributes, which are a comma separated list of:; // ""arch=<arch>"" - parsed to features as per -march=..; // ""cpu=<cpu>"" - parsed to features as per -mcpu=.., with CPU set to <cpu>; // ""tune=<cpu>"" - TuneCPU set to <cpu>; // ""feature"", ""no-feature"" - Add (or remove) feature.; // ""+feature"", ""+nofeature"" - Add (or remove) feature.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp:224,Performance,Tune,TuneCPU,224,"// Parse AArch64 Target attributes, which are a comma separated list of:; // ""arch=<arch>"" - parsed to features as per -march=..; // ""cpu=<cpu>"" - parsed to features as per -mcpu=.., with CPU set to <cpu>; // ""tune=<cpu>"" - TuneCPU set to <cpu>; // ""feature"", ""no-feature"" - Add (or remove) feature.; // ""+feature"", ""+nofeature"" - Add (or remove) feature.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp:54,Availability,error,error,54,// Pushing the original feature string to give a sema error later on; // when they get checked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp:43,Testability,log,logical,43,// Constant that can be used with a 32-bit logical instruction,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp:43,Testability,log,logical,43,// Constant that can be used with a 64-bit logical instruction,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp:267,Availability,error,error,267,"// Ump: A memory address suitable for ldp/stp in SI, DI, SF and DF modes.; // Utf: A memory address suitable for ldp/stp in TF mode.; // Usa: An absolute symbolic address.; // Ush: The high part (bits 32:12) of a pc-relative symbolic address.; // Better to return an error saying that it's an unrecognised constraint; // even if this is a valid constraint in gcc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp:54,Deployability,update,update,54,"// If you edit the description strings, make sure you update; // getPointerWidthV().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp:26,Testability,log,logic,26,// TODO: Should move this logic into TargetParser,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp:20,Availability,avail,available,20,// __bf16 is always available as a load/store only type on AMDGCN.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp:35,Performance,load,load,35,// __bf16 is always available as a load/store only type on AMDGCN.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp:35,Modifiability,extend,extended,35,"// On x86_64 long double is 80-bit extended precision format, which is; // not supported by AMDGPU. 128-bit floating point format is also not; // supported by AMDGPU. Therefore keep its own format for these two types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp:31,Modifiability,variab,variable,31,// FIXME: Enumerated types are variable width in straight AAPCS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp:3,Performance,cache,cache,3,// cache TargetParser info,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp:3,Performance,cache,cache,3,// cache CPU related strings,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp:3,Performance,Cache,Cache,3,// Cache arch related info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp:32,Availability,avail,available,32,// The __bf16 type is generally available so long as we have any fp registers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp:24,Security,access,access,24,// ACLE 6.4.3 Unaligned access supported in hardware,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp:58,Availability,avail,available,58,"// This only gets set when Neon instructions are actually available, unlike; // the VFP define, hence the soft float and arch check. This is subtly; // different from gcc, we follow the intent which was that it should be set; // when Neon instructions are actually available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp:265,Availability,avail,available,265,"// This only gets set when Neon instructions are actually available, unlike; // the VFP define, hence the soft float and arch check. This is subtly; // different from gcc, we follow the intent which was that it should be set; // when Neon instructions are actually available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp:70,Availability,avail,available,70,// An immediate integer between 0 and 65535 (valid for MOVW); // only available in ARMv6T2 and above,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp:47,Energy Efficiency,power,power,47,// FIXME: should check if immediate value is a power of two or a integer; // between 0 and 32,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp:10,Performance,load,load,10,// ...VFP load/store (reg+constant offset),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp:13,Performance,load,load,13,// ...iWMMXt load/store,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp:21,Performance,load,load,21,// address valid for load/store opaque types wider; // than 128-bits,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp:44,Performance,load,load,44,// valid address for Neon doubleword vector load/store,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp:48,Performance,load,load,48,// valid address for Neon element and structure load/store,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp:32,Performance,load,loads,32,// valid address for non-offset loads/stores of quad-word; // values in four ARM registers,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AVR.cpp:28,Integrability,synchroniz,synchronized,28,// NOTE: This list has been synchronized with gcc-avr 5.4.0 and avr-libc 2.0.0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AVR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AVR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AVR.cpp:27,Integrability,depend,depends,27,"// ""%~"" represents for 'r' depends on the device has long jump/call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AVR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AVR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AVR.cpp:27,Integrability,depend,depends,27,"// ""%!"" represents for 'e' depends on the PC register size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AVR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AVR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AVR.h:3,Usability,Simpl,Simple,3,// Simple upper registers,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/AVR.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AVR.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/Lanai.h:81,Safety,safe,safely,81,// Temporary approach to make everything at least word-aligned and allow for; // safely casting between pointers with different alignment requirements.; // TODO: Remove this when there are no more cast align warnings on the; // firmware.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/Lanai.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/Lanai.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/LoongArch.cpp:33,Availability,avail,available,33,// A floating-point register (if available).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/LoongArch.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/LoongArch.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/LoongArch.cpp:36,Testability,log,logic,36,// An unsigned 12-bit constant (for logic instructions).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/LoongArch.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/LoongArch.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/Mips.h:17,Performance,load,loadable,17,"// Constants not loadable via lui, addiu, or ori",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/Mips.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/Mips.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/Mips.h:46,Performance,load,load,46,// An address that can be used in a non-macro load or store,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/Mips.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/Mips.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/Mips.h:14,Usability,usab,usable,14,"// An address usable by ll, and sc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/Mips.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/Mips.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/Mips.h:817,Safety,avoid,avoid,817,"// In GCC, $1 is not widely used in generated code (it's used only in a few; // specific situations), so there is no real need for users to add it to; // the clobbers list if they want to use it in their inline assembly code.; //; // In LLVM, $1 is treated as a normal GPR and is always allocatable during; // code generation, so using it in inline assembly without adding it to the; // clobbers list can cause conflicts between the inline assembly code and; // the surrounding generated code.; //; // Another problem is that LLVM is allowed to choose $1 for inline assembly; // operands, which will conflict with the "".set at"" assembler option (which; // we use only for inline assembly, in order to maintain compatibility with; // GCC) and will also conflict with the user's usage of $1.; //; // The easiest way to avoid these conflicts and keep $1 as an allocatable; // register for generated code is to automatically clobber $1 for all inline; // assembly code.; //; // FIXME: We should automatically clobber $1 only for inline assembly code; // which actually uses it. This would allow LLVM to use $1 for inline; // assembly operands if the user's assembly code doesn't use it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/Mips.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/Mips.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.cpp:20,Availability,avail,available,20,// __bf16 is always available as a load/store only type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.cpp:35,Performance,load,load,35,// __bf16 is always available as a load/store only type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.cpp:10,Availability,avail,available,10,// Define available target features; // These must be defined in sorted order!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.h:108,Integrability,interoperab,interoperability,108,/// The DWARF address class. Taken from; /// https://docs.nvidia.com/cuda/archive/10.0/ptx-writers-guide-to-interoperability/index.html#cuda-specific-dwarf,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.h:99,Usability,guid,guide-to-interoperability,99,/// The DWARF address class. Taken from; /// https://docs.nvidia.com/cuda/archive/10.0/ptx-writers-guide-to-interoperability/index.html#cuda-specific-dwarf,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/NVPTX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.cpp:12,Integrability,contract,contract,12,"// ""The /fp:contract option allows the compiler to generate floating-point; // contractions [...]""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.cpp:79,Integrability,contract,contractions,79,"// ""The /fp:contract option allows the compiler to generate floating-point; // contractions [...]""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.cpp:110,Performance,optimiz,optimize,110,"// ""The /fp:fast option allows the compiler to reorder, combine, or simplify; // floating-point operations to optimize floating-point code for speed and; // space. The compiler may omit rounding at assignment statements,; // typecasts, or function calls. It may reorder operations or make algebraic; // transforms, for example, by use of associative and distributive laws. It; // may reorder code even if such transformations result in observably; // different rounding behavior.""; //; // ""Under /fp:precise and /fp:strict, the compiler doesn't do any mathematical; // transformation unless the transformation is guaranteed to produce a bitwise; // identical result.""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.cpp:68,Usability,simpl,simplify,68,"// ""The /fp:fast option allows the compiler to reorder, combine, or simplify; // floating-point operations to optimize floating-point code for speed and; // space. The compiler may omit rounding at assignment statements,; // typecasts, or function calls. It may reorder operations or make algebraic; // transforms, for example, by use of associative and distributive laws. It; // may reorder code even if such transformations result in observably; // different rounding behavior.""; //; // ""Under /fp:precise and /fp:strict, the compiler doesn't do any mathematical; // transformation unless the transformation is guaranteed to produce a bitwise; // identical result.""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.cpp:81,Safety,safe,safely,81,"// ""Under /fp:strict, the compiler generates code that allows the; // program to safely unmask floating-point exceptions, read or write; // floating-point status registers, or change rounding modes.""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.cpp:8,Deployability,update,update,8,// TODO update to the proper value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h:294,Integrability,depend,dependent,294,"// On FreeBSD, wchar_t contains the number of the code point as; // used by the character set of the locale. These character sets are; // not necessarily a superset of ASCII.; //; // FIXME: This is wrong; the macro refers to the numerical values; // of wchar_t *literals*, which are not locale-dependent. However,; // FreeBSD systems apparently depend on us getting this wrong, and; // setting this to 1 is conforming even if all the basic source; // character literals have the same encoding as char and wchar_t.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h:345,Integrability,depend,depend,345,"// On FreeBSD, wchar_t contains the number of the code point as; // used by the character set of the locale. These character sets are; // not necessarily a superset of ASCII.; //; // FIXME: This is wrong; the macro refers to the numerical values; // of wchar_t *literals*, which are not locale-dependent. However,; // FreeBSD systems apparently depend on us getting this wrong, and; // setting this to 1 is conforming even if all the basic source; // character literals have the same encoding as char and wchar_t.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h:19,Modifiability,variab,variable,19,"// On PS4/PS5, TLS variable cannot be aligned to more than 32 bytes (256; // bits).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h:46,Testability,log,logic,46,// Define AIX OS-Version Macros.; // Includes logic for legacy versions of AIX; no specific intent to support.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h:17,Modifiability,inherit,inherited,17,// RegParmMax is inherited from the underlying architecture.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/OSTargets.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp:73,Modifiability,config,configured,73,/// handleTargetFeatures - Perform initialization based on the user; /// configured set of features.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp:27,Performance,Perform,Perform,27,/// handleTargetFeatures - Perform initialization based on the user; /// configured set of features.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp:37,Testability,assert,assert,37,// TODO: Finish this list and add an assert that we've handled them; // all.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp:58,Energy Efficiency,Power,PowerPC-specific,58,/// PPCTargetInfo::getTargetDefines - Return a set of the PowerPC-specific; /// #defines that are not tied to a specific subtarget.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp:88,Availability,avail,available,88,// We define the XLC compatibility macros only on AIX and Linux since XLC; // was never available on any other platforms.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp:276,Availability,error,error,276,// Handle explicit options being passed to the compiler here: if we've; // explicitly turned off vsx and turned on any of:; // - power8-vector; // - direct-move; // - float128; // - power9-vector; // - paired-vector-memops; // - mma; // - power10-vector; // then go ahead and error since the customer has expressed an incompatible; // set of options.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp:52,Energy Efficiency,Power,Power,52,// Future CPU should include all of the features of Power 10 as well as any; // additional features (yet to be determined) specific to it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp:26,Availability,avail,available,26,// MMA operations are not available pre-Power10.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp:36,Availability,avail,available,36,"// PC-Relative instructions are not available pre-Power10,; // and these instructions also require prefixed instructions support.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp:33,Availability,avail,available,33,// Prefixed instructions are not available pre-Power10.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp:32,Availability,avail,available,32,// Paired vector memops are not available pre-Power10.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp:33,Energy Efficiency,Power,Power,33,// We can turn on ROP Protect on Power 8 and above.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp:209,Energy Efficiency,power,powerpc,209,"// PPC ELFABIv2 DWARF Definition ""Table 2.26. Mappings of Common Registers"".; // vs0 ~ vs31 is mapping to 32 - 63,; // vs32 ~ vs63 is mapping to 77 - 108.; // And this mapping applies to all OSes which run on powerpc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h:9,Energy Efficiency,power,power,9,// Exact power of 2,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h:39,Performance,load,loaded,39,// Floating point constant that can be loaded into a; // register with one instruction per word,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h:47,Performance,load,loaded,47,// Integer/Floating point constant that can be loaded; // into a register using three instructions,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h:82,Deployability,update,update,82,"// Memory operand. Note that on PowerPC targets, m can; // include addresses that update the base register. It; // is therefore only safe to use `m' in an asm statement; // if that asm statement accesses the operand exactly once.; // The asm statement must also use `%U<opno>' as a; // placeholder for the ""update"" flag in the corresponding; // load or store instruction. For example:; // asm (""st%U0 %1,%0"" : ""=m"" (mem) : ""r"" (val));; // is correct but:; // asm (""st %1,%0"" : ""=m"" (mem) : ""r"" (val));; // is not. Use es rather than m if you don't want the base; // register to be updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h:307,Deployability,update,update,307,"// Memory operand. Note that on PowerPC targets, m can; // include addresses that update the base register. It; // is therefore only safe to use `m' in an asm statement; // if that asm statement accesses the operand exactly once.; // The asm statement must also use `%U<opno>' as a; // placeholder for the ""update"" flag in the corresponding; // load or store instruction. For example:; // asm (""st%U0 %1,%0"" : ""=m"" (mem) : ""r"" (val));; // is correct but:; // asm (""st %1,%0"" : ""=m"" (mem) : ""r"" (val));; // is not. Use es rather than m if you don't want the base; // register to be updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h:581,Deployability,update,updated,581,"// Memory operand. Note that on PowerPC targets, m can; // include addresses that update the base register. It; // is therefore only safe to use `m' in an asm statement; // if that asm statement accesses the operand exactly once.; // The asm statement must also use `%U<opno>' as a; // placeholder for the ""update"" flag in the corresponding; // load or store instruction. For example:; // asm (""st%U0 %1,%0"" : ""=m"" (mem) : ""r"" (val));; // is correct but:; // asm (""st %1,%0"" : ""=m"" (mem) : ""r"" (val));; // is not. Use es rather than m if you don't want the base; // register to be updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h:32,Energy Efficiency,Power,PowerPC,32,"// Memory operand. Note that on PowerPC targets, m can; // include addresses that update the base register. It; // is therefore only safe to use `m' in an asm statement; // if that asm statement accesses the operand exactly once.; // The asm statement must also use `%U<opno>' as a; // placeholder for the ""update"" flag in the corresponding; // load or store instruction. For example:; // asm (""st%U0 %1,%0"" : ""=m"" (mem) : ""r"" (val));; // is correct but:; // asm (""st %1,%0"" : ""=m"" (mem) : ""r"" (val));; // is not. Use es rather than m if you don't want the base; // register to be updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h:345,Performance,load,load,345,"// Memory operand. Note that on PowerPC targets, m can; // include addresses that update the base register. It; // is therefore only safe to use `m' in an asm statement; // if that asm statement accesses the operand exactly once.; // The asm statement must also use `%U<opno>' as a; // placeholder for the ""update"" flag in the corresponding; // load or store instruction. For example:; // asm (""st%U0 %1,%0"" : ""=m"" (mem) : ""r"" (val));; // is correct but:; // asm (""st %1,%0"" : ""=m"" (mem) : ""r"" (val));; // is not. Use es rather than m if you don't want the base; // register to be updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h:133,Safety,safe,safe,133,"// Memory operand. Note that on PowerPC targets, m can; // include addresses that update the base register. It; // is therefore only safe to use `m' in an asm statement; // if that asm statement accesses the operand exactly once.; // The asm statement must also use `%U<opno>' as a; // placeholder for the ""update"" flag in the corresponding; // load or store instruction. For example:; // asm (""st%U0 %1,%0"" : ""=m"" (mem) : ""r"" (val));; // is correct but:; // asm (""st %1,%0"" : ""=m"" (mem) : ""r"" (val));; // is not. Use es rather than m if you don't want the base; // register to be updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h:195,Security,access,accesses,195,"// Memory operand. Note that on PowerPC targets, m can; // include addresses that update the base register. It; // is therefore only safe to use `m' in an asm statement; // if that asm statement accesses the operand exactly once.; // The asm statement must also use `%U<opno>' as a; // placeholder for the ""update"" flag in the corresponding; // load or store instruction. For example:; // asm (""st%U0 %1,%0"" : ""=m"" (mem) : ""r"" (val));; // is correct but:; // asm (""st %1,%0"" : ""=m"" (mem) : ""r"" (val));; // is not. Use es rather than m if you don't want the base; // register to be updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h:194,Security,access,access,194,"// es: A ""stable"" memory operand; that is, one which does not; // include any automodification of the base register. Unlike; // `m', this constraint can be used in asm statements that; // might access the operand several times, or that might not; // access it at all.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h:250,Security,access,access,250,"// es: A ""stable"" memory operand; that is, one which does not; // include any automodification of the base register. Unlike; // `m', this constraint can be used in asm statements that; // might access the operand several times, or that might not; // access it at all.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h:33,Availability,mask,mask,33,// Constant suitable as a 64-bit mask operand,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h:33,Availability,mask,mask,33,// Constant suitable as a 32-bit mask operand,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h:12,Deployability,Release,Release,12,// System V Release 4 small data area reference,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h:7,Availability,mask,masks,7,"// AND masks that can be performed by two rldic{l, r}; // instructions",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h:25,Performance,perform,performed,25,"// AND masks that can be performed by two rldic{l, r}; // instructions",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/RISCV.cpp:38,Security,access,access,38,// A 5-bit unsigned immediate for CSR access instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/RISCV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/RISCV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/RISCV.cpp:45,Modifiability,config,configured,45,/// Perform initialization based on the user configured set of features.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/RISCV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/RISCV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/RISCV.cpp:4,Performance,Perform,Perform,4,/// Perform initialization based on the user configured set of features.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/RISCV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/RISCV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/RISCV.cpp:3,Deployability,Update,Update,3,// Update Features with CPU's features,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/RISCV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/RISCV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/Sparc.h:40,Usability,clear,clear,40,// 32-bit constant with the low 12 bits clear,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/Sparc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/Sparc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/SPIR.h:10,Availability,avail,available,10,// Define available target features; // These must be defined in sorted order!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/SPIR.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/SPIR.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/SystemZ.h:102,Availability,avail,available,102,"// All vector types are default aligned on an 8-byte boundary, even if the; // vector facility is not available. That is different from Linux.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/SystemZ.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/SystemZ.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/TCE.h:343,Availability,avail,available,343,"// llvm and clang cannot be used directly to output native binaries for; // target, but is used to compile C code to llvm bitcode with correct; // type and alignment information.; //; // TCE uses the llvm bitcode as input and uses it for generating customized; // target processor and program binary. TCE co-design environment is; // publicly available in http://tce.cs.tut.fi",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/TCE.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/TCE.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:128,Integrability,depend,depend,128,// Can't do this earlier because we need to be able to explicitly enable; // or disable these features and the things that they depend upon.; // Enable popcnt if sse4.2 is enabled and popcnt is not explicitly disabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:73,Modifiability,config,configured,73,/// handleTargetFeatures - Perform initialization based on the user; /// configured set of features.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:27,Performance,Perform,Perform,27,/// handleTargetFeatures - Perform initialization based on the user; /// configured set of features.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:370,Availability,avail,available,370,"// X86 target has bfloat16 emulation support in the backend, where; // bfloat16 is treated as a 32-bit float, arithmetic operations are; // performed in 32-bit, and the result is converted back to bfloat16.; // Truncation and extension between bfloat16 and 32-bit float are supported; // by the compiler-rt library. However, native bfloat16 support is currently; // not available in the X86 target. Hence, HasFullBFloat16 will be false; // until native bfloat16 support is available. HasFullBFloat16 is used to; // determine whether to automatically use excess floating point precision; // for bfloat16 arithmetic operations in the front-end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:473,Availability,avail,available,473,"// X86 target has bfloat16 emulation support in the backend, where; // bfloat16 is treated as a 32-bit float, arithmetic operations are; // performed in 32-bit, and the result is converted back to bfloat16.; // Truncation and extension between bfloat16 and 32-bit float are supported; // by the compiler-rt library. However, native bfloat16 support is currently; // not available in the X86 target. Hence, HasFullBFloat16 will be false; // until native bfloat16 support is available. HasFullBFloat16 is used to; // determine whether to automatically use excess floating point precision; // for bfloat16 arithmetic operations in the front-end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:140,Performance,perform,performed,140,"// X86 target has bfloat16 emulation support in the backend, where; // bfloat16 is treated as a 32-bit float, arithmetic operations are; // performed in 32-bit, and the result is converted back to bfloat16.; // Truncation and extension between bfloat16 and 32-bit float are supported; // by the compiler-rt library. However, native bfloat16 support is currently; // not available in the X86 target. Hence, HasFullBFloat16 will be false; // until native bfloat16 support is available. HasFullBFloat16 is used to; // determine whether to automatically use excess floating point precision; // for bfloat16 arithmetic operations in the front-end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:56,Performance,tune,tune,56,"// Subtarget options.; // FIXME: We are hard-coding the tune parameters based on the CPU, but they; // truly should be based on -mtune options.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:114,Security,expose,exposed,114,"// FIXME: Historically, we defined this legacy name, it would be nice to; // remove it at some point. We've never exposed fine-grained names for; // recent primary x86 CPUs, and we should keep it that way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:26,Security,validat,validation,26,// We can't use a generic validation scheme for the features accepted here; // versus subtarget features accepted in the target attribute because the; // bitfield structure that's initialized in the runtime only supports the; // below currently rather than the full range of subtarget features. (See; // X86TargetInfo::hasFeature for a somewhat comprehensive list).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:90,Testability,assert,asserts,90,"// Note, this function should only be used after ensuring the value is; // correct, so it asserts if the value is out of range.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:146,Modifiability,variab,variables,146,// We can't use a generic validation scheme for the cpus accepted here; // versus subtarget cpus accepted in the target attribute because the; // variables intitialized by the runtime only support the below currently; // rather than the full range of cpus.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:26,Security,validat,validation,26,// We can't use a generic validation scheme for the cpus accepted here; // versus subtarget cpus accepted in the target attribute because the; // variables intitialized by the runtime only support the below currently; // rather than the full range of cpus.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:52,Modifiability,extend,extending,52,// 32-bit signed integer constant for use with sign-extending x86_64; // instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:54,Modifiability,extend,extending,54,// 32-bit unsigned integer constant for use with zero-extending; // x86_64 instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:15,Availability,mask,mask,15,// AVX512 arch mask registers: k1-k7.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:16,Security,access,accessible,16,"// Any register accessible as [r]l: a, b, c, and d.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:42,Integrability,depend,dependent,42,"// Any {X,Y,Z}MM register (Arch & context dependent)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:14,Availability,mask,mask,14,"// Any AVX512 mask register (same as Yk, additionally allows k0; // for intermideate k reg operations).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:16,Security,access,accessible,16,"// Any register accessible as [r]h: a, b, c, and d.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:99,Security,access,access,99,"// ""Index"" registers: any general register that can be used as an; // index in a base+index memory access.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:927,Availability,down,download,927,"// Below is based on the following information:; // +------------------------------------+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+; // | Processor Name | Cache Line Size (Bytes) | Source |; // +------------------------------------+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+; // | i386 | 64 | https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-optimization-manual.pdf |; // | i486 | 16 | ""four doublewords"" (doubleword = 32 bits, 4 bits * 32 bits = 16 bytes) https://en.wikichip.org/w/images/d/d3/i486_MICROPROCESSOR_HARDWARE_REFERENCE_MANUAL_%281990%29.pdf and http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.126.4216&rep=rep1&type=pdf (page 29) |; // | i586/Pentium MMX | 32 | https://www.7-cpu.com/cpu/P-MMX.html |; // | i686/Pentium | 32 | https://www.7-cpu.com/cpu/P6.html |; // | Netburst/Pentium4 | 64 | https://www.7-cpu.com/cpu/P4-180.html |; // | Atom | 64 | https://www.7-cpu.com/cpu/Atom.html |; // | Westmere | 64 | https://en.wikichip.org/wiki/intel/microarchitectures/sandy_bridge_(client) ""Cache Architecture"" |; // | Sandy Bridge | 64 | https://en.wikipedia.org/wiki/Sandy_Bridge and https://www.7-cpu.com/cpu/SandyBridge.html |; // | Ivy Bridge | 64 | https://blog.stuffedcow.net/2013/01/ivb-cache-replacement/ and https://www.7-cpu.com/cpu/IvyBridge.html |; // | Haswell | 64 | https://www.7-cpu.com/cpu/Haswell.html |; // | Broadwell | 64 | https://www.7-cpu.com/cpu/Broadwell.html |; // | Skylake (including skylake-avx512) | 64 | https://www.nas.nasa.gov/hecc/support/kb/skylake-processors_550.html ""Cache Hierarchy"" |; // | Cascade Lake | 64 | https://www.nas.nasa.gov/hecc/support/kb/cascade-lake-processors_579.html ""Cache Hierarchy"" |; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:1377,Integrability,Bridg,Bridge,1377,"-------------------------------+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+; // | i386 | 64 | https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-optimization-manual.pdf |; // | i486 | 16 | ""four doublewords"" (doubleword = 32 bits, 4 bits * 32 bits = 16 bytes) https://en.wikichip.org/w/images/d/d3/i486_MICROPROCESSOR_HARDWARE_REFERENCE_MANUAL_%281990%29.pdf and http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.126.4216&rep=rep1&type=pdf (page 29) |; // | i586/Pentium MMX | 32 | https://www.7-cpu.com/cpu/P-MMX.html |; // | i686/Pentium | 32 | https://www.7-cpu.com/cpu/P6.html |; // | Netburst/Pentium4 | 64 | https://www.7-cpu.com/cpu/P4-180.html |; // | Atom | 64 | https://www.7-cpu.com/cpu/Atom.html |; // | Westmere | 64 | https://en.wikichip.org/wiki/intel/microarchitectures/sandy_bridge_(client) ""Cache Architecture"" |; // | Sandy Bridge | 64 | https://en.wikipedia.org/wiki/Sandy_Bridge and https://www.7-cpu.com/cpu/SandyBridge.html |; // | Ivy Bridge | 64 | https://blog.stuffedcow.net/2013/01/ivb-cache-replacement/ and https://www.7-cpu.com/cpu/IvyBridge.html |; // | Haswell | 64 | https://www.7-cpu.com/cpu/Haswell.html |; // | Broadwell | 64 | https://www.7-cpu.com/cpu/Broadwell.html |; // | Skylake (including skylake-avx512) | 64 | https://www.nas.nasa.gov/hecc/support/kb/skylake-processors_550.html ""Cache Hierarchy"" |; // | Cascade Lake | 64 | https://www.nas.nasa.gov/hecc/support/kb/cascade-lake-processors_579.html ""Cache Hierarchy"" |; // | Skylake | 64 | https://en.wikichip.org/wiki/intel/microarchitectures/kaby_lake ""Memory Hierarchy"" |; // | Ice Lake | 64 | https://www.7-cpu.com/cpu/Ice_Lake.html |; // | Knights Landing | 64 | https://software.intel.com/en-us/articles/intel-xeon-phi-processor-7200-family-memory-management-optimizations ""The Intel® Xeon Phi™ Processor Arch",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:1493,Integrability,Bridg,Bridge,1493,"--------------------------------------------------------------+; // | i386 | 64 | https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-optimization-manual.pdf |; // | i486 | 16 | ""four doublewords"" (doubleword = 32 bits, 4 bits * 32 bits = 16 bytes) https://en.wikichip.org/w/images/d/d3/i486_MICROPROCESSOR_HARDWARE_REFERENCE_MANUAL_%281990%29.pdf and http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.126.4216&rep=rep1&type=pdf (page 29) |; // | i586/Pentium MMX | 32 | https://www.7-cpu.com/cpu/P-MMX.html |; // | i686/Pentium | 32 | https://www.7-cpu.com/cpu/P6.html |; // | Netburst/Pentium4 | 64 | https://www.7-cpu.com/cpu/P4-180.html |; // | Atom | 64 | https://www.7-cpu.com/cpu/Atom.html |; // | Westmere | 64 | https://en.wikichip.org/wiki/intel/microarchitectures/sandy_bridge_(client) ""Cache Architecture"" |; // | Sandy Bridge | 64 | https://en.wikipedia.org/wiki/Sandy_Bridge and https://www.7-cpu.com/cpu/SandyBridge.html |; // | Ivy Bridge | 64 | https://blog.stuffedcow.net/2013/01/ivb-cache-replacement/ and https://www.7-cpu.com/cpu/IvyBridge.html |; // | Haswell | 64 | https://www.7-cpu.com/cpu/Haswell.html |; // | Broadwell | 64 | https://www.7-cpu.com/cpu/Broadwell.html |; // | Skylake (including skylake-avx512) | 64 | https://www.nas.nasa.gov/hecc/support/kb/skylake-processors_550.html ""Cache Hierarchy"" |; // | Cascade Lake | 64 | https://www.nas.nasa.gov/hecc/support/kb/cascade-lake-processors_579.html ""Cache Hierarchy"" |; // | Skylake | 64 | https://en.wikichip.org/wiki/intel/microarchitectures/kaby_lake ""Memory Hierarchy"" |; // | Ice Lake | 64 | https://www.7-cpu.com/cpu/Ice_Lake.html |; // | Knights Landing | 64 | https://software.intel.com/en-us/articles/intel-xeon-phi-processor-7200-family-memory-management-optimizations ""The Intel® Xeon Phi™ Processor Architecture"" |; // | Knights Mill | 64 | https://software.intel.com/sites/default/files/managed/9e/bc/64-ia-32-architectures-optimization-manual.pdf?countryl",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:299,Performance,Cache,Cache,299,"// Below is based on the following information:; // +------------------------------------+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+; // | Processor Name | Cache Line Size (Bytes) | Source |; // +------------------------------------+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+; // | i386 | 64 | https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-optimization-manual.pdf |; // | i486 | 16 | ""four doublewords"" (doubleword = 32 bits, 4 bits * 32 bits = 16 bytes) https://en.wikichip.org/w/images/d/d3/i486_MICROPROCESSOR_HARDWARE_REFERENCE_MANUAL_%281990%29.pdf and http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.126.4216&rep=rep1&type=pdf (page 29) |; // | i586/Pentium MMX | 32 | https://www.7-cpu.com/cpu/P-MMX.html |; // | i686/Pentium | 32 | https://www.7-cpu.com/cpu/P6.html |; // | Netburst/Pentium4 | 64 | https://www.7-cpu.com/cpu/P4-180.html |; // | Atom | 64 | https://www.7-cpu.com/cpu/Atom.html |; // | Westmere | 64 | https://en.wikichip.org/wiki/intel/microarchitectures/sandy_bridge_(client) ""Cache Architecture"" |; // | Sandy Bridge | 64 | https://en.wikipedia.org/wiki/Sandy_Bridge and https://www.7-cpu.com/cpu/SandyBridge.html |; // | Ivy Bridge | 64 | https://blog.stuffedcow.net/2013/01/ivb-cache-replacement/ and https://www.7-cpu.com/cpu/IvyBridge.html |; // | Haswell | 64 | https://www.7-cpu.com/cpu/Haswell.html |; // | Broadwell | 64 | https://www.7-cpu.com/cpu/Broadwell.html |; // | Skylake (including skylake-avx512) | 64 | https://www.nas.nasa.gov/hecc/support/kb/skylake-processors_550.html ""Cache Hierarchy"" |; // | Cascade Lake | 64 | https://www.nas.nasa.gov/hecc/support/kb/cascade-lake-processors_579.html ""Cache Hierarchy"" |; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:672,Performance,optimiz,optimization-manual,672,"// Below is based on the following information:; // +------------------------------------+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+; // | Processor Name | Cache Line Size (Bytes) | Source |; // +------------------------------------+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+; // | i386 | 64 | https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-optimization-manual.pdf |; // | i486 | 16 | ""four doublewords"" (doubleword = 32 bits, 4 bits * 32 bits = 16 bytes) https://en.wikichip.org/w/images/d/d3/i486_MICROPROCESSOR_HARDWARE_REFERENCE_MANUAL_%281990%29.pdf and http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.126.4216&rep=rep1&type=pdf (page 29) |; // | i586/Pentium MMX | 32 | https://www.7-cpu.com/cpu/P-MMX.html |; // | i686/Pentium | 32 | https://www.7-cpu.com/cpu/P6.html |; // | Netburst/Pentium4 | 64 | https://www.7-cpu.com/cpu/P4-180.html |; // | Atom | 64 | https://www.7-cpu.com/cpu/Atom.html |; // | Westmere | 64 | https://en.wikichip.org/wiki/intel/microarchitectures/sandy_bridge_(client) ""Cache Architecture"" |; // | Sandy Bridge | 64 | https://en.wikipedia.org/wiki/Sandy_Bridge and https://www.7-cpu.com/cpu/SandyBridge.html |; // | Ivy Bridge | 64 | https://blog.stuffedcow.net/2013/01/ivb-cache-replacement/ and https://www.7-cpu.com/cpu/IvyBridge.html |; // | Haswell | 64 | https://www.7-cpu.com/cpu/Haswell.html |; // | Broadwell | 64 | https://www.7-cpu.com/cpu/Broadwell.html |; // | Skylake (including skylake-avx512) | 64 | https://www.nas.nasa.gov/hecc/support/kb/skylake-processors_550.html ""Cache Hierarchy"" |; // | Cascade Lake | 64 | https://www.nas.nasa.gov/hecc/support/kb/cascade-lake-processors_579.html ""Cache Hierarchy"" |; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:1343,Performance,Cache,Cache,1343,"-------------------------------+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+; // | i386 | 64 | https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-optimization-manual.pdf |; // | i486 | 16 | ""four doublewords"" (doubleword = 32 bits, 4 bits * 32 bits = 16 bytes) https://en.wikichip.org/w/images/d/d3/i486_MICROPROCESSOR_HARDWARE_REFERENCE_MANUAL_%281990%29.pdf and http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.126.4216&rep=rep1&type=pdf (page 29) |; // | i586/Pentium MMX | 32 | https://www.7-cpu.com/cpu/P-MMX.html |; // | i686/Pentium | 32 | https://www.7-cpu.com/cpu/P6.html |; // | Netburst/Pentium4 | 64 | https://www.7-cpu.com/cpu/P4-180.html |; // | Atom | 64 | https://www.7-cpu.com/cpu/Atom.html |; // | Westmere | 64 | https://en.wikichip.org/wiki/intel/microarchitectures/sandy_bridge_(client) ""Cache Architecture"" |; // | Sandy Bridge | 64 | https://en.wikipedia.org/wiki/Sandy_Bridge and https://www.7-cpu.com/cpu/SandyBridge.html |; // | Ivy Bridge | 64 | https://blog.stuffedcow.net/2013/01/ivb-cache-replacement/ and https://www.7-cpu.com/cpu/IvyBridge.html |; // | Haswell | 64 | https://www.7-cpu.com/cpu/Haswell.html |; // | Broadwell | 64 | https://www.7-cpu.com/cpu/Broadwell.html |; // | Skylake (including skylake-avx512) | 64 | https://www.nas.nasa.gov/hecc/support/kb/skylake-processors_550.html ""Cache Hierarchy"" |; // | Cascade Lake | 64 | https://www.nas.nasa.gov/hecc/support/kb/cascade-lake-processors_579.html ""Cache Hierarchy"" |; // | Skylake | 64 | https://en.wikichip.org/wiki/intel/microarchitectures/kaby_lake ""Memory Hierarchy"" |; // | Ice Lake | 64 | https://www.7-cpu.com/cpu/Ice_Lake.html |; // | Knights Landing | 64 | https://software.intel.com/en-us/articles/intel-xeon-phi-processor-7200-family-memory-management-optimizations ""The Intel® Xeon Phi™ Processor Arch",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:1547,Performance,cache,cache-replacement,1547,"----+; // | i386 | 64 | https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-optimization-manual.pdf |; // | i486 | 16 | ""four doublewords"" (doubleword = 32 bits, 4 bits * 32 bits = 16 bytes) https://en.wikichip.org/w/images/d/d3/i486_MICROPROCESSOR_HARDWARE_REFERENCE_MANUAL_%281990%29.pdf and http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.126.4216&rep=rep1&type=pdf (page 29) |; // | i586/Pentium MMX | 32 | https://www.7-cpu.com/cpu/P-MMX.html |; // | i686/Pentium | 32 | https://www.7-cpu.com/cpu/P6.html |; // | Netburst/Pentium4 | 64 | https://www.7-cpu.com/cpu/P4-180.html |; // | Atom | 64 | https://www.7-cpu.com/cpu/Atom.html |; // | Westmere | 64 | https://en.wikichip.org/wiki/intel/microarchitectures/sandy_bridge_(client) ""Cache Architecture"" |; // | Sandy Bridge | 64 | https://en.wikipedia.org/wiki/Sandy_Bridge and https://www.7-cpu.com/cpu/SandyBridge.html |; // | Ivy Bridge | 64 | https://blog.stuffedcow.net/2013/01/ivb-cache-replacement/ and https://www.7-cpu.com/cpu/IvyBridge.html |; // | Haswell | 64 | https://www.7-cpu.com/cpu/Haswell.html |; // | Broadwell | 64 | https://www.7-cpu.com/cpu/Broadwell.html |; // | Skylake (including skylake-avx512) | 64 | https://www.nas.nasa.gov/hecc/support/kb/skylake-processors_550.html ""Cache Hierarchy"" |; // | Cascade Lake | 64 | https://www.nas.nasa.gov/hecc/support/kb/cascade-lake-processors_579.html ""Cache Hierarchy"" |; // | Skylake | 64 | https://en.wikichip.org/wiki/intel/microarchitectures/kaby_lake ""Memory Hierarchy"" |; // | Ice Lake | 64 | https://www.7-cpu.com/cpu/Ice_Lake.html |; // | Knights Landing | 64 | https://software.intel.com/en-us/articles/intel-xeon-phi-processor-7200-family-memory-management-optimizations ""The Intel® Xeon Phi™ Processor Architecture"" |; // | Knights Mill | 64 | https://software.intel.com/sites/default/files/managed/9e/bc/64-ia-32-architectures-optimization-manual.pdf?countrylabel=Colombia ""2.5.5.2 L1 DCache "" |; // +-----------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:1859,Performance,Cache,Cache,1859,"ts * 32 bits = 16 bytes) https://en.wikichip.org/w/images/d/d3/i486_MICROPROCESSOR_HARDWARE_REFERENCE_MANUAL_%281990%29.pdf and http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.126.4216&rep=rep1&type=pdf (page 29) |; // | i586/Pentium MMX | 32 | https://www.7-cpu.com/cpu/P-MMX.html |; // | i686/Pentium | 32 | https://www.7-cpu.com/cpu/P6.html |; // | Netburst/Pentium4 | 64 | https://www.7-cpu.com/cpu/P4-180.html |; // | Atom | 64 | https://www.7-cpu.com/cpu/Atom.html |; // | Westmere | 64 | https://en.wikichip.org/wiki/intel/microarchitectures/sandy_bridge_(client) ""Cache Architecture"" |; // | Sandy Bridge | 64 | https://en.wikipedia.org/wiki/Sandy_Bridge and https://www.7-cpu.com/cpu/SandyBridge.html |; // | Ivy Bridge | 64 | https://blog.stuffedcow.net/2013/01/ivb-cache-replacement/ and https://www.7-cpu.com/cpu/IvyBridge.html |; // | Haswell | 64 | https://www.7-cpu.com/cpu/Haswell.html |; // | Broadwell | 64 | https://www.7-cpu.com/cpu/Broadwell.html |; // | Skylake (including skylake-avx512) | 64 | https://www.nas.nasa.gov/hecc/support/kb/skylake-processors_550.html ""Cache Hierarchy"" |; // | Cascade Lake | 64 | https://www.nas.nasa.gov/hecc/support/kb/cascade-lake-processors_579.html ""Cache Hierarchy"" |; // | Skylake | 64 | https://en.wikichip.org/wiki/intel/microarchitectures/kaby_lake ""Memory Hierarchy"" |; // | Ice Lake | 64 | https://www.7-cpu.com/cpu/Ice_Lake.html |; // | Knights Landing | 64 | https://software.intel.com/en-us/articles/intel-xeon-phi-processor-7200-family-memory-management-optimizations ""The Intel® Xeon Phi™ Processor Architecture"" |; // | Knights Mill | 64 | https://software.intel.com/sites/default/files/managed/9e/bc/64-ia-32-architectures-optimization-manual.pdf?countrylabel=Colombia ""2.5.5.2 L1 DCache "" |; // +------------------------------------+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:1979,Performance,Cache,Cache,1979,"ts * 32 bits = 16 bytes) https://en.wikichip.org/w/images/d/d3/i486_MICROPROCESSOR_HARDWARE_REFERENCE_MANUAL_%281990%29.pdf and http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.126.4216&rep=rep1&type=pdf (page 29) |; // | i586/Pentium MMX | 32 | https://www.7-cpu.com/cpu/P-MMX.html |; // | i686/Pentium | 32 | https://www.7-cpu.com/cpu/P6.html |; // | Netburst/Pentium4 | 64 | https://www.7-cpu.com/cpu/P4-180.html |; // | Atom | 64 | https://www.7-cpu.com/cpu/Atom.html |; // | Westmere | 64 | https://en.wikichip.org/wiki/intel/microarchitectures/sandy_bridge_(client) ""Cache Architecture"" |; // | Sandy Bridge | 64 | https://en.wikipedia.org/wiki/Sandy_Bridge and https://www.7-cpu.com/cpu/SandyBridge.html |; // | Ivy Bridge | 64 | https://blog.stuffedcow.net/2013/01/ivb-cache-replacement/ and https://www.7-cpu.com/cpu/IvyBridge.html |; // | Haswell | 64 | https://www.7-cpu.com/cpu/Haswell.html |; // | Broadwell | 64 | https://www.7-cpu.com/cpu/Broadwell.html |; // | Skylake (including skylake-avx512) | 64 | https://www.nas.nasa.gov/hecc/support/kb/skylake-processors_550.html ""Cache Hierarchy"" |; // | Cascade Lake | 64 | https://www.nas.nasa.gov/hecc/support/kb/cascade-lake-processors_579.html ""Cache Hierarchy"" |; // | Skylake | 64 | https://en.wikichip.org/wiki/intel/microarchitectures/kaby_lake ""Memory Hierarchy"" |; // | Ice Lake | 64 | https://www.7-cpu.com/cpu/Ice_Lake.html |; // | Knights Landing | 64 | https://software.intel.com/en-us/articles/intel-xeon-phi-processor-7200-family-memory-management-optimizations ""The Intel® Xeon Phi™ Processor Architecture"" |; // | Knights Mill | 64 | https://software.intel.com/sites/default/files/managed/9e/bc/64-ia-32-architectures-optimization-manual.pdf?countrylabel=Colombia ""2.5.5.2 L1 DCache "" |; // +------------------------------------+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:2294,Performance,optimiz,optimizations,2294,"ts * 32 bits = 16 bytes) https://en.wikichip.org/w/images/d/d3/i486_MICROPROCESSOR_HARDWARE_REFERENCE_MANUAL_%281990%29.pdf and http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.126.4216&rep=rep1&type=pdf (page 29) |; // | i586/Pentium MMX | 32 | https://www.7-cpu.com/cpu/P-MMX.html |; // | i686/Pentium | 32 | https://www.7-cpu.com/cpu/P6.html |; // | Netburst/Pentium4 | 64 | https://www.7-cpu.com/cpu/P4-180.html |; // | Atom | 64 | https://www.7-cpu.com/cpu/Atom.html |; // | Westmere | 64 | https://en.wikichip.org/wiki/intel/microarchitectures/sandy_bridge_(client) ""Cache Architecture"" |; // | Sandy Bridge | 64 | https://en.wikipedia.org/wiki/Sandy_Bridge and https://www.7-cpu.com/cpu/SandyBridge.html |; // | Ivy Bridge | 64 | https://blog.stuffedcow.net/2013/01/ivb-cache-replacement/ and https://www.7-cpu.com/cpu/IvyBridge.html |; // | Haswell | 64 | https://www.7-cpu.com/cpu/Haswell.html |; // | Broadwell | 64 | https://www.7-cpu.com/cpu/Broadwell.html |; // | Skylake (including skylake-avx512) | 64 | https://www.nas.nasa.gov/hecc/support/kb/skylake-processors_550.html ""Cache Hierarchy"" |; // | Cascade Lake | 64 | https://www.nas.nasa.gov/hecc/support/kb/cascade-lake-processors_579.html ""Cache Hierarchy"" |; // | Skylake | 64 | https://en.wikichip.org/wiki/intel/microarchitectures/kaby_lake ""Memory Hierarchy"" |; // | Ice Lake | 64 | https://www.7-cpu.com/cpu/Ice_Lake.html |; // | Knights Landing | 64 | https://software.intel.com/en-us/articles/intel-xeon-phi-processor-7200-family-memory-management-optimizations ""The Intel® Xeon Phi™ Processor Architecture"" |; // | Knights Mill | 64 | https://software.intel.com/sites/default/files/managed/9e/bc/64-ia-32-architectures-optimization-manual.pdf?countrylabel=Colombia ""2.5.5.2 L1 DCache "" |; // +------------------------------------+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:2466,Performance,optimiz,optimization-manual,2466,"ts * 32 bits = 16 bytes) https://en.wikichip.org/w/images/d/d3/i486_MICROPROCESSOR_HARDWARE_REFERENCE_MANUAL_%281990%29.pdf and http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.126.4216&rep=rep1&type=pdf (page 29) |; // | i586/Pentium MMX | 32 | https://www.7-cpu.com/cpu/P-MMX.html |; // | i686/Pentium | 32 | https://www.7-cpu.com/cpu/P6.html |; // | Netburst/Pentium4 | 64 | https://www.7-cpu.com/cpu/P4-180.html |; // | Atom | 64 | https://www.7-cpu.com/cpu/Atom.html |; // | Westmere | 64 | https://en.wikichip.org/wiki/intel/microarchitectures/sandy_bridge_(client) ""Cache Architecture"" |; // | Sandy Bridge | 64 | https://en.wikipedia.org/wiki/Sandy_Bridge and https://www.7-cpu.com/cpu/SandyBridge.html |; // | Ivy Bridge | 64 | https://blog.stuffedcow.net/2013/01/ivb-cache-replacement/ and https://www.7-cpu.com/cpu/IvyBridge.html |; // | Haswell | 64 | https://www.7-cpu.com/cpu/Haswell.html |; // | Broadwell | 64 | https://www.7-cpu.com/cpu/Broadwell.html |; // | Skylake (including skylake-avx512) | 64 | https://www.nas.nasa.gov/hecc/support/kb/skylake-processors_550.html ""Cache Hierarchy"" |; // | Cascade Lake | 64 | https://www.nas.nasa.gov/hecc/support/kb/cascade-lake-processors_579.html ""Cache Hierarchy"" |; // | Skylake | 64 | https://en.wikichip.org/wiki/intel/microarchitectures/kaby_lake ""Memory Hierarchy"" |; // | Ice Lake | 64 | https://www.7-cpu.com/cpu/Ice_Lake.html |; // | Knights Landing | 64 | https://software.intel.com/en-us/articles/intel-xeon-phi-processor-7200-family-memory-management-optimizations ""The Intel® Xeon Phi™ Processor Architecture"" |; // | Knights Mill | 64 | https://software.intel.com/sites/default/files/managed/9e/bc/64-ia-32-architectures-optimization-manual.pdf?countrylabel=Colombia ""2.5.5.2 L1 DCache "" |; // +------------------------------------+-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:40,Performance,cache,cache,40,// The following currently have unknown cache line sizes (but they are probably all 64):; // Core,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.h:29,Availability,avail,available,29,// Make __builtin_ms_va_list available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Basic/Targets/X86.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.cpp:17,Energy Efficiency,power,power-of-,17,"// If it's a non-power-of-2 vector, its size is already a power-of-2,; // so make sure to widen it explicitly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.cpp:58,Energy Efficiency,power,power-of-,58,"// If it's a non-power-of-2 vector, its size is already a power-of-2,; // so make sure to widen it explicitly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h:39,Security,access,access,39,"//===----- ABIInfo.h - ABI information access & encapsulation ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h:57,Integrability,interface,interface,57,"// FIXME: All of this stuff should be part of the target interface; // somehow. It is currently here because it is not clear how to factor; // the targets to support this, since the Targets currently live in a; // layer below types n'stuff.; /// ABIInfo - Target specific hooks for defining how a type should be; /// passed or returned from functions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h:119,Usability,clear,clear,119,"// FIXME: All of this stuff should be part of the target interface; // somehow. It is currently here because it is not clear how to factor; // the targets to support this, since the Targets currently live in a; // layer below types n'stuff.; /// ABIInfo - Target specific hooks for defining how a type should be; /// passed or returned from functions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h:32,Integrability,depend,dependent,32,"/// EmitVAArg - Emit the target dependent code to load a value of; /// \arg Ty from the va_list pointed to by \arg VAListAddr.; // FIXME: This is a gaping layering violation if we wanted to drop; // the ABI information any lower than CodeGen. Of course, for; // VAArg handling it has to be at this level; there is no way to; // abstract this out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h:50,Performance,load,load,50,"/// EmitVAArg - Emit the target dependent code to load a value of; /// \arg Ty from the va_list pointed to by \arg VAListAddr.; // FIXME: This is a gaping layering violation if we wanted to drop; // the ABI information any lower than CodeGen. Of course, for; // VAArg handling it has to be at this level; there is no way to; // abstract this out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h:20,Integrability,depend,dependent,20,/// Emit the target dependent code to load a value of; /// \arg Ty from the \c __builtin_ms_va_list pointed to by \arg VAListAddr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h:38,Performance,load,load,38,/// Emit the target dependent code to load a value of; /// \arg Ty from the \c __builtin_ms_va_list pointed to by \arg VAListAddr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h:311,Energy Efficiency,allocate,allocated,311,"/// Emit va_arg for a platform using the common void* representation,; /// where arguments are simply emitted in an array of slots on the stack.; ///; /// This version implements the core direct-value passing rules.; ///; /// \param SlotSize - The size and alignment of a stack slot.; /// Each argument will be allocated to a multiple of this number of; /// slots, and all the slots will be aligned to this value.; /// \param AllowHigherAlign - The slot alignment is not a cap;; /// an argument type with an alignment greater than the slot size; /// will be emitted on a higher-alignment address, potentially; /// leaving one or more empty slots behind as padding. If this; /// is false, the returned address might be less-aligned than; /// DirectAlign.; /// \param ForceRightAdjust - Default is false. On big-endian platform and; /// if the argument is smaller than a slot, set this flag will force; /// right-adjust the argument in its slot irrespective of the type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h:95,Usability,simpl,simply,95,"/// Emit va_arg for a platform using the common void* representation,; /// where arguments are simply emitted in an array of slots on the stack.; ///; /// This version implements the core direct-value passing rules.; ///; /// \param SlotSize - The size and alignment of a stack slot.; /// Each argument will be allocated to a multiple of this number of; /// slots, and all the slots will be aligned to this value.; /// \param AllowHigherAlign - The slot alignment is not a cap;; /// an argument type with an alignment greater than the slot size; /// will be emitted on a higher-alignment address, potentially; /// leaving one or more empty slots behind as padding. If this; /// is false, the returned address might be less-aligned than; /// DirectAlign.; /// \param ForceRightAdjust - Default is false. On big-endian platform and; /// if the argument is smaller than a slot, set this flag will force; /// right-adjust the argument in its slot irrespective of the type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h:448,Energy Efficiency,allocate,allocated,448,"/// Emit va_arg for a platform using the common void* representation,; /// where arguments are simply emitted in an array of slots on the stack.; ///; /// \param IsIndirect - Values of this type are passed indirectly.; /// \param ValueInfo - The size and alignment of this type, generally; /// computed with getContext().getTypeInfoInChars(ValueTy).; /// \param SlotSizeAndAlign - The size and alignment of a stack slot.; /// Each argument will be allocated to a multiple of this number of; /// slots, and all the slots will be aligned to this value.; /// \param AllowHigherAlign - The slot alignment is not a cap;; /// an argument type with an alignment greater than the slot size; /// will be emitted on a higher-alignment address, potentially; /// leaving one or more empty slots behind as padding.; /// \param ForceRightAdjust - Default is false. On big-endian platform and; /// if the argument is smaller than a slot, set this flag will force; /// right-adjust the argument in its slot irrespective of the type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h:95,Usability,simpl,simply,95,"/// Emit va_arg for a platform using the common void* representation,; /// where arguments are simply emitted in an array of slots on the stack.; ///; /// \param IsIndirect - Values of this type are passed indirectly.; /// \param ValueInfo - The size and alignment of this type, generally; /// computed with getContext().getTypeInfoInChars(ValueTy).; /// \param SlotSizeAndAlign - The size and alignment of a stack slot.; /// Each argument will be allocated to a multiple of this number of; /// slots, and all the slots will be aligned to this value.; /// \param AllowHigherAlign - The slot alignment is not a cap;; /// an argument type with an alignment greater than the slot size; /// will be emitted on a higher-alignment address, potentially; /// leaving one or more empty slots behind as padding.; /// \param ForceRightAdjust - Default is false. On big-endian platform and; /// if the argument is smaller than a slot, set this flag will force; /// right-adjust the argument in its slot irrespective of the type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h:110,Modifiability,flexible,flexible,110,"/// isEmptyRecord - Return true iff a structure contains only empty; /// fields. Note that a structure with a flexible array member is not; /// considered empty. If AsIfNoUniqueAddr is true, then C++ record fields are; /// considered empty if the [[no_unique_address]] attribute would have made; /// them empty.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h:216,Modifiability,flexible,flexible,216,"/// isSingleElementStruct - Determine if a structure is a ""single; /// element struct"", i.e. it has exactly one non-empty field or; /// exactly one field which is itself a single element; /// struct. Structures with flexible array members are never; /// considered single element structs.; ///; /// \return The field declaration for the single non-empty field, if; /// it exists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ABIInfoImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Address.h:411,Integrability,wrap,wrapper,411,"//===-- Address.h - An aligned address -------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class provides a simple wrapper for a pair of a pointer and an; // alignment.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Address.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Address.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Address.h:404,Usability,simpl,simple,404,"//===-- Address.h - An aligned address -------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class provides a simple wrapper for a pair of a pointer and an; // alignment.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Address.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Address.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Address.h:39,Integrability,interface,interface,39,// Present a minimal LLVM-like casting interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Address.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Address.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h:179,Modifiability,plugin,plugins,179,/// True if we've finished generating IR. This prevents us from generating; /// additional LLVM IR after emitting output in HandleTranslationUnit. This; /// can happen when Clang plugins trigger additional AST deserialization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h:463,Performance,optimiz,optimize,463,"// A map from mangled names to their function's source location, used for; // backend diagnostics as the Clang AST may be unavailable. We actually use; // the mangled name's hash as the key because mangled names can be very; // long and take up lots of space. Using a hash can cause name collision,; // but that is rare and the consequences are pointing to a wrong source; // location which is not severe. This is a vector instead of an actual map; // because we optimize for time building this map rather than time; // retrieving an entry, as backend diagnostics are uncommon.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h:174,Security,hash,hash,174,"// A map from mangled names to their function's source location, used for; // backend diagnostics as the Clang AST may be unavailable. We actually use; // the mangled name's hash as the key because mangled names can be very; // long and take up lots of space. Using a hash can cause name collision,; // but that is rare and the consequences are pointing to a wrong source; // location which is not severe. This is a vector instead of an actual map; // because we optimize for time building this map rather than time; // retrieving an entry, as backend diagnostics are uncommon.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h:268,Security,hash,hash,268,"// A map from mangled names to their function's source location, used for; // backend diagnostics as the Clang AST may be unavailable. We actually use; // the mangled name's hash as the key because mangled names can be very; // long and take up lots of space. Using a hash can cause name collision,; // but that is rare and the consequences are pointing to a wrong source; // location which is not severe. This is a vector instead of an actual map; // because we optimize for time building this map rather than time; // retrieving an entry, as backend diagnostics are uncommon.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h:31,Deployability,install,installing,31,// This constructor is used in installing an empty BackendConsumer; // to use the clang diagnostic handler for IR input files. It avoids; // initializing the OS field.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h:130,Safety,avoid,avoids,130,// This constructor is used in installing an empty BackendConsumer; // to use the clang diagnostic handler for IR input files. It avoids; // initializing the OS field.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h:68,Availability,error,error,68,// Links each entry in LinkModules into our module. Returns true on error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h:29,Performance,optimiz,optimization,29,/// Specialized handlers for optimization remarks.; /// Note that these handlers only accept remarks and they always handle; /// them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendConsumer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:22,Security,sanitiz,sanitizers,22,// Experiment to move sanitizers earlier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:34,Performance,optimiz,optimization,34,// Re-link builtin bitcodes after optimization,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:371,Availability,error,error,371,"/// Generates the TargetMachine.; /// Leaves TM unchanged if it is unable to create the target machine.; /// Some of our clang tests specify triples which are not built; /// into clang. This is okay because these tests check the generated; /// IR, and they require DataLayout which depends on the triple.; /// In this case, we allow this method to fail and not report an error.; /// When MustCreateTM is used, we print an error if we are unable to load; /// the requested target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:422,Availability,error,error,422,"/// Generates the TargetMachine.; /// Leaves TM unchanged if it is unable to create the target machine.; /// Some of our clang tests specify triples which are not built; /// into clang. This is okay because these tests check the generated; /// IR, and they require DataLayout which depends on the triple.; /// In this case, we allow this method to fail and not report an error.; /// When MustCreateTM is used, we print an error if we are unable to load; /// the requested target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:282,Integrability,depend,depends,282,"/// Generates the TargetMachine.; /// Leaves TM unchanged if it is unable to create the target machine.; /// Some of our clang tests specify triples which are not built; /// into clang. This is okay because these tests check the generated; /// IR, and they require DataLayout which depends on the triple.; /// In this case, we allow this method to fail and not report an error.; /// When MustCreateTM is used, we print an error if we are unable to load; /// the requested target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:448,Performance,load,load,448,"/// Generates the TargetMachine.; /// Leaves TM unchanged if it is unable to create the target machine.; /// Some of our clang tests specify triples which are not built; /// into clang. This is okay because these tests check the generated; /// IR, and they require DataLayout which depends on the triple.; /// In this case, we allow this method to fail and not report an error.; /// When MustCreateTM is used, we print an error if we are unable to load; /// the requested target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:127,Testability,test,tests,127,"/// Generates the TargetMachine.; /// Leaves TM unchanged if it is unable to create the target machine.; /// Some of our clang tests specify triples which are not built; /// into clang. This is okay because these tests check the generated; /// IR, and they require DataLayout which depends on the triple.; /// In this case, we allow this method to fail and not report an error.; /// When MustCreateTM is used, we print an error if we are unable to load; /// the requested target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:213,Testability,test,tests,213,"/// Generates the TargetMachine.; /// Leaves TM unchanged if it is unable to create the target machine.; /// Some of our clang tests specify triples which are not built; /// into clang. This is okay because these tests check the generated; /// IR, and they require DataLayout which depends on the triple.; /// In this case, we allow this method to fail and not report an error.; /// When MustCreateTM is used, we print an error if we are unable to load; /// the requested target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:63,Deployability,pipeline,pipeline,63,// Emit output using the new pass manager for the optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:50,Performance,optimiz,optimization,50,// Emit output using the new pass manager for the optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:267,Deployability,integrat,integrated-as,267,"// Check if ASan should use GC-friendly instrumentation for globals.; // First of all, there is no point if -fdata-sections is off (expect for MachO,; // where this is not a factor). Also, on ELF this feature requires an assembler; // extension that only works with -integrated-as at the moment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:267,Integrability,integrat,integrated-as,267,"// Check if ASan should use GC-friendly instrumentation for globals.; // First of all, there is no point if -fdata-sections is off (expect for MachO,; // where this is not a factor). Also, on ELF this feature requires an assembler; // extension that only works with -integrated-as at the moment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:16,Integrability,contract,contraction,16,// Preserve any contraction performed by the front-end. (Strict performs; // splitting of the muladd intrinsic in the backend.),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:28,Performance,perform,performed,28,// Preserve any contraction performed by the front-end. (Strict performs; // splitting of the muladd intrinsic in the backend.),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:64,Performance,perform,performs,64,// Preserve any contraction performed by the front-end. (Strict performs; // splitting of the muladd intrinsic in the backend.),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:52,Safety,avoid,avoid,52,// Not using 'GCOVOptions::getDefault' allows us to avoid exiting if; // LLVM's -default-gcov-version flag is set to something invalid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:135,Safety,avoid,avoid,135,"// Check for the default ""clang"" invocation that won't set any cl::opt values.; // Skip trying to parse the command line invocation to avoid the issues; // described below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:54,Safety,safe,safe,54,"// FIXME: The command line parser below is not thread-safe and shares a global; // state, so this call might crash or overwrite the options of another Clang; // instance in the same process.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:113,Performance,optimiz,optimization,113,"// Normal mode, emit a .s or .o file by running the code generator. Note,; // this also adds codegenerator level optimization passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:30,Performance,optimiz,optimizations,30,"// Add ObjC ARC final-cleanup optimizations. This is done as part of the; // ""codegen"" passes so that it isn't run multiple times when there is; // inlining happening.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:8,Performance,optimiz,optimizations,8,"// When optimizations are requested, run KCIFPass after InstCombine to; // avoid unnecessary checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:75,Safety,avoid,avoid,75,"// When optimizations are requested, run KCIFPass after InstCombine to; // avoid unnecessary checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:196,Performance,optimiz,optimization,196,"// MemorySanitizer inserts complex instrumentation that mostly follows; // the logic of the original code, but operates on ""shadow"" values. It; // can benefit from re-running some general purpose optimization; // passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:79,Testability,log,logic,79,"// MemorySanitizer inserts complex instrumentation that mostly follows; // the logic of the original code, but operates on ""shadow"" values. It; // can benefit from re-running some general purpose optimization; // passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:3,Security,Sanitiz,Sanitizers,3,// Sanitizers can abandon<GlobalsAA>.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:40,Deployability,integrat,integrated,40,"// Only enable CGProfilePass when using integrated assembler, since; // non-integrated assemblers don't recognize .cgprofile section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:76,Deployability,integrat,integrated,76,"// Only enable CGProfilePass when using integrated assembler, since; // non-integrated assemblers don't recognize .cgprofile section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:40,Integrability,integrat,integrated,40,"// Only enable CGProfilePass when using integrated assembler, since; // non-integrated assemblers don't recognize .cgprofile section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:76,Integrability,integrat,integrated,76,"// Only enable CGProfilePass when using integrated assembler, since; // non-integrated assemblers don't recognize .cgprofile section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:60,Performance,perform,performance,60,// Disable assignment tracking in LTO builds for now as the performance; // cost is too high. Disable for LLDB tuning due to llvm.org/PR43126.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:24,Modifiability,plugin,plugins,24,// Attempt to load pass plugins and register their callbacks with PB.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:14,Performance,load,load,14,// Attempt to load pass plugins and register their callbacks with PB.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:89,Deployability,pipeline,pipeline,89,// Map our optimization levels into one of the distinct levels used to; // configure the pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:75,Modifiability,config,configure,75,// Map our optimization levels into one of the distinct levels used to; // configure the pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:11,Performance,optimiz,optimization,11,// Map our optimization levels into one of the distinct levels used to; // configure the pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:105,Performance,perform,performing,105,"// If we reached here with a non-empty index file name, then the index; // file was empty and we are not performing ThinLTO backend compilation; // (used in testing in a distributed build environment).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:157,Testability,test,testing,157,"// If we reached here with a non-empty index file name, then the index; // file was empty and we are not performing ThinLTO backend compilation; // (used in testing in a distributed build environment).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:27,Testability,test,test,27,// If so drop any the type test assume sequences inserted for whole program; // vtables so that codegen doesn't complain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:86,Deployability,pipeline,pipeline,86,// Register callbacks to schedule sanitizer passes at the appropriate part; // of the pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:25,Energy Efficiency,schedul,schedule,25,// Register callbacks to schedule sanitizer passes at the appropriate part; // of the pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:34,Security,sanitiz,sanitizer,34,// Register callbacks to schedule sanitizer passes at the appropriate part; // of the pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:13,Security,sanitiz,sanitizers,13,// Don't add sanitizers if we are here from ThinLTO PostLink. That already; // done on PreLink stage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:88,Performance,optimiz,optimizations,88,// Re-link against any bitcodes supplied via the -mlink-builtin-bitcode option; // Some optimizations may generate new function calls that would not have; // been linked pre-optimization (i.e. fused sincos calls generated by; // AMDGPULibCalls::fold_sincos.),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:174,Performance,optimiz,optimization,174,// Re-link against any bitcodes supplied via the -mlink-builtin-bitcode option; // Some optimizations may generate new function calls that would not have; // been linked pre-optimization (i.e. fused sincos calls generated by; // AMDGPULibCalls::fold_sincos.),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:178,Deployability,pipeline,pipeline,178,"// Add a verifier pass if requested. We don't have to do this if the action; // requires code generation because there will already be a verifier pass in; // the code-generation pipeline.; // Since we already added a verifier pass above, this; // might even not run the analysis, if previous passes caused no changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:61,Deployability,pipeline,pipeline,61,"// Print a textual, '-passes=' compatible, representation of pipeline if; // requested.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:49,Deployability,pipeline,pipeline,49,// We still use the legacy PM to run the codegen pipeline since the new PM; // does not work with the codegen pipeline.; // FIXME: make the new PM work with the codegen pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:110,Deployability,pipeline,pipeline,110,// We still use the legacy PM to run the codegen pipeline since the new PM; // does not work with the codegen pipeline.; // FIXME: make the new PM work with the codegen pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:169,Deployability,pipeline,pipeline,169,// We still use the legacy PM to run the codegen pipeline since the new PM; // does not work with the codegen pipeline.; // FIXME: make the new PM work with the codegen pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:32,Availability,error,error,32,// FIXME: Should we handle this error differently?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:13,Deployability,pipeline,pipeline-passes,13,"// If -print-pipeline-passes is requested, don't run the legacy pass manager.; // FIXME: when codegen is switched to use the new pass manager, it should also; // emit pass names here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:10,Usability,simpl,simply,10,"// We can simply import the values mentioned in the combined index, since; // we should only invoke this using the individual indexes written out; // via a WriteIndexesThinBackend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:40,Deployability,integrat,integrated,40,"// Only enable CGProfilePass when using integrated assembler, since; // non-integrated assemblers don't recognize .cgprofile section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:76,Deployability,integrat,integrated,76,"// Only enable CGProfilePass when using integrated assembler, since; // non-integrated assemblers don't recognize .cgprofile section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:40,Integrability,integrat,integrated,40,"// Only enable CGProfilePass when using integrated assembler, since; // non-integrated assemblers don't recognize .cgprofile section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:76,Integrability,integrat,integrated,76,"// Only enable CGProfilePass when using integrated assembler, since; // non-integrated assemblers don't recognize .cgprofile section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:13,Performance,perform,performing,13,"// If we are performing a ThinLTO importing compile, load the function index; // into memory and pass it into runThinLTOBackend, which will run the; // function importer and invoke LTO passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:53,Performance,load,load,53,"// If we are performing a ThinLTO importing compile, load the function index; // into memory and pass it into runThinLTOBackend, which will run the; // function importer and invoke LTO passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:150,Availability,error,error,150,"// A null CombinedIndex means we should skip ThinLTO compilation; // (LLVM will optionally ignore empty index files, returning null instead; // of an error).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:24,Safety,detect,detected,24,"// Distributed indexing detected that nothing from the module is needed; // for the final linking. So we can skip the compilation. We sill need to; // output an empty object file to make sure that a linker does not fail; // trying to read it. Also for some features, like CFI, we must skip; // the compilation as CombinedIndex does not contain all required; // information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:23,Availability,down,down,23,/// Project an l-value down to the value field.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:17,Performance,load,load,17,/// Emits atomic load.; /// \returns Loaded value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:37,Performance,Load,Loaded,37,/// Emits atomic load.; /// \returns Loaded value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:191,Availability,Failure,Failure,191,"/// Emits atomic compare-and-exchange sequence.; /// \param Expected Expected value.; /// \param Desired Desired value.; /// \param Success Atomic ordering for success operation.; /// \param Failure Atomic ordering for failed operation.; /// \param IsWeak true if atomic operation is weak, false otherwise.; /// \returns Pair of values: previous value from storage (value type) and; /// boolean flag (i1 type) with true if success and false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:17,Deployability,update,update,17,/// Emits atomic update.; /// \param AO Atomic ordering.; /// \param UpdateOp Update operation for the current lvalue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:69,Deployability,Update,UpdateOp,69,/// Emits atomic update.; /// \param AO Atomic ordering.; /// \param UpdateOp Update operation for the current lvalue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:78,Deployability,Update,Update,78,/// Emits atomic update.; /// \param AO Atomic ordering.; /// \param UpdateOp Update operation for the current lvalue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:17,Deployability,update,update,17,/// Emits atomic update.; /// \param AO Atomic ordering.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:17,Performance,load,load,17,/// Emits atomic load as a libcall.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:17,Performance,load,load,17,/// Emits atomic load as LLVM instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:16,Deployability,update,update,16,/// Emit atomic update as libcalls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:16,Deployability,update,update,16,/// Emit atomic update as LLVM instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:16,Deployability,update,update,16,/// Emit atomic update as libcalls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:16,Deployability,update,update,16,/// Emit atomic update as LLVM instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:50,Safety,avoid,avoid,50,"// Otherwise, do some simple heuristics to try to avoid it:",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:22,Usability,simpl,simple,22,"// Otherwise, do some simple heuristics to try to avoid it:",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:89,Availability,failure,failure,89,"// Cmp holds the result of the compare-exchange operation: true on success,; // false on failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:3,Deployability,Update,Update,3,"// Update Expected if Expected isn't equal to Old, otherwise branch to the; // exit point.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:3,Deployability,Update,Update,3,// Update the memory at Expected with Old's value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:3,Deployability,Update,Update,3,// Update the memory at Dest with Cmp's value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:156,Availability,Failure,FailureOrder,156,"/// Given an ordering required on success, emit all possible cmpxchg; /// instructions to cope with the provided (but possibly only dynamically known); /// FailureOrder.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:19,Availability,failure,failure,19,"// 31.7.2.18: ""The failure argument shall not be memory_order_release; // nor memory_order_acq_rel"". Fallback to monotonic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:24,Availability,failure,failure,24,"// Prior to c++17, ""the failure argument shall be no stronger than the; // success argument"". This condition has been lifted and the only; // precondition is 31.7.2.18. Effectively treat this as a DR and skip; // language version checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:36,Performance,perform,perform,36,"// For __atomic_*_fetch operations, perform the operation again to; // determine the value which was written.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:3,Performance,Load,Load,3,// Load value and pass it to the function directly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:7,Performance,optimiz,optimized,7,// Non-optimized functions always take a reference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:63,Energy Efficiency,power,power,63,"// The inlined atomics only function on iN types, where N is a power of 2. We; // need to make sure (via temporaries if necessary) that all incoming values; // are compatible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:98,Performance,optimiz,optimized,98,// Use the generic version if we don't know that the operand will be; // suitably aligned for the optimized version.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:12,Performance,optimiz,optimized,12,// Only use optimized library calls for sizes for which they exist.; // FIXME: Size == 16 optimized library functions exist too.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:90,Performance,optimiz,optimized,90,// Only use optimized library calls for sizes for which they exist.; // FIXME: Size == 16 optimized library functions exist too.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:11,Performance,optimiz,optimized,11,"// For non-optimized library calls, the size is the first parameter",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:278,Availability,failure,failure,278,"// There is only one libcall for compare an exchange, because there is no; // optimisation benefit possible from a libcall version of a weak compare; // and exchange.; // bool __atomic_compare_exchange(size_t size, void *mem, void *expected,; // void *desired, int success, int failure); // bool __atomic_compare_exchange_N(T *mem, T *expected, T desired,; // int success, int failure)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:377,Availability,failure,failure,377,"// There is only one libcall for compare an exchange, because there is no; // optimisation benefit possible from a libcall version of a weak compare; // and exchange.; // bool __atomic_compare_exchange(size_t size, void *mem, void *expected,; // void *desired, int success, int failure); // bool __atomic_compare_exchange_N(T *mem, T *expected, T desired,; // int success, int failure)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:3,Performance,Optimiz,Optimized,3,// Optimized functions have the size in their name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:38,Performance,optimiz,optimized,38,// The value is returned directly for optimized libcalls but the expr; // provided an out-param.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:3,Safety,Avoid,Avoid,3,// Avoid crashing on code with undefined behavior,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:3,Safety,Avoid,Avoid,3,// Avoid crashing on code with undefined behavior,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:3,Safety,Avoid,Avoid,3,// Avoid crashing on code with undefined behavior,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:87,Integrability,rout,routine,87,"// Otherwise, just convert the temporary to an r-value using the; // normal conversion routine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:49,Usability,simpl,simple,49,// Get RValue from temp memory as atomic for non-simple lvalues,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:44,Performance,load,loads,44,/// An LValue is a candidate for having its loads and stores be made atomic if; /// we are operating under /volatile:ms *and* the LValue itself is volatile and; /// performing such an operation can be performed without a libcall.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:165,Performance,perform,performing,165,/// An LValue is a candidate for having its loads and stores be made atomic if; /// we are operating under /volatile:ms *and* the LValue itself is volatile and; /// performing such an operation can be performed without a libcall.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:201,Performance,perform,performed,201,/// An LValue is a candidate for having its loads and stores be made atomic if; /// we are operating under /volatile:ms *and* the LValue itself is volatile and; /// performing such an operation can be performed without a libcall.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:77,Usability,simpl,simple,77,"// Okay, turn that back into the original value or whole atomic (for; // non-simple lvalues) type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:67,Usability,simpl,simple,67,"// Okay, turn that back into the original value or atomic (for non-simple; // lvalues) type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:11,Performance,load,load,11,/// Emit a load from an l-value of atomic type. Note that the r-value; /// we produce is an r-value of the atomic *value* type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:57,Safety,avoid,avoid,57,"// If we've got a scalar value of the right size, try to avoid going; // through memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:110,Availability,failure,failure,110,"// bool __atomic_compare_exchange(size_t size, void *obj, void *expected,; // void *desired, int success, int failure);",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:57,Safety,avoid,avoid,57,"// If we've got a scalar value of the right size, try to avoid going; // through memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:17,Performance,load,load,17,// Do the atomic load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:26,Performance,perform,perform,26,// For non-simple lvalues perform compare-and-swap procedure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:11,Usability,simpl,simple,11,// For non-simple lvalues perform compare-and-swap procedure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:17,Performance,load,load,17,// Do the atomic load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:26,Performance,perform,perform,26,// For non-simple lvalues perform compare-and-swap procedure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:11,Usability,simpl,simple,11,// For non-simple lvalues perform compare-and-swap procedure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:22,Deployability,update,update,22,// Emit simple atomic update operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp:8,Usability,simpl,simple,8,// Emit simple atomic update operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGAtomic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:686,Modifiability,variab,variables,686,/// buildBlockDescriptor - Build the block descriptor meta-data for a block.; /// buildBlockDescriptor is accessed from 5th field of the Block_literal; /// meta-data and contains stationary information about the block literal.; /// Its definition will have 4 (or optionally 6) words.; /// \code; /// struct Block_descriptor {; /// unsigned long reserved;; /// unsigned long size; // size of Block_literal metadata in bytes.; /// void *copy_func_helper_decl; // optional copy helper.; /// void *destroy_func_decl; // optional destructor helper.; /// void *block_method_encoding_address; // @encode for block literal signature.; /// void *block_layout_info; // encoding of captured block variables.; /// };; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:106,Security,access,accessed,106,/// buildBlockDescriptor - Build the block descriptor meta-data for a block.; /// buildBlockDescriptor is accessed from 5th field of the Block_literal; /// meta-data and contains stationary information about the block literal.; /// Its definition will have 4 (or optionally 6) words.; /// \code; /// struct Block_descriptor {; /// unsigned long reserved;; /// unsigned long size; // size of Block_literal metadata in bytes.; /// void *copy_func_helper_decl; // optional copy helper.; /// void *destroy_func_decl; // optional destructor helper.; /// void *block_method_encoding_address; // @encode for block literal signature.; /// void *block_layout_info; // encoding of captured block variables.; /// };; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:44,Modifiability,variab,variable,44,"// If an equivalent block descriptor global variable exists, return it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:56,Modifiability,variab,variable,56,"// If there isn't an equivalent block descriptor global variable, create a new; // one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:978,Energy Efficiency,allocate,allocated,978,"/*; Purely notional variadic template describing the layout of a block. template <class _ResultType, class... _ParamTypes, class... _CaptureTypes>; struct Block_literal {; /// Initialized to one of:; /// extern void *_NSConcreteStackBlock[];; /// extern void *_NSConcreteGlobalBlock[];; ///; /// In theory, we could start one off malloc'ed by setting; /// BLOCK_NEEDS_FREE, giving it a refcount of 1, and using; /// this isa:; /// extern void *_NSConcreteMallocBlock[];; struct objc_class *isa;. /// These are the flags (with corresponding bit number) that the; /// compiler is actually supposed to know about.; /// 23. BLOCK_IS_NOESCAPE - indicates that the block is non-escaping; /// 25. BLOCK_HAS_COPY_DISPOSE - indicates that the block; /// descriptor provides copy and dispose helper functions; /// 26. BLOCK_HAS_CXX_OBJ - indicates that there's a captured; /// object with a nontrivial destructor or copy constructor; /// 28. BLOCK_IS_GLOBAL - indicates that the block is allocated; /// as global memory; /// 29. BLOCK_USE_STRET - indicates that the block function; /// uses stret, which objc_msgSend needs to know about; /// 30. BLOCK_HAS_SIGNATURE - indicates that the block has an; /// @encoded signature string; /// And we're not supposed to manipulate these:; /// 24. BLOCK_NEEDS_FREE - indicates that the block has been moved; /// to malloc'ed memory; /// 27. BLOCK_IS_GC - indicates that the block has been moved to; /// to GC-allocated memory; /// Additionally, the bottom 16 bits are a reference count which; /// should be zero on the stack.; int flags;. /// Reserved; should be zero-initialized.; int reserved;. /// Function pointer generated from block literal.; _ResultType (*invoke)(Block_literal *, _ParamTypes...);. /// Block description metadata generated from block literal.; struct Block_descriptor *block_descriptor;. /// Captured values follow.; _CapturesTypes captures...;; };; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:1440,Energy Efficiency,allocate,allocated,1440,"/*; Purely notional variadic template describing the layout of a block. template <class _ResultType, class... _ParamTypes, class... _CaptureTypes>; struct Block_literal {; /// Initialized to one of:; /// extern void *_NSConcreteStackBlock[];; /// extern void *_NSConcreteGlobalBlock[];; ///; /// In theory, we could start one off malloc'ed by setting; /// BLOCK_NEEDS_FREE, giving it a refcount of 1, and using; /// this isa:; /// extern void *_NSConcreteMallocBlock[];; struct objc_class *isa;. /// These are the flags (with corresponding bit number) that the; /// compiler is actually supposed to know about.; /// 23. BLOCK_IS_NOESCAPE - indicates that the block is non-escaping; /// 25. BLOCK_HAS_COPY_DISPOSE - indicates that the block; /// descriptor provides copy and dispose helper functions; /// 26. BLOCK_HAS_CXX_OBJ - indicates that there's a captured; /// object with a nontrivial destructor or copy constructor; /// 28. BLOCK_IS_GLOBAL - indicates that the block is allocated; /// as global memory; /// 29. BLOCK_USE_STRET - indicates that the block function; /// uses stret, which objc_msgSend needs to know about; /// 30. BLOCK_HAS_SIGNATURE - indicates that the block has an; /// @encoded signature string; /// And we're not supposed to manipulate these:; /// 24. BLOCK_NEEDS_FREE - indicates that the block has been moved; /// to malloc'ed memory; /// 27. BLOCK_IS_GC - indicates that the block has been moved to; /// to GC-allocated memory; /// Additionally, the bottom 16 bits are a reference count which; /// should be zero on the stack.; int flags;. /// Reserved; should be zero-initialized.; int reserved;. /// Function pointer generated from block literal.; _ResultType (*invoke)(Block_literal *, _ParamTypes...);. /// Block description metadata generated from block literal.; struct Block_descriptor *block_descriptor;. /// Captured values follow.; _CapturesTypes captures...;; };; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:36,Safety,safe,safe,36,/// Determines if the given type is safe for constant capture in C++.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:23,Safety,unsafe,unsafe,23,// Only records can be unsafe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:354,Modifiability,variab,variables,354,"/// It is illegal to modify a const object after initialization.; /// Therefore, if a const object has a constant initializer, we don't; /// actually need to keep storage for it in the block; we'll just; /// rematerialize it at the start of the block function. This is; /// acceptable because we make no promises about address stability of; /// captured variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:30,Modifiability,variab,variable,30,// We can only do this if the variable is const.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:10,Modifiability,variab,variable,10,"// If the variable doesn't have any initializer (shouldn't this be; // invalid?), it's not clear what we should do. Maybe capture as; // zero?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:91,Usability,clear,clear,91,"// If the variable doesn't have any initializer (shouldn't this be; // invalid?), it's not clear what we should do. Maybe capture as; // zero?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:86,Testability,Assert,Assert,86,// The header is basically 'struct { int; int; generic void *;; // custom_fields; }'. Assert that struct is packed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:79,Testability,Assert,Assert,79,// The header is basically 'struct { void *; int; int; void *; void *; }'.; // Assert that the struct is packed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:10,Modifiability,variab,variable,10,"// If the variable is captured by an enclosing block or lambda expression,; // use the type of the capture field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:19,Modifiability,variab,variable,19,"// If the captured variable is a non-escaping __block variable, the field; // type is the reference type. If the variable is a __block variable that; // already has a reference type, the field type is the variable's type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:54,Modifiability,variab,variable,54,"// If the captured variable is a non-escaping __block variable, the field; // type is the reference type. If the variable is a __block variable that; // already has a reference type, the field type is the variable's type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:113,Modifiability,variab,variable,113,"// If the captured variable is a non-escaping __block variable, the field; // type is the reference type. If the variable is a __block variable that; // already has a reference type, the field type is the variable's type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:135,Modifiability,variab,variable,135,"// If the captured variable is a non-escaping __block variable, the field; // type is the reference type. If the variable is a __block variable that; // already has a reference type, the field type is the variable's type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:205,Modifiability,variab,variable,205,"// If the captured variable is a non-escaping __block variable, the field; // type is the reference type. If the variable is a __block variable that; // already has a reference type, the field type is the variable's type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:19,Modifiability,variab,variable,19,"// Since a __block variable cannot be captured by lambdas, its type and; // the capture field type should always match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:88,Modifiability,variab,variable,88,// size may not be multiple of alignment. This can only happen with; // an over-aligned variable. We will be adding a padding field to; // make the size be multiple of alignment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:44,Modifiability,variab,variable,44,"// The block literal is emitted as a global variable, and the block invoke; // function has to be extracted from its initializer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:18,Modifiability,variab,variables,18,"// Next, captured variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:86,Usability,simpl,simply,86,// The lambda capture in a lambda's conversion-to-block-pointer is; // special; we'll simply emit it directly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:23,Modifiability,variab,variable,23,"// If it's a reference variable, copy the reference into the block field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:44,Modifiability,variab,variable,44,"// If this is an ARC __strong block-pointer variable, don't do a; // block copy.; //; // TODO: this can be generalized into the normal initialization logic:; // we should never need to do a block-copy when initializing a local; // variable, because the local variable's lifetime should be strictly; // contained within the stack block's.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:231,Modifiability,variab,variable,231,"// If this is an ARC __strong block-pointer variable, don't do a; // block copy.; //; // TODO: this can be generalized into the normal initialization logic:; // we should never need to do a block-copy when initializing a local; // variable, because the local variable's lifetime should be strictly; // contained within the stack block's.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:259,Modifiability,variab,variable,259,"// If this is an ARC __strong block-pointer variable, don't do a; // block copy.; //; // TODO: this can be generalized into the normal initialization logic:; // we should never need to do a block-copy when initializing a local; // variable, because the local variable's lifetime should be strictly; // contained within the stack block's.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:150,Testability,log,logic,150,"// If this is an ARC __strong block-pointer variable, don't do a; // block copy.; //; // TODO: this can be generalized into the normal initialization logic:; // we should never need to do a block-copy when initializing a local; // variable, because the local variable's lifetime should be strictly; // contained within the stack block's.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:3,Performance,Load,Load,3,// Load the block and do a simple retain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:27,Usability,simpl,simple,27,// Load the block and do a simple retain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:17,Modifiability,variab,variable,17,// Fake up a new variable so that EmitScalarInit doesn't think; // we're referring to the variable in its own initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:90,Modifiability,variab,variable,90,// Fake up a new variable so that EmitScalarInit doesn't think; // we're referring to the variable in its own initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:36,Integrability,depend,depending,36,// We use one of these or the other depending on whether the; // reference is nested.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:233,Deployability,release,released,233,"// Block captures count as local values and have imprecise semantics.; // They also can't be arrays, so need to worry about that.; //; // For const-qualified captures, emit clang.arc.use to ensure the captured; // object doesn't get released while we are still depending on its validity; // within the block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:261,Integrability,depend,depending,261,"// Block captures count as local values and have imprecise semantics.; // They also can't be arrays, so need to worry about that.; //; // For const-qualified captures, emit clang.arc.use to ensure the captured; // object doesn't get released while we are still depending on its validity; // within the block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:3,Modifiability,Extend,Extend,3,"// Extend the lifetime of the capture to the end of the scope enclosing the; // block expression except when the block decl is in the list of RetExpr's; // cleanup objects, in which case its lifetime ends after the full; // expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:3,Performance,Load,Load,3,// Load the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:38,Performance,Load,Load,38,"// addr should be a void** right now. Load, then cast the result; // to byref*.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:18,Safety,detect,detect,18,"// Callers should detect this case on their own: calling this function; // generally requires computing layout information, which is a waste of time; // if we've already emitted this block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:104,Modifiability,variab,variables,104,// Windows does not allow globals to be initialised to point to globals in; // different DLLs. Any such variables must run code to initialise them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate a stack slot like for any local variable to guarantee optimal; // debug info at -O0. The mem2reg pass will eliminate it when optimizing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:44,Modifiability,variab,variable,44,// Allocate a stack slot like for any local variable to guarantee optimal; // debug info at -O0. The mem2reg pass will eliminate it when optimizing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:137,Performance,optimiz,optimizing,137,// Allocate a stack slot like for any local variable to guarantee optimal; // debug info at -O0. The mem2reg pass will eliminate it when optimizing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:59,Modifiability,variab,variable,59,// For OpenCL passed block pointer can be private AS local variable or; // global AS program scope variable (for the case with and without captures).; // Generic AS is used therefore to be able to accommodate both private and; // generic AS in one implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:99,Modifiability,variab,variable,99,// For OpenCL passed block pointer can be private AS local variable or; // global AS program scope variable (for the case with and without captures).; // Generic AS is used therefore to be able to accommodate both private and; // generic AS in one implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:177,Modifiability,variab,variables,177,"// Okay. Undo some of what StartFunction did.; // At -O0 we generate an explicit alloca for the BlockPointer, so the RA; // won't delete the dbg.declare intrinsics for captured variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:9,Usability,Undo,Undo,9,"// Okay. Undo some of what StartFunction did.; // At -O0 we generate an explicit alloca for the BlockPointer, so the RA; // won't delete the dbg.declare intrinsics for captured variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate a stack slot for it, so we can point the debugger to it",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:3,Availability,Recover,Recover,3,// Recover location if it was changed in the above loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:3,Safety,Recover,Recover,3,// Recover location if it was changed in the above loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:7,Usability,resume,resume,7,// And resume where we left off.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:238,Safety,avoid,avoid,238,"// We need to retain the copied value for __strong direct captures.; // If it's a block pointer, we have to copy the block and assign that to; // the destination pointer, so we might as well use _Block_object_assign.; // Otherwise we can avoid that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:4,Deployability,Release,Release,4,/// Release a __block variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:22,Modifiability,variab,variable,22,/// Release a __block variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:120,Modifiability,variab,variables,120,// Calls to _Block_object_dispose along the EH path in the copy helper; // function don't throw as newly-copied __block variables always have a; // reference count of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:2,Performance,Load,LoadBlockVarAddr,2,/*LoadBlockVarAddr*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:411,Modifiability,variab,variable,411,"/// Generate the copy-helper function for a block closure object:; /// static void block_copy_helper(block_t *dst, block_t *src);; /// The runtime will have previously initialized 'dst' by doing a; /// bit-copy of 'src'.; ///; /// Note that this copies an entire block closure object to the heap;; /// it should not be confused with a 'byref copy helper', which moves; /// the contents of an individual __block variable to the heap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:91,Deployability,release,release,91,"// At -O0, store null into the destination field (so that the; // storeStrong doesn't over-release) and then call storeStrong.; // This is a workaround to not having an initStrong call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:8,Performance,optimiz,optimization,8,"// With optimization enabled, take advantage of the fact that; // the blocks runtime guarantees a memcpy of the block data, and; // just emit a retain of the src field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:116,Safety,avoid,avoid,116,"// Unless EH cleanup is required, we don't need this anymore, so kill; // it. It's not quite worth the annoyance to avoid creating it in the; // first place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:168,Energy Efficiency,allocate,allocated,168,"/// Generate the destroy-helper function for a block closure object:; /// static void block_destroy_helper(block_t *theBlock);; ///; /// Note that this destroys a heap-allocated block closure object;; /// it should not be confused with a 'byref destroy helper', which; /// destroys the heap-allocated contents of an individual __block; /// variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:291,Energy Efficiency,allocate,allocated,291,"/// Generate the destroy-helper function for a block closure object:; /// static void block_destroy_helper(block_t *theBlock);; ///; /// Note that this destroys a heap-allocated block closure object;; /// it should not be confused with a 'byref destroy helper', which; /// destroys the heap-allocated contents of an individual __block; /// variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:340,Modifiability,variab,variable,340,"/// Generate the destroy-helper function for a block closure object:; /// static void block_destroy_helper(block_t *theBlock);; ///; /// Note that this destroys a heap-allocated block closure object;; /// it should not be confused with a 'byref destroy helper', which; /// destroys the heap-allocated contents of an individual __block; /// variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:61,Modifiability,variab,variable,61,/// Emits the copy/dispose helpers for an ARC __block __weak variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:63,Modifiability,variab,variable,63,/// Emits the copy/dispose helpers for an ARC __block __strong variable; /// that's not of block-pointer type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:69,Modifiability,variab,variable,69,"// Do a ""move"" by copying the value and then zeroing out the old; // variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:68,Modifiability,variab,variable,68,/// Emits the copy/dispose helpers for an ARC __block __strong; /// variable that's of block-pointer type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:49,Modifiability,variab,variable,49,/// Emits the copy/dispose helpers for a __block variable with a; /// nontrivial copy constructor or destructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:49,Modifiability,variab,variable,49,/// Emits the copy/dispose helpers for a __block variable that is a non-trivial; /// C struct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:40,Modifiability,variab,variable,40,/// Build the copy helper for a __block variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:32,Modifiability,variab,variable,32,/// Generate code for a __block variable's dispose helper.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:43,Modifiability,variab,variable,43,/// Build the dispose helper for a __block variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:60,Modifiability,variab,variable,60,/// Lazily build the copy and dispose helpers for a __block variable; /// with the given information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:61,Modifiability,variab,variable,61,/// Build the copy and dispose helpers for the given __block variable; /// emission. Places the helpers in the global cache. Returns null; /// if no helpers are required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:118,Performance,cache,cache,118,/// Build the copy and dispose helpers for the given __block variable; /// emission. Places the helpers in the global cache. Returns null; /// if no helpers are required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:69,Integrability,rout,routines,69,"// Tell the runtime that this is ARC __weak, called by the; // byref routines.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:24,Modifiability,variab,variables,24,// ARC __strong __block variables need to be retained.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:26,Integrability,rout,routine,26,/// BuildByrefInfo - This routine changes a __block variable declared as T x; /// into:; ///; /// struct {; /// void *__isa;; /// void *__forwarding;; /// int32_t __flags;; /// int32_t __size;; /// void *__copy_helper; // only if needed; /// void *__destroy_helper; // only if needed; /// void *__byref_variable_layout;// only if needed; /// char padding[X]; // only if needed; /// T x;; /// } x; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:52,Modifiability,variab,variable,52,/// BuildByrefInfo - This routine changes a __block variable declared as T x; /// into:; ///; /// struct {; /// void *__isa;; /// void *__forwarding;; /// int32_t __flags;; /// int32_t __size;; /// void *__copy_helper; // only if needed; /// void *__destroy_helper; // only if needed; /// void *__byref_variable_layout;// only if needed; /// char padding[X]; // only if needed; /// T x;; /// } x; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:43,Testability,log,logic,43,// Note that this must match *exactly* the logic in buildByrefHelpers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:54,Modifiability,variab,variable,54,"/// Initialize the structural components of a __block variable, i.e.; /// everything but the actual object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:28,Modifiability,variab,variable,28,// Store the address of the variable into its own forwarding pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h:27,Modifiability,variab,variables,27,// Flags stored in __block variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h:11,Modifiability,variab,variable,11,/* a block variable */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h:47,Modifiability,variab,variable,47,/* the on stack structure holding the __block; variable */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h:53,Integrability,rout,routines,53,/* called from __block (byref) copy/dispose; support routines */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h:46,Modifiability,variab,variable,46,/// Information about the layout of a __block variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h:63,Performance,perform,performed,63,/// Represents a type of copy/destroy operation that should be performed for an; /// entity that's captured by a block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h:13,Deployability,release,release,13,// Assign or release,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h:59,Modifiability,variab,variables,59,/// HasCapturedVariableLayout : True if block has captured variables; /// and their layout meta-data has been generated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h:17,Modifiability,variab,variables,17,/// Mapping from variables to pointers to captures in SortedCaptures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h:36,Performance,cache,cache,36,"/// Storing a reference to the type cache here makes it a lot easier; /// to build natural-feeling, target-specific IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h:32,Modifiability,variab,variable,32,/// Emit a load from an i1 flag variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h:11,Performance,load,load,11,/// Emit a load from an i1 flag variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h:31,Modifiability,variab,variable,31,/// Emit a store to an i1 flag variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h:67,Energy Efficiency,reduce,reduced,67,/// Create GEP with single dynamic index. The address alignment is reduced; /// according to the element size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:41,Modifiability,refactor,refactored,41,// TODO: This list should be expanded or refactored after all GCC-compatible; // std libcall builtins are implemented.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:29,Availability,failure,failure,29,"// For Release ordering, the failure ordering should be Monotonic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:7,Deployability,Release,Release,7,"// For Release ordering, the failure ordering should be Monotonic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:104,Performance,optimiz,optimizations,104,"// The atomic instruction is marked volatile for consistency with MSVC. This; // blocks the few atomics optimizations that LLVM has. If we want to optimize; // _Interlocked* operations in the future, we will have to remove the volatile; // marker.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:147,Performance,optimiz,optimize,147,"// The atomic instruction is marked volatile for consistency with MSVC. This; // blocks the few atomics optimizations that LLVM has. If we want to optimize; // _Interlocked* operations in the future, we will have to remove the volatile; // marker.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:29,Availability,failure,failure,29,"// For Release ordering, the failure ordering should be Monotonic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:7,Deployability,Release,Release,7,"// For Release ordering, the failure ordering should be Monotonic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Performance,Load,Load,3,// Load the comparand for the instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:104,Performance,optimiz,optimizations,104,"// The atomic instruction is marked volatile for consistency with MSVC. This; // blocks the few atomics optimizations that LLVM has. If we want to optimize; // _Interlocked* operations in the future, we will have to remove the volatile; // marker.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:147,Performance,optimiz,optimize,147,"// The atomic instruction is marked volatile for consistency with MSVC. This; // blocks the few atomics optimizations that LLVM has. If we want to optimize; // _Interlocked* operations in the future, we will have to remove the volatile; // marker.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:36,Modifiability,extend,extend,36,// Get the success boolean and zero extend it to i8.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:26,Performance,load,load,26,// Build a plain volatile load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:105,Integrability,Depend,Depending,105,"// Emit a simple mangled intrinsic that has 1 argument and a return type; // matching the argument type. Depending on mode, this may be a constrained; // floating-point intrinsic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:10,Usability,simpl,simple,10,"// Emit a simple mangled intrinsic that has 1 argument and a return type; // matching the argument type. Depending on mode, this may be a constrained; // floating-point intrinsic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:77,Integrability,Depend,Depending,77,"// Emit an intrinsic that has 2 operands of the same type as its result.; // Depending on mode, this may be a constrained floating-point intrinsic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:77,Integrability,Depend,Depending,77,"// Emit an intrinsic that has 3 operands of the same type as its result.; // Depending on mode, this may be a constrained floating-point intrinsic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:80,Integrability,Depend,Depending,80,"// Emit an intrinsic where all operands are of the same type as the result.; // Depending on mode, this may be a constrained floating-point intrinsic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:10,Usability,simpl,simple,10,// Emit a simple mangled intrinsic that has 1 argument and a return type; // matching the argument type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:467,Availability,down,down,467,"// We want the sign bit of the higher-order double. The bitcast we just; // did works as if the double-double was stored to memory and then; // read as an i128. The ""store"" will put the higher-order double in the; // lower address in both little- and big-Endian modes, but the ""load""; // will treat those bits as a different part of the i128: the low bits in; // little-Endian, the high bits in big-Endian. Therefore, on big-Endian; // we need to shift the high bits down to the low before truncating.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:278,Performance,load,load,278,"// We want the sign bit of the higher-order double. The bitcast we just; // did works as if the double-double was stored to memory and then; // read as an i128. The ""store"" will put the higher-order double in the; // lower address in both little- and big-Endian modes, but the ""load""; // will treat those bits as a different part of the i128: the low bits in; // little-Endian, the high bits in big-Endian. Therefore, on big-Endian; // we need to shift the high bits down to the low before truncating.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:77,Integrability,depend,depending,77,"/// Emit a call to llvm.{sadd,uadd,ssub,usub,smul,umul}.with.overflow.*; /// depending on IntrinsicID.; ///; /// \arg CGF The current codegen function.; /// \arg IntrinsicID The ID for the Intrinsic we wish to generate.; /// \arg X The first argument to the llvm.*.with.overflow.*.; /// \arg Y The second argument to the llvm.*.with.overflow.*.; /// \arg Carry The carry returned by the llvm.*.with.overflow.*.; /// \returns The result (i.e. sum/product) returned by the intrinsic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:66,Modifiability,flexible,flexible,66,"// The code generated here calculates the size of a struct with a flexible; // array member that uses the counted_by attribute. There are two instances; // we handle:; //; // struct s {; // unsigned long flags;; // int count;; // int array[] __attribute__((counted_by(count)));; // }; //; // 1) bdos of the flexible array itself:; //; // __builtin_dynamic_object_size(p->array, 1) ==; // p->count * sizeof(*p->array); //; // 2) bdos of a pointer into the flexible array:; //; // __builtin_dynamic_object_size(&p->array[42], 1) ==; // (p->count - 42) * sizeof(*p->array); //; // 2) bdos of the whole struct, including the flexible array:; //; // __builtin_dynamic_object_size(p, 1) ==; // max(sizeof(struct s),; // offsetof(struct s, array) + p->count * sizeof(*p->array)); //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:307,Modifiability,flexible,flexible,307,"// The code generated here calculates the size of a struct with a flexible; // array member that uses the counted_by attribute. There are two instances; // we handle:; //; // struct s {; // unsigned long flags;; // int count;; // int array[] __attribute__((counted_by(count)));; // }; //; // 1) bdos of the flexible array itself:; //; // __builtin_dynamic_object_size(p->array, 1) ==; // p->count * sizeof(*p->array); //; // 2) bdos of a pointer into the flexible array:; //; // __builtin_dynamic_object_size(&p->array[42], 1) ==; // (p->count - 42) * sizeof(*p->array); //; // 2) bdos of the whole struct, including the flexible array:; //; // __builtin_dynamic_object_size(p, 1) ==; // max(sizeof(struct s),; // offsetof(struct s, array) + p->count * sizeof(*p->array)); //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:455,Modifiability,flexible,flexible,455,"// The code generated here calculates the size of a struct with a flexible; // array member that uses the counted_by attribute. There are two instances; // we handle:; //; // struct s {; // unsigned long flags;; // int count;; // int array[] __attribute__((counted_by(count)));; // }; //; // 1) bdos of the flexible array itself:; //; // __builtin_dynamic_object_size(p->array, 1) ==; // p->count * sizeof(*p->array); //; // 2) bdos of a pointer into the flexible array:; //; // __builtin_dynamic_object_size(&p->array[42], 1) ==; // (p->count - 42) * sizeof(*p->array); //; // 2) bdos of the whole struct, including the flexible array:; //; // __builtin_dynamic_object_size(p, 1) ==; // max(sizeof(struct s),; // offsetof(struct s, array) + p->count * sizeof(*p->array)); //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:621,Modifiability,flexible,flexible,621,"// The code generated here calculates the size of a struct with a flexible; // array member that uses the counted_by attribute. There are two instances; // we handle:; //; // struct s {; // unsigned long flags;; // int count;; // int array[] __attribute__((counted_by(count)));; // }; //; // 1) bdos of the flexible array itself:; //; // __builtin_dynamic_object_size(p->array, 1) ==; // p->count * sizeof(*p->array); //; // 2) bdos of a pointer into the flexible array:; //; // __builtin_dynamic_object_size(&p->array[42], 1) ==; // (p->count - 42) * sizeof(*p->array); //; // 2) bdos of the whole struct, including the flexible array:; //; // __builtin_dynamic_object_size(p, 1) ==; // max(sizeof(struct s),; // offsetof(struct s, array) + p->count * sizeof(*p->array)); //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:11,Modifiability,flexible,flexible,11,// Get the flexible array member Decl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:6,Modifiability,flexible,flexible,6,"// No flexible array member found or it doesn't have the ""counted_by""; // attribute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:11,Performance,load,load,11,// Build a load of the counted_by field.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:11,Performance,load,load,11,// Build a load of the index and subtract it from the count.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:27,Modifiability,flexible,flexible,27,// Calculate how large the flexible array member is in bytes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:91,Modifiability,flexible,flexible,91,"// A negative \p IdxInst or \p CountedByInst means that the index lands; // outside of the flexible array member. If that's the case, we want to; // return 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:27,Modifiability,flexible,flexible,27,"// Emit special code for a flexible array member with the ""counted_by""; // attribute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:43,Testability,test,test,43,/// A struct to generically describe a bit test intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:8,Modifiability,portab,portable,8,// Main portable variants.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:279,Performance,load,load,279,"/// Emit a _bittest* intrinsic. These intrinsics take a pointer to an array of; /// bits and a bit position and read and optionally modify the bit at that; /// position. The position index can be arbitrarily large, i.e. it can be larger; /// than 31 or 63, so we need an indexed load in the general case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:164,Availability,mask,mask,164,"// Otherwise, use generic code to load one byte and test the bit. Use all but; // the bottom three bits as the array index, and the bottom three bits to form; // a mask.; // Bit = BitBaseI8[BitPos >> 3] & (1 << (BitPos & 0x7)) != 0;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:34,Performance,load,load,34,"// Otherwise, use generic code to load one byte and test the bit. Use all but; // the bottom three bits as the array index, and the bottom three bits to form; // a mask.; // Bit = BitBaseI8[BitPos >> 3] & (1 << (BitPos & 0x7)) != 0;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:52,Testability,test,test,52,"// Otherwise, use generic code to load one byte and test the bit. Use all but; // the bottom three bits as the array index, and the bottom three bits to form; // a mask.; // Bit = BitBaseI8[BitPos >> 3] & (1 << (BitPos & 0x7)) != 0;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:41,Availability,mask,mask,41,// The updating instructions will need a mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:40,Safety,interlock,interlocked,40,// Check the action and ordering of the interlocked intrinsics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:40,Security,interlock,interlocked,40,// Check the action and ordering of the interlocked intrinsics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:29,Performance,load,load,29,// Emit a combined atomicrmw load/store operation for the interlocked; // intrinsics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:58,Safety,interlock,interlocked,58,// Emit a combined atomicrmw load/store operation for the interlocked; // intrinsics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:58,Security,interlock,interlocked,58,// Emit a combined atomicrmw load/store operation for the interlocked; // intrinsics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:16,Performance,load,load,16,// Emit a plain load for the non-interlocked intrinsics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:33,Safety,interlock,interlocked,33,// Emit a plain load for the non-interlocked intrinsics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:33,Security,interlock,interlocked,33,// Emit a plain load for the non-interlocked intrinsics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:114,Availability,mask,mask,114,"// However we loaded the old byte, either by plain load or atomicrmw, shift; // the bit into the low position and mask it to 0 or 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:14,Performance,load,loaded,14,"// However we loaded the old byte, either by plain load or atomicrmw, shift; // the bit into the low position and mask it to 0 or 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:51,Performance,load,load,51,"// However we loaded the old byte, either by plain load or atomicrmw, shift; // the bit into the low position and mask it to 0 or 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:57,Safety,avoid,avoid,57,"// Many of MSVC builtins are on x64, ARM and AArch64; to avoid repeating code,; // we handle them here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:108,Modifiability,extend,extended,108,"// If a temporary object that requires destruction after the full; // expression is passed, push a lifetime-extended cleanup to extend its; // lifetime to the end of the enclosing block scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:128,Modifiability,extend,extend,128,"// If a temporary object that requires destruction after the full; // expression is passed, push a lifetime-extended cleanup to extend its; // lifetime to the end of the enclosing block scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:62,Integrability,message,message,62,"// Extend lifetimes of objects returned by function calls and message; // sends.; // FIXME: We should do this in other cases in which temporaries are; // created including arguments of non-ARC types (e.g., C++; // temporaries).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Modifiability,Extend,Extend,3,"// Extend lifetimes of objects returned by function calls and message; // sends.; // FIXME: We should do this in other cases in which temporaries are; // created including arguments of non-ARC types (e.g., C++; // temporaries).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:91,Availability,alive,alive,91,// Push a clang.arc.use call to ensure ARC optimizer knows that the; // argument has to be alive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:43,Performance,optimiz,optimizer,43,// Push a clang.arc.use call to ensure ARC optimizer knows that the; // argument has to be alive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:37,Modifiability,extend,extend,37,"// If ArgVal has type x86_fp80, zero-extend ArgVal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:27,Safety,detect,detect,27,"// The intrinsic call will detect overflow when the value is > UINT_MAX,; // however, since the original builtin had a signed result, we need to report; // an overflow when the result is greater than INT_MAX.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Performance,Perform,Perform,3,// Perform a checked unsigned multiplication.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:84,Modifiability,Extend,Extend,84,"// See if we can constant fold this builtin. If so, don't emit it at all.; // TODO: Extend this handling to all builtin calls that we can constant-fold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:180,Safety,avoid,avoid,180,"// If the builtin has been declared explicitly with an assembler label,; // disable the specialized emitting below. Ideally we should communicate the; // rename in IR, or at least avoid generating the intrinsic calls that are; // likely to get lowered to the renamed library functions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:641,Performance,optimiz,optimization,641,"// ConstAttr is enabled in fast-math mode. In fast-math mode, math-errno is; // disabled.; // Math intrinsics are generated only when math-errno is disabled. Any pragmas; // or attributes that affect math-errno should prevent or allow math; // intrincs to be generated. Intrinsics are generated:; // 1- In fast math mode, unless math-errno is overriden; // via '#pragma float_control(precise, on)', or via an; // 'attribute__((optnone))'.; // 2- If math-errno was enabled on command line but overriden; // to false via '#pragma float_control(precise, off))' and; // 'attribute__((optnone))' hasn't been used.; // 3- If we are compiling with optimization and errno has been disabled; // via '#pragma float_control(precise, off)', and; // 'attribute__((optnone))' hasn't been used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:68,Availability,avail,available,68,// Only enabled preserved access index region when debuginfo; // is available as debuginfo is needed to preserve user-level; // access pattern.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:26,Security,access,access,26,// Only enabled preserved access index region when debuginfo; // is available as debuginfo is needed to preserve user-level; // access pattern.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:128,Security,access,access,128,// Only enabled preserved access index region when debuginfo; // is available as debuginfo is needed to preserve user-level; // access pattern.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:33,Performance,optimiz,optimizer,33,// We pass this builtin onto the optimizer so that it can figure out the; // object size in more complex cases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:30,Integrability,depend,dependent,30,// Emit everything that isn't dependent on the first parameter type,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Modifiability,Extend,Extends,3,"// Extends a pointer to the size of an _Unwind_Word, which is; // uint64_t on all platforms. Generally this gets poked into a; // register and eventually used as an address, so if the; // addressing registers are wider than pointers and the platform; // doesn't implicitly ignore high-order bits when doing; // addressing, we need to make sure we zext / sext based on; // the platform's expectations.; //; // See: http://gcc.gnu.org/ml/gcc-bugs/2002-02/msg00237.html; // Cast the pointer to intptr_t.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:397,Deployability,release,release,397,"// We assume this is supposed to correspond to a C++0x-style; // sequentially-consistent fence (i.e. this is only usable for; // synchronization, not device I/O or anything like that). This intrinsic; // is really badly designed in the sense that in theory, there isn't; // any way to safely use it... but in practice, it mostly works; // to use it with non-atomic loads and stores to get acquire/release; // semantics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:129,Integrability,synchroniz,synchronization,129,"// We assume this is supposed to correspond to a C++0x-style; // sequentially-consistent fence (i.e. this is only usable for; // synchronization, not device I/O or anything like that). This intrinsic; // is really badly designed in the sense that in theory, there isn't; // any way to safely use it... but in practice, it mostly works; // to use it with non-atomic loads and stores to get acquire/release; // semantics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:365,Performance,load,loads,365,"// We assume this is supposed to correspond to a C++0x-style; // sequentially-consistent fence (i.e. this is only usable for; // synchronization, not device I/O or anything like that). This intrinsic; // is really badly designed in the sense that in theory, there isn't; // any way to safely use it... but in practice, it mostly works; // to use it with non-atomic loads and stores to get acquire/release; // semantics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:285,Safety,safe,safely,285,"// We assume this is supposed to correspond to a C++0x-style; // sequentially-consistent fence (i.e. this is only usable for; // synchronization, not device I/O or anything like that). This intrinsic; // is really badly designed in the sense that in theory, there isn't; // any way to safely use it... but in practice, it mostly works; // to use it with non-atomic loads and stores to get acquire/release; // semantics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:114,Usability,usab,usable,114,"// We assume this is supposed to correspond to a C++0x-style; // sequentially-consistent fence (i.e. this is only usable for; // synchronization, not device I/O or anything like that). This intrinsic; // is really badly designed in the sense that in theory, there isn't; // any way to safely use it... but in practice, it mostly works; // to use it with non-atomic loads and stores to get acquire/release; // semantics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:141,Safety,safe,safe,141,"// Get the annotation string, go through casts. Sema requires this to be a; // non-wide string literal, potentially casted, so the cast<> is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Modifiability,Extend,Extend,3,// Extend each operand to the encompassing type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:32,Modifiability,extend,extended,32,// Perform the operation on the extended values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Performance,Perform,Perform,3,// Perform the operation on the extended values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:56,Modifiability,extend,extend,56,"// To see if the truncation caused an overflow, we will extend; // the result and then compare it to the original result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:49,Performance,load,loads,49,// These builtins exist to emit regular volatile loads and stores not; // affected by the -fms-volatile setting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Testability,Test,Testing,3,// Testing which overloaded version we should generate the call for.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:33,Availability,reliab,reliably,33,"// Lower this manually. We can't reliably determine whether or not any; // given va_copy() is for a Win64 va_list from the calling convention; // alone, because it's legal to do this from a System V ABI function.; // With opaque pointer types, we won't have enough information in LLVM; // IR to determine this from the argument types, either. Best to do it; // now, while we have enough information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:99,Availability,down,down,99,"// Check that a call to a target specific builtin has the correct target; // features.; // This is down here to avoid non-target specific builtins, however, if; // generic builtins start to require generic target features then we; // can move this up to the beginning of the function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:112,Safety,avoid,avoid,112,"// Check that a call to a target specific builtin has the correct target; // features.; // This is down here to avoid non-target specific builtins, however, if; // generic builtins start to require generic target features then we; // can move this up to the beginning of the function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:25,Performance,perform,perform,25,// NOTE we don't need to perform a compatibility flag check here since the; // intrinsics are declared in Builtins*.def via LANGBUILTIN which filter the; // MS builtins via ALL_MS_LANGUAGES and are filtered earlier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:139,Availability,error,error,139,"// When compiling in HipStdPar mode we have to be conservative in rejecting; // target specific features in the FE, and defer the possible error to the; // AcceleratorCodeSelection pass, wherein iff an unsupported target builtin is; // referenced by an accelerator executable function, we emit an error.; // Returning nullptr here leads to the builtin being handled in; // EmitStdParUnsupportedBuiltin.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:297,Availability,error,error,297,"// When compiling in HipStdPar mode we have to be conservative in rejecting; // target specific features in the FE, and defer the possible error to the; // AcceleratorCodeSelection pass, wherein iff an unsupported target builtin is; // referenced by an accelerator executable function, we emit an error.; // Returning nullptr here leads to the builtin being handled in; // EmitStdParUnsupportedBuiltin.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Modifiability,Extend,Extend,3,// Extend 32 bit write value to 64 bit to pass to write.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:96,Safety,avoid,avoid,96,// Handle 64-bit integer elements as a special case. Use shuffles of; // one-element vectors to avoid poor code for i64 in the backend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Performance,Load,Load,3,// Load the value as a one-element vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:103,Safety,avoid,avoid,103,// Handle 64-bit integer elements as a special case. Use a shuffle to get; // a one-element vector and avoid poor code for i64 in the backend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:80,Usability,simpl,simply,80,"// An unsigned shift of the full lane size always generates zero, so we can; // simply emit a zero vector. A signed shift of the full lane size does the; // same thing as shifting by one bit fewer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:312,Integrability,depend,depending,312,"// Convert one MVE vector type into another by reinterpreting its in-register; // format.; //; // Little-endian, this is identical to a bitcast (which reinterprets the; // memory format). But big-endian, they're not necessarily the same, because; // the register and memory formats map to each other differently depending on; // the lane size.; //; // We generate a bitcast whenever we can (if we're little-endian, or if the; // lane sizes are the same anyway). Otherwise we fall back to an IR intrinsic; // that performs the different kind of reinterpretation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:513,Performance,perform,performs,513,"// Convert one MVE vector type into another by reinterpreting its in-register; // format.; //; // Little-endian, this is identical to a bitcast (which reinterprets the; // memory format). But big-endian, they're not necessarily the same, because; // the register and memory formats map to each other differently depending on; // the lane size.; //; // We generate a bitcast whenever we can (if we're little-endian, or if the; // lane sizes are the same anyway). Otherwise we fall back to an IR intrinsic; // that performs the different kind of reinterpretation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:54,Usability,simpl,simple,54,// Code autogenerated by Tablegen will handle all the simple builtins.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:78,Security,access,access,78,/// SVEBuiltinMemEltTy - Returns the memory element type for this memory; /// access builtin. Only required if it can't be inferred from the base pointer; /// operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:169,Performance,load,loaded,169,"// At the ACLE level there's only one predicate type, svbool_t, which is; // mapped to <n x 16 x i1>. However, this might be incompatible with the; // actual type being loaded. For example, when loading doubles (i64) the; // predicate should be <n x 2 x i1> instead. At the IR level the type of; // the predicate and the data being loaded must match. Cast to the type; // expected by the intrinsic. The intrinsic itself should be defined in; // a way than enforces relations between parameter types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:195,Performance,load,loading,195,"// At the ACLE level there's only one predicate type, svbool_t, which is; // mapped to <n x 16 x i1>. However, this might be incompatible with the; // actual type being loaded. For example, when loading doubles (i64) the; // predicate should be <n x 2 x i1> instead. At the IR level the type of; // the predicate and the data being loaded must match. Cast to the type; // expected by the intrinsic. The intrinsic itself should be defined in; // a way than enforces relations between parameter types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:332,Performance,load,loaded,332,"// At the ACLE level there's only one predicate type, svbool_t, which is; // mapped to <n x 16 x i1>. However, this might be incompatible with the; // actual type being loaded. For example, when loading doubles (i64) the; // predicate should be <n x 2 x i1> instead. At the IR level the type of; // the predicate and the data being loaded must match. Cast to the type; // expected by the intrinsic. The intrinsic itself should be defined in; // a way than enforces relations between parameter types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:12,Performance,load,load,12,// Does the load have an offset?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:80,Performance,load,loaded,80,// The vector type that is returned may be different from the; // eventual type loaded from memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:12,Performance,load,load,12,// Does the load have an offset?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:22,Performance,scalab,scalable,22,// Limit the usage of scalable llvm IR generated by the ACLE by using the; // sve dup.x intrinsic instead of IRBuilder::CreateVectorSplat.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:63,Safety,safe,safely,63,// Immediates for SVE llvm intrinsics are always 32bit. We can safely; // truncate because the immediate has been range checked and no valid; // immediate requires more than a handful of bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Performance,Load,Load,3,"// Load from the address via an LLVM intrinsic, receiving a; // tuple of 8 i64 words, and store each one to ValPtr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Performance,Load,Load,3,"// Load 8 i64 words from ValPtr, and store them to the address; // via an LLVM intrinsic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Performance,Load,Load,3,// Load x18 + offset,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:40,Security,access,access,40,// Now adjust things to handle the lane access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:22,Integrability,inject,injected,22,"// A sequence number, injected into IR builtin functions, to; // prevent CSE given the only difference of the function; // may just be the debuginfo metadata.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:22,Security,inject,injected,22,"// A sequence number, injected into IR builtin functions, to; // prevent CSE given the only difference of the function; // may just be the debuginfo metadata.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:15,Availability,mask,mask,15,// Convert the mask from an integer type to a vector of i1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:54,Availability,mask,mask,54,"// If we have less than 8 elements, then the starting mask was an i8 and; // we need to extract down to the right number of elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:96,Availability,down,down,96,"// If we have less than 8 elements, then the starting mask was an i8 and; // we need to extract down to the right number of elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:138,Energy Efficiency,power,power-of-,138,"// Amount may be scalar immediate, in which case create a splat vector.; // Funnel shifts amounts are treated as modulo and types are all power-of-2 so; // we only care about the lowest log2 bits anyway.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:10,Availability,mask,mask,10,// If the mask is all ones just return first argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:10,Availability,mask,mask,10,// If the mask is all ones just return first argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:23,Availability,mask,masking,23,// Handle any required masking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:51,Availability,mask,masking,51,"// If we have more than 3 arguments, we need to do masking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Usability,Clear,Clear,3,// Clear the upper bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:10,Availability,mask,masked,10,// Emit a masked pternlog intrinsic. This only exists because the header has to; // use a macro and we aren't able to pass the input argument to a pternlog; // builtin and a select builtin without evaluating it twice.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:67,Deployability,upgrade,upgrade,67,// If the SAE intrinsic doesn't use default rounding then we can't upgrade.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Performance,Perform,Perform,3,// Perform the fp-extension.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:33,Security,access,access,33,// Calculate the index needed to access the correct field based on the; // range. Also adjust the expected value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:97,Safety,avoid,avoid,97,"// These exist so that the builtin that takes an immediate can be bounds; // checked by clang to avoid passing bad immediates to the backend. Since; // AVX has a larger immediate than SSE we would need separate builtins to; // do the different bounds checking. Rather than create a clang specific; // SSE only builtin, this implements eight separate builtins to match gcc; // implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:96,Performance,optimiz,optimizing,96,"// The x86 definition of ""undef"" is not the same as the LLVM definition; // (PR32176). We leave optimizing away an unnecessary zero constant to the; // IR optimizer and backend.; // TODO: If we had a ""freeze"" IR instruction to generate a fixed undef; // value, we should use that here instead of a zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:155,Performance,optimiz,optimizer,155,"// The x86 definition of ""undef"" is not the same as the LLVM definition; // (PR32176). We leave optimizing away an unnecessary zero constant to the; // IR optimizer and backend.; // TODO: If we had a ""freeze"" IR instruction to generate a fixed undef; // value, we should use that here instead of a zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:58,Integrability,wrap,wrap,58,// Splat the 8-bits of immediate 4 times to help the loop wrap around.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:58,Integrability,wrap,wrap,58,// Splat the 8-bits of immediate 4 times to help the loop wrap around.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:58,Integrability,wrap,wrap,58,// Splat the 8-bits of immediate 4 times to help the loop wrap around.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:58,Integrability,wrap,wrap,58,// Splat the 8-bits of immediate 4 times to help the loop wrap around.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Availability,Mask,Mask,3,// Mask the shift amount to width of a vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:21,Usability,simpl,simple,21,"// This takes a very simple approach since there are two lanes and a; // shuffle can have 2 inputs. So we reserve the first input for the first; // lane and the second input for the second lane. This may result in; // duplicate sources, but this can be dealt with in the backend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:64,Availability,mask,mask,64,"// Bitcast to vXi1 type and then back to integer. This gets the mask; // register type into the IR, but might be optimized out depending on; // what's around it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:127,Integrability,depend,depending,127,"// Bitcast to vXi1 type and then back to integer. This gets the mask; // register type into the IR, but might be optimized out depending on; // what's around it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:113,Performance,optimiz,optimized,113,"// Bitcast to vXi1 type and then back to integer. This gets the mask; // register type into the IR, but might be optimized out depending on; // what's around it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:199,Availability,mask,mask,199,"// If the predicate is true or false and we're using constrained intrinsics,; // we don't have a compare intrinsic we can use. Just use the legacy X86; // specific intrinsic.; // If the intrinsic is mask enabled and we're using constrained intrinsics,; // use the legacy X86 specific intrinsic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:30,Modifiability,extend,extend,30,"// Flip low/high ops and zero-extend amount to matching type.; // shiftleft128(Low, High, Amt) -> fshl(High, Low, Amt); // shiftright128(Low, High, Amt) -> fshr(High, Low, Amt)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:134,Performance,optimiz,optimized,134,"// We treat __stosb as a volatile memset - it may not generate ""rep stosb""; // instruction, but it will create a memset that won't be optimized away.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:43,Availability,failure,failure,43,// This syscall signals a driver assertion failure in x86 NT kernels.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:33,Testability,assert,assertion,33,// This syscall signals a driver assertion failure in x86 NT kernels.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:181,Testability,test,testing,181,"// Do not emit the builtin arguments in the arguments of a function call,; // because the evaluation order of function arguments is not specified in C++.; // This is important when testing to ensure the arguments are emitted in the; // same order every time. Eg:; // Instead of:; // return Builder.CreateFDiv(EmitScalarExpr(E->getArg(0)),; // EmitScalarExpr(E->getArg(1)), ""swdiv"");; // Use:; // Value *Op0 = EmitScalarExpr(E->getArg(0));; // Value *Op1 = EmitScalarExpr(E->getArg(1));; // return Builder.CreateFDiv(Op0, Op1, ""swdiv"")",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:44,Energy Efficiency,Power,PowerPC-specific,44,// __builtin_ppc_get_timebase is GCC 4.8+'s PowerPC-specific name for what we; // call __builtin_readcyclecounter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:21,Availability,down,down,21,// Essentially boils down to performing an unaligned VMX load sequence so; // as to avoid crossing a page boundary and then shuffling the elements; // into the right side of the vector register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:29,Performance,perform,performing,29,// Essentially boils down to performing an unaligned VMX load sequence so; // as to avoid crossing a page boundary and then shuffling the elements; // into the right side of the vector register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:57,Performance,load,load,57,// Essentially boils down to performing an unaligned VMX load sequence so; // as to avoid crossing a page boundary and then shuffling the elements; // into the right side of the vector register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:84,Safety,avoid,avoid,84,// Essentially boils down to performing an unaligned VMX load sequence so; // as to avoid crossing a page boundary and then shuffling the elements; // into the right side of the vector register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:45,Performance,load,load,45,"// If the user wants the entire vector, just load the entire vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:29,Usability,simpl,simply,29,"// Storing the whole vector, simply store it on BE and reverse bytes and; // store on LE.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:41,Integrability,depend,dependent,41,// Valid value for the third argument is dependent on the input type and; // builtin called.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:26,Availability,error,error,26,// Compose range checking error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:32,Integrability,message,message,32,// Compose range checking error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:9,Availability,error,error,9,// Issue error if third argument is not within the valid range.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:27,Availability,mask,mask,27,"// Rotate and insert under mask operation.; // __rldimi(rs, is, shift, mask); // (rotl64(rs, shift) & mask) | (is & ~mask); // __rlwimi(rs, is, shift, mask); // (rotl(rs, shift) & mask) | (is & ~mask)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:71,Availability,mask,mask,71,"// Rotate and insert under mask operation.; // __rldimi(rs, is, shift, mask); // (rotl64(rs, shift) & mask) | (is & ~mask); // __rlwimi(rs, is, shift, mask); // (rotl(rs, shift) & mask) | (is & ~mask)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:102,Availability,mask,mask,102,"// Rotate and insert under mask operation.; // __rldimi(rs, is, shift, mask); // (rotl64(rs, shift) & mask) | (is & ~mask); // __rlwimi(rs, is, shift, mask); // (rotl(rs, shift) & mask) | (is & ~mask)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:117,Availability,mask,mask,117,"// Rotate and insert under mask operation.; // __rldimi(rs, is, shift, mask); // (rotl64(rs, shift) & mask) | (is & ~mask); // __rlwimi(rs, is, shift, mask); // (rotl(rs, shift) & mask) | (is & ~mask)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:151,Availability,mask,mask,151,"// Rotate and insert under mask operation.; // __rldimi(rs, is, shift, mask); // (rotl64(rs, shift) & mask) | (is & ~mask); // __rlwimi(rs, is, shift, mask); // (rotl(rs, shift) & mask) | (is & ~mask)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:180,Availability,mask,mask,180,"// Rotate and insert under mask operation.; // __rldimi(rs, is, shift, mask); // (rotl64(rs, shift) & mask) | (is & ~mask); // __rlwimi(rs, is, shift, mask); // (rotl(rs, shift) & mask) | (is & ~mask)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:195,Availability,mask,mask,195,"// Rotate and insert under mask operation.; // __rldimi(rs, is, shift, mask); // (rotl64(rs, shift) & mask) | (is & ~mask); // __rlwimi(rs, is, shift, mask); // (rotl(rs, shift) & mask) | (is & ~mask)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:27,Availability,mask,mask,27,"// Rotate and insert under mask operation.; // __rlwnm(rs, shift, mask); // rotl(rs, shift) & mask",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:66,Availability,mask,mask,66,"// Rotate and insert under mask operation.; // __rlwnm(rs, shift, mask); // rotl(rs, shift) & mask",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:94,Availability,mask,mask,94,"// Rotate and insert under mask operation.; // __rlwnm(rs, shift, mask); // rotl(rs, shift) & mask",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:20,Availability,mask,mask,20,// Create a shuffle mask,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:305,Performance,load,load,305,// The PPC MMA builtins take a pointer to a __vector_quad as an argument.; // Some of the MMA instructions accumulate their result into an existing; // accumulator whereas the others generate a new accumulator. So we need to; // use custom code generation to expand a builtin call with a pointer to a; // load (if the corresponding instruction accumulates its result) followed by; // the call to the intrinsic and a store of the result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:249,Modifiability,variab,variable,249,"// \p Index is 0, 1, and 2 for x, y, and z dimension, respectively.; /// Emit code based on Code Object ABI version.; /// COV_4 : Emit code to use dispatch ptr; /// COV_5 : Emit code to use implicitarg ptr; /// COV_NONE : Emit code to load a global variable ""__oclc_ABI_version""; /// and use its value for COV_4 or COV_5 approach. It is used for; /// compiling device libraries in an ABI-agnostic way.; ///; /// Note: ""__oclc_ABI_version"" is supposed to be emitted and intialized by; /// clang during compilation of user code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:235,Performance,load,load,235,"// \p Index is 0, 1, and 2 for x, y, and z dimension, respectively.; /// Emit code based on Code Object ABI version.; /// COV_4 : Emit code to use dispatch ptr; /// COV_5 : Emit code to use implicitarg ptr; /// COV_NONE : Emit code to load a global variable ""__oclc_ABI_version""; /// and use its value for COV_4 or COV_5 approach. It is used for; /// compiling device libraries in an ABI-agnostic way.; ///; /// Note: ""__oclc_ABI_version"" is supposed to be emitted and intialized by; /// clang during compilation of user code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:8,Performance,load,load,8,// This load will be eliminated by the IPSCCP because it is constant; // weak_odr without externally_initialized. Either changing it to weak or; // adding externally_initialized will keep the load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:192,Performance,load,load,192,// This load will be eliminated by the IPSCCP because it is constant; // weak_odr without externally_initialized. Either changing it to weak or; // adding externally_initialized will keep the load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:34,Availability,mask,mask,34,// FIXME-GFX10: How should 32 bit mask be handled?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:34,Availability,mask,mask,34,// FIXME-GFX10: How should 32 bit mask be handled?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:20,Performance,perform,perform,20,// These operations perform a matrix multiplication and accumulation of; // the form:; // D = A * B + C; // We need to specify one type for matrices AB and one for matrices CD.; // Sparse matrix operations can have different types for A and B as well as; // an additional type for sparsity index.; // Destination type should be put before types used for source operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:102,Modifiability,variab,variable,102,"// On GFX12, the intrinsics with 16-bit accumulator use a packed layout.; // There is no need for the variable opsel argument, so always set it to; // ""false"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:239,Performance,optimiz,optimizations,239,"// Vector builtins. Note that most vector builtins are mapped automatically; // to target-specific LLVM intrinsics. The ones handled specially here can; // be represented via standard LLVM IR, which is preferable to enable common; // LLVM optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:31,Availability,mask,mask,31,// Constant-fold the M4 and M5 mask arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:24,Availability,mask,mask,24,// Constant-fold the M4 mask argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:24,Availability,mask,mask,24,// Constant-fold the M4 mask argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:25,Performance,load,load,25,// Number of elements to load/store; // Intrinsic IDs for row/col variants. 0 if particular layout is unsupported.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:10,Performance,load,loads,10,// FP MMA loads,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:15,Performance,load,loads,15,// Integer MMA loads,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:66,Deployability,A/B,A/B,66,// Sub-integer MMA loads.; // Only row/col layout is supported by A/B fragments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:19,Performance,load,loads,19,// Sub-integer MMA loads.; // Only row/col layout is supported by A/B fragments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:14,Performance,load,loads,14,// Double MMA loads,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:23,Performance,load,loads,23,// Alternate float MMA loads,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:179,Performance,load,loads,179,"// NOTE: We need to follow inconsitent naming scheme used by NVCC. Unlike; // PTX and LLVM IR where stores always use fragment D, NVCC builtins always; // use fragment C for both loads and stores.; // FP MMA stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:135,Performance,load,loads,135,"// Integer and sub-integer MMA stores.; // Another naming quirk. Unlike other MMA builtins that use PTX types in the; // name, integer loads/stores use LLVM's i32.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:163,Usability,undo,undocumented,163,"// Variants are ordered by layout-A/layout-B/satf, where 'row' has priority; // over 'col' for layout. The index of non-satf variants is expected to match; // the undocumented layout constants used by CUDA's mma.hpp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:7,Integrability,Interoperab,Interoperability,7,"// PTX Interoperability section 2.2: ""For a vector with an even number of; // elements, its alignment is set to number of elements times the alignment; // of its member: n*alignof(t).""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:10,Performance,load,loads,10,// FP MMA loads,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:15,Performance,load,loads,15,// Integer MMA loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:19,Performance,load,loads,19,// Sub-integer MMA loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:14,Performance,load,loads,14,// Double MMA loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:23,Performance,load,loads,23,// Alternate float MMA loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Performance,Load,Load,3,// Load A,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Performance,Load,Load,3,// Load B,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Performance,Load,Load,3,// Load C,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:35,Availability,down,down,35,/// Generate (x & ~(y-1)) to align down or ((x+(y-1)) & ~(y-1)) to align up.; /// Note: For pointer types we can avoid ptrtoint/inttoptr pairs by using the; /// llvm.ptrmask intrinsic (with a GEP before in the align_up case).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:113,Safety,avoid,avoid,113,/// Generate (x & ~(y-1)) to align down or ((x+(y-1)) & ~(y-1)) to align up.; /// Note: For pointer types we can avoid ptrtoint/inttoptr pairs by using the; /// llvm.ptrmask intrinsic (with a GEP before in the align_up case).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:45,Availability,mask,mask,45,"// When aligning up we have to first add the mask to ensure we go over the; // next alignment value and then align down to the next valid multiple.; // By adding the mask, we ensure that align_up on an already aligned; // value will not change the value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:115,Availability,down,down,115,"// When aligning up we have to first add the mask to ensure we go over the; // next alignment value and then align down to the next valid multiple.; // By adding the mask, we ensure that align_up on an already aligned; // value will not change the value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:166,Availability,mask,mask,166,"// When aligning up we have to first add the mask to ensure we go over the; // next alignment value and then align down to the next valid multiple.; // By adding the mask, we ensure that align_up on an already aligned; // value will not change the value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:14,Availability,mask,mask,14,// Invert the mask to only clear the lower bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:27,Usability,clear,clear,27,// Invert the mask to only clear the lower bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:60,Performance,load,loaded,60,"// The base pointer is passed by address, so it needs to be loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:25,Performance,load,loads,25,"// The treatment of both loads and stores is the same: the arguments for; // the builtin are the same as the arguments for the intrinsic.; // Load:; // builtin(Base, Inc, Mod, Start) -> intr(Base, Inc, Mod, Start); // builtin(Base, Mod, Start) -> intr(Base, Mod, Start); // Store:; // builtin(Base, Inc, Mod, Val, Start) -> intr(Base, Inc, Mod, Val, Start); // builtin(Base, Mod, Val, Start) -> intr(Base, Mod, Val, Start)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:142,Performance,Load,Load,142,"// The treatment of both loads and stores is the same: the arguments for; // the builtin are the same as the arguments for the intrinsic.; // Load:; // builtin(Base, Inc, Mod, Start) -> intr(Base, Inc, Mod, Start); // builtin(Base, Mod, Start) -> intr(Base, Mod, Start); // Store:; // builtin(Base, Inc, Mod, Val, Start) -> intr(Base, Inc, Mod, Val, Start); // builtin(Base, Mod, Val, Start) -> intr(Base, Mod, Val, Start)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:7,Performance,load,load,7,"// The load intrinsics generate two results (Value, NewBase), stores; // generate one (NewBase). The new base address needs to be stored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:40,Performance,load,load,40,// Handle the conversion of bit-reverse load intrinsics to bit code.; // The intrinsic call after this function only reads from memory and the; // write to memory is dealt by the store instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:131,Performance,load,load,131,"// The intrinsic generates one result, which is the new value for the base; // pointer. It needs to be returned. The result of the load instruction is; // passed to intrinsic by address, so the value needs to be stored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:39,Modifiability,variab,variable,39,// The value needs to be stored as the variable is passed by reference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:7,Deployability,update,updated,7,// The updated value of the base pointer is returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:129,Deployability,update,update,129,"// These intrinsics return a tuple {Vector, VectorPred} in LLVM IR,; // and the corresponding C/C++ builtins use loads/stores to update; // the predicate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:113,Performance,load,loads,113,"// These intrinsics return a tuple {Vector, VectorPred} in LLVM IR,; // and the corresponding C/C++ builtins use loads/stores to update; // the predicate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:200,Performance,load,load,200,"// These are identical to the builtins above, except they don't consume; // input carry, only generate carry-out. Since they still produce two; // outputs, generate the store of the predicate, but no load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:64,Performance,load,load,64,"// Handle aggregate argument, namely RVV tuple types in segment load/store",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:397,Integrability,wrap,wrap,397,"//===--- CGCall.cpp - Encapsulate calling convention details --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // These classes wrap the information about a call or function; // definition used to handle ABI compliancy.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:87,Modifiability,inherit,inherited,87,// Parameters are unnecessary if we're constructing a base class subobject; // and the inherited constructor lives in a virtual base.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:16,Modifiability,inherit,inheriting,16,// A base class inheriting constructor doesn't get forwarded arguments; // needed to construct a virtual base (or base class thereof).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:352,Integrability,message,message,352,"/// Arrange the argument and result information for the function type; /// through which to perform a send to the given Objective-C method,; /// using the given receiver type. The receiver type is not always; /// the 'self' type of the method or even an Objective-C pointer type.; /// This is *not* the right method for actually performing such a; /// message send, due to the possibility of optional arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:92,Performance,perform,perform,92,"/// Arrange the argument and result information for the function type; /// through which to perform a send to the given Objective-C method,; /// using the given receiver type. The receiver type is not always; /// the 'self' type of the method or even an Objective-C pointer type.; /// This is *not* the right method for actually performing such a; /// message send, due to the possibility of optional arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:329,Performance,perform,performing,329,"/// Arrange the argument and result information for the function type; /// through which to perform a send to the given Objective-C method,; /// using the given receiver type. The receiver type is not always; /// the 'self' type of the method or even an Objective-C pointer type.; /// This is *not* the right method for actually performing such a; /// message send, due to the possibility of optional arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:215,Integrability,depend,dependent,215,"/// Figure out the rules for calling a function with the given formal; /// type using the given arguments. The arguments are necessary; /// because the function might be unprototyped, in which case it's; /// target-dependent in crazy ways.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:38,Energy Efficiency,allocate,allocate,38,// Construct the function info. We co-allocate the ArgInfos.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:98,Modifiability,extend,extend,98,"// Loop over all of the computed argument and return value info. If any of; // them are direct or extend without a specified coerce type, specify the; // default now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:3,Performance,Perform,Perform,3,// Perform a single step derived-to-base conversion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:3,Performance,Perform,Perform,3,// Perform a single step derived-to-base conversion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:81,Security,access,accessing,81,"/// EnterStructPointerForCoercedAccess - Given a struct pointer that we are; /// accessing some number of bytes out of it, try to gep into the struct to get; /// at its inner goodness. Dive as deep as possible without entering an element; /// with an in-memory size smaller than DstSize.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:282,Performance,load,load,282,"// If the first elt is at least as large as what we're looking for, or if the; // first element is the same size as the whole struct, we can enter it. The; // comparison must be made on the store size and not the alloca size. Using; // the alloca size may overstate the size of the load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:31,Safety,avoid,avoid,31,// If this is Pointer->Pointer avoid conversion to and from int.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:33,Performance,load,load,33,"/// CreateCoercedLoad - Create a load from \arg SrcPtr interpreted as; /// a pointer to an object of type \arg Ty, known to be aligned to; /// \arg SrcAlign bytes.; ///; /// This safely handles the case when the src type is smaller than the; /// destination type; in this situation the values of bits which not; /// present in the src are undefined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:179,Safety,safe,safely,179,"/// CreateCoercedLoad - Create a load from \arg SrcPtr interpreted as; /// a pointer to an object of type \arg Ty, known to be aligned to; /// \arg SrcAlign bytes.; ///; /// This safely handles the case when the src type is smaller than the; /// destination type; in this situation the values of bits which not; /// present in the src are undefined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:43,Performance,load,load,43,"// If SrcTy and Ty are the same, just do a load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:6,Performance,load,load,6,"// If load is legal, just bitcast the src pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:297,Security,access,access,297,"// Generally SrcSize is never greater than DstSize, since this means we are; // losing bits. However, this can happen in cases where the structure has; // additional padding, for example due to a user specified alignment.; //; // FIXME: Assert that we aren't truncating non-padding bits when have access; // to that information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:237,Testability,Assert,Assert,237,"// Generally SrcSize is never greater than DstSize, since this means we are; // losing bits. However, this can happen in cases where the structure has; // additional padding, for example due to a user specified alignment.; //; // FIXME: Assert that we aren't truncating non-padding bits when have access; // to that information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:35,Performance,scalab,scalable,35,"// If coercing a fixed vector to a scalable vector for ABI compatibility, and; // the types match, use the llvm.vector.insert intrinsic to perform the; // conversion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:139,Performance,perform,perform,139,"// If coercing a fixed vector to a scalable vector for ABI compatibility, and; // the types match, use the llvm.vector.insert intrinsic to perform the; // conversion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:44,Performance,scalab,scalable,44,"// If we are casting a fixed i8 vector to a scalable 16 x i1 predicate; // vector, use a vector insert and bitcast the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:61,Usability,simpl,simple,61,"// Otherwise do coercion through memory. This is stupid, but simple.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:217,Safety,safe,safely,217,"/// CreateCoercedStore - Create a store to \arg DstPtr from \arg Src,; /// where the source and destination may have different types. The; /// destination is known to be aligned to \arg DstAlign bytes.; ///; /// This safely handles the case when the src type is larger than the; /// destination type; the upper bits of the src will be lost.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:371,Security,access,access,371,"// Otherwise do coercion through memory. This is stupid, but; // simple.; // Generally SrcSize is never greater than DstSize, since this means we are; // losing bits. However, this can happen in cases where the structure has; // additional padding, for example due to a user specified alignment.; //; // FIXME: Assert that we aren't truncating non-padding bits when have access; // to that information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:311,Testability,Assert,Assert,311,"// Otherwise do coercion through memory. This is stupid, but; // simple.; // Generally SrcSize is never greater than DstSize, since this means we are; // losing bits. However, this can happen in cases where the structure has; // additional padding, for example due to a user specified alignment.; //; // FIXME: Assert that we aren't truncating non-padding bits when have access; // to that information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:65,Usability,simpl,simple,65,"// Otherwise do coercion through memory. This is stupid, but; // simple.; // Generally SrcSize is never greater than DstSize, since this means we are; // losing bits. However, this can happen in cases where the structure has; // additional padding, for example due to a user specified alignment.; //; // FIXME: Assert that we aren't truncating non-padding bits when have access; // to that information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:21,Performance,optimiz,optimizer,21,"// Fast-isel and the optimizer generally like scalar values better than; // FCAs, so we flatten them if this is safe to do for this argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:112,Safety,safe,safe,112,"// Fast-isel and the optimizer generally like scalar values better than; // FCAs, so we flatten them if this is safe to do for this argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:22,Availability,toler,tolerate,22,// As-is msan can not tolerate noundef mismatch between caller and; // implementation. Mismatch is possible for e.g. indirect calls from C-caller; // into C++. Such mismatches lead to confusing false reports. To avoid; // expensive workaround on msan we enforce initialization event in uncommon; // cases where it's allowed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:212,Safety,avoid,avoid,212,// As-is msan can not tolerate noundef mismatch between caller and; // implementation. Mismatch is possible for e.g. indirect calls from C-caller; // into C++. Such mismatches lead to confusing false reports. To avoid; // expensive workaround on msan we enforce initialization event in uncommon; // cases where it's allowed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:136,Security,sanitiz,sanitizer,136,"// We don't want to be too aggressive with the return checking, unless; // it's explicit in the code opts or we're using an appropriate sanitizer.; // Try to respect what the programmer intended.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:118,Usability,simpl,simply,118,"/// Add default attributes to a function, which have merge semantics under; /// -mlink-builtin-bitcode and should not simply overwrite any existing; /// attributes in the linked library.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:3,Performance,Optimiz,OptimizeNoneAttr,3,// OptimizeNoneAttr takes precedence over -Os or -Oz. No warning needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:35,Safety,unsafe,unsafe,35,// TODO: Are these all needed?; // unsafe/inf/nan/nsz are handled by instruction-level FastMathFlags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:208,Performance,optimiz,optimizations,208,"// Conservatively, mark all functions and calls in CUDA and OpenCL as; // convergent (meaning, they may call an intrinsically convergent op, such; // as __syncthreads() / barrier(), and so can't have certain optimizations; // applied around them). LLVM will remove this attribute where it safely; // can.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:289,Safety,safe,safely,289,"// Conservatively, mark all functions and calls in CUDA and OpenCL as; // convergent (meaning, they may call an intrinsically convergent op, such; // as __syncthreads() / barrier(), and so can't have certain optimizations; // applied around them). LLVM will remove this attribute where it safely; // can.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:52,Integrability,depend,depends,52,"// TODO: Some member pointers are `noundef`, but it depends on the ABI. For; // now, never mark them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:4,Testability,Test,Test,4,/// Test if it's legal to apply nofpclass for the given parameter type and it's; /// lowered IR type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:25,Availability,mask,mask,25,/// Return the nofpclass mask that can be applied to floating-point parameters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:250,Deployability,configurat,configuration,250,"/// Construct the IR attribute list of a function or call.; ///; /// When adding an attribute, please consider where it should be handled:; ///; /// - getDefaultFunctionAttributes is for attributes that are essentially; /// part of the global target configuration (but perhaps can be; /// overridden on a per-function basis). Adding attributes there; /// will cause them to also be set in frontends that build on Clang's; /// target-configuration logic, as well as for code defined in library; /// modules such as CUDA's libdevice.; ///; /// - ConstructAttributeList builds on top of getDefaultFunctionAttributes; /// and adds declaration-specific, convention-specific, and; /// frontend-specific logic. The last is of particular importance:; /// attributes that restrict how the frontend generates code must be; /// added here rather than getDefaultFunctionAttributes.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:433,Deployability,configurat,configuration,433,"/// Construct the IR attribute list of a function or call.; ///; /// When adding an attribute, please consider where it should be handled:; ///; /// - getDefaultFunctionAttributes is for attributes that are essentially; /// part of the global target configuration (but perhaps can be; /// overridden on a per-function basis). Adding attributes there; /// will cause them to also be set in frontends that build on Clang's; /// target-configuration logic, as well as for code defined in library; /// modules such as CUDA's libdevice.; ///; /// - ConstructAttributeList builds on top of getDefaultFunctionAttributes; /// and adds declaration-specific, convention-specific, and; /// frontend-specific logic. The last is of particular importance:; /// attributes that restrict how the frontend generates code must be; /// added here rather than getDefaultFunctionAttributes.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:250,Modifiability,config,configuration,250,"/// Construct the IR attribute list of a function or call.; ///; /// When adding an attribute, please consider where it should be handled:; ///; /// - getDefaultFunctionAttributes is for attributes that are essentially; /// part of the global target configuration (but perhaps can be; /// overridden on a per-function basis). Adding attributes there; /// will cause them to also be set in frontends that build on Clang's; /// target-configuration logic, as well as for code defined in library; /// modules such as CUDA's libdevice.; ///; /// - ConstructAttributeList builds on top of getDefaultFunctionAttributes; /// and adds declaration-specific, convention-specific, and; /// frontend-specific logic. The last is of particular importance:; /// attributes that restrict how the frontend generates code must be; /// added here rather than getDefaultFunctionAttributes.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:433,Modifiability,config,configuration,433,"/// Construct the IR attribute list of a function or call.; ///; /// When adding an attribute, please consider where it should be handled:; ///; /// - getDefaultFunctionAttributes is for attributes that are essentially; /// part of the global target configuration (but perhaps can be; /// overridden on a per-function basis). Adding attributes there; /// will cause them to also be set in frontends that build on Clang's; /// target-configuration logic, as well as for code defined in library; /// modules such as CUDA's libdevice.; ///; /// - ConstructAttributeList builds on top of getDefaultFunctionAttributes; /// and adds declaration-specific, convention-specific, and; /// frontend-specific logic. The last is of particular importance:; /// attributes that restrict how the frontend generates code must be; /// added here rather than getDefaultFunctionAttributes.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:447,Testability,log,logic,447,"/// Construct the IR attribute list of a function or call.; ///; /// When adding an attribute, please consider where it should be handled:; ///; /// - getDefaultFunctionAttributes is for attributes that are essentially; /// part of the global target configuration (but perhaps can be; /// overridden on a per-function basis). Adding attributes there; /// will cause them to also be set in frontends that build on Clang's; /// target-configuration logic, as well as for code defined in library; /// modules such as CUDA's libdevice.; ///; /// - ConstructAttributeList builds on top of getDefaultFunctionAttributes; /// and adds declaration-specific, convention-specific, and; /// frontend-specific logic. The last is of particular importance:; /// attributes that restrict how the frontend generates code must be; /// added here rather than getDefaultFunctionAttributes.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:697,Testability,log,logic,697,"/// Construct the IR attribute list of a function or call.; ///; /// When adding an attribute, please consider where it should be handled:; ///; /// - getDefaultFunctionAttributes is for attributes that are essentially; /// part of the global target configuration (but perhaps can be; /// overridden on a per-function basis). Adding attributes there; /// will cause them to also be set in frontends that build on Clang's; /// target-configuration logic, as well as for code defined in library; /// modules such as CUDA's libdevice.; ///; /// - ConstructAttributeList builds on top of getDefaultFunctionAttributes; /// and adds declaration-specific, convention-specific, and; /// frontend-specific logic. The last is of particular importance:; /// attributes that restrict how the frontend generates code must be; /// added here rather than getDefaultFunctionAttributes.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:38,Security,access,accesses,38,// Some ABIs may result in additional accesses to arguments that may; // otherwise not be present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:118,Modifiability,inherit,inherited,118,"// Don't use [[noreturn]], _Noreturn or [[no_builtin]] for a call to a; // virtual function. These attributes are not inherited by overloads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:102,Modifiability,variab,variable,102,// 'restrict' -> 'noalias' is done in EmitFunctionProlog when we; // have the corresponding parameter variable. It doesn't make; // sense to do it here because parameters are so messed up.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:95,Testability,test,testcases,95,"// TODO: We could add the byref attribute if not byval, but it would; // require updating many testcases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:95,Testability,test,test,95,"// For now, only add this when we have a byval argument.; // TODO: be less lazy about updating test cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:76,Usability,simpl,simplify,76,// FIXME: We no longer need the types from FunctionArgList; lift up and; // simplify.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:26,Modifiability,variab,variables,26,"// Aggregates and complex variables are accessed by reference. All we; // need to do is realign the value, if requested. Also, if the address; // may be aliased, copy it to ensure that the parameter variable is; // mutable and has a unique adress, as C requires.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:199,Modifiability,variab,variable,199,"// Aggregates and complex variables are accessed by reference. All we; // need to do is realign the value, if requested. Also, if the address; // may be aliased, copy it to ensure that the parameter variable is; // mutable and has a unique adress, as C requires.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:40,Security,access,accessed,40,"// Aggregates and complex variables are accessed by reference. All we; // need to do is realign the value, if requested. Also, if the address; // may be aliased, copy it to ensure that the parameter variable is; // mutable and has a unique adress, as C requires.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:3,Performance,Load,Load,3,// Load scalar value from indirect argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:27,Security,sanitiz,sanitizer,27,"// If alignment-assumption sanitizer is enabled, we do *not* add; // alignment attribute here, but emit normal alignment assumption,; // so the UBSAN check could function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:23,Performance,scalab,scalable,23,"// If we are casting a scalable 16 x i1 predicate vector to a fixed i8; // vector, bitcast the source and use a vector extract.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:21,Performance,optimiz,optimizer,21,"// Fast-isel and the optimizer generally like scalar values better than; // FCAs, so we flatten them if this is safe to do for this argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:112,Safety,safe,safe,112,"// Fast-isel and the optimizer generally like scalar values better than; // FCAs, so we flatten them if this is safe to do for this argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:3,Usability,Simpl,Simple,3,"// Simple case, just do a coerced store of the argument into the alloca.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:24,Modifiability,variab,variable,24,// Initialize the local variable appropriately.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:12,Safety,safe,safe,12,"// This is ""safe"" because we would have used a ConstantExpr otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:185,Performance,optimiz,optimization,185,"// If we emitted an assembly marker for this call (and the; // ARCEntrypoints field should have been set if so), go looking; // for that call. If we can't find it, we can't do this; // optimization. But it should always be the immediately previous; // instruction, unless we needed bitcasts around the call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:24,Performance,load,load,24,// Look for an ordinary load of 'self'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:21,Availability,down,down,21,"// Okay! Burn it all down. This relies for correctness on the; // assumption that the retain is emitted as part of the return and; // that thereafter everything is used ""linearly"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:228,Safety,avoid,avoid,228,"// If we're returning 'self', kill the initial retain. This is a; // heuristic attempt to ""encourage correctness"" in the really unfortunate; // case where we have a return of self during a dealloc and we desperately; // need to avoid the possible autorelease.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:279,Availability,mask,mask,279,"// Set the bits in `Bits`, which correspond to the value representations of; // the actual members of the record type `RTy`. Note that this function does; // not handle base classes, virtual tables, etc, since they cannot happen in; // CMSE function arguments or return. The bit mask corresponds to the target; // memory layout, i.e. it's endian dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:346,Integrability,depend,dependent,346,"// Set the bits in `Bits`, which correspond to the value representations of; // the actual members of the record type `RTy`. Note that this function does; // not handle base classes, virtual tables, etc, since they cannot happen in; // CMSE function arguments or return. The bit mask corresponds to the target; // memory layout, i.e. it's endian dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:16,Usability,clear,clear,16,"// Emit code to clear the bits in a record, which aren't a part of any user; // declared member, when the record is a function return.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:16,Usability,clear,clear,16,"// Emit code to clear the bits in a record, which aren't a part of any user; // declared member, when the record is a function argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:3,Usability,Clear,Clear,3,// Clear each element of the LLVM array.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:94,Performance,load,load,94,"// The internal return value temp always will have pointer-to-return-type; // type, just do a load.; // If there is a dominating store to ReturnValue, we can elide; // the load, zap the store, and usually zap the alloca.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:172,Performance,load,load,172,"// The internal return value temp always will have pointer-to-return-type; // type, just do a load.; // If there is a dominating store to ReturnValue, we can elide; // the load, zap the store, and usually zap the alloca.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:37,Performance,load,load,37,"// Otherwise, we have to do a simple load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:30,Usability,simpl,simple,30,"// Otherwise, we have to do a simple load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:3,Performance,Load,Load,3,// Load all of the coerced elements out into results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:29,Usability,clear,clear,29,"// For certain return types, clear padding bits, as they may reveal; // sensitive information.; // Small struct/union types are passed as integers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:29,Availability,avail,available,29,// A current decl may not be available when emitting vtable thunks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:54,Deployability,release,release,54,"// In ARC, move out of consumed arguments so that the release cleanup; // entered by StartFunction doesn't cause an over-release. This isn't; // optimal -O0 code generation, but it should get cleaned up when; // optimization is enabled. This also assumes that delegate calls are; // performed exactly once for a set of arguments, but that should be safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:121,Deployability,release,release,121,"// In ARC, move out of consumed arguments so that the release cleanup; // entered by StartFunction doesn't cause an over-release. This isn't; // optimal -O0 code generation, but it should get cleaned up when; // optimization is enabled. This also assumes that delegate calls are; // performed exactly once for a set of arguments, but that should be safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:212,Performance,optimiz,optimization,212,"// In ARC, move out of consumed arguments so that the release cleanup; // entered by StartFunction doesn't cause an over-release. This isn't; // optimal -O0 code generation, but it should get cleaned up when; // optimization is enabled. This also assumes that delegate calls are; // performed exactly once for a set of arguments, but that should be safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:283,Performance,perform,performed,283,"// In ARC, move out of consumed arguments so that the release cleanup; // entered by StartFunction doesn't cause an over-release. This isn't; // optimal -O0 code generation, but it should get cleaned up when; // optimization is enabled. This also assumes that delegate calls are; // performed exactly once for a set of arguments, but that should be safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:349,Safety,safe,safe,349,"// In ARC, move out of consumed arguments so that the release cleanup; // entered by StartFunction doesn't cause an over-release. This isn't; // optimal -O0 code generation, but it should get cleaned up when; // optimization is enabled. This also assumes that delegate calls are; // performed exactly once for a set of arguments, but that should be safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:38,Performance,load,load,38,"// For the most part, we just need to load the alloca, except that; // aggregate r-values are actually pointers to temporaries.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:3,Performance,Load,Load,3,// Load the value to writeback.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:169,Deployability,release,release,169,"// Perform the writeback.; // If we have a ""to use"" value, it's something we need to emit a use; // of. This has to be carefully threaded in: if it's done after the; // release it's potentially undefined behavior (and the optimizer; // will ignore it), and if it happens before the retain then the; // optimizer could move the release there.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:327,Deployability,release,release,327,"// Perform the writeback.; // If we have a ""to use"" value, it's something we need to emit a use; // of. This has to be carefully threaded in: if it's done after the; // release it's potentially undefined behavior (and the optimizer; // will ignore it), and if it happens before the retain then the; // optimizer could move the release there.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:3,Performance,Perform,Perform,3,"// Perform the writeback.; // If we have a ""to use"" value, it's something we need to emit a use; // of. This has to be carefully threaded in: if it's done after the; // release it's potentially undefined behavior (and the optimizer; // will ignore it), and if it happens before the retain then the; // optimizer could move the release there.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:222,Performance,optimiz,optimizer,222,"// Perform the writeback.; // If we have a ""to use"" value, it's something we need to emit a use; // of. This has to be carefully threaded in: if it's done after the; // release it's potentially undefined behavior (and the optimizer; // will ignore it), and if it happens before the retain then the; // optimizer could move the release there.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:302,Performance,optimiz,optimizer,302,"// Perform the writeback.; // If we have a ""to use"" value, it's something we need to emit a use; // of. This has to be carefully threaded in: if it's done after the; // release it's potentially undefined behavior (and the optimizer; // will ignore it), and if it happens before the retain then the; // optimizer could move the release there.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:3,Performance,Load,Load,3,// Load the old value (primitively).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:3,Deployability,Release,Release,3,// Release the old value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:3,Performance,Load,Loading,3,"// Loading an l-value can introduce a cleanup if the l-value is __weak,; // and that cleanup will be conditional if we can't prove that the l-value; // isn't null, so we need to register a dominating point so that the cleanups; // system will make valid IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:32,Performance,load,load,32,"// If we need to copy, then the load has to be conditional, which; // means we need control flow.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:3,Performance,Perform,Perform,3,// Perform a copy if necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:144,Availability,alive,alive,144,"// If optimization is enabled, and the value was held in a; // __strong variable, we need to tell the optimizer that this; // value has to stay alive until we're doing the store back.; // This is because the temporary is effectively unretained,; // and so otherwise we can violate the high-level semantics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:72,Modifiability,variab,variable,72,"// If optimization is enabled, and the value was held in a; // __strong variable, we need to tell the optimizer that this; // value has to stay alive until we're doing the store back.; // This is because the temporary is effectively unretained,; // and so otherwise we can violate the high-level semantics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:6,Performance,optimiz,optimization,6,"// If optimization is enabled, and the value was held in a; // __strong variable, we need to tell the optimizer that this; // value has to stay alive until we're doing the store back.; // This is because the temporary is effectively unretained,; // and so otherwise we can violate the high-level semantics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:102,Performance,optimiz,optimizer,102,"// If optimization is enabled, and the value was held in a; // __strong variable, we need to tell the optimizer that this; // value has to stay alive until we're doing the store back.; // This is because the temporary is effectively unretained,; // and so otherwise we can violate the high-level semantics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:8,Modifiability,variab,variable,8,"// This variable only captures *explicitly* written conventions, not those; // applied by default via command line flags or target defaults, such as; // thiscall, aapcs, stdcall via -mrtd, etc. Computing that correctly would; // require knowing if this is a C++ instance method or being able to see; // unprototyped FunctionTypes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:136,Modifiability,parameteriz,parameterized,136,"// If *Arg is an ObjCIndirectCopyRestoreExpr, check that either the types of; // the argument and parameter match or the objc method is parameterized.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:21,Integrability,depend,depend,21,"// In particular, we depend on it being the last arg in Args, and the; // objectsize bits depend on there only being one arg if !LeftToRight.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:90,Integrability,depend,depend,90,"// In particular, we depend on it being the last arg in Args, and the; // objectsize bits depend on there only being one arg if !LeftToRight.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:61,Safety,safe,safe,61,"// Since pointer argument are never emitted as LValue, it is safe to emit; // non-null argument check for r-value only.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:106,Safety,safe,safely,106,"// @llvm.objectsize should never have side-effects and shouldn't need; // destruction/cleanups, so we can safely ""emit"" it after its arg,; // regardless of right-to-leftness",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:72,Performance,optimiz,optimizer,72,"// In ObjC ARC mode with no ObjC ARC exception safety, tell the ARC; // optimizer it can aggressively ignore unwind edges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:47,Safety,safe,safety,47,"// In ObjC ARC mode with no ObjC ARC exception safety, tell the ARC; // optimizer it can aggressively ignore unwind edges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:12,Usability,simpl,simple,12,/// Emits a simple call (never an invoke) to the given no-arguments; /// runtime function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:12,Usability,simpl,simple,12,/// Emits a simple call (never an invoke) to the given runtime function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:62,Integrability,depend,depending,62,"/// Emits a call or invoke instruction to the given function, depending; /// on the current state of the EH stack.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:72,Performance,optimiz,optimizer,72,"// In ObjC ARC mode with no ObjC ARC exception safety, tell the ARC; // optimizer it can aggressively ignore unwind edges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:47,Safety,safe,safety,47,"// In ObjC ARC mode with no ObjC ARC exception safety, tell the ARC; // optimizer it can aggressively ignore unwind edges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:32,Energy Efficiency,power,power-of-,32,"// We may legitimately have non-power-of-2 alignment here.; // If so, this is UB land, emit it via `@llvm.assume` instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:131,Modifiability,variab,variable,131,"/// Emit alignment assumption.; /// This is a general fallback that we take if either there is an offset,; /// or the alignment is variable or we are sanitizing for alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:150,Security,sanitiz,sanitizing,150,"/// Emit alignment assumption.; /// This is a general fallback that we take if either there is an offset,; /// or the alignment is variable or we are sanitizing for alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:65,Usability,simpl,simplify,65,// FIXME: We no longer need the types from CallArgs; lift up and simplify.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:14,Safety,avoid,avoid,14,"// We want to avoid creating an unnecessary temporary+copy here;; // however, we need one in three cases:; // 1. If the argument is not byval, and we are required to copy the; // source. (This case doesn't occur on any common architecture.); // 2. If the argument is byval, RV is not sufficiently aligned, and; // we cannot force it to be sufficiently aligned.; // 3. If the argument is byval, but RV is not located in default; // or alloca address space.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:92,Performance,perform,perform,92,// For OpenCL even if RV is located in default or alloca address space; // we don't want to perform address space cast for it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:34,Performance,perform,perform,34,"// If the argument doesn't match, perform a bitcast to coerce it. This; // can happen due to trivial type mismatches.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:10,Safety,Avoid,Avoid,10,// FIXME: Avoid the conversion through memory if possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:21,Performance,optimiz,optimizer,21,"// Fast-isel and the optimizer generally like scalar values better than; // FCAs, so we flatten them if this is safe to do for this argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:112,Safety,safe,safe,112,"// Fast-isel and the optimizer generally like scalar values better than; // FCAs, so we flatten them if this is safe to do for this argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:174,Performance,load,loading,174,"// If the source type is smaller than the destination type of the; // coerce-to logic, copy the source value into a temp alloca the size; // of the destination type to allow loading all of it. The bits past; // the source value are left undef.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:80,Testability,log,logic,80,"// If the source type is smaller than the destination type of the; // coerce-to logic, copy the source value into a temp alloca the size; // of the destination type to allow loading all of it. The bits past; // the source value are left undef.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:45,Performance,load,loaded,45,"// In the simple case, just pass the coerced loaded value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:10,Usability,simpl,simple,10,"// In the simple case, just pass the coerced loaded value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:32,Usability,clear,clear,32,"// For certain parameter types, clear padding bits, as they may reveal; // sensitive information.; // Small struct/union types are passed as integer arrays.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:6,Performance,Perform,Perform,6,// 3. Perform the actual call.; // Deactivate any cleanups that we're supposed to do immediately before; // the call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:3,Testability,Assert,Assert,3,"// Assert that the arguments we computed match up. The IR verifier; // will catch this, but this is a common enough source of problems; // during IRGen changes that it's way better for debugging to catch; // it ourselves here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:3,Deployability,Update,Update,3,// Update the largest vector width if any arguments have vector types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:87,Integrability,depend,depend,87,"// If we made a temporary, be sure to clean up after ourselves. Note that we; // can't depend on being inside of an ExprWithCleanups, so we need to manually; // pop this cleanup later on. Being eager about this is OK, since this; // temporary is 'invisible' outside of the callee.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:3,Deployability,Update,Update,3,// Update largest vector width from the return type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:72,Performance,optimiz,optimizer,72,"// In ObjC ARC mode with no ObjC ARC exception safety, tell the ARC; // optimizer it can aggressively ignore unwind edges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:47,Safety,safe,safety,47,"// In ObjC ARC mode with no ObjC ARC exception safety, tell the ARC; // optimizer it can aggressively ignore unwind edges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:45,Availability,error,error,45,"// Add metadata if calling an __attribute__((error(""""))) or warning fn.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:82,Usability,clear,clear,82,"// 4. Finish the call.; // If the call doesn't return, finish the basic block and clear the; // insertion point; this allows the rest of IRGen to discard; // unreachable code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:3,Safety,Avoid,Avoid,3,// Avoid incompatibility with ASan which relies on the `noreturn`; // attribute to insert handler calls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:3,Performance,Perform,Perform,3,// Perform the swifterror writeback.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:34,Performance,perform,perform,34,"// If the argument doesn't match, perform a bitcast to coerce it. This; // can happen due to trivial type mismatches.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:37,Performance,scalab,scalable,37,"// If coercing a fixed vector from a scalable vector for ABI; // compatibility, and the types match, use the llvm.vector.extract; // intrinsic to perform the conversion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:146,Performance,perform,perform,146,"// If coercing a fixed vector from a scalable vector for ABI; // compatibility, and the types match, use the llvm.vector.extract; // intrinsic to perform the conversion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h:397,Integrability,wrap,wrap,397,"//===----- CGCall.h - Encapsulate calling convention details ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // These classes wrap the information about a call or function; // definition used to handle ABI compliancy.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h:8,Availability,avail,available,8,/// All available information about a concrete callee.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h:35,Performance,load,load,35,/// The argument is semantically a load from this l-value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h:436,Safety,unsafe,unsafe-fp-math,436,"/// Adds attributes to \p F according to our \p CodeGenOpts and \p LangOpts, as; /// though we had emitted it ourselves. We remove any attributes on F that; /// conflict with the attributes we add here.; ///; /// This is useful for adding attrs to bitcode modules that you want to link; /// with but don't control, such as CUDA's libdevice. When linking with such; /// a bitcode library, you might want to set e.g. its functions'; /// ""unsafe-fp-math"" attribute to match the attr of the functions you're; /// codegen'ing. Otherwise, LLVM will interpret the bitcode module's lack of; /// unsafe-fp-math attrs as tantamount to unsafe-fp-math=false, and then LLVM; /// will propagate unsafe-fp-math=false up to every transitive caller of a; /// function in the bitcode library!; ///; /// With the exception of fast-math attrs, this will only make the attributes; /// on the function more conservative. But it's unsafe to call this on a; /// function which relies on particular fast-math attributes for correctness.; /// It's up to you to ensure that this is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h:587,Safety,unsafe,unsafe-fp-math,587,"/// Adds attributes to \p F according to our \p CodeGenOpts and \p LangOpts, as; /// though we had emitted it ourselves. We remove any attributes on F that; /// conflict with the attributes we add here.; ///; /// This is useful for adding attrs to bitcode modules that you want to link; /// with but don't control, such as CUDA's libdevice. When linking with such; /// a bitcode library, you might want to set e.g. its functions'; /// ""unsafe-fp-math"" attribute to match the attr of the functions you're; /// codegen'ing. Otherwise, LLVM will interpret the bitcode module's lack of; /// unsafe-fp-math attrs as tantamount to unsafe-fp-math=false, and then LLVM; /// will propagate unsafe-fp-math=false up to every transitive caller of a; /// function in the bitcode library!; ///; /// With the exception of fast-math attrs, this will only make the attributes; /// on the function more conservative. But it's unsafe to call this on a; /// function which relies on particular fast-math attributes for correctness.; /// It's up to you to ensure that this is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h:625,Safety,unsafe,unsafe-fp-math,625,"/// Adds attributes to \p F according to our \p CodeGenOpts and \p LangOpts, as; /// though we had emitted it ourselves. We remove any attributes on F that; /// conflict with the attributes we add here.; ///; /// This is useful for adding attrs to bitcode modules that you want to link; /// with but don't control, such as CUDA's libdevice. When linking with such; /// a bitcode library, you might want to set e.g. its functions'; /// ""unsafe-fp-math"" attribute to match the attr of the functions you're; /// codegen'ing. Otherwise, LLVM will interpret the bitcode module's lack of; /// unsafe-fp-math attrs as tantamount to unsafe-fp-math=false, and then LLVM; /// will propagate unsafe-fp-math=false up to every transitive caller of a; /// function in the bitcode library!; ///; /// With the exception of fast-math attrs, this will only make the attributes; /// on the function more conservative. But it's unsafe to call this on a; /// function which relies on particular fast-math attributes for correctness.; /// It's up to you to ensure that this is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h:681,Safety,unsafe,unsafe-fp-math,681,"/// Adds attributes to \p F according to our \p CodeGenOpts and \p LangOpts, as; /// though we had emitted it ourselves. We remove any attributes on F that; /// conflict with the attributes we add here.; ///; /// This is useful for adding attrs to bitcode modules that you want to link; /// with but don't control, such as CUDA's libdevice. When linking with such; /// a bitcode library, you might want to set e.g. its functions'; /// ""unsafe-fp-math"" attribute to match the attr of the functions you're; /// codegen'ing. Otherwise, LLVM will interpret the bitcode module's lack of; /// unsafe-fp-math attrs as tantamount to unsafe-fp-math=false, and then LLVM; /// will propagate unsafe-fp-math=false up to every transitive caller of a; /// function in the bitcode library!; ///; /// With the exception of fast-math attrs, this will only make the attributes; /// on the function more conservative. But it's unsafe to call this on a; /// function which relies on particular fast-math attributes for correctness.; /// It's up to you to ensure that this is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h:908,Safety,unsafe,unsafe,908,"/// Adds attributes to \p F according to our \p CodeGenOpts and \p LangOpts, as; /// though we had emitted it ourselves. We remove any attributes on F that; /// conflict with the attributes we add here.; ///; /// This is useful for adding attrs to bitcode modules that you want to link; /// with but don't control, such as CUDA's libdevice. When linking with such; /// a bitcode library, you might want to set e.g. its functions'; /// ""unsafe-fp-math"" attribute to match the attr of the functions you're; /// codegen'ing. Otherwise, LLVM will interpret the bitcode module's lack of; /// unsafe-fp-math attrs as tantamount to unsafe-fp-math=false, and then LLVM; /// will propagate unsafe-fp-math=false up to every transitive caller of a; /// function in the bitcode library!; ///; /// With the exception of fast-math attrs, this will only make the attributes; /// on the function more conservative. But it's unsafe to call this on a; /// function which relies on particular fast-math attributes for correctness.; /// It's up to you to ensure that this is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h:1055,Safety,safe,safe,1055,"/// Adds attributes to \p F according to our \p CodeGenOpts and \p LangOpts, as; /// though we had emitted it ourselves. We remove any attributes on F that; /// conflict with the attributes we add here.; ///; /// This is useful for adding attrs to bitcode modules that you want to link; /// with but don't control, such as CUDA's libdevice. When linking with such; /// a bitcode library, you might want to set e.g. its functions'; /// ""unsafe-fp-math"" attribute to match the attr of the functions you're; /// codegen'ing. Otherwise, LLVM will interpret the bitcode module's lack of; /// unsafe-fp-math attrs as tantamount to unsafe-fp-math=false, and then LLVM; /// will propagate unsafe-fp-math=false up to every transitive caller of a; /// function in the bitcode library!; ///; /// With the exception of fast-math attrs, this will only make the attributes; /// on the function more conservative. But it's unsafe to call this on a; /// function which relies on particular fast-math attributes for correctness.; /// It's up to you to ensure that this is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCall.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:65,Energy Efficiency,allocate,allocated,65,/// Return the smallest possible amount of storage that might be allocated; /// starting from the beginning of an object of a particular class.; ///; /// This may be smaller than sizeof(RD) if RD has virtual base classes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:589,Modifiability,variab,variables,589,"// If the class is properly aligned, assume the target offset is, too.; //; // This actually isn't necessarily the right thing to do --- if the; // class is a complete object, but it's only properly aligned for a; // base subobject, then the alignments of things relative to it are; // probably off as well. (Note that this requires the alignment of; // the target to be greater than the NV alignment of the derived; // class.); //; // However, our approach to this kind of under-alignment can only; // ever be best effort; after all, we're never going to propagate; // alignments through variables or parameters. Note, in particular,; // that constructing a polymorphic type in an address that's less; // than pointer-aligned will generally trap in the constructor,; // unless we someday add some sort of attribute to change the; // assumed alignment of 'this'. So our goal here is pretty much; // just to allow the user to explicitly say that a pointer is; // under-aligned and then safely access its fields and vtables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:659,Modifiability,polymorphi,polymorphic,659,"// If the class is properly aligned, assume the target offset is, too.; //; // This actually isn't necessarily the right thing to do --- if the; // class is a complete object, but it's only properly aligned for a; // base subobject, then the alignments of things relative to it are; // probably off as well. (Note that this requires the alignment of; // the target to be greater than the NV alignment of the derived; // class.); //; // However, our approach to this kind of under-alignment can only; // ever be best effort; after all, we're never going to propagate; // alignments through variables or parameters. Note, in particular,; // that constructing a polymorphic type in an address that's less; // than pointer-aligned will generally trap in the constructor,; // unless we someday add some sort of attribute to change the; // assumed alignment of 'this'. So our goal here is pretty much; // just to allow the user to explicitly say that a pointer is; // under-aligned and then safely access its fields and vtables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:985,Safety,safe,safely,985,"// If the class is properly aligned, assume the target offset is, too.; //; // This actually isn't necessarily the right thing to do --- if the; // class is a complete object, but it's only properly aligned for a; // base subobject, then the alignments of things relative to it are; // probably off as well. (Note that this requires the alignment of; // the target to be greater than the NV alignment of the derived; // class.); //; // However, our approach to this kind of under-alignment can only; // ever be best effort; after all, we're never going to propagate; // alignments through variables or parameters. Note, in particular,; // that constructing a polymorphic type in an address that's less; // than pointer-aligned will generally trap in the constructor,; // unless we someday add some sort of attribute to change the; // assumed alignment of 'this'. So our goal here is pretty much; // just to allow the user to explicitly say that a pointer is; // under-aligned and then safely access its fields and vtables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:992,Security,access,access,992,"// If the class is properly aligned, assume the target offset is, too.; //; // This actually isn't necessarily the right thing to do --- if the; // class is a complete object, but it's only properly aligned for a; // base subobject, then the alignments of things relative to it are; // probably off as well. (Note that this requires the alignment of; // the target to be greater than the NV alignment of the derived; // class.); //; // However, our approach to this kind of under-alignment can only; // ever be best effort; after all, we're never going to propagate; // alignments through variables or parameters. Note, in particular,; // that constructing a polymorphic type in an address that's less; // than pointer-aligned will generally trap in the constructor,; // unless we someday add some sort of attribute to change the; // assumed alignment of 'this'. So our goal here is pretty much; // just to allow the user to explicitly say that a pointer is; // under-aligned and then safely access its fields and vtables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:18,Availability,down,down,18,"// Shift and cast down to the base type.; // TODO: for complete types, this should be possible with a GEP.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:3,Testability,Assert,Assert,3,// Assert that we have something to do.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:156,Availability,down,down,156,"// Sema has done some convenient canonicalization here: if the; // access path involved any virtual steps, the conversion path will; // *start* with a step down to the correct virtual base subobject,; // and hence will not require any further steps.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:67,Security,access,access,67,"// Sema has done some convenient canonicalization here: if the; // access path involved any virtual steps, the conversion path will; // *start* with a step down to the correct virtual base subobject,; // and hence will not require any further steps.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:163,Security,access,accesses,163,"// If there's a virtual step, we can sometimes ""devirtualize"" it.; // For now, that's limited to when the derived type is final.; // TODO: ""devirtualize"" this for accesses to known-complete objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:40,Performance,load,load,40,// Skip over the offset (and the vtable load) if we're supposed to; // null-check the pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:50,Performance,load,load,50,"// If this is a delegating constructor call, just load the VTT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:237,Security,access,access,237,"// Black-list all explicit and implicit references to 'this'.; //; // Do we need to worry about external references to 'this' derived; // from arbitrary code? If so, then anything which runs arbitrary; // external code might potentially access the vtable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:75,Security,access,accesses,75,"// If the initializer for the base (other than the constructor; // itself) accesses 'this' in any way, we need to initialize the; // vtables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:58,Availability,down,down,58,"// If we are initializing an anonymous union field, drill down to the field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:164,Performance,perform,perform,164,"// Special case: if we are in a copy or move constructor, and we are copying; // an array of PODs or classes with trivial copy constructors, ignore the; // AST and perform the copy we know is equivalent.; // FIXME: This is hacky at best... if we had a bit more explicit information; // in the AST, we could generalize it more easily.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:113,Performance,optimiz,optimization,113,"/// Checks whether the given constructor is a valid subject for the; /// complete-to-base constructor delegation optimization, i.e.; /// emitting the complete constructor as a simple call to the base; /// constructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:176,Usability,simpl,simple,176,"/// Checks whether the given constructor is a valid subject for the; /// complete-to-base constructor delegation optimization, i.e.; /// emitting the complete constructor as a simple call to the base; /// constructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:115,Modifiability,variab,variables,115,"// Currently we disable the optimization for classes with virtual; // bases because (1) the addresses of parameter variables need to be; // consistent across all initializers but (2) the delegate function; // call necessarily creates a second copy of the parameter variable.; //; // The limiting example (purely theoretical AFAIK):; // struct A { A(int &c) { c++; } };; // struct B : virtual A {; // B(int count) : A(count) { printf(""%d\n"", count); }; // };; // ...although even this example could in principle be emitted as a; // delegation since the address of the parameter doesn't escape.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:265,Modifiability,variab,variable,265,"// Currently we disable the optimization for classes with virtual; // bases because (1) the addresses of parameter variables need to be; // consistent across all initializers but (2) the delegate function; // call necessarily creates a second copy of the parameter variable.; //; // The limiting example (purely theoretical AFAIK):; // struct A { A(int &c) { c++; } };; // struct B : virtual A {; // B(int count) : A(count) { printf(""%d\n"", count); }; // };; // ...although even this example could in principle be emitted as a; // delegation since the address of the parameter doesn't escape.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:28,Performance,optimiz,optimization,28,"// Currently we disable the optimization for classes with virtual; // bases because (1) the addresses of parameter variables need to be; // consistent across all initializers but (2) the delegate function; // call necessarily creates a second copy of the parameter variable.; //; // The limiting example (purely theoretical AFAIK):; // struct A { A(int &c) { c++; } };; // struct B : virtual A {; // B(int count) : A(count) { printf(""%d\n"", count); }; // };; // ...although even this example could in principle be emitted as a; // delegation since the address of the parameter doesn't escape.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:469,Performance,optimiz,optimization,469,"// TODO: white-list trivial vbase initializers. This case wouldn't; // be subject to the restrictions below.; // TODO: white-list cases where:; // - there are no non-reference parameters to the constructor; // - the initializers don't access any non-reference parameters; // - the initializers don't take the address of non-reference; // parameters; // - etc.; // If we ever add any of the above cases, remember that:; // - function-try-blocks will always exclude this optimization; // - we need to perform the constructor prologue and cleanup in; // EmitConstructorBody.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:499,Performance,perform,perform,499,"// TODO: white-list trivial vbase initializers. This case wouldn't; // be subject to the restrictions below.; // TODO: white-list cases where:; // - there are no non-reference parameters to the constructor; // - the initializers don't access any non-reference parameters; // - the initializers don't take the address of non-reference; // parameters; // - etc.; // If we ever add any of the above cases, remember that:; // - function-try-blocks will always exclude this optimization; // - we need to perform the constructor prologue and cleanup in; // EmitConstructorBody.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:235,Security,access,access,235,"// TODO: white-list trivial vbase initializers. This case wouldn't; // be subject to the restrictions below.; // TODO: white-list cases where:; // - there are no non-reference parameters to the constructor; // - the initializers don't access any non-reference parameters; // - the initializers don't take the address of non-reference; // parameters; // - etc.; // If we ever add any of the above cases, remember that:; // - function-try-blocks will always exclude this optimization; // - we need to perform the constructor prologue and cleanup in; // EmitConstructorBody.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:23,Performance,optimiz,optimization,23,"// We also disable the optimization for variadic functions because; // it's impossible to ""re-pass"" varargs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:79,Performance,optimiz,optimization,79,"// Before we go any further, try the complete->base constructor; // delegation optimization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:210,Performance,perform,performing,210,/// RAII object to indicate that codegen is copying the value representation; /// instead of the object representation. Useful when copying a struct or; /// class which has uninitialized members and we're only performing; /// lvalue-to-rvalue conversion on the object but not its members.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:28,Integrability,rout,routine,28,/// EmitCtorPrologue - This routine generates necessary code to initialize; /// base classes and non-static data members belonging to this constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:138,Security,validat,validated,138,"// For an abstract class, non-base destructors are never used (and can't; // be emitted in general, because vbase dtors may not have been validated; // by Sema), but the Itanium ABI doesn't make them optional and Clang may; // in fact emit references to them from other compilations, so emit them; // as functions containing a trap instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:141,Performance,optimiz,optimization,141,"// If this is the complete variant, just invoke the base variant;; // the epilogue will destruct the virtual bases. But we can't do; // this optimization if the body is a function-try-block, because; // we'd introduce *two* handler blocks. In the Microsoft ABI, we; // always delegate because we might not have a definition in this TU.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:39,Security,access,access,39,// Poison the vtable pointer such that access after the base; // and member destructors are invoked is invalid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:9,Security,Sanitiz,SanitizeMemoryUseAfterDtor,9,"// Under SanitizeMemoryUseAfterDtor, poison the trivial base class; // memory. For non-trival base classes the same is done in the class; // destructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:61,Modifiability,inherit,inherits,61,"// Poison the vtable pointer if it has no virtual bases, but inherits; // virtual functions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:27,Security,access,access,27,"// Poison fields such that access after their destructors are; // invoked, and before the base class destructor runs, is invalid.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:301,Usability,clear,clear,301,"// It's legal for numElements to be zero. This can happen both; // dynamically, because x can be zero in 'new A[x]', and statically,; // because of GCC extensions that permit zero-length arrays. There; // are probably legitimate places where we could assume that this; // doesn't happen, but it's not clear that it's worth it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:3,Performance,Optimiz,Optimize,3,// Optimize for a constant count.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:3,Deployability,Patch,Patch,3,// Patch the earlier check to skip over the loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:50,Safety,safe,safe,50,"// If the parameters are callee-cleanup, it's not safe to forward.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:668,Performance,load,loads,668,"// Generate vtable assumptions if we're constructing a complete object; // with a vtable. We don't do this for base subobjects for two reasons:; // first, it's incorrect for classes with virtual bases, and second, we're; // about to overwrite the vptrs anyway.; // We also have to make sure if we can refer to vtable:; // - Otherwise we can refer to vtable if it's safe to speculatively emit.; // FIXME: If vtable is used by ctor/dtor, or if vtable is external and we are; // sure that definition of vtable is not hidden,; // then we are always safe to refer to it.; // FIXME: It looks like InstCombine is very inefficient on dealing with; // assumes. Make assumption loads require -fstrict-vtable-pointers temporarily.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:365,Safety,safe,safe,365,"// Generate vtable assumptions if we're constructing a complete object; // with a vtable. We don't do this for base subobjects for two reasons:; // first, it's incorrect for classes with virtual bases, and second, we're; // about to overwrite the vptrs anyway.; // We also have to make sure if we can refer to vtable:; // - Otherwise we can refer to vtable if it's safe to speculatively emit.; // FIXME: If vtable is used by ctor/dtor, or if vtable is external and we are; // sure that definition of vtable is not hidden,; // then we are always safe to refer to it.; // FIXME: It looks like InstCombine is very inefficient on dealing with; // assumes. Make assumption loads require -fstrict-vtable-pointers temporarily.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:545,Safety,safe,safe,545,"// Generate vtable assumptions if we're constructing a complete object; // with a vtable. We don't do this for base subobjects for two reasons:; // first, it's incorrect for classes with virtual bases, and second, we're; // about to overwrite the vptrs anyway.; // We also have to make sure if we can refer to vtable:; // - Otherwise we can refer to vtable if it's safe to speculatively emit.; // FIXME: If vtable is used by ctor/dtor, or if vtable is external and we are; // sure that definition of vtable is not hidden,; // then we are always safe to refer to it.; // FIXME: It looks like InstCombine is very inefficient on dealing with; // assumes. Make assumption loads require -fstrict-vtable-pointers temporarily.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:106,Modifiability,inherit,inherited,106,// Nothing to do; this construction is not responsible for constructing; // the base class containing the inherited constructor.; // FIXME: Can we just pass undef's for the remaining arguments if we don't; // have constructor variants?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:48,Integrability,inject,inject,48,// The inheriting constructor was inlined; just inject its arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:7,Modifiability,inherit,inheriting,7,// The inheriting constructor was inlined; just inject its arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:48,Security,inject,inject,48,// The inheriting constructor was inlined; just inject its arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:7,Modifiability,inherit,inheriting,7,// The inheriting constructor was not inlined. Emit delegating arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:42,Modifiability,inherit,inherited,42,// Save the arguments to be passed to the inherited constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:10,Usability,simpl,simplified,10,// Emit a simplified prolog. We only need to emit the implicit params.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:89,Performance,optimiz,optimization,89,"// Finally, store the address point. Use the same LLVM types as the field to; // support optimization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:518,Security,secur,security,518,"// If a class has a single non-virtual base and does not introduce or override; // virtual member functions or fields, it will have the same layout as its base.; // This function returns the least derived such class.; //; // Casting an instance of a base class to such a derived class is technically; // undefined behavior, but it is a relatively common hack for introducing member; // functions on class instances with specific properties (e.g. llvm::Operator); // that works under most compilers and should not have security implications, so; // we allow it by default. It can be disabled with -fsanitize=cfi-cast-strict.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:21,Testability,test,test,21,// Don't insert type test assumes if we are forcing public; // visibility.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:83,Testability,test,test,83,"// If we already know that the call has hidden LTO visibility, emit; // @llvm.type.test(). Otherwise emit @llvm.public.type.test(), which WPD; // will convert to @llvm.type.test() if we assert at link time that we have; // whole program visibility.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:124,Testability,test,test,124,"// If we already know that the call has hidden LTO visibility, emit; // @llvm.type.test(). Otherwise emit @llvm.public.type.test(), which WPD; // will convert to @llvm.type.test() if we assert at link time that we have; // whole program visibility.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:173,Testability,test,test,173,"// If we already know that the call has hidden LTO visibility, emit; // @llvm.type.test(). Otherwise emit @llvm.public.type.test(), which WPD; // will convert to @llvm.type.test() if we assert at link time that we have; // whole program visibility.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:186,Testability,assert,assert,186,"// If we already know that the call has hidden LTO visibility, emit; // @llvm.type.test(). Otherwise emit @llvm.public.type.test(), which WPD; // will convert to @llvm.type.test() if we assert at link time that we have; // whole program visibility.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:50,Performance,perform,perform,50,"/// Given a saved r-value produced by SaveRValue, perform the code; /// necessary to restore it to usability at the current insertion; /// point.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:99,Usability,usab,usability,99,"/// Given a saved r-value produced by SaveRValue, perform the code; /// necessary to restore it to usability at the current insertion; /// point.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:12,Modifiability,variab,variable,12,// Create a variable to decide whether the cleanup needs to be run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:115,Modifiability,variab,variable,115,"// Don't spill static allocas, they dominate all cleanups. These are created; // by binding a reference to a local variable or temporary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:130,Modifiability,extend,extended,130,"/// Pops cleanup blocks until the given savepoint is reached, then add the; /// cleanups from the given savepoint in the lifetime-extended cleanups stack.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:16,Energy Efficiency,reduce,reduce,16,"/// Attempts to reduce a cleanup's entry block to a fallthrough. This; /// is basically llvm::MergeBlockIntoPredecessor, except; /// simplified/optimized for the tighter constraints on cleanup blocks.; ///; /// Returns the new block, whatever it is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:144,Performance,optimiz,optimized,144,"/// Attempts to reduce a cleanup's entry block to a fallthrough. This; /// is basically llvm::MergeBlockIntoPredecessor, except; /// simplified/optimized for the tighter constraints on cleanup blocks.; ///; /// Returns the new block, whatever it is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:133,Usability,simpl,simplified,133,"/// Attempts to reduce a cleanup's entry block to a fallthrough. This; /// is basically llvm::MergeBlockIntoPredecessor, except; /// simplified/optimized for the tighter constraints on cleanup blocks.; ///; /// Returns the new block, whatever it is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:30,Performance,load,load,30,"// If there's an active flag, load it and skip the cleanup if it's; // false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:27,Performance,load,load,27,// The switch operand is a load from the cleanup-dest alloca.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:15,Performance,load,load,15,// Destroy the load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:77,Modifiability,rewrite,rewrite,77,"// If we have a prebranched fallthrough into an inactive normal; // cleanup, rewrite it so that it leads to the appropriate place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:174,Safety,avoid,avoids,174,"// Otherwise, we need to make a new block. If the normal cleanup; // isn't being used at all, we could actually reuse the normal; // entry block, but this is simpler, and it avoids conflicts with; // dead optimistic fixup branches.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:158,Usability,simpl,simpler,158,"// Otherwise, we need to make a new block. If the normal cleanup; // isn't being used at all, we could actually reuse the normal; // entry block, but this is simpler, and it avoids conflicts with; // dead optimistic fixup branches.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:3,Safety,safe,safe,3,// safe because there are no fixups,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:94,Integrability,depend,depending,94,"// Copy the cleanup emission data out. This uses either a stack; // array or malloc'd memory, depending on the size, which is; // behavior that SmallVector would provide, if we could use it; // here. Unfortunately, if you ask for a SmallVector<char>, the; // alignment isn't sufficient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:23,Usability,clear,clear,23,"// Otherwise, save and clear the IP if we don't have fallthrough; // because the cleanup is inactive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:72,Integrability,rout,route,72,"// If there's exactly one branch-after and no other threads,; // we can route it without a switch.; // Skip for SEH, since ExitSwitch is used to generate code to indicate; // abnormal termination. (SEH: Except _leave and fall-through at; // the end, all other exits in a _try (return/goto/continue/break); // are considered as abnormal terminations, using NormalCleanupDestSlot; // to indicate abnormal termination)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:167,Usability,clear,cleared,167,"// Prebranched fallthrough was forwarded earlier.; // Non-prebranched fallthrough doesn't need to be forwarded.; // Either way, all we need to do is restore the IP we cleared before.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:100,Deployability,patch,patch,100,"// If it did invalidate those pointers, and NormalEntry was the same; // as NormalExit, go back and patch up the fixups.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:238,Usability,clear,clears,238,"/// Terminate the current block by emitting a branch which might leave; /// the current cleanup-protected scope. The target scope may not yet; /// be known, in which case this will require a fixup.; ///; /// As a side-effect, this method clears the insertion point.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:58,Modifiability,Config,Configure,58,/// The given cleanup block is changing activation state. Configure a; /// cleanup variable if necessary.; ///; /// It would be good if we had some way of determining if there were; /// extra uses *after* the change-over point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:83,Modifiability,variab,variable,83,/// The given cleanup block is changing activation state. Configure a; /// cleanup variable if necessary.; ///; /// It would be good if we had some way of determining if there were; /// extra uses *after* the change-over point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:31,Integrability,depend,depending,31,// Initialize to true or false depending on whether it was; // active up to this point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h:125,Integrability,wrap,wrapper,125,"/// The MS C++ ABI needs a pointer to RTTI data plus some flags to describe the; /// type of a catch handler, so we use this wrapper.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h:38,Testability,test,test,38,/// Whether the normal cleanup should test the activation flag.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h:34,Testability,test,test,34,/// Whether the EH cleanup should test the activation flag.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h:24,Modifiability,flexible,flexible,24,"// In effect, we have a flexible array member; // Handler Handlers[0];; // But that's only standard in C99, not C++, so we have to do; // annoying pointer arithmetic instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h:3,Usability,Clear,Clear,3,// Clear all handler blocks.; // FIXME: it's better to always call clearHandlerBlocks in DTOR and have a; // 'takeHandler' or some such function which removes ownership from the; // EHCatchScope object if the handlers should live longer than EHCatchScope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h:67,Usability,clear,clearHandlerBlocks,67,// Clear all handler blocks.; // FIXME: it's better to always call clearHandlerBlocks in DTOR and have a; // 'takeHandler' or some such function which removes ownership from the; // EHCatchScope object if the handlers should live longer than EHCatchScope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h:19,Modifiability,variab,variable,19,/// An optional i1 variable indicating whether this cleanup has been; /// activated yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h:106,Energy Efficiency,allocate,allocated,106,/// Extra information required for cleanups that have resolved; /// branches through them. This has to be allocated on the side; /// because everything on the cleanup stack has be trivially; /// movable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h:96,Testability,assert,asserted,96,"// NOTE: there's a bunch of different data classes tacked on after an; // EHCleanupScope. It is asserted (in EHScopeStack::pushCleanup*) that; // they don't require greater alignment than ScopeStackAlignment. So,; // EHCleanupScope ought to have alignment equal to that -- not more; // (would be misaligned by the stack allocator), and not less (would; // break the appended classes).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h:25,Modifiability,flexible,flexible,25,// Essentially ends in a flexible array member:; // llvm::Value *FilterTypes[0];,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:120,Modifiability,variab,variable,120,"// A temporary i1 alloca that stores whether 'await_resume' threw an; // exception. If it did, 'true' is stored in this variable, and the coroutine; // body must be skipped. If the promise type does not define an exception; // handler, this is null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:86,Integrability,wrap,wrap,86,"// Stores the last emitted coro.free for the deallocate expressions, we use it; // to wrap dealloc code with if(auto mem = coro.free) dealloc(mem).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:713,Usability,resume,resumed,713,"// Emit suspend expression which roughly looks like:; //; // auto && x = CommonExpr();; // if (!x.await_ready()) {; // llvm_coro_save();; // x.await_suspend(...); (*); // llvm_coro_suspend(); (**); // }; // x.await_resume();; //; // where the result of the entire expression is the result of x.await_resume(); //; // (*) If x.await_suspend return type is bool, it allows to veto a suspend:; // if (x.await_suspend(...)); // llvm_coro_suspend();; //; // (**) llvm_coro_suspend() encodes three possible continuations as; // a switch instruction:; //; // %where-to = call i8 @llvm.coro.suspend(...); // switch i8 %where-to, label %coro.ret [ ; jump to epilogue to suspend; // i8 0, label %yield.ready ; go here when resumed; // i8 1, label %yield.cleanup ; go here when destroyed; // ]; //; // See llvm's docs/Coroutines.rst for more details.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:27,Testability,log,logic,27,"// Otherwise, emit suspend logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:109,Safety,avoid,avoid,109,"// Exception handling requires additional IR. If the 'await_resume' function; // is marked as 'noexcept', we avoid generating this additional IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:57,Usability,Resume,ResumeEHVar,57,// We don't use EmitCXXTryStmt here. We need to store to ResumeEHVar that; // doesn't exist in the body.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:54,Integrability,wrap,wrapping,54,// Is it possible for RE to be a CXXBindTemporaryExpr wrapping; // a MemberCallExpr?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:128,Usability,resume,resumed,128,// We will insert coro.end to cut any of the destructors for objects that; // do not need to be destroyed once the coroutine is resumed.; // See llvm/docs/Coroutines.rst for more details about coro.end.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:122,Usability,resume,resume,122,"// Otherwise, (landingpad model), create a conditional branch that leads; // either to a cleanup block or a block with EH resume instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:179,Safety,safe,safe,179,"// Emit ""if (coro.free(CoroId, CoroBegin)) Deallocate;""; // Note: That deallocation will be emitted twice: once for a normal exit and; // once for exceptional exit. This usage is safe because Deallocate does not; // contain any declarations. The SubStmtBuilder::makeNewAndDeleteExpr(); // builds a single call to a deallocation function which is safe to emit; // multiple times.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:346,Safety,safe,safe,346,"// Emit ""if (coro.free(CoroId, CoroBegin)) Deallocate;""; // Note: That deallocation will be emitted twice: once for a normal exit and; // once for exceptional exit. This usage is safe because Deallocate does not; // contain any declarations. The SubStmtBuilder::makeNewAndDeleteExpr(); // builds a single call to a deallocation function which is safe to emit; // multiple times.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:14,Performance,perform,performs,14,"// When true, performs RVO for the return object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:240,Integrability,depend,depending,240,"// The call to get_­return_­object is sequenced before the call to; // initial_­suspend and is invoked at most once, but there are caveats; // regarding on whether the prvalue result object may be initialized; // directly/eager or delayed, depending on the types involved.; //; // More info at https://github.com/cplusplus/papers/issues/1414; //; // The general cases:; // 1. Same type of get_return_object and coroutine return type (direct; // emission):; // - Constructed in the return slot.; // 2. Different types (delayed emission):; // - Constructed temporary object prior to initial suspend initialized with; // a call to get_return_object(); // - When coroutine needs to to return to the caller and needs to construct; // return value for the coroutine it is initialized with expiring value of; // the temporary obtained above.; //; // Direct emission for void returning coroutines or GROs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:281,Availability,avail,available,281,"// The gro variable has to outlive coroutine frame and coroutine promise, but,; // it can only be initialized after coroutine promise was created, thus, we; // split its emission in two parts. EmitGroAlloca emits an alloca and sets up; // cleanups. Later when coroutine promise is available we initialize the gro; // and sets the flag that the cleanup is now active.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:11,Modifiability,variab,variable,11,"// The gro variable has to outlive coroutine frame and coroutine promise, but,; // it can only be initialized after coroutine promise was created, thus, we; // split its emission in two parts. EmitGroAlloca emits an alloca and sets up; // cleanups. Later when coroutine promise is available we initialize the gro; // and sets the flag that the cleanup is now active.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:118,Energy Efficiency,reduce,reduce,118,// ReturnValue should be valid as long as the coroutine's return type; // is not void. The assertion could help us to reduce the check later.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:91,Testability,assert,assertion,91,// ReturnValue should be valid as long as the coroutine's return type; // is not void. The assertion could help us to reduce the check later.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:23,Energy Efficiency,allocate,allocated,23,// No Gro variable was allocated. Simply emit the call to; // get_return_object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:10,Modifiability,variab,variable,10,// No Gro variable was allocated. Simply emit the call to; // get_return_object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:34,Usability,Simpl,Simply,34,// No Gro variable was allocated. Simply emit the call to; // get_return_object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:21,Availability,failure,failure,21,// Handle allocation failure if 'ReturnStmtOnAllocFailure' was provided.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:3,Deployability,Update,Update,3,// Update CoroId to refer to the promise. We could not do it earlier because; // promise local variable was not emitted yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:95,Modifiability,variab,variable,95,// Update CoroId to refer to the promise. We could not do it earlier because; // promise local variable was not emitted yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:77,Usability,resume,resume,77,"// Emit coro.end before getReturnStmt (and parameter destructors), since; // resume and destroy parts of the coroutine should not include them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:32,Deployability,patch,patch,32,// Emit coroutine intrinsic and patch up arguments of the token type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:174,Deployability,patch,patch,174,"// The following three intrinsics take a token parameter referring to a token; // returned by earlier call to @llvm.coro.id. Since we cannot represent it in; // builtins, we patch it up here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:185,Deployability,update,update,185,"// Note: The following code is to enable to emit coro.id and coro.begin by; // hand to experiment with coroutines in C.; // If we see @llvm.coro.id remember it in the CoroData. We will update; // coro.alloc, coro.begin and coro.free intrinsics to refer to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:26,Integrability,Interface,Interface,26,"//===----- CGCUDANV.cpp - Interface to NVIDIA CUDA Runtime ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This provides a class for CUDA code generation targeting the NVIDIA CUDA; // runtime library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:33,Testability,stub,stubs,33,/// Keeps track of kernel launch stubs and handles emitted in this module,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:3,Testability,stub,stub,3,// stub function to help launch kernel,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:159,Testability,stub,stub,159,"// Map a kernel mangled name to a symbol for identifying kernel in host code; // For CUDA, the symbol for identifying the kernel is the same as the device; // stub function. For HIP, they are different.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:37,Testability,stub,stub,37,// Map a kernel handle to the kernel stub.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:19,Modifiability,variab,variable,19,/// Keeps track of variable containing handle of GPU binary. Populated by; /// ModuleCtorFunction() and used to create corresponding cleanup calls in; /// ModuleDtorFunction(),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:46,Testability,stub,stubs,46,/// Creates a function to register all kernel stubs generated in this module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:22,Modifiability,variab,variables,22,/// Transform managed variables for device compilation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:35,Modifiability,variab,variable,35,// D could be either a kernel or a variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:54,Modifiability,variab,variable,54,// Make unique name for device side static file-scope variable for HIP.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:153,Energy Efficiency,allocate,allocate,153,"// Build the shadow stack entry at the very start of the function.; // Calculate amount of space we will need for all arguments. If we have no; // args, allocate a single pointer so we still have a valid pointer to the; // argument array that we can pass to runtime, even if it will be unused.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:48,Energy Efficiency,allocate,allocated,48,// Store pointers to the arguments in a locally allocated launch_args.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:87,Integrability,depend,depends,87,"// Lookup cudaLaunchKernel/hipLaunchKernel function.; // HIP kernel launching API name depends on -fgpu-default-stream option. For; // the default value 'legacy', it is hipLaunchKernel. For 'per-thread',; // it is hipLaunchKernel_spt.; // cudaError_t cudaLaunchKernel(const void *func, dim3 gridDim, dim3 blockDim,; // void **args, size_t sharedMem,; // cudaStream_t stream);; // hipError_t hipLaunchKernel[_spt](const void *func, dim3 gridDim,; // dim3 blockDim, void **args,; // size_t sharedMem, hipStream_t stream);",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:24,Modifiability,variab,variable,24,// Replace the original variable Var with the address loaded from variable; // ManagedVar populated by HIP runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:66,Modifiability,variab,variable,66,// Replace the original variable Var with the address loaded from variable; // ManagedVar populated by HIP runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:54,Performance,load,loaded,54,// Replace the original variable Var with the address loaded from variable; // ManagedVar populated by HIP runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:77,Modifiability,variab,variable,77,// Replace constant expressions directly or indirectly using the managed; // variable with instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:218,Modifiability,variab,variables,218,"/// Creates a function that sets up state on the host side for CUDA objects that; /// have a presence on both the host and device sides. Specifically, registers; /// the host side of kernel functions and device global variables with the CUDA; /// runtime.; /// \code; /// void __cuda_register_globals(void** GpuBinaryHandle) {; /// __cudaRegisterFunction(GpuBinaryHandle,Kernel0,...);; /// ...; /// __cudaRegisterFunction(GpuBinaryHandle,KernelM,...);; /// __cudaRegisterVar(GpuBinaryHandle, GlobalVar0, ...);; /// ...; /// __cudaRegisterVar(GpuBinaryHandle, GlobalVarN, ...);; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:32,Modifiability,variab,variable,32,"// For HIP or CUDA 9.0+, device variable size is type of `size_t`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:84,Modifiability,variab,variable,84,"// Register GPU binary with the CUDA runtime, store returned handle in a; // global variable and save a reference in GpuBinaryHandle to be cleaned up; // in destructor on exit. Then associate all known kernels with the GPU binary; // handle so CUDA runtime can figure out what to call on the GPU side.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:16,Availability,avail,available,16,"// If fatbin is available from early finalization, create a string; // literal containing the fat binary loaded from the given file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:105,Performance,load,loaded,105,"// If fatbin is available from early finalization, create a string; // literal containing the fat binary loaded from the given file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:20,Availability,avail,available,20,"// If fatbin is not available, create an external symbol; // __hip_fatbin in section .hip_fatbin. The external symbol is supposed; // to contain the fat binary but will be populated somewhere else,; // e.g. by lld through link script.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:63,Performance,load,loaded,63,"// For CUDA, create a string literal containing the fat binary loaded from; // the given file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:22,Integrability,wrap,wrapper,22,// Create initialized wrapper structure that points to the loaded GPU binary,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:59,Performance,load,loaded,59,// Create initialized wrapper structure that points to the loaded GPU binary,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:10,Integrability,wrap,wrapper,10,// Fatbin wrapper magic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:217,Performance,load,loader,217,"// There is only one HIP fat binary per linked module, however there are; // multiple constructor functions. Make sure the fat binary is registered; // only once. The constructor functions are executed by the dynamic loader; // before the program gains control. The dynamic loader cannot execute the; // constructor functions concurrently since doing that would not guarantee; // thread safety of the loaded program. Therefore we can assume sequential; // execution of constructor functions here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:274,Performance,load,loader,274,"// There is only one HIP fat binary per linked module, however there are; // multiple constructor functions. Make sure the fat binary is registered; // only once. The constructor functions are executed by the dynamic loader; // before the program gains control. The dynamic loader cannot execute the; // constructor functions concurrently since doing that would not guarantee; // thread safety of the loaded program. Therefore we can assume sequential; // execution of constructor functions here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:326,Performance,concurren,concurrently,326,"// There is only one HIP fat binary per linked module, however there are; // multiple constructor functions. Make sure the fat binary is registered; // only once. The constructor functions are executed by the dynamic loader; // before the program gains control. The dynamic loader cannot execute the; // constructor functions concurrently since doing that would not guarantee; // thread safety of the loaded program. Therefore we can assume sequential; // execution of constructor functions here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:401,Performance,load,loaded,401,"// There is only one HIP fat binary per linked module, however there are; // multiple constructor functions. Make sure the fat binary is registered; // only once. The constructor functions are executed by the dynamic loader; // before the program gains control. The dynamic loader cannot execute the; // constructor functions concurrently since doing that would not guarantee; // thread safety of the loaded program. Therefore we can assume sequential; // execution of constructor functions here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:387,Safety,safe,safety,387,"// There is only one HIP fat binary per linked module, however there are; // multiple constructor functions. Make sure the fat binary is registered; // only once. The constructor functions are executed by the dynamic loader; // before the program gains control. The dynamic loader cannot execute the; // constructor functions concurrently since doing that would not guarantee; // thread safety of the loaded program. Therefore we can assume sequential; // execution of constructor functions here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:54,Modifiability,variab,variable,54,"// The name, size, and initialization pattern of this variable is part; // of HIP ABI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:90,Modifiability,variab,variables,90,"// For -fno-gpu-rdc, host-side shadows of external declarations of device-side; // global variables become internal definitions. These have to be internal in; // order to prevent name conflicts with global host variables with the same; // name in a different TUs.; //; // For -fgpu-rdc, the shadow variables should not be internalized because; // they may be accessed by different TU.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:211,Modifiability,variab,variables,211,"// For -fno-gpu-rdc, host-side shadows of external declarations of device-side; // global variables become internal definitions. These have to be internal in; // order to prevent name conflicts with global host variables with the same; // name in a different TUs.; //; // For -fgpu-rdc, the shadow variables should not be internalized because; // they may be accessed by different TU.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:298,Modifiability,variab,variables,298,"// For -fno-gpu-rdc, host-side shadows of external declarations of device-side; // global variables become internal definitions. These have to be internal in; // order to prevent name conflicts with global host variables with the same; // name in a different TUs.; //; // For -fgpu-rdc, the shadow variables should not be internalized because; // they may be accessed by different TU.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:359,Security,access,accessed,359,"// For -fno-gpu-rdc, host-side shadows of external declarations of device-side; // global variables become internal definitions. These have to be internal in; // order to prevent name conflicts with global host variables with the same; // name in a different TUs.; //; // For -fgpu-rdc, the shadow variables should not be internalized because; // they may be accessed by different TU.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:14,Modifiability,variab,variables,14,"// __shared__ variables are odd. Shadows do get created, but; // they are not registered with the CUDA runtime, so they; // can't really be used to access their device-side; // counterparts. It's not clear yet whether it's nvcc's bug or; // a feature, but we've got to do the same for compatibility.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:148,Security,access,access,148,"// __shared__ variables are odd. Shadows do get created, but; // they are not registered with the CUDA runtime, so they; // can't really be used to access their device-side; // counterparts. It's not clear yet whether it's nvcc's bug or; // a feature, but we've got to do the same for compatibility.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:200,Usability,clear,clear,200,"// __shared__ variables are odd. Shadows do get created, but; // they are not registered with the CUDA runtime, so they; // can't really be used to access their device-side; // counterparts. It's not clear yet whether it's nvcc's bug or; // a feature, but we've got to do the same for compatibility.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:10,Modifiability,variab,variables,10,"// Shadow variables and their properties must be registered with CUDA; // runtime. Skip Extern global variables, which will be registered in; // the TU where they are defined.; //; // Don't register a C++17 inline variable. The local symbol can be; // discarded and referencing a discarded local symbol from outside the; // comdat (__cuda_register_globals) is disallowed by the ELF spec.; //; // HIP managed variables need to be always recorded in device and host; // compilations for transformation.; //; // HIP managed variables and variables in CUDADeviceVarODRUsedByHost are; // added to llvm.compiler-used, therefore they are safe to be registered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:102,Modifiability,variab,variables,102,"// Shadow variables and their properties must be registered with CUDA; // runtime. Skip Extern global variables, which will be registered in; // the TU where they are defined.; //; // Don't register a C++17 inline variable. The local symbol can be; // discarded and referencing a discarded local symbol from outside the; // comdat (__cuda_register_globals) is disallowed by the ELF spec.; //; // HIP managed variables need to be always recorded in device and host; // compilations for transformation.; //; // HIP managed variables and variables in CUDADeviceVarODRUsedByHost are; // added to llvm.compiler-used, therefore they are safe to be registered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:214,Modifiability,variab,variable,214,"// Shadow variables and their properties must be registered with CUDA; // runtime. Skip Extern global variables, which will be registered in; // the TU where they are defined.; //; // Don't register a C++17 inline variable. The local symbol can be; // discarded and referencing a discarded local symbol from outside the; // comdat (__cuda_register_globals) is disallowed by the ELF spec.; //; // HIP managed variables need to be always recorded in device and host; // compilations for transformation.; //; // HIP managed variables and variables in CUDADeviceVarODRUsedByHost are; // added to llvm.compiler-used, therefore they are safe to be registered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:408,Modifiability,variab,variables,408,"// Shadow variables and their properties must be registered with CUDA; // runtime. Skip Extern global variables, which will be registered in; // the TU where they are defined.; //; // Don't register a C++17 inline variable. The local symbol can be; // discarded and referencing a discarded local symbol from outside the; // comdat (__cuda_register_globals) is disallowed by the ELF spec.; //; // HIP managed variables need to be always recorded in device and host; // compilations for transformation.; //; // HIP managed variables and variables in CUDADeviceVarODRUsedByHost are; // added to llvm.compiler-used, therefore they are safe to be registered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:521,Modifiability,variab,variables,521,"// Shadow variables and their properties must be registered with CUDA; // runtime. Skip Extern global variables, which will be registered in; // the TU where they are defined.; //; // Don't register a C++17 inline variable. The local symbol can be; // discarded and referencing a discarded local symbol from outside the; // comdat (__cuda_register_globals) is disallowed by the ELF spec.; //; // HIP managed variables need to be always recorded in device and host; // compilations for transformation.; //; // HIP managed variables and variables in CUDADeviceVarODRUsedByHost are; // added to llvm.compiler-used, therefore they are safe to be registered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:535,Modifiability,variab,variables,535,"// Shadow variables and their properties must be registered with CUDA; // runtime. Skip Extern global variables, which will be registered in; // the TU where they are defined.; //; // Don't register a C++17 inline variable. The local symbol can be; // discarded and referencing a discarded local symbol from outside the; // comdat (__cuda_register_globals) is disallowed by the ELF spec.; //; // HIP managed variables need to be always recorded in device and host; // compilations for transformation.; //; // HIP managed variables and variables in CUDADeviceVarODRUsedByHost are; // added to llvm.compiler-used, therefore they are safe to be registered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:631,Safety,safe,safe,631,"// Shadow variables and their properties must be registered with CUDA; // runtime. Skip Extern global variables, which will be registered in; // the TU where they are defined.; //; // Don't register a C++17 inline variable. The local symbol can be; // discarded and referencing a discarded local symbol from outside the; // comdat (__cuda_register_globals) is disallowed by the ELF spec.; //; // HIP managed variables need to be always recorded in device and host; // compilations for transformation.; //; // HIP managed variables and variables in CUDADeviceVarODRUsedByHost are; // added to llvm.compiler-used, therefore they are safe to be registered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:281,Energy Efficiency,allocate,allocated,281,// Transform managed variables to pointers to managed variables in device code.; // Each use of the original managed variable is replaced by a load from the; // transformed managed variable. The transformed managed variable contains; // the address of managed memory which will be allocated by the runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:21,Modifiability,variab,variables,21,// Transform managed variables to pointers to managed variables in device code.; // Each use of the original managed variable is replaced by a load from the; // transformed managed variable. The transformed managed variable contains; // the address of managed memory which will be allocated by the runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:54,Modifiability,variab,variables,54,// Transform managed variables to pointers to managed variables in device code.; // Each use of the original managed variable is replaced by a load from the; // transformed managed variable. The transformed managed variable contains; // the address of managed memory which will be allocated by the runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:117,Modifiability,variab,variable,117,// Transform managed variables to pointers to managed variables in device code.; // Each use of the original managed variable is replaced by a load from the; // transformed managed variable. The transformed managed variable contains; // the address of managed memory which will be allocated by the runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:181,Modifiability,variab,variable,181,// Transform managed variables to pointers to managed variables in device code.; // Each use of the original managed variable is replaced by a load from the; // transformed managed variable. The transformed managed variable contains; // the address of managed memory which will be allocated by the runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:215,Modifiability,variab,variable,215,// Transform managed variables to pointers to managed variables in device code.; // Each use of the original managed variable is replaced by a load from the; // transformed managed variable. The transformed managed variable contains; // the address of managed memory which will be allocated by the runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:143,Performance,load,load,143,// Transform managed variables to pointers to managed variables in device code.; // Each use of the original managed variable is replaced by a load from the; // transformed managed variable. The transformed managed variable contains; // the address of managed memory which will be allocated by the runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:93,Energy Efficiency,allocate,allocated,93,// Keep managed variables even if they are not used in device code since; // they need to be allocated by the runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:16,Modifiability,variab,variables,16,// Keep managed variables even if they are not used in device code since; // they need to be allocated by the runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:24,Modifiability,variab,variables,24,"// Mark ODR-used device variables as compiler used to prevent it from being; // eliminated by optimization. This is necessary for device variables; // ODR-used by host functions. Sema correctly marks them as ODR-used no; // matter whether they are ODR-used by device or host functions.; //; // We do not need to do this if the variable has used attribute since it; // has already been added.; //; // Static device variables have been externalized at this point, therefore; // variables with LLVM private or internal linkage need not be added.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:137,Modifiability,variab,variables,137,"// Mark ODR-used device variables as compiler used to prevent it from being; // eliminated by optimization. This is necessary for device variables; // ODR-used by host functions. Sema correctly marks them as ODR-used no; // matter whether they are ODR-used by device or host functions.; //; // We do not need to do this if the variable has used attribute since it; // has already been added.; //; // Static device variables have been externalized at this point, therefore; // variables with LLVM private or internal linkage need not be added.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:327,Modifiability,variab,variable,327,"// Mark ODR-used device variables as compiler used to prevent it from being; // eliminated by optimization. This is necessary for device variables; // ODR-used by host functions. Sema correctly marks them as ODR-used no; // matter whether they are ODR-used by device or host functions.; //; // We do not need to do this if the variable has used attribute since it; // has already been added.; //; // Static device variables have been externalized at this point, therefore; // variables with LLVM private or internal linkage need not be added.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:414,Modifiability,variab,variables,414,"// Mark ODR-used device variables as compiler used to prevent it from being; // eliminated by optimization. This is necessary for device variables; // ODR-used by host functions. Sema correctly marks them as ODR-used no; // matter whether they are ODR-used by device or host functions.; //; // We do not need to do this if the variable has used attribute since it; // has already been added.; //; // Static device variables have been externalized at this point, therefore; // variables with LLVM private or internal linkage need not be added.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:476,Modifiability,variab,variables,476,"// Mark ODR-used device variables as compiler used to prevent it from being; // eliminated by optimization. This is necessary for device variables; // ODR-used by host functions. Sema correctly marks them as ODR-used no; // matter whether they are ODR-used by device or host functions.; //; // We do not need to do this if the variable has used attribute since it; // has already been added.; //; // Static device variables have been externalized at this point, therefore; // variables with LLVM private or internal linkage need not be added.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:94,Performance,optimiz,optimization,94,"// Mark ODR-used device variables as compiler used to prevent it from being; // eliminated by optimization. This is necessary for device variables; // ODR-used by host functions. Sema correctly marks them as ODR-used no; // matter whether they are ODR-used by device or host functions.; //; // We do not need to do this if the variable has used attribute since it; // has already been added.; //; // Static device variables have been externalized at this point, therefore; // variables with LLVM private or internal linkage need not be added.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:78,Deployability,update,update,78,"// We've found the function name, but F itself has changed, so we need to; // update the references.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:81,Deployability,update,update,81,"// For HIP compilation the handle itself does not change, so we only need; // to update the Stub value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:92,Testability,Stub,Stub,92,"// For HIP compilation the handle itself does not change, so we only need; // to update the Stub value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:42,Testability,Stub,Stub,42,"// For non-HIP compilation, erase the old Stub and fall-through to creating; // new entries.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.cpp:31,Integrability,Interface,Interface,31,"//===----- CGCUDARuntime.cpp - Interface to CUDA Runtimes -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This provides an abstract class for CUDA code generation. Concrete; // subclasses of this implement code generation for specific CUDA; // runtime libraries.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:29,Integrability,Interface,Interface,29,"//===----- CGCUDARuntime.h - Interface to CUDA Runtimes ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This provides an abstract class for CUDA code generation. Concrete; // subclasses of this implement code generation for specific CUDA; // runtime libraries.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:10,Modifiability,variab,variable,10,// Global variable properties that must be passed to CUDA runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:3,Modifiability,Variab,Variable,3,// Variable,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:12,Modifiability,variab,variable,12,// Constant variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:11,Modifiability,variab,variable,11,// Managed variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:26,Testability,stub,stub,26,/// Emits a kernel launch stub.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:20,Modifiability,variab,variable,20,/// Check whether a variable is a device variable and register it if true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:41,Modifiability,variab,variable,41,/// Check whether a variable is a device variable and register it if true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:24,Modifiability,variab,variable,24,/// Returns function or variable name on device side even if the current; /// compilation is for host.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:25,Testability,stub,stub,25,/// Get kernel handle by stub function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:15,Testability,stub,stub,15,/// Get kernel stub by kernel handle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:29,Modifiability,variab,variables,29,/// Adjust linkage of shadow variables in host compilation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp:16,Performance,optimiz,optimization,16,"// Disable this optimization for ARM64EC. FIXME: This probably should work,; // but getting the symbol table correct is complicated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp:6,Security,sanitiz,sanitizing,6,"// If sanitizing memory to check for use-after-dtor, do not emit as; // an alias, unless this class owns no members.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp:55,Safety,safe,safe,55,"// Extra Credit: passing extra parameters is perfectly safe; // in many calling conventions, so only bail out if the ctor's; // calling convention is nonstandard.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp:60,Deployability,update,update,60,"// Give up if the calling conventions don't match. We could update the call,; // but it is probably not worth it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp:83,Availability,Avail,AvailableExternally,83,"// FIXME: An extern template instantiation will create functions with; // linkage ""AvailableExternally"". In libc++, some classes also define; // members with attribute ""AlwaysInline"" and expect no reference to; // be generated. It is desirable to reenable this optimisation after; // corresponding LLVM changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp:128,Safety,avoid,avoid,128,"// If we have a weak, non-discardable alias (weak, weak_odr), like an extern; // template instantiation or a dllexported class, avoid forming it on COFF.; // A COFF weak external alias cannot satisfy a normal undefined symbol; // reference from another TU. The other TU must also mark the referenced; // symbol as weak, which we cannot rely on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp:55,Safety,avoid,avoids,55,"// Don't create an alias to a linker weak symbol. This avoids producing; // different COMDATs in different TUs. Another option would be to; // output the alias both for weak_odr and linkonce_odr, but that; // requires explicit comdat support in the IL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp:37,Integrability,rout,routine,37,/// BuildAppleKextVirtualCall - This routine is to support gcc's kext ABI making; /// indirect call to virtual functions. It makes the call through indexing; /// into the vtable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp:28,Integrability,rout,routine,28,/// BuildVirtualCall - This routine makes indirect vtable call for; /// call to virtual destructors. It returns 0 if it could not do it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp:26,Integrability,Interface,Interface,26,"//===----- CGCXXABI.cpp - Interface to C++ ABIs ---------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This provides an abstract class for C++ code generation. Concrete subclasses; // of this implement code generation for specific C++ ABIs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp:71,Availability,down,down,71,"// Compute the presumed alignment of 'this', which basically comes; // down to whether we know it's a complete object or not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp:3,Safety,avoid,avoid,3,// avoid vcall in common case,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp:10,Modifiability,variab,variable,10,"// If the variable has an incomplete class type (or array thereof), it; // might need destruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp:61,Modifiability,variab,variable,61,"// All later checks examine the initializer specified on the variable. If; // the variable is weak, such examination would not be correct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp:82,Modifiability,variab,variable,82,"// All later checks examine the initializer specified on the variable. If; // the variable is weak, such examination would not be correct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp:58,Integrability,wrap,wrapper,58,"// If we have the only definition, we don't need a thread wrapper if we; // will emit the value as a constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp:31,Integrability,wrap,wrapper,31,"// Otherwise, we need a thread wrapper unless we know that every; // translation unit will emit the value as a constant. We rely on the; // variable being constant-initialized in every translation unit if it's; // constant-initialized in any translation unit, which isn't actually; // guaranteed by the standard but is necessary for sanity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp:140,Modifiability,variab,variable,140,"// Otherwise, we need a thread wrapper unless we know that every; // translation unit will emit the value as a constant. We rely on the; // variable being constant-initialized in every translation unit if it's; // constant-initialized in any translation unit, which isn't actually; // guaranteed by the standard but is necessary for sanity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:24,Integrability,Interface,Interface,24,"//===----- CGCXXABI.h - Interface to C++ ABIs -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This provides an abstract class for C++ code generation. Concrete subclasses; // of this implement code generation for specific C++ ABIs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:4,Performance,Load,Loads,4,/// Loads the incoming C++ this pointer as it was passed by the caller.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:244,Availability,avail,available,244,"/// Determine whether we will definitely emit this variable with a constant; /// initializer, either because the language semantics demand it or because; /// we know that the initializer is a constant.; // For weak definitions, any initializer available in the current translation; // is not necessarily reflective of the initializer used; such initializers; // are ignored unless if InspectInitForWeakDef is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:51,Modifiability,variab,variable,51,"/// Determine whether we will definitely emit this variable with a constant; /// initializer, either because the language semantics demand it or because; /// we know that the initializer is a constant.; // For weak definitions, any initializer available in the current translation; // is not necessarily reflective of the initializer used; such initializers; // are ignored unless if InspectInitForWeakDef is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:168,Testability,log,logic,168,/// Determine whether there's something special about the rules of; /// the ABI tell us that 'this' is a complete object within the; /// given function. Obvious common logic like being defined on a; /// final class will have been taken care of by the caller.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:282,Integrability,depend,depend,282,"/// Returns true if the target allows calling a function through a pointer; /// with a different signature than the actual function (or equivalently,; /// bitcasting a function or function pointer to a different function type).; /// In principle in the most general case this could depend on the target, the; /// calling convention, and the actual types of the arguments and return; /// value. Here it just means whether the signature mismatch could *ever* be; /// allowed; in other words, does the target do strict checking of signatures; /// for all calls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:4,Performance,Load,Load,4,/// Load a member function from an object and a member function; /// pointer. Apply the this-adjustment and set 'This' to the; /// adjusted value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:4,Performance,Perform,Perform,4,"/// Perform a derived-to-base, base-to-derived, or bitcast member; /// pointer conversion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:4,Performance,Perform,Perform,4,"/// Perform a derived-to-base, base-to-derived, or bitcast member; /// pointer conversion on a constant value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:79,Modifiability,inherit,inheritance,79,"/// Emit the code to initialize hidden members required; /// to handle virtual inheritance, if needed by the ABI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:4,Performance,Perform,Perform,4,"/// Perform ABI-specific ""this"" argument adjustment required prior to; /// a call of a virtual function.; /// The ""VirtualCall"" argument is true iff the call itself is virtual.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:22,Modifiability,variab,variable,22,/// Build a parameter variable suitable for 'this'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:48,Modifiability,inherit,inheritance,48,"/// Emit any tables needed to implement virtual inheritance. For Itanium,; /// this emits virtual table tables. For the MSVC++ ABI, this emits virtual; /// base tables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:483,Energy Efficiency,allocate,allocated,483,"/**************************** Array cookies ******************************/; /// Returns the extra size required in order to store the array; /// cookie for the given new-expression. May return 0 to indicate that no; /// array cookie is required.; ///; /// Several cases are filtered out before this method is called:; /// - non-array allocations never need a cookie; /// - calls to \::operator new(size_t, void*) never need a cookie; ///; /// \param expr - the new-expression being allocated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:356,Energy Efficiency,allocate,allocated,356,"/// Initialize the array cookie for the given allocation.; ///; /// \param NewPtr - a char* which is the presumed-non-null; /// return value of the allocation function; /// \param NumElements - the computed number of elements,; /// potentially collapsed from the multidimensional array case;; /// always a size_t; /// \param ElementType - the base element allocated type,; /// i.e. the allocated type after stripping all array types",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:386,Energy Efficiency,allocate,allocated,386,"/// Initialize the array cookie for the given allocation.; ///; /// \param NewPtr - a char* which is the presumed-non-null; /// return value of the allocation function; /// \param NumElements - the computed number of elements,; /// potentially collapsed from the multidimensional array case;; /// always a size_t; /// \param ElementType - the base element allocated type,; /// i.e. the allocated type after stripping all array types",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:324,Energy Efficiency,allocate,allocated,324,"/// Reads the array cookie associated with the given pointer,; /// if it has one.; ///; /// \param Ptr - a pointer to the first element in the array; /// \param ElementType - the base element type of elements of the array; /// \param NumElements - an out parameter which will be initialized; /// with the number of elements allocated, or zero if there is no; /// cookie; /// \param AllocPtr - an out parameter which will be initialized; /// with a char* pointing to the address returned by the allocation; /// function; /// \param CookieSize - an out parameter which will be initialized; /// with the size of the cookie, or zero if there is no cookie",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:154,Modifiability,variab,variable,154,"/*************************** Static local guards ****************************/; /// Emits the guarded initializer and destructor setup for the given; /// variable, given that it couldn't be emitted as a constant.; /// If \p PerformInit is false, the initialization has been folded to a; /// constant and should not be performed.; ///; /// The variable may be:; /// - a static local variable; /// - a static data member of a class template instantiation",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:343,Modifiability,variab,variable,343,"/*************************** Static local guards ****************************/; /// Emits the guarded initializer and destructor setup for the given; /// variable, given that it couldn't be emitted as a constant.; /// If \p PerformInit is false, the initialization has been folded to a; /// constant and should not be performed.; ///; /// The variable may be:; /// - a static local variable; /// - a static data member of a class template instantiation",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:382,Modifiability,variab,variable,382,"/*************************** Static local guards ****************************/; /// Emits the guarded initializer and destructor setup for the given; /// variable, given that it couldn't be emitted as a constant.; /// If \p PerformInit is false, the initialization has been folded to a; /// constant and should not be performed.; ///; /// The variable may be:; /// - a static local variable; /// - a static data member of a class template instantiation",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:224,Performance,Perform,PerformInit,224,"/*************************** Static local guards ****************************/; /// Emits the guarded initializer and destructor setup for the given; /// variable, given that it couldn't be emitted as a constant.; /// If \p PerformInit is false, the initialization has been folded to a; /// constant and should not be performed.; ///; /// The variable may be:; /// - a static local variable; /// - a static data member of a class template instantiation",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:318,Performance,perform,performed,318,"/*************************** Static local guards ****************************/; /// Emits the guarded initializer and destructor setup for the given; /// variable, given that it couldn't be emitted as a constant.; /// If \p PerformInit is false, the initialization has been folded to a; /// constant and should not be performed.; ///; /// The variable may be:; /// - a static local variable; /// - a static data member of a class template instantiation",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:155,Modifiability,variab,variables,155,"/*************************** thread_local initialization ********************/; /// Emits ABI-required functions necessary to initialize thread_local; /// variables in this translation unit.; ///; /// \param CXXThreadLocals - The thread_local declarations in this translation; /// unit.; /// \param CXXThreadLocalInits - If this translation unit contains any; /// non-constant initialization or non-trivial destruction for; /// thread_local variables, a list of functions to perform the; /// initialization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:441,Modifiability,variab,variables,441,"/*************************** thread_local initialization ********************/; /// Emits ABI-required functions necessary to initialize thread_local; /// variables in this translation unit.; ///; /// \param CXXThreadLocals - The thread_local declarations in this translation; /// unit.; /// \param CXXThreadLocalInits - If this translation unit contains any; /// non-constant initialization or non-trivial destruction for; /// thread_local variables, a list of functions to perform the; /// initialization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:475,Performance,perform,perform,475,"/*************************** thread_local initialization ********************/; /// Emits ABI-required functions necessary to initialize thread_local; /// variables in this translation unit.; ///; /// \param CXXThreadLocals - The thread_local declarations in this translation; /// unit.; /// \param CXXThreadLocalInits - If this translation unit contains any; /// non-constant initialization or non-trivial destruction for; /// thread_local variables, a list of functions to perform the; /// initialization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:120,Integrability,wrap,wrapper,120,// Determine if references to thread_local global variables can be made; // directly or require access through a thread wrapper function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:50,Modifiability,variab,variables,50,// Determine if references to thread_local global variables can be made; // directly or require access through a thread wrapper function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:96,Security,access,access,96,// Determine if references to thread_local global variables can be made; // directly or require access through a thread wrapper function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:49,Modifiability,variab,variable,49,/// Emit a reference to a non-local thread_local variable (including; /// triggering the initialization of all thread_local variables in its; /// translation unit).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:124,Modifiability,variab,variables,124,/// Emit a reference to a non-local thread_local variable (including; /// triggering the initialization of all thread_local variables in its; /// translation unit).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:42,Modifiability,polymorphi,polymorphic,42,"/// Load a vtable from This, an object of polymorphic type RD, or from one of; /// its virtual bases if it does not have its own vtable. Returns the vtable; /// and the class from which the vtable was loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:4,Performance,Load,Load,4,"/// Load a vtable from This, an object of polymorphic type RD, or from one of; /// its virtual bases if it does not have its own vtable. Returns the vtable; /// and the class from which the vtable was loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:201,Performance,load,loaded,201,"/// Load a vtable from This, an object of polymorphic type RD, or from one of; /// its virtual bases if it does not have its own vtable. Returns the vtable; /// and the class from which the vtable was loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:61,Deployability,update,updates,61,// Query CGF so the location isn't overwritten when location updates are; // temporarily disabled (for C++ default function arguments),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:84,Availability,reliab,reliably,84,// quick optimization to avoid having to intern strings that are already; // stored reliably elsewhere,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:9,Performance,optimiz,optimization,9,// quick optimization to avoid having to intern strings that are already; // stored reliably elsewhere,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:25,Safety,avoid,avoid,25,// quick optimization to avoid having to intern strings that are already; // stored reliably elsewhere,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:3,Performance,Cache,Cache,3,// Cache the results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:7,Security,Checksum,Checksum,7,// Put Checksum at a scope where it will persist past the createFile call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:123,Energy Efficiency,efficient,efficient,123,"// Strip the common prefix (if it is more than just ""/"" or ""C:\"") from; // current directory and FileName for a more space-efficient encoding.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:332,Security,checksum,checksum,332,"// If the main file name provided is identical to the input file name, and; // if the input file is a preprocessed source, use the module name for; // debug info. The module name comes from the name specified in the first; // linemarker if the input is a preprocessed source. In this case we don't; // know the content to compute a checksum.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:227,Testability,assert,assert,227,"// A single vector of bytes may not suffice as the representation of; // svcount_t tuples because of the gap between the active 16bits of; // successive tuple members. Currently no such tuples are defined for; // svcount_t, so assert that NumVectors is 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:135,Availability,error,error,135,// It doesn't make sense to generate debug info for PowerPC MMA vector types.; // So we return a safe type here to avoid generating an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:52,Energy Efficiency,Power,PowerPC,52,// It doesn't make sense to generate debug info for PowerPC MMA vector types.; // So we return a safe type here to avoid generating an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:97,Safety,safe,safe,97,// It doesn't make sense to generate debug info for PowerPC MMA vector types.; // So we return a safe type here to avoid generating an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:115,Safety,avoid,avoid,115,// It doesn't make sense to generate debug info for PowerPC MMA vector types.; // So we return a safe type here to avoid generating an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:3,Availability,Mask,Mask,3,// Mask type only occupies one vector register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:10,Performance,scalab,scalable,10,"// In RVV scalable vector types, we encode 64 bits in the fixed part.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:254,Deployability,update,updated,254,"// FIXME: For targets where long double, __ibm128 and __float128 have the; // same size, they are currently indistinguishable in the debugger without; // some special treatment. However, there is currently no consensus on; // encoding and this should be updated once a DWARF encoding exists for; // distinct floating point types of the same size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:79,Integrability,protocol,protocol,79,"// The frontend treats 'id' as a typedef to an ObjCObjectType,; // whereas 'id<protocol>' is treated as an ObjCPointerType. For the; // debug info, we want to emit 'id' in both cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:638,Usability,simpl,simpler,638,"// Determines if the debug info for this tag declaration needs a type; // identifier. The purpose of the unique identifier is to deduplicate type; // information for identical types across TUs. Because of the C++ one definition; // rule (ODR), it is valid to assume that the type is defined the same way in; // every TU and its debug info is equivalent.; //; // C does not have the ODR, and it is common for codebases to contain multiple; // different definitions of a struct with the same name in different TUs.; // Therefore, if the type doesn't have a C++ mangling, don't give it an; // identifer. Type information in C is smaller and simpler than C++ type; // information, so the increase in debug info size is negligible.; //; // If the type is not externally visible, it should be unique to the current TU,; // and should not need an identifier to participate in type deduplication.; // However, when emitting CodeView, the format internally uses these; // unique type name identifers for references between debug info. For example,; // the method of a class in an anonymous namespace uses the identifer to refer; // to its parent class. The Microsoft C++ ABI attempts to provide unique names; // for such types, so when emitting CodeView, always use identifiers for C++; // types. This may create problems when attempting to emit CodeView when the MS; // C++ ABI is not in use.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:79,Availability,redundant,redundant,79,// Blocks in OpenCL have unique constraints which make the standard fields; // redundant while requiring size and align fields for enqueue_kernel. See; // initializeForBlockHeader in CGBlocks.cpp,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:79,Safety,redund,redundant,79,// Blocks in OpenCL have unique constraints which make the standard fields; // redundant while requiring size and align fields for enqueue_kernel. See; // initializeForBlockHeader in CGBlocks.cpp,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:78,Performance,optimiz,optimization,78,"/// Convert an AccessSpecifier into the corresponding DINode flag.; /// As an optimization, return 0 if the access specifier equals the; /// default for the containing type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:15,Security,Access,AccessSpecifier,15,"/// Convert an AccessSpecifier into the corresponding DINode flag.; /// As an optimization, return 0 if the access specifier equals the; /// default for the containing type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:108,Security,access,access,108,"/// Convert an AccessSpecifier into the corresponding DINode flag.; /// As an optimization, return 0 if the access specifier equals the; /// default for the containing type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:3,Safety,Avoid,Avoid,3,// Avoid emitting DW_AT_calling_convention if the C convention was used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:25,Deployability,Update,Update,25,// [FIXME: swiftasynccc] Update to SwiftAsync once LLVM support lands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:117,Modifiability,variab,variable,117,"// For C++11 Lambdas a Field will be the same as a Capture, but the Capture; // has the name and the location of the variable so we should iterate over; // both concurrently.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:161,Performance,concurren,concurrently,161,"// For C++11 Lambdas a Field will be the same as a Capture, but the Capture; // has the name and the location of the variable so we should iterate over; // both concurrently.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:40,Modifiability,variab,variable,40,"// Create the descriptor for the static variable, with or without; // constant initializers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:13,Safety,avoid,avoid,13,// FIXME: to avoid complications with type merging we should; // emit the constant on the definition instead of the declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:3,Integrability,Inject,Injected,3,// Injected class names are not considered nested records.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:3,Security,Inject,Injected,3,// Injected class names are not considered nested records.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:8,Modifiability,variab,variable,8,// Skip variable template specializations when emitting CodeView. MSVC; // doesn't emit them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:357,Integrability,wrap,wrapper,357,"// Keep the removed qualifiers in sync with; // CreateQualifiedType(const FunctionPrototype*, DIFile *Unit); // On a 'real' member function type, these qualifiers are carried on the type; // of the first parameter, not as separate DW_TAG_const_type (etc) decorator; // tags around them. (But, in the raw function types with qualifiers, they have; // to use wrapper types.); // Add ""this"" pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:282,Modifiability,inherit,inherits,282,"// CodeView only records the vftable offset in the class that introduces; // the virtual method. This is possible because, unlike Itanium, the MS; // C++ ABI does not include all virtual methods from non-primary bases in; // the vtable for the most derived class. For example, if C inherits from; // A and B, C's primary vftable will not include B's virtual methods.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:68,Safety,avoid,avoids,68,"// If the member is implicit, don't add it to the member list. This avoids; // the member being added to type units by LLVM, while still allowing it; // to be emitted into the type declaration/reference inside the compile; // unit.; // Ditto 'nodebug' methods, for consistency with CodeGenFunction.cpp.; // FIXME: Handle Using(Shadow?)Decls here to create; // DW_TAG_imported_declarations inside the class for base decls brought into; // derived classes. GDB doesn't seem to notice/leverage these when I tried; // it, so I'm not rushing to fix this. (GCC seems to produce them, if; // referenced)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:108,Availability,avail,available,108,"// Skip retrieve the value if that template parameter has cuda device; // attribute, i.e. that value is not available at the host side.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:3,Modifiability,Variab,Variable,3,// Variable pointer template parameters have a value that is the address; // of the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:84,Modifiability,variab,variable,84,// Variable pointer template parameters have a value that is the address; // of the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:100,Modifiability,refactor,refactored,100,// These five lines (& possibly the above member function pointer; // handling) might be able to be refactored to use similar code in; // CodeGenModule::getMemberPointerConstant,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:41,Usability,simpl,simple,41,// But treat member function pointers as simple zero integers because; // it's easier than having a special case in LLVM's CodeGen. If LLVM; // CodeGen grows handling for values of non-null member function; // pointers then perhaps we could remove this special case and rely on; // EmitNullMemberPointer for member function pointers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:43,Modifiability,variab,variable,43,"// Print the normal qualified name for the variable, then break off the last; // NNS, and add the appropriate other text. Clang always prints the global; // variable name without template arguments, so we can use rsplit(""::"") and; // then recombine the pieces.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:157,Modifiability,variab,variable,157,"// Print the normal qualified name for the variable, then break off the last; // NNS, and add the appropriate other text. Clang always prints the global; // variable name without template arguments, so we can use rsplit(""::"") and; // then recombine the pieces.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:78,Modifiability,extend,extendable,78,"// Don't emit any vtable shape or vptr info if this class doesn't have an; // extendable vfptr. This can happen if the class doesn't have virtual; // methods, or in the MS ABI if those virtual methods only come from virtually; // inherited bases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:230,Modifiability,inherit,inherited,230,"// Don't emit any vtable shape or vptr info if this class doesn't have an; // extendable vfptr. This can happen if the class doesn't have virtual; // methods, or in the MS ABI if those virtual methods only come from virtually; // inherited bases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:336,Performance,optimiz,optimization,336,"// Constructor homing can be used for classes that cannnot be constructed; // without emitting code for one of their constructors. This is classes that; // don't have trivial or constexpr constructors, or can be created from; // aggregate initialization. Also skip lambda objects because they don't call; // constructors.; // Skip this optimization if the class or any of its methods are marked; // dllimport.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:185,Performance,optimiz,optimization,185,"// Only emit complete debug info for a dynamic class when its vtable is; // emitted. However, Microsoft debuggers don't resolve type information; // across DLL boundaries, so skip this optimization if the class or any of its; // methods are marked dllimport. This isn't a complete solution, since objects; // without any dllimport methods can be used in one DLL and constructed in; // another, but it is the current behavior of LimitedDebugInfo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:115,Integrability,depend,depend,115,"// what about nested types?; // Note: The split of CXXDecl information here is intentional, the; // gdb tests will depend on a certain ordering at printout. The debug; // information offsets are still correct if we merge them all together; // though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:104,Testability,test,tests,104,"// what about nested types?; // Note: The split of CXXDecl information here is intentional, the; // gdb tests will depend on a certain ordering at printout. The debug; // information offsets are still correct if we merge them all together; // though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:41,Modifiability,variab,variables,41,// Collect data fields (including static variables and any initializers).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:10,Integrability,protocol,protocols,10,// Ignore protocols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:10,Integrability,protocol,protocols,10,// Ignore protocols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:46,Performance,cache,cache,46,"// Use the Module pointer as the key into the cache. This is a; // nullptr if the ""Module"" is a PCH, which is safe because we don't; // support chained PCH debug info, so there can only be a single PCH.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:110,Safety,safe,safe,110,"// Use the Module pointer as the key into the cache. This is a; // nullptr if the ""Module"" is a PCH, which is safe because we don't; // support chained PCH debug info, so there can only be a single PCH.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:77,Safety,detect,detects,77,"// PCH files don't have a signature field in the control block,; // but LLVM detects skeleton CUs by looking for a non-zero DWO id.; // We use the lower 64 bits for debug info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:359,Availability,mask,mask,359,"// Boolean ext_vector_type(N) are special because their real element type; // (bits of bit size) is not their Clang element type (_Bool of size byte).; // For now, we pretend the boolean vector were actually a vector of bytes; // (where each byte represents 8 bits of the actual vector).; // FIXME Debug info should actually represent this proper as a vector mask; // type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:14,Modifiability,inherit,inheritance,14,// Set the MS inheritance model. There is no flag for the unspecified model.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:7,Deployability,update,update,7,// And update the type cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:23,Performance,cache,cache,23,// And update the type cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:15,Performance,cache,cached,15,// We may have cached a forward decl when we could have created; // a non-forward decl. Go ahead and create a non-forward decl; // now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:7,Deployability,update,update,7,// And update the type cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:23,Performance,cache,cache,23,// And update the type cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:116,Energy Efficiency,efficient,efficient,116,"// Elements of composite types usually have back to the type, creating; // uniquing cycles. Distinct nodes are more efficient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:259,Modifiability,variab,variables,259,"// Since we emit declarations (DW_AT_members) for static members, place the; // definition of those static members in the namespace they were declared in; // in the source code (the lexical decl context).; // FIXME: Generalize this for even non-member global variables where the; // declaration and definition may have different lexical decl contexts, once; // we have support for emitting declarations of (non-member) global variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:426,Modifiability,variab,variables,426,"// Since we emit declarations (DW_AT_members) for static members, place the; // definition of those static members in the namespace they were declared in; // in the source code (the lexical decl context).; // FIXME: Generalize this for even non-member global variables where the; // declaration and definition may have different lexical decl contexts, once; // we have support for emitting declarations of (non-member) global variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:3,Testability,Stub,Stub,3,/* Stub = */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:3,Testability,Stub,Stub,3,/* Stub = */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:227,Availability,avail,available,227,"// We only need a declaration (not a definition) of the type - so use whatever; // we would otherwise do to get a type for a pointee. (forward declarations in; // limited debug info, full definitions (if the type definition is available); // in unlimited debug info)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:31,Performance,cache,cache,31,// Search imported declaration cache if it is already defined; // as imported declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:81,Integrability,interface,interface,81,// Starting with DWARF V5 method declarations are emitted as children of; // the interface type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:46,Availability,avail,available,46,// If there is a subprogram for this function available then use it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:66,Modifiability,variab,variable,66,// This is a global initializer or atexit destructor for a global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:193,Performance,cache,cache,193,// We might get here with a VarDecl in the case we're generating; // code for the initialization of globals. Do not record these decls; // as they will overwrite the actual VarDecl Decl in the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:48,Availability,avail,available,48,// If there is a DISubprogram for this function available then use it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:46,Availability,avail,available,46,// If there is a subprogram for this function available then use it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:3,Deployability,Update,Update,3,// Update our current location,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:84,Modifiability,variab,variable,84,// If there is no debug info for this type then do not emit debug info; // for this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:33,Modifiability,variab,variables,33,"// GDB has trouble finding local variables in anonymous unions, so we emit; // artificial local variables for each of the members.; //; // FIXME: Remove this code as soon as GDB supports this.; // The debug info verifier in LLVM operates based on the assumption that a; // variable has the same size as its storage and we had to disable the; // check for artificial variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:96,Modifiability,variab,variables,96,"// GDB has trouble finding local variables in anonymous unions, so we emit; // artificial local variables for each of the members.; //; // FIXME: Remove this code as soon as GDB supports this.; // The debug info verifier in LLVM operates based on the assumption that a; // variable has the same size as its storage and we had to disable the; // check for artificial variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:273,Modifiability,variab,variable,273,"// GDB has trouble finding local variables in anonymous unions, so we emit; // artificial local variables for each of the members.; //; // FIXME: Remove this code as soon as GDB supports this.; // The debug info verifier in LLVM operates based on the assumption that a; // variable has the same size as its storage and we had to disable the; // check for artificial variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:366,Modifiability,variab,variables,366,"// GDB has trouble finding local variables in anonymous unions, so we emit; // artificial local variables for each of the members.; //; // FIXME: Remove this code as soon as GDB supports this.; // The debug info verifier in LLVM operates based on the assumption that a; // variable has the same size as its storage and we had to disable the; // check for artificial variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:176,Modifiability,variab,variable,176,// Clang stores the sret pointer provided by the caller in a static alloca.; // Use DW_OP_deref to tell the debugger to load the pointer and treat it as; // the address of the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:120,Performance,load,load,120,// Clang stores the sret pointer provided by the caller in a static alloca.; // Use DW_OP_deref to tell the debugger to load the pointer and treat it as; // the address of the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:33,Modifiability,variab,variable,33,// Create the descriptor for the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:20,Modifiability,variab,variable,20,"// For normal local variable, we will try to find out whether 'VD' is the; // copy parameter of coroutine.; // If yes, we are going to use DIVariable of the origin parameter instead; // of creating the new one.; // If no, it might be a normal alloc, we just create a new one for it.; // Check whether the VD is move parameters.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:252,Testability,log,logic,252,"// Find an integer type with the same bitwidth as the bitfield size. If; // no suitable type is present in the target, give up on producing debug; // information as it would be wrong. It is certainly possible to produce; // correct debug info, but the logic isn't currently implemented.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:84,Modifiability,variab,variable,84,// If there is no debug info for this type then do not emit debug info; // for this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:176,Modifiability,variab,variable,176,// Clang stores the sret pointer provided by the caller in a static alloca.; // Use DW_OP_deref to tell the debugger to load the pointer and treat it as; // the address of the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:120,Performance,load,load,120,// Clang stores the sret pointer provided by the caller in a static alloca.; // Use DW_OP_deref to tell the debugger to load the pointer and treat it as; // the address of the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:33,Modifiability,variab,variable,33,// Create the descriptor for the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:99,Modifiability,variab,variable,99,// Don't emit an llvm.dbg.declare for the composite storage as it doesn't; // correspond to a user variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:47,Modifiability,variab,variable,47,// Self is passed along as an implicit non-arg variable in a; // block. Mark it as the object pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:33,Modifiability,variab,variable,33,// Create the descriptor for the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:79,Availability,redundant,redundant,79,// Blocks in OpenCL have unique constraints which make the standard fields; // redundant while requiring size and align fields for enqueue_kernel. See; // initializeForBlockHeader in CGBlocks.cpp,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:79,Safety,redund,redundant,79,// Blocks in OpenCL have unique constraints which make the standard fields; // redundant while requiring size and align fields for enqueue_kernel. See; // initializeForBlockHeader in CGBlocks.cpp,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:3,Modifiability,Variab,Variable,3,// Variable captures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:37,Performance,cache,cache,37,"// If the member wasn't found in the cache, lazily construct and add it to the; // type (used when a limited form of the type is emitted).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:27,Testability,Test,Test,27,// anonymous namespace; // Test whether a type name could be rebuilt from emitted debug info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:67,Modifiability,variab,variables,67,"// Reference and pointer non-type template parameters point to; // variables, functions, etc and their value is, at best (for; // variables) represented as an address - not a reference to the; // DWARF describing the variable/function/etc. This makes it hard,; // possibly impossible to rebuild the original name - looking up the; // address in the executable file's symbol table would be needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:130,Modifiability,variab,variables,130,"// Reference and pointer non-type template parameters point to; // variables, functions, etc and their value is, at best (for; // variables) represented as an address - not a reference to the; // DWARF describing the variable/function/etc. This makes it hard,; // possibly impossible to rebuild the original name - looking up the; // address in the executable file's symbol table would be needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:217,Modifiability,variab,variable,217,"// Reference and pointer non-type template parameters point to; // variables, functions, etc and their value is, at best (for; // variables) represented as an address - not a reference to the; // DWARF describing the variable/function/etc. This makes it hard,; // possibly impossible to rebuild the original name - looking up the; // address in the executable file's symbol table would be needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:1202,Safety,detect,detecting,1202,"// A conversion operator presents complications/ambiguity if there's a; // conversion to class template that is itself a template, eg:; // template<typename T>; // operator ns::t1<T, int>();; // This should be named, eg: ""operator ns::t1<float, int><float>""; // (ignoring clang bug that means this is currently ""operator t1<float>""); // but if the arguments were stripped, the consumer couldn't differentiate; // whether the template argument list for the conversion type was the; // function's argument list (& no reconstitution was needed) or not.; // This could be handled if reconstitutable names had a separate attribute; // annotating them as such - this would remove the ambiguity.; //; // Alternatively the template argument list could be parsed enough to check; // whether there's one list or two, then compare that with the DWARF; // description of the return type and the template argument lists to determine; // how many lists there should be and if one is missing it could be assumed(?); // to be the function's template argument list & then be rebuilt.; //; // Other operator overloads that aren't conversion operators could be; // reconstituted but would require a bit more nuance about detecting the; // difference between these different operators during that rebuilding.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:17,Modifiability,variab,variable,17,// Create global variable debug descriptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:31,Modifiability,variab,variable,31,// Attempt to store one global variable for the declaration - even if we; // emit a lot of fields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:70,Modifiability,variab,variable,70,// If this is an anonymous union then we'll want to emit a global; // variable for each member of the anonymous union so that it's possible; // to find the name of any field in the union.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:33,Modifiability,variab,variable,33,// Create the descriptor for the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:37,Modifiability,variab,variables,37,"// If CodeView, emit enums as global variables, unless they are defined; // inside a class. We do this because MSVC doesn't emit S_CONSTANTs for; // enums in classes, and because it is difficult to attach this scope; // information to the global variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:246,Modifiability,variab,variable,246,"// If CodeView, emit enums as global variables, unless they are defined; // inside a class. We do this because MSVC doesn't emit S_CONSTANTs for; // enums in classes, and because it is difficult to attach this scope; // information to the global variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:26,Performance,cache,cache,26,// Record this DIE in the cache for nested declaration reference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:51,Safety,detect,detect,51,// Emitting one decl is sufficient - debuggers can detect that this is an; // overloaded name & provide lookup for all the overloads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:14,Performance,cache,cache,14,// This could cache & dedup here rather than relying on metadata deduping.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:109,Performance,cache,cache,109,"// Creating types might create further types - invalidating the current; // element and the size(), so don't cache/reference them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:18,Integrability,interface,interface,18,// Add methods to interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:165,Safety,avoid,avoiding,165,"// If there has been no definition for the declaration, call RAUW; // with ourselves, that will destroy the temporary MDNode and; // replace it with a standard one, avoiding leaking memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:101,Performance,cache,cache,101,"// We keep our own list of retained types, because we need to look; // up the final type in the type cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:51,Performance,optimiz,optimized,51,"// Call site-related attributes are only useful in optimized programs, and; // when there's a possibility of debugging backtraces.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:36,Availability,avail,available,36,"// Call site-related attributes are available in DWARF v5. Some debuggers,; // while not fully DWARF v5-compliant, may accept these attributes as if they; // were part of DWARF v4.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:4,Performance,Cache,Cache,4,/// Cache of previously constructed Types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:4,Performance,Cache,Cache,4,"/// Cache that maps VLA types to size expressions for that type,; /// represented by instantiated Metadata nodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:36,Integrability,interface,interfaces,36,/// Cache of previously constructed interfaces which may change.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:4,Performance,Cache,Cache,4,/// Cache of previously constructed interfaces which may change.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:63,Integrability,interface,interface,63,"/// Cache of forward declarations for methods belonging to the interface.; /// The extra bit on the DISubprogram specifies whether a method is; /// ""objc_direct"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:4,Performance,Cache,Cache,4,"/// Cache of forward declarations for methods belonging to the interface.; /// The extra bit on the DISubprogram specifies whether a method is; /// ""objc_direct"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:4,Performance,Cache,Cache,4,/// Cache of references to clang modules and precompiled headers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:12,Integrability,interface,interfaces,12,/// List of interfaces we want to keep even if orphaned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:4,Performance,Cache,Cache,4,/// Cache of forward declared types to RAUW at the end of compilation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:66,Modifiability,variab,variables,66,/// Cache of replaceable forward declarations (functions and; /// variables) to RAUW at the end of compilation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:4,Performance,Cache,Cache,4,/// Cache of replaceable forward declarations (functions and; /// variables) to RAUW at the end of compilation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:110,Modifiability,variab,variables,110,/// Cache declarations relevant to DW_TAG_imported_declarations (C++; /// using declarations and global alias variables) that aren't covered; /// by other more specific caches.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:4,Performance,Cache,Cache,4,/// Cache declarations relevant to DW_TAG_imported_declarations (C++; /// using declarations and global alias variables) that aren't covered; /// by other more specific caches.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:169,Performance,cache,caches,169,/// Cache declarations relevant to DW_TAG_imported_declarations (C++; /// using declarations and global alias variables) that aren't covered; /// by other more specific caches.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:84,Integrability,interface,interface,84,/// Helper functions for getOrCreateType.; /// @{; /// Currently the checksum of an interface includes the number of; /// ivars and property accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:69,Security,checksum,checksum,69,/// Helper functions for getOrCreateType.; /// @{; /// Currently the checksum of an interface includes the number of; /// ivars and property accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:141,Security,access,accessors,141,/// Helper functions for getOrCreateType.; /// @{; /// Currently the checksum of an interface includes the number of; /// ivars and property accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:20,Integrability,interface,interface,20,/// Get Objective-C interface type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:330,Integrability,interface,interface,330,"/// Look up the completed type for a self pointer in the TypeCache and; /// create a copy of it with the ObjectPointer and Artificial flags; /// set. If the type is not cached, a new one is created. This should; /// never happen though, since creating a type for the implicit self; /// argument implies that we already parsed the interface definition; /// and the ivar declarations in the implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:169,Performance,cache,cached,169,"/// Look up the completed type for a self pointer in the TypeCache and; /// create a copy of it with the ObjectPointer and Artificial flags; /// set. If the type is not cached, a new one is created. This should; /// never happen though, since creating a type for the implicit self; /// argument implies that we already parsed the interface definition; /// and the ivar declarations in the implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:34,Performance,cache,cache,34,/// @}; /// Get the type from the cache or return null type if it doesn't; /// exist.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:119,Deployability,update,updated,119,/// Return the debug type for a C++ method.; /// \arg CXXMethodDecl is of FunctionType. This function type is; /// not updated to include implicit \c this pointer. Use this routine; /// to get a method type which includes \c this pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:173,Integrability,rout,routine,173,/// Return the debug type for a C++ method.; /// \arg CXXMethodDecl is of FunctionType. This function type is; /// not updated to include implicit \c this pointer. Use this routine; /// to get a method type which includes \c this pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:111,Modifiability,extend,extended,111,"/// If target-specific LLVM \p AddressSpace directly maps to target-specific; /// DWARF address space, appends extended dereferencing mechanism to complex; /// expression \p Expr. Otherwise, does nothing.; ///; /// Extended dereferencing mechanism is has the following format:; /// DW_OP_constu <DWARF Address Space> DW_OP_swap DW_OP_xderef",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:215,Modifiability,Extend,Extended,215,"/// If target-specific LLVM \p AddressSpace directly maps to target-specific; /// DWARF address space, appends extended dereferencing mechanism to complex; /// expression \p Expr. Otherwise, does nothing.; ///; /// Extended dereferencing mechanism is has the following format:; /// DW_OP_constu <DWARF Address Space> DW_OP_swap DW_OP_xderef",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:114,Availability,avail,available,114,/// A helper function to collect debug info for the default elements of a; /// block.; ///; /// \returns The next available field offset after the default elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:12,Deployability,Update,Update,12,/// @}; /// Update the current source location. If \arg loc is invalid it is; /// ignored.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:4,Deployability,Update,Update,4,/// Update the current inline scope. All subsequent calls to \p EmitLocation; /// will create a location with this inlinedAt field.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:54,Modifiability,variab,variable,54,"/// Emit call to \c llvm.dbg.declare for an automatic variable; /// declaration.; /// Returns a pointer to the DILocalVariable associated with the; /// llvm.dbg.declare, or nullptr otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:53,Modifiability,variab,variable,53,/// Emit call to \c llvm.dbg.declare for an imported variable; /// declaration in a block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:53,Modifiability,variab,variable,53,/// Emit call to \c llvm.dbg.declare for an argument variable; /// declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:36,Modifiability,variab,variable,36,/// Emit information about a global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:27,Modifiability,variab,variable,27,/// Emit a constant global variable's debug info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:39,Modifiability,variab,variable,39,/// Emit information about an external variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:34,Modifiability,variab,variable,34,/// Emit information about global variable alias.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:256,Security,sanitiz,sanitizers,256,"/// DebugInfo isn't attached to string literals by default. While certain; /// aspects of debuginfo aren't useful for string literals (like a name), it's; /// nice to be able to symbolize the line and column information. This is; /// especially useful for sanitizers, as it allows symbolization of; /// heap-buffer-overflows on constant strings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:24,Integrability,interface,interface,24,/// Emit an Objective-C interface type standalone debug info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:40,Modifiability,variab,variable,40,"/// Emit call to llvm.dbg.declare for a variable declaration.; /// Returns a pointer to the DILocalVariable associated with the; /// llvm.dbg.declare, or nullptr otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:8,Integrability,wrap,wrapper,8,/// The wrapper struct used inside the __block_literal struct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:21,Security,checksum,checksum,21,/// Compute the file checksum debug info for input file ID.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:26,Performance,cache,cache,26,/// Get the type from the cache or create a new type if necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:26,Performance,cache,cache,26,/// Get the type from the cache or create a new partial type if; /// necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:58,Testability,stub,stub,58,/// Helper that either creates a forward declaration or a stub.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:102,Integrability,wrap,wrapped,102,/// Create a subprogram describing the forward declaration; /// represented in the given FunctionDecl wrapped in a GlobalDecl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:93,Integrability,wrap,wrapped,93,/// Create a DISubprogram describing the function; /// represented in the given FunctionDecl wrapped in a GlobalDecl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:20,Modifiability,variab,variable,20,/// Create a global variable describing the forward declaration; /// represented in the given VarDecl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:20,Modifiability,variab,variable,20,/// Return a global variable that represents one of the collection of global; /// variables created for an anonmyous union.; ///; /// Recursively collect all of the member fields of a global; /// anonymous decl and create static variables for them. The first; /// time this is called it needs to be on a union and then from; /// there we can have additional unnamed fields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:82,Modifiability,variab,variables,82,/// Return a global variable that represents one of the collection of global; /// variables created for an anonmyous union.; ///; /// Recursively collect all of the member fields of a global; /// anonymous decl and create static variables for them. The first; /// time this is called it needs to be on a union and then from; /// there we can have additional unnamed fields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:229,Modifiability,variab,variables,229,/// Return a global variable that represents one of the collection of global; /// variables created for an anonmyous union.; ///; /// Recursively collect all of the member fields of a global; /// anonymous decl and create static variables for them. The first; /// time this is called it needs to be on a union and then from; /// there we can have additional unnamed fields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:83,Testability,stub,stub,83,/// Get the name to use in the debug info for a dynamic initializer or atexit; /// stub function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:114,Availability,failure,failure,114,/// Create a DIExpression representing the constant corresponding; /// to the specified 'Val'. Returns nullptr on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate a copy of \p A using the DebugInfoNames allocator; /// and return a reference to it. If multiple arguments are given the strings; /// are concatenated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:54,Modifiability,variab,variable,54,"/// EmitVarDecl - This method handles emission of any variable declaration; /// inside a function, including static vars etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:23,Modifiability,variab,variable,23,"// Some function-scope variable does not have static storage but still; // needs to be emitted like a static variable, e.g. a function-scope; // variable in constant address space in OpenCL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:109,Modifiability,variab,variable,109,"// Some function-scope variable does not have static storage but still; // needs to be emitted like a static variable, e.g. a function-scope; // variable in constant address space in OpenCL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:145,Modifiability,variab,variable,145,"// Some function-scope variable does not have static storage but still; // needs to be emitted like a static variable, e.g. a function-scope; // variable in constant address space in OpenCL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:18,Modifiability,variab,variables,18,// Static sampler variables translated to function calls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:55,Modifiability,variab,variable,55,// FIXME: We need to force the emission/use of a guard variable for; // some variables even if we can constant-evaluate them because; // we can't guarantee every translation unit will constant-evaluate them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:77,Modifiability,variab,variables,77,// FIXME: We need to force the emission/use of a guard variable for; // some variables even if we can constant-evaluate them because; // we can't guarantee every translation unit will constant-evaluate them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:24,Modifiability,variab,variable,24,// Use the label if the variable is renamed with the asm-label extension.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:10,Modifiability,variab,variables,10,// OpenCL variables in local address space and CUDA shared; // variables cannot have an initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:63,Modifiability,variab,variables,63,// OpenCL variables in local address space and CUDA shared; // variables cannot have an initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:83,Modifiability,variab,variable,83,"/// AddInitializerToStaticVarDecl - Add the initializer for 'D' to the; /// global variable that has already been created for it. If the initializer; /// has a different type than GV does, this may free GV and return a different; /// one. Otherwise it just returns GV.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:51,Modifiability,variab,variable,51,"// Since we have a static initializer, this global variable can't; // be constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:2,Performance,Perform,PerformInit,2,/*PerformInit*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:55,Modifiability,Rewrite,Rewrite,55,"// The initializer may differ in type from the global. Rewrite; // the global to match the initializer. (We have to do this; // because some types, like unions, can't be completely represented; // in the LLVM type system.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:85,Performance,perform,perform,85,"// We have a constant initializer, but a nontrivial destructor. We still; // need to perform a guarded ""initialization"" in order to register the; // destructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:2,Performance,Perform,PerformInit,2,/*PerformInit*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:44,Modifiability,variab,variable,44,"// Check to see if we already have a global variable for this; // declaration. This can happen when double-emitting function; // bodies, e.g. with complete and base constructors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:44,Modifiability,variab,variables,44,// CUDA's local and local static __shared__ variables should not; // have any non-empty initializers. This is ensured by Sema.; // Whatever initializer such variable may have when it gets here is; // a no-op and should not be emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:157,Modifiability,variab,variable,157,// CUDA's local and local static __shared__ variables should not; // have any non-empty initializers. This is ensured by Sema.; // Whatever initializer such variable may have when it gets here is; // a no-op and should not be emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:15,Modifiability,variab,variable,15,// Emit global variable debug descriptor for static vars.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:36,Modifiability,variab,variable,36,"// Compute the address of the local variable, in case it's a; // byref or something.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:36,Modifiability,variab,variable,36,"// Compute the address of the local variable, in case it's a byref; // or something.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:104,Modifiability,variab,variable,104,// end anonymous namespace; /// EmitAutoVarWithLifetime - Does the setup required for an automatic; /// variable with lifetime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:55,Modifiability,variab,variable,55,"// If we find an l-value to r-value cast from a __weak variable,; // emit this operation as a copy or move.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:34,Safety,avoid,avoid,34,// Handle a formal type change to avoid asserting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:40,Testability,assert,asserting,40,// Handle a formal type change to avoid asserting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:7,Testability,Log,LogAlignment,7,// The LogAlignment info is unused.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:45,Modifiability,variab,variable,45,"// We have to maintain the illusion that the variable is; // zero-initialized. If the variable might be accessed in its; // initializer, zero-initialize before running the initializer, then; // actually perform the initialization with an assign.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:86,Modifiability,variab,variable,86,"// We have to maintain the illusion that the variable is; // zero-initialized. If the variable might be accessed in its; // initializer, zero-initialize before running the initializer, then; // actually perform the initialization with an assign.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:203,Performance,perform,perform,203,"// We have to maintain the illusion that the variable is; // zero-initialized. If the variable might be accessed in its; // initializer, zero-initialize before running the initializer, then; // actually perform the initialization with an assign.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:104,Security,access,accessed,104,"// We have to maintain the illusion that the variable is; // zero-initialized. If the variable might be accessed in its; // initializer, zero-initialize before running the initializer, then; // actually perform the initialization with an assign.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:9,Availability,down,down,9,// Drill down to the __block object if necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:16,Usability,simpl,simple,16,// We can use a simple GEP for this because it can't have been; // moved yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:23,Usability,simpl,simple,23,// Otherwise just do a simple store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:170,Deployability,release,released,170,"// If D is pseudo-strong, treat it like __unsafe_unretained here. This means; // that we omit the retain, and causes non-autoreleased return values to be; // immediately released.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:15,Security,access,accessed,15,"// If it's not accessed by the initializer, try to emit the; // initialization with a copy or move.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:13,Performance,optimiz,optimize,13,"// No way to optimize a producing initializer into this. It's not; // worth optimizing for, because the value will immediately; // disappear in the common case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:76,Performance,optimiz,optimizing,76,"// No way to optimize a producing initializer into this. It's not; // worth optimizing for, because the value will immediately; // disappear in the common case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:10,Modifiability,variab,variable,10,"// If the variable might have been accessed by its initializer, we; // might have to initialize with a barrier. We have to do this for; // both __weak and __strong, but __weak got filtered out above.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:35,Security,access,accessed,35,"// If the variable might have been accessed by its initializer, we; // might have to initialize with a barrier. We have to do this for; // both __weak and __strong, but __weak got filtered out above.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:83,Modifiability,variab,variable,83,"/// Decide whether we should use bzero plus some stores to initialize a local; /// variable instead of using a memcpy from a constant global. It is beneficial; /// to use bzero if the global is all zeros, or mostly zeros and large.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:156,Integrability,depend,depends,156,"// If a non-zero global is <= 32 bytes, always use a memcpy. If it is large,; // do it if it will require 6 or fewer scalar stores.; // TODO: Should budget depends on the size? Avoiding a large global warrants; // plopping in more stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:177,Safety,Avoid,Avoiding,177,"// If a non-zero global is <= 32 bytes, always use a memcpy. If it is large,; // do it if it will require 6 or fewer scalar stores.; // TODO: Should budget depends on the size? Avoiding a large global warrants; // plopping in more stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:62,Modifiability,variab,variable,62,"/// Decide whether we should use memset to initialize a local variable instead; /// of using a memcpy from a constant global. Assumes we've already decided to; /// not user bzero.; /// FIXME We could be more clever, as we are for bzero above, and generate; /// memset followed by stores. It's unclear that's worth the effort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:199,Performance,optimiz,optimizations,199,"/// Decide whether we want to split a constant structure or array store into a; /// sequence of its fields' stores. This may cost us code size and compilation; /// speed, but plays better with store optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:48,Performance,cache,cacheline,48,// Don't break things that occupy more than one cacheline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:165,Energy Efficiency,allocate,allocated,165,"// FIXME: Add handling for tail padding in vectors. Vectors don't; // have padding between or inside elements, but the total amount of; // data can be less than the allocated size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:21,Modifiability,variab,variable,21,// Form a simple per-variable cache of these values in case we find we; // want to reuse them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:30,Performance,cache,cache,30,// Form a simple per-variable cache of these values in case we find we; // want to reuse them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:10,Usability,simpl,simple,10,// Form a simple per-variable cache of these values in case we find we; // want to reuse them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:211,Integrability,depend,depending,211,"/// EmitAutoVarDecl - Emit code and set up an entry in LocalDeclMap for a; /// variable declaration with auto, register, or no storage class specifier.; /// These turn into simple stack objects, or GlobalValues depending on target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:79,Modifiability,variab,variable,79,"/// EmitAutoVarDecl - Emit code and set up an entry in LocalDeclMap for a; /// variable declaration with auto, register, or no storage class specifier.; /// These turn into simple stack objects, or GlobalValues depending on target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:173,Usability,simpl,simple,173,"/// EmitAutoVarDecl - Emit code and set up an entry in LocalDeclMap for a; /// variable declaration with auto, register, or no storage class specifier.; /// These turn into simple stack objects, or GlobalValues depending on target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:9,Availability,down,down,9,// Break down the array into individual dimensions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:79,Modifiability,variab,variable,79,/// EmitAutoVarAlloca - Emit the alloca and debug information for a; /// local variable. Does not emit initialization or destruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:18,Modifiability,variab,variably-modified,18,"// If the type is variably-modified, emit all the VLA sizes for it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:196,Modifiability,variab,variable,196,"// If this value is an array or struct with a statically determinable; // constant initializer, there are optimizations we can do.; //; // TODO: We should constant-evaluate the initializer of any variable,; // as long as it is initialized by a constant expression. Currently,; // isConstantInitializer produces wrong answers for structs with; // reference or bitfield members, and a few other cases, and checking; // for POD-ness protects us from some of these.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:106,Performance,optimiz,optimizations,106,"// If this value is an array or struct with a statically determinable; // constant initializer, there are optimizations we can do.; //; // TODO: We should constant-evaluate the initializer of any variable,; // as long as it is initialized by a constant expression. Currently,; // isConstantInitializer produces wrong answers for structs with; // reference or bitfield members, and a few other cases, and checking; // for POD-ness protects us from some of these.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:10,Modifiability,variab,variable,10,"// If the variable's a const type, and it's neither an NRVO; // candidate nor a __block variable and has no mutable members,; // emit it as a global instead.; // Exception is if a variable is located in non-constant address space; // in OpenCL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:88,Modifiability,variab,variable,88,"// If the variable's a const type, and it's neither an NRVO; // candidate nor a __block variable and has no mutable members,; // emit it as a global instead.; // Exception is if a variable is located in non-constant address space; // in OpenCL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:180,Modifiability,variab,variable,180,"// If the variable's a const type, and it's neither an NRVO; // candidate nor a __block variable and has no mutable members,; // emit it as a global instead.; // Exception is if a variable is located in non-constant address space; // in OpenCL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:24,Modifiability,variab,variable,24,"// A normal fixed sized variable becomes an alloca in the entry block,; // unless:; // - it's an NRVO variable.; // - we are compiling OpenMP and it's an OpenMP local variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:102,Modifiability,variab,variable,102,"// A normal fixed sized variable becomes an alloca in the entry block,; // unless:; // - it's an NRVO variable.; // - we are compiling OpenMP and it's an OpenMP local variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:167,Modifiability,variab,variable,167,"// A normal fixed sized variable becomes an alloca in the entry block,; // unless:; // - it's an NRVO variable.; // - we are compiling OpenMP and it's an OpenMP local variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:40,Energy Efficiency,allocate,allocate,40,"// The named return value optimization: allocate this variable in the; // return slot, so that we can elide the copy when returning this; // variable (C++0x [class.copy]p34).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:54,Modifiability,variab,variable,54,"// The named return value optimization: allocate this variable in the; // return slot, so that we can elide the copy when returning this; // variable (C++0x [class.copy]p34).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:141,Modifiability,variab,variable,141,"// The named return value optimization: allocate this variable in the; // return slot, so that we can elide the copy when returning this; // variable (C++0x [class.copy]p34).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:26,Performance,optimiz,optimization,26,"// The named return value optimization: allocate this variable in the; // return slot, so that we can elide the copy when returning this; // variable (C++0x [class.copy]p34).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:80,Modifiability,variab,variable,80,// Create a flag that is used to indicate when the NRVO was applied; // to this variable. Set it to zero to indicate that NRVO was not; // applied.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:33,Modifiability,variab,variable,33,// Record the NRVO flag for this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:123,Testability,assert,asserts,123,// Create the alloca. Note that we set the name separately from; // building the instruction so that it's there even in no-asserts; // builds.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:47,Modifiability,variab,variable,47,"// If there's a jump into the lifetime of this variable, its lifetime; // gets broken up into several regions in IR, which requires more work; // to handle correctly. For now, just omit the intrinsics; this is a; // rare case, and it's better to just be conservatively correct.; // PR28267.; //; // We have to do this in all language modes if there's a jump past the; // declaration. We also have to do it in C if there's a jump to an; // earlier point in the current block because non-VLA lifetimes begin as; // soon as the containing block is entered, not when its variables; // actually come into scope; suppressing the lifetime annotations; // completely in this case is unnecessarily pessimistic, but again, this; // is rare.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:567,Modifiability,variab,variables,567,"// If there's a jump into the lifetime of this variable, its lifetime; // gets broken up into several regions in IR, which requires more work; // to handle correctly. For now, just omit the intrinsics; this is a; // rare case, and it's better to just be conservatively correct.; // PR28267.; //; // We have to do this in all language modes if there's a jump past the; // declaration. We also have to do it in C if there's a jump to an; // earlier point in the current block because non-VLA lifetimes begin as; // soon as the containing block is entered, not when its variables; // actually come into scope; suppressing the lifetime annotations; // completely in this case is unnecessarily pessimistic, but again, this; // is rare.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:29,Modifiability,variab,variable,29,"// Delayed globalization for variable length declarations. This ensures that; // the expression representing the length has been emitted and can be used; // by the definition of the VLA. Since this is an escaped declaration, in; // OpenMP we have to use a call to __kmpc_alloc_shared(). The matching; // deallocation call to __kmpc_free_shared() is emitted later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:20,Energy Efficiency,allocate,allocated,20,// Mark variable as allocated:,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:8,Modifiability,variab,variable,8,// Mark variable as allocated:,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate memory for the array.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:41,Modifiability,variab,variable,41,/// Determines whether the given __block variable is potentially; /// captured by the given statement.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:41,Modifiability,variab,variable,41,/// Determines whether the given __block variable is potentially; /// captured by the given expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:15,Safety,safe,safe,15,"// FIXME. Make safe assumption assuming arbitrary statements cause capturing.; // Later, provide code to poke into statements for capture analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:21,Modifiability,variab,variables,21,"// We skip auto-init variables by their alloc size. Take this as an example:; // ""struct Foo {int x; char buff[1024];}"" Assume the max-size flag is 1023.; // All Foo type variables will be skipped. Ideally, we only skip the buff; // array and still auto-init X in this example.; // TODO: Improve the size filtering to by member size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:171,Modifiability,variab,variables,171,"// We skip auto-init variables by their alloc size. Take this as an example:; // ""struct Foo {int x; char buff[1024];}"" Assume the max-size flag is 1023.; // All Foo type variables will be skipped. Ideally, we only skip the buff; // array and still auto-init X in this example.; // TODO: Improve the size filtering to by member size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:41,Modifiability,variab,variable,41,// Initialize the structure of a __block variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:18,Modifiability,variab,variable,18,// Initialize the variable here if it doesn't have a initializer and it is a; // C struct that is non-trivial to initialize or an array containing such a; // struct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:33,Modifiability,variab,variable,33,"// Check whether this is a byref variable that's potentially; // captured and moved by its own initializer. If so, we'll need to; // emit the initializer first, then copy into the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:180,Modifiability,variab,variable,180,"// Check whether this is a byref variable that's potentially; // captured and moved by its own initializer. If so, we'll need to; // emit the initializer first, then copy into the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:7,Usability,simpl,simple,7,"// For simple scalar/complex initialization, store the value directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:56,Modifiability,variab,variable,56,"/// Emit an expression as an initializer for an object (variable, field, etc.); /// at the given location. The expression is not necessarily the normal; /// initializer for the object, and the address is not necessarily; /// its normal location.; ///; /// \param init the initializing expression; /// \param D the object to act as if we're initializing; /// \param lvalue the lvalue to initialize; /// \param capturedByInit true if \p D is a __block variable; /// whose address is potentially changed by the initializer",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:450,Modifiability,variab,variable,450,"/// Emit an expression as an initializer for an object (variable, field, etc.); /// at the given location. The expression is not necessarily the normal; /// initializer for the object, and the address is not necessarily; /// its normal location.; ///; /// \param init the initializing expression; /// \param D the object to act as if we're initializing; /// \param lvalue the lvalue to initialize; /// \param capturedByInit true if \p D is a __block variable; /// whose address is potentially changed by the initializer",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:48,Modifiability,variab,variable,48,/// Enter a destroy cleanup for the given local variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:25,Modifiability,variab,variables,25,"// Note that for __block variables, we want to destroy the; // original stack object, not the possibly forwarded object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:39,Modifiability,variab,variables,39,// Suppress cleanups for pseudo-strong variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:22,Modifiability,variab,variable,22,"// If this is a block variable, call _Block_object_destroy; // (on the unforwarded address). Don't enter this cleanup if we're in pure-GC; // mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:2,Performance,Load,LoadBlockVarAddr,2,/*LoadBlockVarAddr*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:30,Performance,perform,perform,30,"/// emitDestroy - Immediately perform the destruction of the given; /// object.; ///; /// \param addr - the address of the object; a type*; /// \param type - the type of the object; if an array type, all; /// objects are destroyed in reverse order; /// \param destroyer - the function to call to destroy individual; /// elements; /// \param useEHCleanupForArray - whether an EH cleanup should be; /// used when destroying array elements, in case one of the; /// destructions throws an exception",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:3,Performance,Perform,Perform,3,// Perform the actual destruction there.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:4,Performance,Perform,Perform,4,"/// Perform partial array destruction as if in an EH cleanup. Unlike; /// emitArrayDestroy, the element type here may still be an array type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:49,Availability,down,down,49,"// If the element type is itself an array, drill down.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:49,Performance,perform,performs,49,/// RegularPartialArrayDestroy - a cleanup which performs a partial; /// array destroy where the end pointer is regularly determined and; /// does not need to be loaded from a local.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:162,Performance,load,loaded,162,/// RegularPartialArrayDestroy - a cleanup which performs a partial; /// array destroy where the end pointer is regularly determined and; /// does not need to be loaded from a local.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:51,Performance,perform,performs,51,/// IrregularPartialArrayDestroy - a cleanup which performs a; /// partial array destroy where the end pointer is irregularly; /// determined and must be loaded from a local.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:154,Performance,load,loaded,154,/// IrregularPartialArrayDestroy - a cleanup which performs a; /// partial array destroy where the end pointer is irregularly; /// determined and must be loaded from a local.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:27,Deployability,release,release,27,/// A cleanup to perform a release of an object at the end of a; /// function. This is used to balance out the incoming +1 of a; /// ns_consumed argument when we can't reasonably do that just by; /// not doing the initial retain for a __block argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:17,Performance,perform,perform,17,/// A cleanup to perform a release of an object at the end of a; /// function. This is used to balance out the incoming +1 of a; /// ns_consumed argument when we can't reasonably do that just by; /// not doing the initial retain for a __block argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:63,Integrability,depend,depending,63,// end anonymous namespace; /// Emit an alloca (or GlobalValue depending on target); /// for the specified parameter and set up LocalDeclMap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:95,Modifiability,variab,variables,95,"// Suppressing debug info for ThreadPrivateVar parameters, else it hides; // debug info of TLS variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:222,Deployability,release,release,222,"// We honor __attribute__((ns_consumed)) for types with lifetime.; // For __strong, it's handled by just skipping the initial retain;; // otherwise we have to balance out the initial +1 with an extra; // cleanup to do the release at the end of the function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:3,Performance,Load,Load,3,// Load objects passed indirectly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:145,Deployability,release,release,145,"// use objc_storeStrong(&dest, value) for retaining the; // object. But first, store a null into 'dest' because; // objc_storeStrong attempts to release its old value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:52,Modifiability,variab,variable,52,/// Emit code to cause the destruction of the given variable with; /// static storage duration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:27,Testability,log,logic,27,"// Otherwise, the standard logic requires a helper function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:27,Modifiability,variab,variable,27,/// Emit code to cause the variable at the given address to be considered as; /// constant from this point onwards.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:42,Performance,optimiz,optimizing,42,// Do not emit the intrinsic if we're not optimizing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:39,Modifiability,variab,variable,39,"// The address space of a static local variable (DeclPtr) may be different; // from the address space of the ""this"" argument of the constructor. In that; // case, we need an addrspacecast before calling the constructor.; //; // struct StructWithCtor {; // __device__ StructWithCtor() {...}; // };; // __device__ void foo() {; // __shared__ StructWithCtor s;; // ...; // }; //; // For example, in the above CUDA code, the static local variable s has a; // ""shared"" address space qualifier, but the constructor of StructWithCtor; // expects ""this"" in the ""generic"" address space.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:434,Modifiability,variab,variable,434,"// The address space of a static local variable (DeclPtr) may be different; // from the address space of the ""this"" argument of the constructor. In that; // case, we need an addrspacecast before calling the constructor.; //; // struct StructWithCtor {; // __device__ StructWithCtor() {...}; // };; // __device__ void foo() {; // __shared__ StructWithCtor s;; // ...; // }; //; // For example, in the above CUDA code, the static local variable s has a; // ""shared"" address space qualifier, but the constructor of StructWithCtor; // expects ""this"" in the ""generic"" address space.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:13,Testability,stub,stub,13,"/// Create a stub function, suitable for being passed to atexit,; /// which passes the given address to the given destructor function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:13,Testability,stub,stub,13,"/// Create a stub function, suitable for being passed to __pt_atexit_np,; /// which passes the given address to the given destructor function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:11,Testability,stub,stub,11,"// Get the stub function type, int(*)(int,...).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:58,Availability,error,error,58,"// If we've been asked to forbid guard variables, emit an error now.; // This diagnostic is hard-coded for Darwin's use case; we can find; // better phrasing if someone else needs it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:39,Modifiability,variab,variables,39,"// If we've been asked to forbid guard variables, emit an error now.; // This diagnostic is hard-coded for Darwin's use case; we can find; // better phrasing if someone else needs it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:81,Integrability,depend,depending,81,"// A guess at how many times we will enter the initialization of a; // variable, depending on the kind of variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:71,Modifiability,variab,variable,71,"// A guess at how many times we will enter the initialization of a; // variable, depending on the kind of variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:106,Modifiability,variab,variable,106,"// A guess at how many times we will enter the initialization of a; // variable, depending on the kind of variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:17,Modifiability,variab,variables,17,"// For non-local variables, don't apply any weighting for now. Due to our; // use of COMDATs, we expect there to be at most one initialization of the; // variable per DSO, but we have no way to know how many DSOs will try to; // initialize the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:154,Modifiability,variab,variable,154,"// For non-local variables, don't apply any weighting for now. Due to our; // use of COMDATs, we expect there to be at most one initialization of the; // variable per DSO, but we have no way to know how many DSOs will try to; // initialize the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:244,Modifiability,variab,variable,244,"// For non-local variables, don't apply any weighting for now. Due to our; // use of COMDATs, we expect there to be at most one initialization of the; // variable per DSO, but we have no way to know how many DSOs will try to; // initialize the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:113,Modifiability,variab,variable,113,// The probability of us entering the initializer is; // 1 / (total number of times we attempt to initialize the variable).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:77,Modifiability,variab,variable,77,/// Create a global pointer to a function that will initialize a global; /// variable. The user has requested that this pointer be emitted in a specific; /// section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:99,Modifiability,variab,variables,99,"// According to E.2.3.1 in CUDA-7.5 Programming guide: __device__,; // __constant__ and __shared__ variables defined in namespace scope,; // that are of class type, cannot have a non-empty constructor. All; // the checks have been done in Sema by now. Whatever initializers; // are allowed are empty and we just need to ignore them here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:48,Usability,guid,guide,48,"// According to E.2.3.1 in CUDA-7.5 Programming guide: __device__,; // __constant__ and __shared__ variables defined in namespace scope,; // that are of class type, cannot have a non-empty constructor. All; // the checks have been done in Sema by now. Whatever initializers; // are allowed are empty and we just need to ignore them here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:12,Modifiability,variab,variable,12,// Create a variable initialization function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:3,Integrability,Contract,Contract,3,"// Contract with backend that ""init_seg(compiler)"" corresponds to priority; // 200 and ""init_seg(lib)"" corresponds to priority 400.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:595,Modifiability,variab,variables,595,"// C++ [basic.start.init]p2:; // Definitions of explicitly specialized class template static data; // members have ordered initialization. Other class template static data; // members (i.e., implicitly or explicitly instantiated specializations); // have unordered initialization.; //; // As a consequence, we can put them into their own llvm.global_ctors entry.; //; // If the global is externally visible, put the initializer into a COMDAT; // group with the global being initialized. On most platforms, this is a; // minor startup time optimization. In the MS C++ ABI, there are no guard; // variables, so this COMDAT key is required for correctness.; //; // SelectAny globals will be comdat-folded. Put the initializer into a; // COMDAT group associated with the global, so the initializers get folded; // too.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:539,Performance,optimiz,optimization,539,"// C++ [basic.start.init]p2:; // Definitions of explicitly specialized class template static data; // members have ordered initialization. Other class template static data; // members (i.e., implicitly or explicitly instantiated specializations); // have unordered initialization.; //; // As a consequence, we can put them into their own llvm.global_ctors entry.; //; // If the global is externally visible, put the initializer into a COMDAT; // group with the global being initialized. On most platforms, this is a; // minor startup time optimization. In the MS C++ ABI, there are no guard; // variables, so this COMDAT key is required for correctness.; //; // SelectAny globals will be comdat-folded. Put the initializer into a; // COMDAT group associated with the global, so the initializers get folded; // too.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:30,Security,hash,hash,30,// Re-do lookup in case of re-hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:356,Availability,avail,available,356,"/* Build the initializer for a C++20 module:; This is arranged to be run only once regardless of how many times the module; might be included transitively. This arranged by using a guard variable. If there are no initializers at all (and also no imported modules) we reduce; this to an empty function (since the Itanium ABI requires that this function; be available to a caller, which might be produced by a different; implementation). First we call any initializers for imported modules.; We then call initializers for the Global Module Fragment (if present); We then call initializers for the current module.; We then call initializers for the Private Module Fragment (if present); */",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:267,Energy Efficiency,reduce,reduce,267,"/* Build the initializer for a C++20 module:; This is arranged to be run only once regardless of how many times the module; might be included transitively. This arranged by using a guard variable. If there are no initializers at all (and also no imported modules) we reduce; this to an empty function (since the Itanium ABI requires that this function; be available to a caller, which might be produced by a different; implementation). First we call any initializers for imported modules.; We then call initializers for the Global Module Fragment (if present); We then call initializers for the current module.; We then call initializers for the Private Module Fragment (if present); */",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:187,Modifiability,variab,variable,187,"/* Build the initializer for a C++20 module:; This is arranged to be run only once regardless of how many times the module; might be included transitively. This arranged by using a guard variable. If there are no initializers at all (and also no imported modules) we reduce; this to an empty function (since the Itanium ABI requires that this function; be available to a caller, which might be produced by a different; implementation). First we call any initializers for imported modules.; We then call initializers for the Global Module Fragment (if present); We then call initializers for the current module.; We then call initializers for the Private Module Fragment (if present); */",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:89,Modifiability,variab,variable,89,// If we have a completely empty initializer then we do not want to create; // the guard variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:247,Integrability,interface,interface,247,// We allow for the case that a module object is added to a linked binary; // without a specific call to the the initializer. This also ensures that; // implementation partition initializers are called when the partition; // is not imported as an interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:540,Deployability,release,released,540,// In OpenCL global init functions must be converted to kernels in order to; // be able to launch them from the host.; // FIXME: Some more work might be needed to handle destructors correctly.; // Current initialization function makes use of function pointers callbacks.; // We can't support function pointers especially between host and device.; // However it seems global destruction has little meaning without any; // dynamic resource allocation on the device and program scope variables are; // destroyed by the runtime when program is released.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:481,Modifiability,variab,variables,481,// In OpenCL global init functions must be converted to kernels in order to; // be able to launch them from the host.; // FIXME: Some more work might be needed to handle destructors correctly.; // Current initialization function makes use of function pointers callbacks.; // We can't support function pointers especially between host and device.; // However it seems global destruction has little meaning without any; // dynamic resource allocation on the device and program scope variables are; // destroyed by the runtime when program is released.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:59,Modifiability,variab,variable,59,/// Emit the code necessary to initialize the given global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:43,Modifiability,variab,variable,43,// Check if we need to emit debug info for variable initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:44,Modifiability,variab,variable,44,"// Use guarded initialization if the global variable is weak. This; // occurs for, e.g., instantiated static data members and; // definitions explicitly marked weak.; //; // Also use guarded initialization for a variable with dynamic TLS and; // unordered initialization. (If the initialization is ordered, the ABI; // layer will guard the whole-TU initialization for us.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:212,Modifiability,variab,variable,212,"// Use guarded initialization if the global variable is weak. This; // occurs for, e.g., instantiated static data members and; // definitions explicitly marked weak.; //; // Also use guarded initialization for a variable with dynamic TLS and; // unordered initialization. (If the initialization is ordered, the ABI; // layer will guard the whole-TU initialization for us.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:22,Modifiability,variab,variable,22,"// If we have a guard variable, check whether we've already performed; // these initializations. This happens for TLS initialization functions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:60,Performance,perform,performed,60,"// If we have a guard variable, check whether we've already performed; // these initializations. This happens for TLS initialization functions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:13,Modifiability,variab,variable,13,// The guard variable can't ever change again.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:116,Safety,avoid,avoid,116,// The GCC runtime's personality function inherently doesn't support; // mixed EH. Use the ObjC personality just to avoid returning null.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:46,Modifiability,variab,variables,46,// ObjC EH selector entries are always global variables with; // names starting like this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:46,Modifiability,variab,variables,46,// ObjC EH selector entries are always global variables with; // names starting like this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:58,Testability,log,logic,58,// Both the problem this endeavors to fix and the way the logic; // above works is specific to the NeXT runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:16,Performance,optimiz,optimization,16,// Can't do the optimization if it has non-C++ uses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:25,Integrability,inject,inject,25,/// Returns the value to inject into a selector to indicate the; /// presence of a catch-all.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:25,Security,inject,inject,25,/// Returns the value to inject into a selector to indicate the; /// presence of a catch-all.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:173,Safety,abort,abort,173,"// If the exception is being emitted in an OpenMP target region,; // and the target is a GPU, we do not support exception handling.; // Therefore, we emit a trap which will abort the program, and; // prompt a warning indicating that a trap will be emitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:201,Integrability,message,message,201,// Currently Emscripten EH only handles 'throw()' but not 'throw' with; // types. 'throw()' handling will be done in JS glue code so we don't need; // to do anything in that case. Just print a warning message in case of; // throw with types.; // TODO Correctly handle exception specification in Emscripten EH,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:26,Usability,simpl,simple,26,// noexcept functions are simple terminate scopes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:3,Performance,Load,Load,3,// Load the selector value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:261,Integrability,rout,routine,261,"// FIXME: Dropping the reference type on the type into makes it; // impossible to correctly implement catch-by-reference; // semantics for pointers. Unfortunately, this is what all; // existing compilers do, and it's not clear that the standard; // personality routine is capable of doing this right. See C++ DR 388:; // http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#388",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:221,Usability,clear,clear,221,"// FIXME: Dropping the reference type on the type into makes it; // impossible to correctly implement catch-by-reference; // semantics for pointers. Unfortunately, this is what all; // existing compilers do, and it's not clear that the standard; // personality routine is capable of doing this right. See C++ DR 388:; // http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#388",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:78,Usability,resume,resumes,78,// The dispatch block for the end of the scope chain is a block that; // just resumes unwinding.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:35,Performance,cache,cached,35,"// Check the innermost scope for a cached landing pad. If this is; // a non-EH cleanup, we'll check enclosing scopes in EmitLandingPad.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:3,Performance,Cache,Cache,3,"// Cache the landing pad on the innermost scope. If this is a; // non-EH scope, cache the landing pad on the enclosing scope, too.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:80,Performance,cache,cache,80,"// Cache the landing pad on the innermost scope. If this is a; // non-EH scope, cache the landing pad on the enclosing scope, too.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:14,Modifiability,config,configure,14,// Create and configure the landing pad.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:36,Safety,safe,safe,36,// Save the exception pointer. It's safe to use a single exception; // pointer per function because EH cleanups can never have nested; // try/catches.; // Build the landingpad instruction.; // Accumulate all the handlers in scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:45,Safety,abort,abort,45,"// If this is a catch-all, register that and abort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:109,Integrability,rout,routine,109,// Create a filter expression: a constant array indicating which filter; // types there are. The personality routine only lands here if the filter; // doesn't match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:3,Testability,Test,Test,3,// Test against each of the exception types we claim to catch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:3,Testability,Test,Test,3,// Test against each of the exception types we claim to catch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:3,Performance,Load,Load,3,// Load the selector value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:3,Testability,Test,Test,3,// Test against each of the exception types we claim to catch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:46,Modifiability,variab,variable,46,"// Enter a cleanup scope, including the catch variable and the; // end-catch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:24,Modifiability,variab,variable,24,// Initialize the catch variable and set up the cleanups.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:3,Performance,Perform,Perform,3,// Perform the body of the catch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:134,Testability,test,test,134,"// Because in wasm we merge all catch clauses into one big catchpad, in case; // none of the types in catch handlers matches after we test against each of; // them, we should unwind to the next EH enclosing scope. We generate a call; // to rethrow function here to do that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:38,Performance,optimiz,optimization,38,"// Leave the end-catch cleanup. As an optimization, pretend that; // the fallthrough path was inaccessible; we've dynamically proven; // that we're not in the EH case along that path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:738,Performance,perform,performing,738,"// A finally block is a statement which must be executed on any edge; // out of a given scope. Unlike a cleanup, the finally block may; // contain arbitrary control flow leading out of itself. In; // addition, finally blocks should always be executed, even if there; // are no catch handlers higher on the stack. Therefore, we; // surround the protected scope with a combination of a normal; // cleanup (to catch attempts to break out of the block via normal; // control flow) and an EH catch-all (semantically ""outside"" any try; // statement to which the finally block might have been attached).; // The finally block itself is generated in the context of a cleanup; // which conditionally leaves the catch-all.; // Jump destination for performing the finally block on an exception; // edge. We'll never actually reach this block, so unreachable is; // fine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:37,Performance,perform,perform,37,// Enter a normal cleanup which will perform the @finally block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:51,Usability,resume,resume,51,// Recreate the landingpad's return value for the 'resume' instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:19,Modifiability,variab,variable,19,/// Find all local variable captures in the statement.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:122,Availability,recover,recover,122,// This is the simple case where we are the outermost finally. All we; // have to do here is make sure we escape this and recover it in the; // outlined handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:122,Safety,recover,recover,122,// This is the simple case where we are the outermost finally. All we; // have to do here is make sure we escape this and recover it in the; // outlined handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:15,Usability,simpl,simple,15,// This is the simple case where we are the outermost finally. All we; // have to do here is make sure we escape this and recover it in the; // outlined handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:12,Modifiability,variab,variable,12,// Mark the variable escaped if nobody else referenced it and compute the; // localescape index.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:15,Modifiability,variab,variable,15,"// Bitcast the variable, rename it, and insert it in the local decl map.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:50,Availability,recover,recovery,50,// 32-bit SEH filters need to be careful about FP recovery. The end of the; // EH registration is passed in as the EBP physical register. We can; // recover that with llvm.frameaddress(1).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:149,Availability,recover,recover,149,// 32-bit SEH filters need to be careful about FP recovery. The end of the; // EH registration is passed in as the EBP physical register. We can; // recover that with llvm.frameaddress(1).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:50,Safety,recover,recovery,50,// 32-bit SEH filters need to be careful about FP recovery. The end of the; // EH registration is passed in as the EBP physical register. We can; // recover that with llvm.frameaddress(1).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:149,Safety,recover,recover,149,// 32-bit SEH filters need to be careful about FP recovery. The end of the; // EH registration is passed in as the EBP physical register. We can; // recover that with llvm.frameaddress(1).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:57,Availability,recover,recover,57,"// Given whatever FP the runtime provided us in EntryFP, recover the true; // frame pointer of the parent function. We only need to do this in filters,; // since finally funclets recover the parent FP for us.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:179,Availability,recover,recover,179,"// Given whatever FP the runtime provided us in EntryFP, recover the true; // frame pointer of the parent function. We only need to do this in filters,; // since finally funclets recover the parent FP for us.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:57,Safety,recover,recover,57,"// Given whatever FP the runtime provided us in EntryFP, recover the true; // frame pointer of the parent function. We only need to do this in filters,; // since finally funclets recover the parent FP for us.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:179,Safety,recover,recover,179,"// Given whatever FP the runtime provided us in EntryFP, recover the true; // frame pointer of the parent function. We only need to do this in filters,; // since finally funclets recover the parent FP for us.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:350,Performance,optimiz,optimized,350,"// if the parent is a _finally, the passed-in ParentFP is the FP; // of parent _finally, not Establisher's FP (FP of outermost function).; // Establkisher FP is 2nd paramenter passed into parent _finally.; // Fortunately, it's always saved in parent's frame. The following; // code retrieves it, and escapes it so that spill instruction won't be; // optimized away.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:60,Integrability,Depend,Depending,60,"// Locate and escape Parent's frame_pointer.addr alloca; // Depending on target, should be 1st/2nd one in LocalDeclMap.; // Let's just scan for ImplicitParamDecl with VoidPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:64,Availability,recover,recoverfp,64,"// an example of a filter's prolog::; // %0 = call ptr @llvm.eh.recoverfp(@""?fin$0@0@main@@"",..); // %1 = call ptr @llvm.localrecover(@""?fin$0@0@main@@"",..); // %2 = load ptr, ptr %1, align 8; // ==> %2 is the frame-pointer of outermost host function",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:166,Performance,load,load,166,"// an example of a filter's prolog::; // %0 = call ptr @llvm.eh.recoverfp(@""?fin$0@0@main@@"",..); // %1 = call ptr @llvm.localrecover(@""?fin$0@0@main@@"",..); // %2 = load ptr, ptr %1, align 8; // ==> %2 is the frame-pointer of outermost host function",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:64,Safety,recover,recoverfp,64,"// an example of a filter's prolog::; // %0 = call ptr @llvm.eh.recoverfp(@""?fin$0@0@main@@"",..); // %1 = call ptr @llvm.localrecover(@""?fin$0@0@main@@"",..); // %2 = load ptr, ptr %1, align 8; // ==> %2 is the frame-pointer of outermost host function",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:91,Performance,load,loaded,91,"// We are in a lambda function where ""this"" is captured so the; // CXXThisValue need to be loaded from the lambda capture",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:13,Testability,stub,stub,13,/// Create a stub filter function that will ultimately hold the code of the; /// filter expression. The EH preparation passes in LLVM will outline the code; /// from the main function body into this stub.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:199,Testability,stub,stub,199,/// Create a stub filter function that will ultimately hold the code of the; /// filter expression. The EH preparation passes in LLVM will outline the code; /// from the main function body into this stub.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:223,Performance,load,load,223,"// On Win32, the EBP on entry to the filter points to the end of an; // exception registration object. It contains 6 32-bit fields, and the info; // pointer is stored in the second field. So, GEP 20 bytes backwards and; // load the pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:68,Security,access,access,68,// Save the exception code in the exception slot to unify exception access in; // the filter function and the landing pad.; // struct EXCEPTION_POINTERS {; // EXCEPTION_RECORD *ExceptionRecord;; // CONTEXT *ContextRecord;; // };; // int exceptioncode = exception_pointers->ExceptionRecord->ExceptionCode;,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:140,Usability,simpl,simple,140,"// If this code is reachable then emit a stop point (if generating; // debug info). We have to do this ourselves because we are on the; // ""simple"" statement path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:22,Security,sanitiz,sanitizers,22,// Experiment to make sanitizers easier to debug,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:159,Modifiability,variab,variables,159,"// Alloca always returns a pointer in alloca address space, which may; // be different from the type defined by the language. For example,; // in C++ the auto variables are in the default address space. Therefore; // cast alloca to the default address space when necessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:25,Performance,Perform,Perform,25,"/// EvaluateExprAsBool - Perform the usual unary conversions on the specified; /// expression and compare the result against zero, returning an Int1Ty value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:90,Security,access,accessible,90,"/// EmitAnyExprToTemp - Similar to EmitAnyExpr(), however, the result will; /// always be accessible even if no aggregate location is provided.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:121,Deployability,release,release,121,"// Objective-C++ ARC:; // If we are binding a reference to a temporary that has ownership, we; // need to perform retain/release operations on the temporary.; //; // FIXME: This should be looking at E, not M.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:106,Performance,perform,perform,106,"// Objective-C++ ARC:; // If we are binding a reference to a temporary that has ownership, we; // need to perform retain/release operations on the temporary.; //; // FIXME: This should be looking at E, not M.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:55,Deployability,release,release,55,// Note: we intentionally do not register a cleanup to release; // the object on program termination.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:185,Performance,optimiz,optimizer,185,// If we have a constant temporary array or record try to promote it into a; // constant global under the same rules a normal constant would've been; // promoted. This is easier on the optimizer and generally emits fewer; // instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:3,Safety,Avoid,Avoid,3,"// Avoid creating a conditional cleanup just to hold an llvm.lifetime.end; // marker. Instead, start the lifetime of a conditional temporary earlier; // so that it's unconditional. Don't do this with sanitizers which need; // more precise lifetime marks. However when inside an ""await.suspend""; // block, we should always avoid conditional cleanup because it creates; // boolean marker that lives across await_suspend, which can destroy coro; // frame.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:322,Safety,avoid,avoid,322,"// Avoid creating a conditional cleanup just to hold an llvm.lifetime.end; // marker. Instead, start the lifetime of a conditional temporary earlier; // so that it's unconditional. Don't do this with sanitizers which need; // more precise lifetime marks. However when inside an ""await.suspend""; // block, we should always avoid conditional cleanup because it creates; // boolean marker that lives across await_suspend, which can destroy coro; // frame.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:200,Security,sanitiz,sanitizers,200,"// Avoid creating a conditional cleanup just to hold an llvm.lifetime.end; // marker. Instead, start the lifetime of a conditional temporary earlier; // so that it's unconditional. Don't do this with sanitizers which need; // more precise lifetime marks. However when inside an ""await.suspend""; // block, we should always avoid conditional cleanup because it creates; // boolean marker that lives across await_suspend, which can destroy coro; // frame.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:136,Modifiability,extend,extended,136,"// Perform derived-to-base casts and/or field accesses, to get from the; // temporary object we created (and, potentially, for which we extended; // the lifetime) to the subobject we're binding the reference to.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:3,Performance,Perform,Perform,3,"// Perform derived-to-base casts and/or field accesses, to get from the; // temporary object we created (and, potentially, for which we extended; // the lifetime) to the subobject we're binding the reference to.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:46,Security,access,accesses,46,"// Perform derived-to-base casts and/or field accesses, to get from the; // temporary object we created (and, potentially, for which we extended; // the lifetime) to the subobject we're binding the reference to.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:110,Security,access,accessed,110,"/// getAccessedFieldNo - Given an encoded value and a result number, return the; /// input field number being accessed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:58,Security,Hash,Hashing,58,/// Emit the hash_16_bytes function from include/llvm/ADT/Hashing.h.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:160,Energy Efficiency,reduce,reduce,160,"// Quickly determine whether we have a pointer to an alloca. It's possible; // to skip null checks, and some alignment checks, for these pointers. This; // can reduce compile-time significantly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:8,Performance,perform,performing,8,"// When performing pointer casts, it's OK if the value is null.; // Skip the remaining checks in that case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:82,Security,Sanitiz,Sanitizer,82,"// The glvalue must refer to a large enough storage region.; // FIXME: If Address Sanitizer is enabled, insert dynamic instrumentation; // to check this.; // FIXME: Get object address space",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:312,Security,access,access,312,"// If possible, check that the vptr indicates that there is a subobject of; // type Ty at offset zero within this object.; //; // C++11 [basic.life]p5,6:; // [For storage which does not refer to an object within its lifetime]; // The program has undefined behavior if:; // -- the [pointer or glvalue] is used to access a non-static data member; // or call a non-static member function",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:46,Performance,load,loading,46,"// Ensure that the pointer is non-null before loading it. If there is no; // compile-time guarantee, reuse the run-time null check or emit a new one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:13,Security,hash,hash,13,// Compute a hash of the mangled name of the type.; //; // FIXME: This is not guaranteed to be deterministic! Move to a; // fingerprinting mechanism once LLVM provides one. For the time; // being the implementation happens to be deterministic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:3,Performance,Load,Load,3,"// Load the vptr, and compute hash_16_bytes(TypeHash, vptr).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:27,Performance,cache,cache,27,// Look the hash up in our cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:12,Security,hash,hash,12,// Look the hash up in our cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:28,Performance,cache,cache,28,"// If the hash isn't in the cache, call a runtime handler to perform the; // hard work of checking whether the vptr is for an object of the right; // type. This will either fill in the cache and return, or produce a; // diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:61,Performance,perform,perform,61,"// If the hash isn't in the cache, call a runtime handler to perform the; // hard work of checking whether the vptr is for an object of the right; // type. This will either fill in the cache and return, or produce a; // diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:185,Performance,cache,cache,185,"// If the hash isn't in the cache, call a runtime handler to perform the; // hard work of checking whether the vptr is for an object of the right; // type. This will either fill in the cache and return, or produce a; // diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:10,Security,hash,hash,10,"// If the hash isn't in the cache, call a runtime handler to perform the; // hard work of checking whether the vptr is for an object of the right; // type. This will either fill in the cache and return, or produce a; // diagnostic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:9,Performance,load,load,9,// Don't load the size if it's a lower bound.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:60,Security,access,access,60,"/// \p StructAccessBase returns the base \p Expr of a field access. It returns; /// either a \p DeclRefExpr, representing the base pointer to the struct, i.e.:; ///; /// p in p-> a.b.c; ///; /// or a \p MemberExpr, if the \p MemberExpr has the \p RecordDecl we're; /// looking for:; ///; /// struct s {; /// struct s *ptr;; /// int count;; /// char array[] __attribute__((counted_by(count)));; /// };; ///; /// If we have an expression like \p p->ptr->array[index], we want the; /// \p MemberExpr for \p p->ptr instead of \p p.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:546,Modifiability,flexible,flexible,546,"// These are the types we expect to return (in order of most to least; // likely):; //; // 1. DeclRefExpr - This is the expression for the base of the structure.; // It's exactly what we want to build an access to the \p counted_by; // field.; // 2. MemberExpr - This is the expression that has the same \p RecordDecl; // as the flexble array member's lexical enclosing \p RecordDecl. This; // allows us to catch things like: ""p->p->array""; // 3. CompoundLiteralExpr - This is for people who create something; // heretical like (struct foo has a flexible array member):; //; // (struct foo){ 1, 2 }.blah[idx];",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:204,Security,access,access,204,"// These are the types we expect to return (in order of most to least; // likely):; //; // 1. DeclRefExpr - This is the expression for the base of the structure.; // It's exactly what we want to build an access to the \p counted_by; // field.; // 2. MemberExpr - This is the expression that has the same \p RecordDecl; // as the flexble array member's lexical enclosing \p RecordDecl. This; // allows us to catch things like: ""p->p->array""; // 3. CompoundLiteralExpr - This is for people who create something; // heretical like (struct foo has a flexible array member):; //; // (struct foo){ 1, 2 }.blah[idx];",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:305,Modifiability,flexible,flexible,305,"/// This method is typically called in contexts where we can't generate; /// side-effects, like in __builtin_dynamic_object_size. When finding; /// expressions, only choose those that have either already been emitted or can; /// be loaded without side-effects.; ///; /// - \p FAMDecl: the \p Decl for the flexible array member. It may not be; /// within the top-level struct.; /// - \p CountDecl: must be within the same non-anonymous struct as \p FAMDecl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:232,Performance,load,loaded,232,"/// This method is typically called in contexts where we can't generate; /// side-effects, like in __builtin_dynamic_object_size. When finding; /// expressions, only choose those that have either already been emitted or can; /// be loaded without side-effects.; ///; /// - \p FAMDecl: the \p Decl for the flexible array member. It may not be; /// within the top-level struct.; /// - \p CountDecl: must be within the same non-anonymous struct as \p FAMDecl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:13,Deployability,update,updated,13,// Store the updated result through the lvalue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:82,Deployability,update,updated,82,"// If this is a postinc, return the value read from memory, otherwise use the; // updated value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:17,Security,access,accesses,17,"// TODO: Support accesses to members of base classes in TBAA. For now, we; // conservatively pretend that the complete object is of the base class; // type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:2,Security,Access,Accessed,2,/*Accessed*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:698,Modifiability,variab,variable,698,"/// EmitLValue - Emit code to compute a designator that specifies the location; /// of the expression.; ///; /// This can return one of two things: a simple address or a bitfield reference.; /// In either case, the LLVM Value* in the LValue structure is guaranteed to be; /// an LLVM pointer type.; ///; /// If this returns a bitfield reference, nothing about the pointee type of the; /// LLVM value is known: For example, it may not be a pointer to an integer.; ///; /// If this returns a normal address, and if the lvalue's C type is fixed size,; /// this method guarantees that the returned pointer type will point to an LLVM; /// type of the same size of the lvalue's type. If the lvalue has a variable; /// length type, this is not possible.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:150,Usability,simpl,simple,150,"/// EmitLValue - Emit code to compute a designator that specifies the location; /// of the expression.; ///; /// This can return one of two things: a simple address or a bitfield reference.; /// In either case, the LLVM Value* in the LValue structure is guaranteed to be; /// an LLVM pointer type.; ///; /// If this returns a bitfield reference, nothing about the pointee type of the; /// LLVM value is known: For example, it may not be a pointer to an integer.; ///; /// If this returns a normal address, and if the lvalue's C type is fixed size,; /// this method guarantees that the returned pointer type will point to an LLVM; /// type of the same size of the lvalue's type. If the lvalue has a variable; /// length type, this is not possible.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:109,Usability,simpl,simple,109,// FIXME: Is it possible to create an ExprWithCleanups that produces a; // bitfield lvalue or some other non-simple lvalue?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:56,Safety,safe,safely,56,"/// Given an object of the given canonical type, can we safely copy a; /// value out of it based on its initializer?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:52,Modifiability,variab,variable,52,"/// Can we constant-emit a load of a reference to a variable of the; /// given type? This is different from predicates like; /// Decl::mightBeUsableInConstantExpressions because we do want it to apply; /// in situations that don't necessarily satisfy the language's rules; /// for this (e.g. C++'s ODR-use rules). For example, we want to able; /// to do this with const float variables even if those variables; /// aren't marked 'constexpr'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:376,Modifiability,variab,variables,376,"/// Can we constant-emit a load of a reference to a variable of the; /// given type? This is different from predicates like; /// Decl::mightBeUsableInConstantExpressions because we do want it to apply; /// in situations that don't necessarily satisfy the language's rules; /// for this (e.g. C++'s ODR-use rules). For example, we want to able; /// to do this with const float variables even if those variables; /// aren't marked 'constexpr'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:400,Modifiability,variab,variables,400,"/// Can we constant-emit a load of a reference to a variable of the; /// given type? This is different from predicates like; /// Decl::mightBeUsableInConstantExpressions because we do want it to apply; /// in situations that don't necessarily satisfy the language's rules; /// for this (e.g. C++'s ODR-use rules). For example, we want to able; /// to do this with const float variables even if those variables; /// aren't marked 'constexpr'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:27,Performance,load,load,27,"/// Can we constant-emit a load of a reference to a variable of the; /// given type? This is different from predicates like; /// Decl::mightBeUsableInConstantExpressions because we do want it to apply; /// in situations that don't necessarily satisfy the language's rules; /// for this (e.g. C++'s ODR-use rules). For example, we want to able; /// to do this with const float variables even if those variables; /// aren't marked 'constexpr'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:173,Modifiability,variab,variables,173,"/// Try to emit a reference to the given value without producing it as; /// an l-value. This is just an optimization, but it avoids us needing; /// to emit global copies of variables if they're named without triggering; /// a formal use in a context where we can't emit a direct reference to them,; /// for instance if a block or lambda or a member of a local class uses a; /// const int variable or constexpr variable from an enclosing function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:388,Modifiability,variab,variable,388,"/// Try to emit a reference to the given value without producing it as; /// an l-value. This is just an optimization, but it avoids us needing; /// to emit global copies of variables if they're named without triggering; /// a formal use in a context where we can't emit a direct reference to them,; /// for instance if a block or lambda or a member of a local class uses a; /// const int variable or constexpr variable from an enclosing function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:410,Modifiability,variab,variable,410,"/// Try to emit a reference to the given value without producing it as; /// an l-value. This is just an optimization, but it avoids us needing; /// to emit global copies of variables if they're named without triggering; /// a formal use in a context where we can't emit a direct reference to them,; /// for instance if a block or lambda or a member of a local class uses a; /// const int variable or constexpr variable from an enclosing function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:104,Performance,optimiz,optimization,104,"/// Try to emit a reference to the given value without producing it as; /// an l-value. This is just an optimization, but it avoids us needing; /// to emit global copies of variables if they're named without triggering; /// a formal use in a context where we can't emit a direct reference to them,; /// for instance if a block or lambda or a member of a local class uses a; /// const int variable or constexpr variable from an enclosing function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:125,Safety,avoid,avoids,125,"/// Try to emit a reference to the given value without producing it as; /// an l-value. This is just an optimization, but it avoids us needing; /// to emit global copies of variables if they're named without triggering; /// a formal use in a context where we can't emit a direct reference to them,; /// for instance if a block or lambda or a member of a local class uses a; /// const int variable or constexpr variable from an enclosing function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:56,Modifiability,variab,variable,56,// The value needs to be an enum constant or a constant variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:3,Availability,Failure,Failure,3,// Failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:68,Modifiability,variab,variable,68,"// In CUDA/HIP device compilation, a lambda may capture a reference variable; // referencing a global host variable by copy. In this case the lambda should; // make a copy of the value of the global host variable. The DRE of the; // captured reference variable cannot be emitted as load from the host; // global variable as compile time constant, since the host variable is not; // accessible on device. The DRE of the captured reference variable has to be; // loaded from captures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:107,Modifiability,variab,variable,107,"// In CUDA/HIP device compilation, a lambda may capture a reference variable; // referencing a global host variable by copy. In this case the lambda should; // make a copy of the value of the global host variable. The DRE of the; // captured reference variable cannot be emitted as load from the host; // global variable as compile time constant, since the host variable is not; // accessible on device. The DRE of the captured reference variable has to be; // loaded from captures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:204,Modifiability,variab,variable,204,"// In CUDA/HIP device compilation, a lambda may capture a reference variable; // referencing a global host variable by copy. In this case the lambda should; // make a copy of the value of the global host variable. The DRE of the; // captured reference variable cannot be emitted as load from the host; // global variable as compile time constant, since the host variable is not; // accessible on device. The DRE of the captured reference variable has to be; // loaded from captures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:252,Modifiability,variab,variable,252,"// In CUDA/HIP device compilation, a lambda may capture a reference variable; // referencing a global host variable by copy. In this case the lambda should; // make a copy of the value of the global host variable. The DRE of the; // captured reference variable cannot be emitted as load from the host; // global variable as compile time constant, since the host variable is not; // accessible on device. The DRE of the captured reference variable has to be; // loaded from captures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:312,Modifiability,variab,variable,312,"// In CUDA/HIP device compilation, a lambda may capture a reference variable; // referencing a global host variable by copy. In this case the lambda should; // make a copy of the value of the global host variable. The DRE of the; // captured reference variable cannot be emitted as load from the host; // global variable as compile time constant, since the host variable is not; // accessible on device. The DRE of the captured reference variable has to be; // loaded from captures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:362,Modifiability,variab,variable,362,"// In CUDA/HIP device compilation, a lambda may capture a reference variable; // referencing a global host variable by copy. In this case the lambda should; // make a copy of the value of the global host variable. The DRE of the; // captured reference variable cannot be emitted as load from the host; // global variable as compile time constant, since the host variable is not; // accessible on device. The DRE of the captured reference variable has to be; // loaded from captures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:438,Modifiability,variab,variable,438,"// In CUDA/HIP device compilation, a lambda may capture a reference variable; // referencing a global host variable by copy. In this case the lambda should; // make a copy of the value of the global host variable. The DRE of the; // captured reference variable cannot be emitted as load from the host; // global variable as compile time constant, since the host variable is not; // accessible on device. The DRE of the captured reference variable has to be; // loaded from captures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:282,Performance,load,load,282,"// In CUDA/HIP device compilation, a lambda may capture a reference variable; // referencing a global host variable by copy. In this case the lambda should; // make a copy of the value of the global host variable. The DRE of the; // captured reference variable cannot be emitted as load from the host; // global variable as compile time constant, since the host variable is not; // accessible on device. The DRE of the captured reference variable has to be; // loaded from captures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:461,Performance,load,loaded,461,"// In CUDA/HIP device compilation, a lambda may capture a reference variable; // referencing a global host variable by copy. In this case the lambda should; // make a copy of the value of the global host variable. The DRE of the; // captured reference variable cannot be emitted as load from the host; // global variable as compile time constant, since the host variable is not; // accessible on device. The DRE of the captured reference variable has to be; // loaded from captures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:382,Security,access,accessible,382,"// In CUDA/HIP device compilation, a lambda may capture a reference variable; // referencing a global host variable by copy. In this case the lambda should; // make a copy of the value of the global host variable. The DRE of the; // captured reference variable cannot be emitted as load from the host; // global variable as compile time constant, since the host variable is not; // accessible on device. The DRE of the captured reference variable has to be; // loaded from captures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:53,Modifiability,variab,variable,53,// Make sure we emit a debug reference to the global variable.; // This should probably fire even for,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:22,Modifiability,variab,variable,22,// Try to emit static variable member expressions as DREs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:70,Safety,avoid,avoid,70,// Single-bit booleans don't need to be checked. Special-case this to avoid; // a bit width mismatch when handling bitfield values. This is handled by; // EmitFromMemory for the non-bitfield case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:3,Performance,Load,Load,3,// Load the `iP` storage object (P is the padded vector size).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:51,Performance,perform,performance,51,// Handle vectors of size 3 like size 4 for better performance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:7,Performance,load,load,7,// Now load value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:27,Performance,optimiz,optimizer,27,"// In order to prevent the optimizer from throwing away the check, don't; // attach range metadata to the load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:106,Performance,load,load,106,"// In order to prevent the optimizer from throwing away the check, don't; // attach range metadata to the load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:115,Availability,down,down,115,"// This should really always be an i1, but sometimes it's already; // an i8, and it's awkward to track those cases down.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:10,Performance,load,load,10,// Emit a load of a LValue of matrix type. This may require casting the pointer; // to memory address (ArrayType) to a pointer to the value type (VectorType).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:130,Performance,load,loads,130,"/// EmitLoadOfLValue - Given an expression that represents a value lvalue, this; /// method emits the address of the lvalue, then loads the result as an rvalue,; /// returning the rvalue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:3,Performance,load,load,3,// load of a __weak object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:24,Performance,load,load,24,"// In MRC mode, we do a load+autorelease.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:19,Performance,load,load,19,"// In ARC mode, we load retained and then consume the value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:22,Performance,load,load,22,// Everything needs a load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:19,Modifiability,variab,variables,19,// Global Register variables always invoke intrinsics,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:44,Security,access,access,44,/// Generates lvalue for partial ext_vector access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:4,Performance,Load,Load,4,/// Load of global gamed gegisters are always calls to intrinsics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:17,Deployability,update,update,17,"// If this is an update of extended vector elements, insert them as; // appropriate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:27,Modifiability,extend,extended,27,"// If this is an update of extended vector elements, insert them as; // appropriate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:3,Performance,load,load,3,// load of a __weak object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:3,Performance,load,load,3,// load of a __strong object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:84,Availability,mask,mask,84,// See if there are other bits in the bitfield's storage we'll need to load; // and mask together with source before storing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:71,Performance,load,load,71,// See if there are other bits in the bitfield's storage we'll need to load; // and mask together with source before storing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:3,Availability,Mask,Mask,3,// Mask the source value as needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:3,Availability,Mask,Mask,3,// Mask out the original value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:218,Security,access,access,218,"// According to the AACPS:; // When a volatile bit-field is written, and its container does not overlap; // with any non-bit-field member, its container must be read exactly once; // and written exactly once using the access width appropriate to the type; // of the container. The two accesses are not atomic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:285,Security,access,accesses,285,"// According to the AACPS:; // When a volatile bit-field is written, and its container does not overlap; // with any non-bit-field member, its container must be read exactly once; // and written exactly once using the access width appropriate to the type; // of the container. The two accesses are not atomic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:8,Modifiability,extend,extend,8,// Sign extend the value if needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:61,Performance,Load,Load,61,// This access turns into a read/modify/write of the vector. Load the input; // value now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:8,Security,access,access,8,// This access turns into a read/modify/write of the vector. Load the input; // value now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:108,Availability,mask,mask,108,// Use shuffle vector is the src and destination are the same number of; // elements and restore the vector mask since it is on the side it will be; // stored.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:3,Modifiability,Extend,Extended,3,"// Extended the source vector to the same length and then shuffle it; // into the destination.; // FIXME: since we're shuffling with undef, can we just use the indices; // into that? This could be simpler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:197,Usability,simpl,simpler,197,"// Extended the source vector to the same length and then shuffle it; // into the destination.; // FIXME: since we're shuffling with undef, can we just use the indices; // into that? This could be simpler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:205,Availability,mask,mask,205,"// When the vector size is odd and .odd or .hi is used, the last element; // of the Elts constant array will be one past the size of the vector.; // Ignore the last element here, if it is greater than the mask size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:32,Modifiability,variab,variable,32,"// Return an invalid address if variable is MT_To (or MT_Enter starting with; // OpenMP 5.2) and unified memory is not enabled. For all other cases: MT_Link; // and MT_To (or MT_Enter) with unified memory, return a valid address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:44,Integrability,wrap,wrapper,44,"// If it's thread_local, emit a call to its wrapper function instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:16,Modifiability,variab,variable,16,// Check if the variable is marked as declare target with link clause in; // device codegen.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:45,Modifiability,variab,variable,45,// Emit reference to the private copy of the variable if it is an OpenMP; // threadprivate variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:91,Modifiability,variab,variable,91,// Emit reference to the private copy of the variable if it is an OpenMP; // threadprivate variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:216,Availability,down,down,216,"/// Named Registers are named metadata pointing to the register name; /// which will be read from/written to as an argument to the intrinsic; /// @llvm.read/write_register.; /// So far, only the name is being passed down, but other options such as; /// register type, allocation type or even optimization options could be; /// passed down via the metadata node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:334,Availability,down,down,334,"/// Named Registers are named metadata pointing to the register name; /// which will be read from/written to as an argument to the intrinsic; /// @llvm.read/write_register.; /// So far, only the name is being passed down, but other options such as; /// register type, allocation type or even optimization options could be; /// passed down via the metadata node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:292,Performance,optimiz,optimization,292,"/// Named Registers are named metadata pointing to the register name; /// which will be read from/written to as an argument to the intrinsic; /// @llvm.read/write_register.; /// So far, only the name is being passed down, but other options such as; /// register type, allocation type or even optimization options could be; /// passed down via the metadata node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:140,Modifiability,variab,variable,140,"/// Determine whether we can emit a reference to \p VD from the current; /// context, despite not necessarily having seen an odr-use of the variable in; /// this context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:9,Modifiability,variab,variable,9,"// For a variable declared in an enclosing scope, do not emit a spurious; // reference even if we have a capture, as that will emit an unwarranted; // reference to our capture state, and will likely generate worse code than; // emitting a local copy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:55,Modifiability,variab,variable,55,// Don't emit a spurious reference if it might be to a variable that only; // exists on a different device / target.; // FIXME: This is unnecessarily broad. Check whether this would actually be a; // cross-target reference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:26,Security,access,access,26,// Global Named registers access via intrinsics only,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:61,Modifiability,variab,variable,61,"// If this DeclRefExpr does not constitute an odr-use of the variable,; // we're not permitted to emit a reference to it in general, and it might; // not be captured if capture would be necessary for a use. Emit the; // constant value directly instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:81,Modifiability,variab,variables,81,// FIXME: Handle other kinds of non-odr-use DeclRefExprs.; // Check for captured variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:37,Modifiability,variab,variable,37,// Mark lvalue as nontemporal if the variable is marked as nontemporal; // in simd context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:37,Modifiability,variab,variable,37,// Mark lvalue as nontemporal if the variable is marked as nontemporal; // in simd context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:31,Testability,assert,assert,31,"// FIXME: We should be able to assert this for FunctionDecls as well!; // FIXME: We should be able to assert this for all DeclRefExprs, not just; // those with a valid source location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:102,Testability,assert,assert,102,"// FIXME: We should be able to assert this for FunctionDecls as well!; // FIXME: We should be able to assert this for all DeclRefExprs, not just; // those with a valid source location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:29,Modifiability,variab,variable,29,// Check if this is a global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:7,Modifiability,variab,variable,7,// The variable should generally be present in the local decl map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:34,Modifiability,variab,variables,34,// Check for OpenMP threadprivate variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:26,Modifiability,variab,variables,26,// Drill into block byref variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:35,Usability,GUID,GUID,35,// We can form DeclRefExprs naming GUID declarations when reconstituting; // non-type template parameters into expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:55,Testability,test,testing,55,// __real is valid on scalars. This is a faster way of testing that.; // __imag can only produce an rvalue on scalars.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:58,Security,sanitiz,sanitizer,58,"/// Emit a type description suitable for use by a runtime sanitizer library. The; /// format of a type descriptor is; ///; /// \code; /// { i16 TypeKind, i16 TypeInfo }; /// \endcode; ///; /// followed by an array of i8 containing the type name. TypeKind is 0 for an; /// integer, 1 for a floating point value, and -1 for anything else.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:43,Modifiability,extend,extended,43,// Integers which fit in intptr_t are zero-extended and passed directly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:81,Security,sanitiz,sanitizer,81,"/// Emit a representation of a SourceLocation for passing to a handler; /// in a sanitizer runtime library. The format for this data is:; /// \code; /// struct SourceLocation {; /// const char *Filename;; /// int32_t Line, Column;; /// };; /// \endcode; /// For an invalid SourceLocation, the Filename pointer is null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:52,Availability,recover,recovered,52,/// Specify under what conditions this check can be recovered,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:52,Safety,recover,recovered,52,/// Specify under what conditions this check can be recovered,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:19,Availability,recover,recovering,19,"/// Check supports recovering, runtime has both fatal (noreturn) and; /// non-fatal handlers for this check.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:19,Safety,recover,recovering,19,"/// Check supports recovering, runtime has both fatal (noreturn) and; /// non-fatal handlers for this check.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:57,Availability,recover,recovery,57,"/// Runtime conditionally aborts, always need to support recovery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:26,Safety,abort,aborts,26,"/// Runtime conditionally aborts, always need to support recovery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:57,Safety,recover,recovery,57,"/// Runtime conditionally aborts, always need to support recovery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:41,Availability,recover,recover,41,// -fsanitize-trap= overrides -fsanitize-recover=.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:41,Safety,recover,recover,41,// -fsanitize-trap= overrides -fsanitize-recover=.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:3,Usability,Simpl,Simple,3,"// Simple case: we need to generate a single handler call, either; // fatal, or non-fatal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:90,Availability,recover,recoverable,90,"// Emit two handler calls: first one for set of unrecoverable checks,; // another one for recoverable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:90,Safety,recover,recoverable,90,"// Emit two handler calls: first one for set of unrecoverable checks,; // another one for recoverable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:10,Testability,stub,stub,10,// Emit a stub for __cfi_check function so that the linker knows about this; // symbol in LTO mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:52,Availability,failure,failure,52,"// This function is basically a switch over the CFI failure kind, which is; // extracted from CFICheckFailData (1st function argument). Each case is either; // llvm.trap or a call to one of the two runtime handlers, based on; // -fsanitize-trap and -fsanitize-recover settings. Default case (invalid; // failure kind) traps, but this should really never happen. CFICheckFailData; // can be nullptr if the calling module has -fsanitize-trap behavior for this; // check kind; in this case __cfi_check_fail traps as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:260,Availability,recover,recover,260,"// This function is basically a switch over the CFI failure kind, which is; // extracted from CFICheckFailData (1st function argument). Each case is either; // llvm.trap or a call to one of the two runtime handlers, based on; // -fsanitize-trap and -fsanitize-recover settings. Default case (invalid; // failure kind) traps, but this should really never happen. CFICheckFailData; // can be nullptr if the calling module has -fsanitize-trap behavior for this; // check kind; in this case __cfi_check_fail traps as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:304,Availability,failure,failure,304,"// This function is basically a switch over the CFI failure kind, which is; // extracted from CFICheckFailData (1st function argument). Each case is either; // llvm.trap or a call to one of the two runtime handlers, based on; // -fsanitize-trap and -fsanitize-recover settings. Default case (invalid; // failure kind) traps, but this should really never happen. CFICheckFailData; // can be nullptr if the calling module has -fsanitize-trap behavior for this; // check kind; in this case __cfi_check_fail traps as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:260,Safety,recover,recover,260,"// This function is basically a switch over the CFI failure kind, which is; // extracted from CFICheckFailData (1st function argument). Each case is either; // llvm.trap or a call to one of the two runtime handlers, based on; // -fsanitize-trap and -fsanitize-recover settings. Default case (invalid; // failure kind) traps, but this should really never happen. CFICheckFailData; // can be nullptr if the calling module has -fsanitize-trap behavior for this; // check kind; in this case __cfi_check_fail traps as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:51,Availability,down,down,51,"// If we're optimizing, collapse all calls to trap down to just one per; // check-type per function to save on code size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:12,Performance,optimiz,optimizing,12,"// If we're optimizing, collapse all calls to trap down to just one per; // check-type per function to save on code size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:158,Security,access,accesses,158,"// The result of this decay conversion points to an array element within the; // base lvalue. However, since TBAA currently does not support representing; // accesses to elements of member arrays, we conservatively represent accesses; // to the pointee object as if it had no any base lvalue specified.; // TODO: Support TBAA for member arrays.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:225,Security,access,accesses,225,"// The result of this decay conversion points to an array element within the; // base lvalue. However, since TBAA currently does not support representing; // accesses to elements of member arrays, we conservatively represent accesses; // to the pointee object as if it had no any base lvalue specified.; // TODO: Support TBAA for member arrays.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:59,Usability,simpl,simple,59,"/// isSimpleArrayDecayOperand - If the specified expr is a simple decay from an; /// array to pointer, return the array subexpression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:27,Modifiability,variab,variable,27,"// If this is a decay from variable width array, bail out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:85,Security,access,accessing,85,"// If we have a constant index, we can use the exact offset of the; // element we're accessing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:3,Integrability,Wrap,Wraps,3,// Wraps Addr with a call to llvm.preserve.static.offset intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:50,Security,access,access,50,"/// Given an array base, check whether its member access belongs to a record; /// with preserve_access_index attribute or not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:3,Modifiability,Extend,Extend,3,// Extend or truncate the index type to 32 or 64-bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:45,Usability,simpl,simple,45,// All the other cases basically behave like simple offsetting.; // Handle the extvector case we ignored above.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:20,Integrability,interface,interface,20,"// Indexing over an interface, as in ""NSString *P; P[4];""; // Emit the base pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:69,Integrability,interface,interfaces,69,"// We don't necessarily build correct LLVM struct types for ObjC; // interfaces, so we can't rely on GEP to do this scaling; // correctly, so we need to cast to i8*. FIXME: is this actually; // true? A lot of other things in the fragile ABI would break...",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:56,Security,access,accessed,56,"// For simple multidimensional array indexing, set the 'accessed' flag for; // better bounds-checking of the base expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:7,Usability,simpl,simple,7,"// For simple multidimensional array indexing, set the 'accessed' flag for; // better bounds-checking of the base expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:2,Security,Access,Accessed,2,/*Accessed*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:22,Security,access,accessed,22,"// If the array being accessed has a ""counted_by"" attribute, generate; // bounds checking code. The ""count"" field is at the top level of the; // struct or in an anonymous struct, that's also at the top level. Future; // expansions may allow the ""count"" to reside at any place in the struct,; // but the value of ""counted_by"" will be a ""simple"" path to the count,; // i.e. ""a.b.count"", so we shouldn't need the full force of EmitLValue or; // similar to emit the correct GEP.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:336,Usability,simpl,simple,336,"// If the array being accessed has a ""counted_by"" attribute, generate; // bounds checking code. The ""count"" field is at the top level of the; // struct or in an anonymous struct, that's also at the top level. Future; // expansions may allow the ""count"" to reside at any place in the struct,; // but the value of ""counted_by"" will be a ""simple"" path to the count,; // i.e. ""a.b.count"", so we shouldn't need the full force of EmitLValue or; // similar to emit the correct GEP.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:81,Performance,load,load,81,// Create a GEP with a byte offset between the FAM and count and; // use that to load the count value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:56,Security,access,accessed,56,"// For simple multidimensional array indexing, set the 'accessed' flag for; // better bounds-checking of the base expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:7,Usability,simpl,simple,7,"// For simple multidimensional array indexing, set the 'accessed' flag for; // better bounds-checking of the base expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:2,Security,Access,Accessed,2,/*Accessed*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:22,Security,access,access,22,// Encode the element access list into a vector of unsigned indices.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:133,Security,access,access,133,"// If the member was explicitly marked as nontemporal, mark it as; // nontemporal. If the base lvalue is marked as nontemporal, mark access; // to children as nontemporal too.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:10,Availability,down,down,10,/// Drill down to the storage of a field without walking into; /// reference types.; ///; /// The resulting address doesn't necessarily have the right type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:11,Security,access,access,11,// Get the access type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:98,Availability,down,down,98,// Fields of may-alias structures are may-alias themselves.; // FIXME: this should get propagated down through anonymous structs; // and unions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:46,Security,access,access,46,"// If no base type been assigned for the base access, then try to generate; // one for this base lvalue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:3,Deployability,Update,Update,3,// Update the final access type and size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:20,Security,access,access,20,// Update the final access type and size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:130,Security,access,accessing,130,"// Getting to any field of dynamic object requires stripping dynamic; // information provided by invariant.group. This is because accessing; // fields may leak the real address of dynamic object, which could result; // in miscompilation when leaked pointer would be compared.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:33,Performance,load,load,33,"// If this is a reference field, load the reference right now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:55,Security,access,access,55,// TODO: Generate TBAA information that describes this access as a structure; // member access and not just an access to an object of the field's type. This; // should be similar to what we do in EmitLValueForField().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:88,Security,access,access,88,// TODO: Generate TBAA information that describes this access as a structure; // member access and not just an access to an object of the field's type. This; // should be similar to what we do in EmitLValueForField().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:111,Security,access,access,111,// TODO: Generate TBAA information that describes this access as a structure; // member access and not just an access to an object of the field's type. This; // should be similar to what we do in EmitLValueForField().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:65,Usability,simpl,simple,65,"// Handle the case where the condition is a constant evaluatable simple integer,; // which means we don't have to separately handle the true/false blocks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:319,Security,access,access,319,"/// EmitCastLValue - Casts are never lvalues unless that cast is to a reference; /// type. If the cast is to a reference, we can have the usual lvalue result,; /// otherwise if a cast is needed by the code generator in an lvalue context,; /// then it must mean that we need the address of an aggregate in order to; /// access one of its members. This can happen for all the reasons that casts; /// are permitted with aggregate result, including noop aggregate casts, and; /// cast from scalar to union.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:3,Performance,Perform,Perform,3,// Perform the derived-to-base conversion,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:17,Security,access,accesses,17,"// TODO: Support accesses to members of base classes in TBAA. For now, we; // conservatively pretend that the complete object is of the base class; // type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:3,Performance,Perform,Perform,3,// Perform the base-to-derived conversion,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:58,Availability,down,downcast,58,// C++11 [expr.static.cast]p2: Behavior is undefined if a downcast is; // performed and the object is not of the derived type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:74,Performance,perform,performed,74,// C++11 [expr.static.cast]p2: Behavior is undefined if a downcast is; // performed and the object is not of the derived type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:8,Integrability,rout,routine,8,"// This routine is used to load fields one-by-one to perform a copy, so; // don't load reference fields.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:27,Performance,load,load,27,"// This routine is used to load fields one-by-one to perform a copy, so; // don't load reference fields.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:53,Performance,perform,perform,53,"// This routine is used to load fields one-by-one to perform a copy, so; // don't load reference fields.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:82,Performance,load,load,82,"// This routine is used to load fields one-by-one to perform a copy, so; // don't load reference fields.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:86,Performance,load,load,86,// Call EmitLoadOfScalar except when the lvalue is a bitfield to emit a; // primitive load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:3,Safety,Detect,Detect,3,// Detect the unusual situation where an inline version is shadowed by a; // non-inline version. In that case we should pick the external one; // everywhere. That's GCC behavior too.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:94,Usability,clear,clear,94,"// When directing calling an inline builtin, call it through it's mangled; // name to make it clear it's not the actual builtin.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:122,Safety,avoid,avoid,122,"// Replaceable builtins provide their own implementation of a builtin. If we; // are in an inline builtin implementation, avoid trivial infinite; // recursion. Honor __attribute__((no_builtin(""foo""))) or; // __attribute__((no_builtin)) on the current function unless foo is; // not a predefined library function which means we must generate the; // builtin no matter what.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:44,Modifiability,variab,variables,44,"// Note that in all of these cases, __block variables need the RHS; // evaluated first just in case the variable gets moved by the RHS.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:104,Modifiability,variab,variable,104,"// Note that in all of these cases, __block variables need the RHS; // evaluated first just in case the variable gets moved by the RHS.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:28,Integrability,message,message,28,// Can only get l-value for message expression returning aggregate type,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:201,Usability,clear,clear,201,"// On 32-bit Arm, the low bit of a function pointer indicates whether; // it's using the Arm or Thumb instruction set. The actual first; // instruction lives at the same address either way, so we must clear; // that low bit before using the function address to find the prefix; // structure.; //; // This applies to both Arm and Thumb target triples, because; // either one could be used in an interworking context where it; // might be passed function pointers of both types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:164,Performance,perform,performed,164,"// C99 6.5.2.2p6:; // If the expression that denotes the called function has a type; // that does not include a prototype, [the default argument; // promotions are performed]. If the number of arguments does not; // equal the number of parameters, the behavior is undefined. If; // the function is defined with a type that includes a prototype,; // and either the prototype ends with an ellipsis (, ...) or the; // types of the arguments after promotion are not compatible with; // the types of the parameters, the behavior is undefined. If the; // function is defined with a type that does not include a; // prototype, and the types of the arguments after promotion are; // not compatible with those of the parameters after promotion,; // the behavior is undefined [except in some trivial cases].; // That is, in the general case, we should assume that a call; // through an unprototyped function type works like a *non-variadic*; // call. The way we make this work is to cast to the exact type; // of the promoted arguments.; //; // Chain calls use this same code path to add the invisible chain parameter; // to the function type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:114,Performance,load,loaded,114,// HIP function pointer contains kernel handle when it is used in triple; // chevron. The kernel stub needs to be loaded from kernel handle and used; // as callee.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:97,Testability,stub,stub,97,// HIP function pointer contains kernel handle when it is used in triple; // chevron. The kernel stub needs to be loaded from kernel handle and used; // as callee.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:37,Modifiability,variab,variable,37,"/// Given the address of a temporary variable, produce an r-value of; /// its type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:332,Performance,load,loads,332,"//===--------------------------------------------------------------------===//; // Utilities; //===--------------------------------------------------------------------===//; /// EmitAggLoadOfLValue - Given an expression with aggregate type that; /// represents a value lvalue, this method emits the address of the lvalue,; /// then loads the result into DestPtr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:24,Performance,Perform,Perform,24,"/// EmitFinalDestCopy - Perform the final copy to DestPtr, if desired.; /// SrcIsRValue is true if source comes from an RValue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:149,Safety,avoid,avoid,149,// The emitted value is guaranteed to have the same size as the; // destination but can have a different type. Just do a bitcast in this; // case to avoid incorrect GEPs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:365,Performance,load,loads,365,"// end anonymous namespace.; //===----------------------------------------------------------------------===//; // Utilities; //===----------------------------------------------------------------------===//; /// EmitAggLoadOfLValue - Given an expression with aggregate type that; /// represents a value lvalue, this method emits the address of the lvalue,; /// then loads the result into DestPtr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:59,Performance,load,load,59,"// If the type of the l-value is atomic, then do an atomic load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:24,Performance,Perform,Perform,24,"/// EmitFinalDestCopy - Perform the final copy to DestPtr, if desired.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:24,Performance,Perform,Perform,24,"/// EmitFinalDestCopy - Perform the final copy to DestPtr, if desired.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:132,Performance,load,loads,132,"// If Dest is ignored, then we're evaluating an aggregate expression; // in a context that doesn't care about the result. Note that loads; // from volatile l-values force the existence of a non-ignored; // destination.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:4,Performance,Perform,Perform,4,/// Perform a copy from the source into the destination.; ///; /// \param type - the type of the aggregate being copied; qualifiers are; /// ignored,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:10,Performance,Perform,Perform,10,// FIXME: Perform the checks on the field types in SemaInit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:45,Safety,avoid,avoid,45,// FIXME: Are there other cases where we can avoid emitting an initializer?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:67,Availability,down,down,67,// DestPtr is an array*. Construct an elementType* by drilling; // down a level.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:85,Energy Efficiency,efficient,efficient,85,"// Consider initializing the array by copying from a global. For this to be; // more efficient than per-element initialization, the size of the elements; // with explicit initializers should be large enough.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:13,Safety,safe,safety,13,"// Exception safety requires us to destroy all the; // already-constructed members if an initializer throws.; // For that, we'll need an EH cleanup.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:67,Modifiability,variab,variable,67,"// The 'current element to initialize'. The invariants on this; // variable are complicated. Essentially, after each iteration of; // the loop, it points to the last initialized element, except; // that it points to the beginning of the array before any; // elements have been initialized.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:31,Performance,load,load,31,"// For a POD type, just emit a load of the lvalue + a copy, because our; // compound literal might alias the destination.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:47,Testability,test,test,47,// FIXME: Can this actually happen? We have no test coverage for it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:107,Usability,simpl,simpler,107,"// Zero-initialize. (Strictly speaking, we only need to initialize; // the padding at the end, but this is simpler.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:12,Performance,load,loading,12,"// If we're loading from a volatile type, force the destination; // into existence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:88,Modifiability,variab,variable,88,/// Is the value of the given expression possibly a reference to or; /// into a __block variable?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:45,Modifiability,variab,variable,45,// Check for a direct reference to a __block variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:225,Modifiability,variab,variable,225,"// Casts are necessary to get things like (*(int*)&var) = foo().; // We don't really care about the kind of cast here, except; // we don't want to look through l2r casts, because it's okay; // to get the *value* in a __block variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:33,Security,access,access,33,// Look into the base of a field access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:33,Modifiability,variab,variable,33,"// If the LHS might be a __block variable, and the RHS can; // potentially cause a block copy, we need to evaluate the RHS first; // so that the assignment goes the right place.; // This is pretty semantically fragile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:159,Safety,safe,safely,159,"// If the result of an agg expression is unused, then the emission; // of the LHS might need to create a destination slot. That's fine; // with us, and we can safely emit the RHS into the same slot, but; // we shouldn't claim that it's already being destructed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:31,Availability,error,error,31,"// If EmitVAArg fails, emit an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:14,Integrability,depend,dependent,14,// FIXME: ABI-dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:173,Usability,simpl,simple,173,"/// isSimpleZero - If emitting this value will obviously just cause a store of; /// zero to memory, return true. This can return false if uncertain, so it just; /// handles simple cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:23,Performance,optimiz,optimization,23,"// There's a potential optimization opportunity in combining; // memsets; that would be easy for arrays, but relatively; // difficult for structures with the current code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:60,Performance,optimiz,optimizing,60,"// FIXME: Assess perf here? Figure out what cases are worth optimizing here; // (Length of globals? Chunks of zeroed-out space?).; //; // If we can, prefer a copy from a global; this is a lot less code for long; // globals, and it's easier for the current optimizers to analyze.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:256,Performance,optimiz,optimizers,256,"// FIXME: Assess perf here? Figure out what cases are worth optimizing here; // (Length of globals? Chunks of zeroed-out space?).; //; // If we can, prefer a copy from a global; this is a lot less code for long; // globals, and it's easier for the current optimizers to analyze.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:5,Modifiability,variab,variable,5,"// A variable array type that has an initializer can only do empty; // initialization. And because this feature is not exposed as an extension; // in C++, we can safely memset the array memory to zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:162,Safety,safe,safely,162,"// A variable array type that has an initializer can only do empty; // initialization. And because this feature is not exposed as an extension; // in C++, we can safely memset the array memory to zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:119,Security,expose,exposed,119,"// A variable array type that has an initializer can only do empty; // initialization. And because this feature is not exposed as an extension; // in C++, we can safely memset the array memory to zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:218,Performance,optimiz,optimizer,218,"// Do struct initialization; this code just sets each individual member; // to the approprate value. This makes bitfield support automatic;; // the disadvantage is that the generated code is more difficult for; // the optimizer, especially with bitfields.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:49,Availability,failure,failure,49,// Make sure that it's really an empty and not a failure of; // semantic analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:50,Usability,simpl,simpler,50,// Here we iterate over the fields; this makes it simpler to both; // default-initialize fields and skip over unnamed fields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:30,Modifiability,flexible,flexible,30,// We're done once we hit the flexible array member.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:63,Availability,down,down,63,// destPtr is an array*. Construct an elementType* by drilling down a level.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:69,Safety,avoid,avoid,69,// Prepare to special-case multidimensional array initialization: we avoid; // emitting multiple destructor loops in that case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:30,Modifiability,flexible,flexible,30,// We're done once we hit the flexible array member or run out of; // InitListExpr elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:112,Safety,avoid,avoid,112,"/// CheckAggExprForMemSetUse - If the initializer is large and has a lot of; /// zeros in it, emit a memset and avoid storing the individual zeros.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:3,Performance,Optimiz,Optimize,3,// Optimize the slot if possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:483,Performance,optimiz,optimization,483,"// Aggregate assignment turns into llvm.memcpy. This is almost valid per; // C99 6.5.16.1p3, which states ""If the value being stored in an object is; // read from another object that overlaps in anyway the storage of the first; // object, then the overlap shall be exact and the two objects shall have; // qualified or unqualified versions of a compatible type.""; //; // memcpy is not defined if the source and destination pointers are exactly; // equal, but other compilers do this optimization, and almost every memcpy; // implementation handles this case safely. If there is a libc that does not; // safely handle this, we can add a target hook.; // Get data size info for this aggregate. Don't copy the tail padding if this; // might be a potentially-overlapping subobject, since the tail padding might; // be occupied by a different object. Otherwise, copying it is fine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:558,Safety,safe,safely,558,"// Aggregate assignment turns into llvm.memcpy. This is almost valid per; // C99 6.5.16.1p3, which states ""If the value being stored in an object is; // read from another object that overlaps in anyway the storage of the first; // object, then the overlap shall be exact and the two objects shall have; // qualified or unqualified versions of a compatible type.""; //; // memcpy is not defined if the source and destination pointers are exactly; // equal, but other compilers do this optimization, and almost every memcpy; // implementation handles this case safely. If there is a libc that does not; // safely handle this, we can add a target hook.; // Get data size info for this aggregate. Don't copy the tail padding if this; // might be a potentially-overlapping subobject, since the tail padding might; // be occupied by a different object. Otherwise, copying it is fine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:603,Safety,safe,safely,603,"// Aggregate assignment turns into llvm.memcpy. This is almost valid per; // C99 6.5.16.1p3, which states ""If the value being stored in an object is; // read from another object that overlaps in anyway the storage of the first; // object, then the overlap shall be exact and the two objects shall have; // qualified or unqualified versions of a compatible type.""; //; // memcpy is not defined if the source and destination pointers are exactly; // equal, but other compilers do this optimization, and almost every memcpy; // implementation handles this case safely. If there is a libc that does not; // safely handle this, we can add a target hook.; // Get data size info for this aggregate. Don't copy the tail padding if this; // might be a potentially-overlapping subobject, since the tail padding might; // be occupied by a different object. Otherwise, copying it is fine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:44,Performance,optimiz,optimizer,44,"// FIXME: If we have a volatile struct, the optimizer can remove what might; // appear to be `extra' memory ops:; //; // volatile struct { int i; } a, b;; //; // int main() {; // a = b;; // a = b;; // }; //; // we need to use a different call here. We use isVolatile to indicate when; // either the source or the destination is volatile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:43,Testability,test,tests,43,// Don't do any of the memmove_collectable tests if GC isn't set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:158,Performance,optimiz,optimizer,158,"// Determine the metadata to describe the position of any padding in this; // memcpy, as well as the TBAA tags for the members of the struct, in case; // the optimizer wishes to expand it in to scalar memory operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:150,Performance,load,loads,150,"/// EmitLoadOfLValue - Given an expression with complex type that represents a; /// value l-value, this method emits the address of the l-value, then loads; /// and returns the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:55,Testability,Log,Logical,55,"// GCC rejects rem/and/or/xor for integer complex.; // Logical and/or always return int, never complex.; // No comparisons produce a complex result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:82,Performance,load,load,82,"/// EmitLoadOfLValue - Given an RValue reference for a complex, emit code to; /// load the real and imaginary pieces, returning them as Real/Imag.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:52,Testability,log,logic,52,// We *must* use the full CG function call building logic here because the; // complex type has special ABI handling. We also should not forget about; // special calling convention which may be used for compiler builtins.; // We create a function qualified type to state that this call does not have; // any exceptions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:75,Testability,test,test,75,"// If both operands are complex, emit the core math directly, and then; // test for NaNs. If we find NaNs in the result, we delegate to a libcall; // to carefully re-compute the correct infinity representation if; // possible. The expectation is that the presence of NaNs here is; // *extremely* rare, and so the cost of the libcall is almost irrelevant.; // This is good, because the libcall re-computes the core multiplication; // exactly the same as we do here and re-tests for NaNs in order to be; // a generic complex*complex libcall.; // First compute the four products.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:471,Testability,test,tests,471,"// If both operands are complex, emit the core math directly, and then; // test for NaNs. If we find NaNs in the result, we delegate to a libcall; // to carefully re-compute the correct infinity representation if; // possible. The expectation is that the presence of NaNs here is; // *extremely* rare, and so the cost of the libcall is almost irrelevant.; // This is good, because the libcall re-computes the core multiplication; // exactly the same as we do here and re-tests for NaNs in order to be; // a generic complex*complex libcall.; // First compute the four products.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:12,Testability,test,test,12,// Emit the test for the real part becoming NaN and create a branch to; // handle it. We test for NaN by comparing the number to itself.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:89,Testability,test,test,89,// Emit the test for the real part becoming NaN and create a branch to; // handle it. We test for NaN by comparing the number to itself.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:7,Testability,test,test,7,// Now test the imaginary part and create its branch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:72,Safety,avoid,avoid,72,// FIXME: This could eventually be replaced by an LLVM intrinsic to; // avoid this long IR sequence.; // (a + ib) / (c + id) = (e + if),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:323,Safety,avoid,avoid,323,"// If we have a complex operand on the RHS and FastMath is not allowed, we; // delegate to a libcall to handle all of the complexities and minimize; // underflow/overflow cases. When FastMath is allowed we construct the; // divide inline using the same algorithm as for integer operands.; //; // FIXME: We would be able to avoid the libcall in many places if we; // supported imaginary types in addition to complex types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:46,Modifiability,variab,variables,46,"// Load the RHS and LHS operands.; // __block variables need to have the rhs evaluated first, plus this should; // improve codegen a little.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:3,Performance,Load,Load,3,"// Load the RHS and LHS operands.; // __block variables need to have the rhs evaluated first, plus this should; // improve codegen a little.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:3,Performance,Load,Load,3,// Load from the l-value and convert it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:134,Energy Efficiency,efficient,efficient,134,// For floating point real operands we can directly pass the scalar form; // to the binary operator emission and potentially get more efficient code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:25,Modifiability,variab,variables,25,// Emit the RHS. __block variables need the RHS evaluated first.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:24,Performance,Load,Load,24,/// EmitLoadOfComplex - Load a complex number from the specified address.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:4,Deployability,Update,Update,4,"/// Update or overwrite the value starting at \p Offset with \c C.; ///; /// \param AllowOverwrite If \c true, this constant might overwrite (part of); /// a constant that has already been added. This flag is only used to; /// detect bugs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:227,Safety,detect,detect,227,"/// Update or overwrite the value starting at \p Offset with \c C.; ///; /// \param AllowOverwrite If \c true, this constant might overwrite (part of); /// a constant that has already been added. This flag is only used to; /// detect bugs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:4,Deployability,Update,Update,4,/// Update or overwrite the bits starting at \p OffsetInBits with \p Bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:206,Modifiability,flexible,flexible,206,"/// Produce a constant representing the entire accumulated value, ideally of; /// the specified type. If \p AllowOversized, the constant might be larger; /// than implied by \p DesiredTy (eg, if there is a flexible array member).; /// Otherwise, the constant will be of exactly the same size as \p DesiredTy; /// even if we can't represent it as that type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:77,Deployability,update,update,77,// We split bit-fields up into individual bytes. Walk over the bytes and; // update them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:17,Deployability,update,update,17,"// Partial byte: update the existing integer if there is one. If we; // can't split out a 1-CharUnit range to update, then we can't add; // these bits and fail the entire constant emission.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:110,Deployability,update,update,110,"// Partial byte: update the existing integer if there is one. If we; // can't split out a 1-CharUnit range to update, then we can't add; // these bits and fail the entire constant emission.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:33,Deployability,update,update,33,"// In order to perform a partial update, we need the existing bitwise; // value, which we can only extract for a constant int.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:15,Performance,perform,perform,15,"// In order to perform a partial update, we need the existing bitwise; // value, which we can only extract for a constant int.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:145,Modifiability,flexible,flexible,145,"// The size of the constant we plan to generate. This is usually just; // the size of the initialized type, but in AllowOversized mode (i.e.; // flexible array init), it can be larger.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:6,Integrability,wrap,wrap,6,"// Re-wrap single element structs if necessary. Otherwise, leave any single; // element constant of the right size alone even if it has the wrong type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:14,Energy Efficiency,reduce,reduce,14,// Attempt to reduce the array element to a single constant if necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:59,Availability,down,down,59,"// If we split apart the field's value, try to collapse it down to a; // single value now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:6,Security,validat,validation,6,// No validation necessary for now.; // No cleanup to do for now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:159,Performance,cache,cache,159,"/// The current index stack. We use a simple unsigned stack because; /// we assume that placeholders will be relatively sparse in the; /// initializer, but we cache the index values we find just in case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:38,Usability,simpl,simple,38,"/// The current index stack. We use a simple unsigned stack because; /// we assume that placeholders will be relatively sparse in the; /// initializer, but we cache the index values we find just in case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:26,Security,hash,hashtable,26,"// We're iterating over a hashtable, so this would be a source of; // non-determinism in compiler output *except* that we're just; // messing around with llvm::Constant structures, which never itself; // does anything that should be visible in compiler output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:25,Modifiability,variab,variable,25,"// Make a quick check if variable can be default NULL initialized; // and avoid going through rest of code which may do, for c++11,; // initialization of memory to all NULLs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:74,Safety,avoid,avoid,74,"// Make a quick check if variable can be default NULL initialized; // and avoid going through rest of code which may do, for c++11,; // initialization of memory to all NULLs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:8,Modifiability,extend,extend,8,// Zero-extend bool.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:53,Security,expose,expose,53,// Befriend StmtVisitorBase so that we don't have to expose Visit*.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:87,Performance,perform,performAddrSpaceCast,87,// Convert to the appropriate type; this could be an lvalue for; // an integer. FIXME: performAddrSpaceCast,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:111,Integrability,depend,depends,111,// Convert the integer to a pointer-sized integer before converting it; // to a pointer.; // FIXME: signedness depends on the original integer type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:27,Modifiability,variab,variable,27,// We can never refer to a variable with local storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:142,Deployability,release,released,142,"// Automatic Reference Counting:; // If the pseudo-expression names a retainable object with weak or; // strong lifetime, the object shall be released.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:178,Modifiability,inherit,inherits,178,"// If the return types are not the same, this might be a case where more; // code needs to run to compensate for it. For example, the derived; // method might return a type that inherits form from the return; // type of MD and has a prefix.; // For now we just avoid devirtualizing these covariant cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:261,Safety,avoid,avoid,261,"// If the return types are not the same, this might be a case where more; // code needs to run to compensate for it. For example, the derived; // method might return a type that inherits form from the return; // type of MD and has a prefix.; // For now we just avoid devirtualizing these covariant cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:50,Security,audit,audited,50,// FIXME: Uses of 'MD' past this point need to be audited. We may need to use; // 'CalleeDecl' instead.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:18,Performance,load,load,18,// Ask the ABI to load the callee. Note that This is modified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:13,Usability,simpl,simply,13,"// We cannot simply zero-initialize the entire base sub-object if vbptrs are; // present, they are initialized by the most derived class before calling the; // constructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:32,Usability,simpl,simplest,32,"// FIXME: This only handles the simplest case, where the source object; // is passed directly as the first argument to the constructor.; // This should also handle stepping though implicit casts and; // conversion sequences which involve two steps, with a; // conversion operator followed by a converting constructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:56,Testability,assert,assert,56,// We should be emitting a constructor; GlobalDecl will assert this,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:315,Availability,error,error,315,"// The number of elements can be have an arbitrary integer type;; // essentially, we need to multiply it by a constant factor, add a; // cookie size, and verify that the result is representable as a; // size_t. That's just a gloss, though, and it's wrong in one; // important way: if the count is negative, it's an error even if; // the cookie size would bring the total size >= 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:46,Energy Efficiency,allocate,allocate,46,"// If there is a brace-initializer, we cannot allocate fewer elements than; // there are initializers. If we do, that's treated like an overflow.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:46,Testability,test,test,46,"// There are up to five conditions we need to test for:; // 1) if isSigned, we need to check whether numElements is negative;; // 2) if numElementsWidth > sizeWidth, we need to check whether; // numElements is larger than something representable in size_t;; // 3) if minElements > 0, we need to check whether numElements is smaller; // than that.; // 4) we need to compute; // sizeWithoutCookie := numElements * typeSizeMultiplier; // and check whether it overflows; and; // 5) if we need a cookie, we need to compute; // size := sizeWithoutCookie + cookieSize; // and check whether it overflows.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:10,Modifiability,Refactor,Refactor,10,// FIXME: Refactor with EmitExprAsInit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:14,Performance,perform,perform,14,// Attempt to perform zero-initialization using memset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:3,Performance,Optimiz,Optimization,3,"// Optimization: since zero initialization will just set the memory; // to all zeroes, generate a single memset to do it in one shot.; // Subtract out the size of any elements we've already initialized.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:141,Safety,avoid,avoids,141,// Extract the initializer for the individual array elements by pulling; // out the array filler from all the nested initializer lists. This avoids; // generating a nested loop for the initialization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:41,Performance,optimiz,optimize,41,"// If this is a constructor call, try to optimize it out, and failing that; // emit a single loop to initialize all remaining elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:254,Availability,avail,available,254,"// The next (second or third) argument can be a std::align_val_t, which; // is an enum whose underlying type is std::size_t.; // FIXME: Use the right type as the parameter type. Note that in a call; // to operator delete(size_t, ...), we may not have it available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:115,Energy Efficiency,efficient,efficient,115,"// If we're not inside a conditional branch, then the cleanup will; // dominate and we can do the easier (and more efficient) thing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:26,Energy Efficiency,allocate,allocated,26,// The element type being allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:82,Energy Efficiency,allocate,allocate,82,"// If there is a brace-initializer or C++20 parenthesized initializer, cannot; // allocate fewer elements than inits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:158,Energy Efficiency,allocate,allocated,158,"// The pointer expression will, in many cases, be an opaque void*.; // In these cases, discard the computed alignment and use the; // formal alignment of the allocated type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:284,Energy Efficiency,allocate,allocated,284,"// If this was a call to a global replaceable allocation function that does; // not take an alignment argument, the allocator is known to produce; // storage that's suitably aligned for any object that fits, up to a known; // threshold. Otherwise assume it's suitably aligned for the allocated type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:246,Security,sanitiz,sanitizers,246,// Emit a null check on the allocation result if the allocation; // function is allowed to return null (because it has a non-throwing; // exception spec or is the reserved placement new) and we have an; // interesting initializer will be running sanitizers on the initialization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:173,Performance,optimiz,optimizations,173,"// Passing pointer through launder.invariant.group to avoid propagation of; // vptrs information which may be included in previous type.; // To not break LTO with different optimizations levels, we do it regardless; // of optimization level.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:222,Performance,optimiz,optimization,222,"// Passing pointer through launder.invariant.group to avoid propagation of; // vptrs information which may be included in previous type.; // To not break LTO with different optimizations levels, we do it regardless; // of optimization level.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:54,Safety,avoid,avoid,54,"// Passing pointer through launder.invariant.group to avoid propagation of; // vptrs information which may be included in previous type.; // To not break LTO with different optimizations levels, we do it regardless; // of optimization level.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:8,Security,sanitiz,sanitizer,8,"// Emit sanitizer checks for pointer value now, so that in the case of an; // array it was checked only once and not at each constructor call. We may; // have already checked that the pointer is non-null.; // FIXME: If we have an array cookie and a potentially-throwing allocator,; // we'll null check the wrong pointer here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:8,Performance,optimiz,optimizing,8,"// When optimizing for size, call 'operator delete' unconditionally.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:28,Energy Efficiency,allocate,allocate,28,"// Note that it is legal to allocate a zero-length array, and we; // can never fold the check away because the length should always; // come from a cookie.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:193,Performance,perform,perform,193,"// Null check the pointer.; //; // We could avoid this null check if we can determine that the object; // destruction is trivial and doesn't require an array cookie; we can; // unconditionally perform the operator delete call in that case. For now, we; // assume that deleted pointers are null rarely enough that it's better to; // keep the branch. This might be worth revisiting for a -O0 code size win.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:44,Safety,avoid,avoid,44,"// Null check the pointer.; //; // We could avoid this null check if we can determine that the object; // destruction is trivial and doesn't require an array cookie; we can; // unconditionally perform the operator delete call in that case. For now, we; // assume that deleted pointers are null rarely enough that it's better to; // keep the branch. This might be worth revisiting for a -O0 code size win.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:55,Availability,down,down,55,"// We might be deleting a pointer to array. If so, GEP down to the; // first non-array element.; // (this assumes that A(*)[3][7] is converted to [3 x [7 x %A]]*)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:269,Usability,clear,clear,269,"// C++ [expr.typeid]p2:; // If the glvalue expression is obtained by applying the unary * operator to; // a pointer and the pointer is a null pointer value, the typeid expression; // throws the std::bad_typeid exception.; //; // However, this paragraph's intent is not clear. We choose a very generous; // interpretation which implores us to consider comma operators, conditional; // operators, parentheses and other such constructs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:95,Modifiability,polymorphi,polymorphic,95,"// C++ [expr.typeid]p2:; // When typeid is applied to a glvalue expression whose type is a; // polymorphic class type, the result refers to a std::type_info object; // representing the type of the most derived object (that is, the dynamic; // type) to which the glvalue refers.; // If the operand is already most derived object, no need to look up vtable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:22,Performance,perform,perform,22,// Opcode of BinOp to perform,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:20,Availability,error,error,20,"// Entire expr, for error unsupported. May not be binop.; /// Check if the binop can result in integer overflow.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:13,Usability,simpl,simply,13,// We cannot simply check the result type since comparison operations return; // an int.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:95,Usability,simpl,simple,95,"// If a null pointer expression's type is the C++0x nullptr_t, then; // it's not necessarily a simple constant and it must be evaluated; // for its potential side effects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:15,Usability,simpl,simple,15,"// This is the simple case: binops without unsigned multiplication, and with; // widened operands. No overflow check is needed here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:162,Security,sanitiz,sanitizer,162,"// Assumptions for function parameters are emitted at the start of the; // function, so there is no need to repeat that here,; // unless the alignment-assumption sanitizer is enabled,; // then we prefer the assumption over alignment attribute; // on IR function param.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:150,Performance,load,loads,150,"/// EmitLoadOfLValue - Given an expression with complex type that represents a; /// value l-value, this method emits the address of the l-value, then loads; /// and returns the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:32,Performance,Perform,Perform,32,/// EmitFloatToBoolConversion - Perform an FP to boolean conversion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:34,Performance,Perform,Perform,34,/// EmitPointerToBoolConversion - Perform a pointer to boolean conversion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:92,Modifiability,extend,extending,92,"// Because of the type rules of C, we often end up computing a; // logical value, then zero extending it to int, then wanting it; // as a logical value again. Optimize this common case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:159,Performance,Optimiz,Optimize,159,"// Because of the type rules of C, we often end up computing a; // logical value, then zero extending it to int, then wanting it; // as a logical value again. Optimize this common case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:67,Testability,log,logical,67,"// Because of the type rules of C, we often end up computing a; // logical value, then zero extending it to int, then wanting it; // as a logical value again. Optimize this common case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:138,Testability,log,logical,138,"// Because of the type rules of C, we often end up computing a; // logical value, then zero extending it to int, then wanting it; // as a logical value again. Optimize this common case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:59,Deployability,deploy,deployment,59,"// If we're checking for a platform older than our minimum deployment; // target, we can fold the check away.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:193,Usability,simpl,simply,193,"// Strictly speaking, we shouldn't be calling EmitLoadOfLValue, which; // transitively calls EmitCompoundLiteralLValue, here in C++ since compound; // literals aren't l-values in C++. We do so simply because that's the; // cleanest way to handle compound literals in C++.; // See the discussion here: https://reviews.llvm.org/D64464",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:48,Availability,mask,mask,48,"// Used for shifting constraints for OpenCL, do mask for powers of 2, URem for; // non powers of two.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:57,Energy Efficiency,power,powers,57,"// Used for shifting constraints for OpenCL, do mask for powers of 2, URem for; // non powers of two.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:87,Energy Efficiency,power,powers,87,"// Used for shifting constraints for OpenCL, do mask for powers of 2, URem for; // non powers of two.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:44,Security,Sanitiz,SanitizerScope,44,// Should be called within CodeGenFunction::SanitizerScope RAII scope.; // Returns 'i1 false' when the truncation Src -> Dst was lossy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:16,Testability,assert,assert,16,// Only used in assert(); // This should be truncation of integral types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:6,Modifiability,Extend,Extend,6,// 1. Extend the truncated value back to the same width as the Src.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:30,Security,sanitiz,sanitizer,30,"// If the integer sign change sanitizer is enabled,; // and we are truncating from larger unsigned type to smaller signed type,; // let that next sanitizer deal with it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:146,Security,sanitiz,sanitizer,146,"// If the integer sign change sanitizer is enabled,; // and we are truncating from larger unsigned type to smaller signed type,; // let that next sanitizer deal with it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:44,Security,Sanitiz,SanitizerScope,44,// Should be called within CodeGenFunction::SanitizerScope RAII scope.; // Returns 'i1 false' when the conversion Src -> Dst changed the sign.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:16,Testability,assert,assert,16,// Only used in assert(),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:16,Testability,assert,assert,16,// Only used in assert(),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:16,Testability,assert,assert,16,// Only used in assert(),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:16,Testability,assert,assert,16,// Only used in assert(),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:75,Safety,avoid,avoid,75,"// Now, we do not need to emit the check in *all* of the cases.; // We can avoid emitting it in some obvious cases where it would have been; // dropped by the opt passes (instcombine) always anyways.; // If it's a cast between effectively the same type, no check.; // NOTE: this is *not* equivalent to checking the canonical types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:36,Security,sanitiz,sanitizer,36,"// If the signed integer truncation sanitizer is enabled,; // and this is a truncation from signed type, then no check is needed.; // Because here sign change check is interchangeable with truncation check.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:66,Safety,detect,detected,66,// Each of these checks needs to return 'false' when an issue was detected.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:101,Safety,detect,detected,101,"// So we can 'and' all the checks together, and still get 'false',; // if at least one of the checks detected an issue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:36,Security,sanitiz,sanitizer,36,"// If the signed integer truncation sanitizer was enabled,; // and we are truncating from larger unsigned type to smaller signed type,; // let's handle the case we skipped in that check.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:51,Performance,perform,perform,51,// The Element types determine the type of cast to perform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:122,Performance,optimiz,optimizations,122,"// If we can't recognize overflow as undefined behavior, assume that; // overflow saturates. This protects against normal optimizations if we are; // compiling with non-standard FP semantics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:264,Testability,log,logic,264,"// All conversions involving fixed point types should be handled by the; // EmitFixedPoint family functions. This is done to prevent bloating up this; // function more, and although fixed point numbers are represented by; // integers, we do not want to follow any logic that assumes they should be; // treated as integers.; // TODO(leonardchan): When necessary, add another if statement checking for; // conversions to fixed point types from other types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:173,Availability,avail,available,173,"// Cast to other types through float, using either the intrinsic or FPExt,; // depending on whether the half type itself is supported; // (as opposed to operations on half, available with NativeHalfType).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:79,Integrability,depend,depending,79,"// Cast to other types through float, using either the intrinsic or FPExt,; // depending on whether the half type itself is supported; // (as opposed to operations on half, available with NativeHalfType).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:34,Modifiability,extend,extended,34,// A scalar can be splatted to an extended vector of the same element type,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:100,Availability,avail,available,100,"// Use the intrinsic if the half type itself isn't supported; // (as opposed to operations on half, available with NativeHalfType).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:11,Security,sanitiz,sanitization,11,"/// Emit a sanitization check for the given ""binary"" operation (which; /// might actually be a unary increment which has been lowered to a binary; /// operation). The check passes if all values in \p Checks (which are \c i1),; /// are \c true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:10,Availability,Mask,Mask,10,// Vector Mask Case,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:3,Availability,Mask,Mask,3,// Mask off the high bits of each shuffle index.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:20,Availability,mask,mask,20,"// newv = undef; // mask = mask & maskbits; // for each elt; // n = extract mask i; // x = extract val n; // newv = insert newv, x, i",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:27,Availability,mask,mask,27,"// newv = undef; // mask = mask & maskbits; // for each elt; // n = extract mask i; // x = extract val n; // newv = insert newv, x, i",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:34,Availability,mask,maskbits,34,"// newv = undef; // mask = mask & maskbits; // for each elt; // n = extract mask i; // x = extract val n; // newv = insert newv, x, i",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:76,Availability,mask,mask,76,"// newv = undef; // mask = mask & maskbits; // for each elt; // n = extract mask i; // x = extract val n; // newv = insert newv, x, i",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:81,Performance,load,loads,81,"// Emit subscript expressions in rvalue context's. For most cases, this just; // loads the lvalue formed by the subscript expr. However, we have to be; // careful, because the base of a vector subscript is occasionally an rvalue,; // so we can't get it as an lvalue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:2,Security,Access,Accessed,2,/*Accessed*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:43,Security,Sanitiz,SanitizerKind,43,// TODO: Should we emit bounds checks with SanitizerKind::ArrayBounds?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:27,Performance,scalab,scalable,27,// Initialize from another scalable vector of the same type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:251,Performance,optimiz,optimizers,251,"// Loop over initializers collecting the Value for each, and remembering; // whether the source was swizzle (ExtVectorElementExpr). This will allow; // us to fold the shuffle for the swizzle into the shuffle for the vector; // initializer, since LLVM optimizers generally do not want to touch; // shuffles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:150,Performance,optimiz,optimized,150,"// If the initializer is an ExtVecEltExpr (a swizzle), and the swizzle's; // input is the same width as the vector being constructed, generate an; // optimized shuffle of the swizzle input into the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:3,Modifiability,Extend,Extend,3,"// Extend init to result vector length, and then shuffle its contribution; // to the vector initializer into V.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:109,Usability,clear,clear,109,"// These cases are generally not written to ignore the result of; // evaluating their sub-expressions, so we clear this now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:3,Deployability,Update,Update,3,// Update heapallocsite metadata when there is an explicit pointer cast.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:41,Performance,scalab,scalable,41,"// If Src is a fixed vector and Dst is a scalable vector, and both have the; // same element type, use the llvm.vector.insert intrinsic to perform the; // bitcast.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:139,Performance,perform,perform,139,"// If Src is a fixed vector and Dst is a scalable vector, and both have the; // same element type, use the llvm.vector.insert intrinsic to perform the; // bitcast.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:44,Performance,scalab,scalable,44,"// If we are casting a fixed i8 vector to a scalable 16 x i1 predicate; // vector, use a vector insert and bitcast the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:15,Performance,scalab,scalable,15,"// If Src is a scalable vector and Dst is a fixed vector, and both have the; // same element type, use the llvm.vector.extract intrinsic to perform the; // bitcast.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:140,Performance,perform,perform,140,"// If Src is a scalable vector and Dst is a fixed vector, and both have the; // same element type, use the llvm.vector.extract intrinsic to perform the; // bitcast.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:23,Performance,scalab,scalable,23,"// If we are casting a scalable 16 x i1 predicate vector to a fixed i8; // vector, bitcast the source and use a vector extract.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:3,Performance,Perform,Perform,3,"// Perform VLAT <-> VLST bitcast through memory.; // TODO: since the llvm.experimental.vector.{insert,extract} intrinsics; // require the element types of the vectors to be the same, we; // need to keep this around for bitcasts between VLAT <-> VLST where; // the element types of the vectors are not the same, until we figure; // out a better way of doing these casts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:59,Availability,down,downcast,59,// C++11 [expr.static.cast]p11: Behavior is undefined if a downcast is; // performed and the object is not of the derived type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:75,Performance,perform,performed,75,// C++11 [expr.static.cast]p11: Behavior is undefined if a downcast is; // performed and the object is not of the derived type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:241,Performance,perform,perform,241,"// Note that the AST doesn't distinguish between checked and; // unchecked member pointer conversions, so we always have to; // implement checked conversions here. This is inefficient when; // actual control flow may be required in order to perform the; // check, which it is for data member pointers (but not member; // function pointers on Itanium and ARM).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:22,Deployability,update,update,22,/// Handles check and update for lastprivate conditional variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:57,Modifiability,variab,variables,57,/// Handles check and update for lastprivate conditional variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:55,Performance,load,load-op-cmpxchg,55,"// For every other atomic operation, we need to emit a load-op-cmpxchg loop",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:398,Performance,perform,perform,398,"// While `x += 1` (for `x` with width less than int) is modeled as; // promotion+arithmetics+demotion, and we can catch lossy demotion with; // ease; inc/dec with width less than int can't overflow because of; // promotion rules, so we omit promotion+demotion, which means that we can; // not catch lossy ""demotion"". Because we still want to catch these cases; // when the sanitizer is enabled, we perform the promotion, then perform; // the increment/decrement in the wider type, and finally; // perform the demotion. This will catch lossy demotions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:426,Performance,perform,perform,426,"// While `x += 1` (for `x` with width less than int) is modeled as; // promotion+arithmetics+demotion, and we can catch lossy demotion with; // ease; inc/dec with width less than int can't overflow because of; // promotion rules, so we omit promotion+demotion, which means that we can; // not catch lossy ""demotion"". Because we still want to catch these cases; // when the sanitizer is enabled, we perform the promotion, then perform; // the increment/decrement in the wider type, and finally; // perform the demotion. This will catch lossy demotions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:497,Performance,perform,perform,497,"// While `x += 1` (for `x` with width less than int) is modeled as; // promotion+arithmetics+demotion, and we can catch lossy demotion with; // ease; inc/dec with width less than int can't overflow because of; // promotion rules, so we omit promotion+demotion, which means that we can; // not catch lossy ""demotion"". Because we still want to catch these cases; // when the sanitizer is enabled, we perform the promotion, then perform; // the increment/decrement in the wider type, and finally; // perform the demotion. This will catch lossy demotions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:373,Security,sanitiz,sanitizer,373,"// While `x += 1` (for `x` with width less than int) is modeled as; // promotion+arithmetics+demotion, and we can catch lossy demotion with; // ease; inc/dec with width less than int can't overflow because of; // promotion rules, so we omit promotion+demotion, which means that we can; // not catch lossy ""demotion"". Because we still want to catch these cases; // when the sanitizer is enabled, we perform the promotion, then perform; // the increment/decrement in the wider type, and finally; // perform the demotion. This will catch lossy demotions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:52,Security,sanitiz,sanitizer,52,// Do pass non-default ScalarConversionOpts so that sanitizer check is; // emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:41,Usability,simpl,simple,41,"// For everything else, we can just do a simple increment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:159,Safety,avoid,avoid,159,"// Fixed-point types are tricky. In some cases, it isn't possible to; // represent a 1 or a -1 in the type at all. Piggyback off of; // EmitFixedPointBinOp to avoid having to reimplement saturation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:13,Deployability,update,updated,13,// Store the updated result through the lvalue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:82,Deployability,update,updated,82,"// If this is a postinc, return the value read from memory, otherwise use the; // updated value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:3,Performance,Perform,Perform,3,// Perform vector logical not on comparison with zero vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:18,Testability,log,logical,18,// Perform vector logical not on comparison with zero vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:88,Testability,log,logic,88,"// If this isn't sizeof(vla), the result must be constant; use the constant; // folding logic so we don't have to duplicate it here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:23,Performance,load,load,23,"// If it's an l-value, load through the appropriate subobject l-value.; // Note that we have to ask E because Op might be an l-value that; // this won't work for, e.g. an Obj-C property.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:23,Performance,load,load,23,"// If it's an l-value, load through the appropriate subobject l-value.; // Note that we have to ask E because Op might be an l-value that; // this won't work for, e.g. an Obj-C property.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:31,Modifiability,variab,variables,31,"// Emit the RHS first. __block variables need to have the rhs evaluated; // first, plus this should improve codegen a little.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:3,Performance,Load,Load,3,// Load/convert the LHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:85,Security,sanitiz,sanitizer,85,"// Convert the result back to the LHS type,; // potentially with Implicit Conversion sanitizer check.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:20,Usability,clear,clearly,20,"// If the result is clearly ignored, return now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:34,Security,sanitiz,sanitizer,34,"// If the signed-integer-overflow sanitizer is enabled, emit a call to its; // runtime. Otherwise, this is a -ftrapv check, so just emit a trap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:8,Modifiability,extend,extend,8,"// Sign extend the args to 64-bit, so that we can use the same handler for; // all types of overflow.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:557,Availability,toler,tolerate,557,"// Some versions of glibc and gcc use idioms (particularly in their malloc; // routines) that add a pointer-sized integer (known to be a pointer value); // to a null pointer in order to cast the value back to an integer or as; // part of a pointer alignment algorithm. This is undefined behavior, but; // we'd like to be able to compile programs that use it.; //; // Normally, we'd generate a GEP with a null-pointer base here in response; // to that code, but it's also UB to dereference a pointer created that; // way. Instead (as an acknowledged hack to tolerate the idiom) we will; // generate a direct cast of the integer value to a pointer.; //; // The idiom (p = nullptr + N) is not met if any of the following are true:; //; // The operation is subtraction.; // The index is not pointer-sized.; // The pointer type is not byte-sized.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:79,Integrability,rout,routines,79,"// Some versions of glibc and gcc use idioms (particularly in their malloc; // routines) that add a pointer-sized integer (known to be a pointer value); // to a null pointer in order to cast the value back to an integer or as; // part of a pointer alignment algorithm. This is undefined behavior, but; // we'd like to be able to compile programs that use it.; //; // Normally, we'd generate a GEP with a null-pointer base here in response; // to that code, but it's also UB to dereference a pointer created that; // way. Instead (as an acknowledged hack to tolerate the idiom) we will; // generate a direct cast of the integer value to a pointer.; //; // The idiom (p = nullptr + N) is not met if any of the following are true:; //; // The operation is subtraction.; // The index is not pointer-sized.; // The pointer type is not byte-sized.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:8,Modifiability,extend,extend,8,// Zero-extend or sign-extend the pointer value according to; // whether the index is signed or not.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:23,Modifiability,extend,extend,23,// Zero-extend or sign-extend the pointer value according to; // whether the index is signed or not.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:2,Security,Access,Accessed,2,/*Accessed*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:314,Energy Efficiency,efficient,efficient,314,"// Construct an fmuladd intrinsic to represent a fused mul-add of MulOp and; // Addend. Use negMul and negAdd to negate the first operand of the Mul or; // the add operand respectively. This allows fmuladd to represent a*b-c, or; // c-a*b. Patterns in LLVM should catch the negated forms and translate them to; // efficient operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:182,Integrability,contract,contract,182,"// Check whether it would be legal to emit an fmuladd intrinsic call to; // represent op and if so, build the fmuladd.; //; // Checks that (a) the operation is fusable, and (b) -ffp-contract=on.; // Does NOT check the type of the operation - it's assumed that this function; // will be called from contexts where it's known that the type is contractable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:341,Integrability,contract,contractable,341,"// Check whether it would be legal to emit an fmuladd intrinsic call to; // represent op and if so, build the fmuladd.; //; // Checks that (a) the operation is fusable, and (b) -ffp-contract=on.; // Does NOT check the type of the operation - it's assumed that this function; // will be called from contexts where it's known that the type is contractable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:3,Performance,Perform,Perform,3,// Perform the actual operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:9,Modifiability,variab,variable-length,9,"// For a variable-length array, this is going to be non-constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:49,Safety,safe,safe,49,"// For everything elese, we can just compute it, safe in the; // assumption that Sema won't let anything through that we can't; // safely compute the size of.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:131,Safety,safe,safely,131,"// For everything elese, we can just compute it, safe in the; // assumption that Sema won't let anything through that we can't; // safely compute the size of.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:32,Security,sanitiz,sanitizer,32,// TODO: This misses out on the sanitizer check below.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:32,Security,sanitiz,sanitizer,32,// TODO: This misses out on the sanitizer check below.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:179,Performance,optimiz,optimizer,179,"// Dynamic information is required to be stripped for comparisons,; // because it could leak the dynamic information. Based on comparisons; // of pointers to dynamic objects, the optimizer can replace one pointer; // with another, which might be incorrect in presence of invariant; // groups. Comparison with null is safe because null does not carry any; // dynamic information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:317,Safety,safe,safe,317,"// Dynamic information is required to be stripped for comparisons,; // because it could leak the dynamic information. Based on comparisons; // of pointers to dynamic objects, the optimizer can replace one pointer; // with another, which might be incorrect in presence of invariant; // groups. Comparison with null is safe because null does not carry any; // dynamic information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:40,Modifiability,extend,extend,40,"// If this is a vector comparison, sign extend the result to the appropriate; // vector integer type and return it (don't convert to bool).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:11,Modifiability,variab,variables,11,"// __block variables need to have the rhs evaluated first, plus; // this should improve codegen just a little.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:20,Usability,clear,clearly,20,"// If the result is clearly ignored, return now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:3,Performance,Perform,Perform,3,// Perform vector logical and on comparisons with zero vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:18,Testability,log,logical,18,// Perform vector logical and on comparisons with zero vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:21,Testability,log,logical,21,"// If the top of the logical operator nest, reset the MCDC temp to 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:44,Deployability,update,update,44,"// If the top of the logical operator nest, update the MCDC bitmap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:21,Testability,log,logical,21,"// If the top of the logical operator nest, update the MCDC bitmap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:22,Safety,safe,safe,22,"// 0 && RHS: If it is safe, just elide the RHS, and return 0/false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:21,Testability,log,logical,21,"// If the top of the logical operator nest, reset the MCDC temp to 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:54,Availability,failure,failure,54,"// Branch on the LHS first. If it is false, go to the failure (cont) block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:44,Deployability,update,update,44,"// If the top of the logical operator nest, update the MCDC bitmap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:21,Testability,log,logical,21,"// If the top of the logical operator nest, update the MCDC bitmap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:3,Performance,Perform,Perform,3,// Perform vector logical or on comparisons with zero vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:18,Testability,log,logical,18,// Perform vector logical or on comparisons with zero vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:21,Testability,log,logical,21,"// If the top of the logical operator nest, reset the MCDC temp to 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:44,Deployability,update,update,44,"// If the top of the logical operator nest, update the MCDC bitmap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:21,Testability,log,logical,21,"// If the top of the logical operator nest, update the MCDC bitmap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:22,Safety,safe,safe,22,"// 1 || RHS: If it is safe, just elide the RHS, and return 1/true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:21,Testability,log,logical,21,"// If the top of the logical operator nest, reset the MCDC temp to 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:44,Deployability,update,update,44,"// If the top of the logical operator nest, update the MCDC bitmap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:21,Testability,log,logical,21,"// If the top of the logical operator nest, update the MCDC bitmap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:31,Modifiability,variab,variables,31,"// Even non-volatile automatic variables can't be evaluated unconditionally.; // Referencing a thread_local may cause non-trivial initialization work to; // occur. If we're inside a lambda and one of the variables is from the scope; // outside the lambda, that function may have returned already. Reading its; // locals is a bad idea. Also, these reads may introduce races there didn't; // exist in the source-level program.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:204,Modifiability,variab,variables,204,"// Even non-volatile automatic variables can't be evaluated unconditionally.; // Referencing a thread_local may cause non-trivial initialization work to; // occur. If we're inside a lambda and one of the variables is from the scope; // outside the lambda, that function may have returned already. Reading its; // locals is a bad idea. Also, these reads may introduce races there didn't; // exist in the source-level program.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:61,Safety,avoid,avoid,61,"// If the condition constant folds and can be elided, try to avoid emitting; // the condition and the dead arm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:24,Performance,perform,perform,24,// Cast float to int to perform ANDs if necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:156,Safety,safe,safe,156,"// If this is a really simple expression (like x ? 4 : 5), emit this as a; // select instead of as control flow. We can only do this if it is cheap and; // safe to evaluate the LHS and RHS unconditionally.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:23,Usability,simpl,simple,23,"// If this is a really simple expression (like x ? 4 : 5), emit this as a; // select instead of as control flow. We can only do this if it is cheap and; // safe to evaluate the LHS and RHS unconditionally.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:21,Testability,log,logical,21,"// If the top of the logical operator nest, reset the MCDC temp to 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:44,Deployability,update,update,44,"// If the top of the logical operator nest, update the MCDC bitmap for the; // ConditionalOperator prior to visiting its LHS and RHS blocks, since they; // may also contain a boolean expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:21,Testability,log,logical,21,"// If the top of the logical operator nest, update the MCDC bitmap for the; // ConditionalOperator prior to visiting its LHS and RHS blocks, since they; // may also contain a boolean expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:44,Deployability,update,update,44,"// If the top of the logical operator nest, update the MCDC bitmap for the; // ConditionalOperator prior to visiting its LHS and RHS blocks, since they; // may also contain a boolean expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:21,Testability,log,logical,21,"// If the top of the logical operator nest, update the MCDC bitmap for the; // ConditionalOperator prior to visiting its LHS and RHS blocks, since they; // may also contain a boolean expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:31,Availability,error,error,31,"// If EmitVAArg fails, emit an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:23,Energy Efficiency,reduce,reduced,23,// Was the GEP already reduced to a constant?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:27,Security,sanitiz,sanitizer,27,"// If the pointer overflow sanitizer isn't enabled, do nothing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:3,Performance,Perform,Perform,3,// Perform nullptr-and-offset check unless the nullptr is defined.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:82,Integrability,wrap,wrapping,82,"// Now that we've computed the total offset, add it to the base pointer (with; // wrapping semantics).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:509,Performance,optimiz,optimization,509,"// In C++, if the base pointer evaluates to a null pointer value,; // the only valid pointer this inbounds GEP can produce is also; // a null pointer, so the offset must also evaluate to zero.; // Likewise, if we have non-zero base pointer, we can not get null pointer; // as a result, so the offset can not be -intptr_t(BasePtr).; // In other words, both pointers are either null, or both are non-null,; // or the behaviour is undefined.; //; // C, however, is more strict in this regard, and gives more; // optimization opportunities: in C, additionally, nullptr+0 is undefined.; // So both the input to the 'gep inbounds' AND the output must not be null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:43,Safety,avoid,avoid,43,// Pass the computed GEP to the runtime to avoid emitting poisoned arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp:31,Integrability,Interface,Interface,31,"//===----- CGHLSLRuntime.cpp - Interface to HLSL Runtimes -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This provides an abstract class for HLSL code generation. Concrete; // subclasses of this implement code generation for specific HLSL; // runtime libraries.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp:7,Security,validat,validation,7,// The validation of ValVersionStr is done at HLSLToolChain::TranslateArgs.; // Assume ValVersionStr is legal here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp:42,Modifiability,variab,variable,42,"// cbuffer will be translated into global variable in special address space.; // If translate into C,; // cbuffer A {; // float a;; // float b;; // }; // float foo() { return a + b; }; //; // will be translated into; //; // struct A {; // float a;; // float b;; // } cbuffer_A __attribute__((address_space(4)));; // float foo() { return cbuffer_A.a + cbuffer_A.b; }; //; // layoutBuffer will create the struct A type.; // replaceBuffer will replace use of global variable a and b with cbuffer_A.a; // and cbuffer_A.b.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp:463,Modifiability,variab,variable,463,"// cbuffer will be translated into global variable in special address space.; // If translate into C,; // cbuffer A {; // float a;; // float b;; // }; // float foo() { return a + b; }; //; // will be translated into; //; // struct A {; // float a;; // float b;; // } cbuffer_A __attribute__((address_space(4)));; // float foo() { return cbuffer_A.a + cbuffer_A.b; }; //; // layoutBuffer will create the struct A type.; // replaceBuffer will replace use of global variable a and b with cbuffer_A.a; // and cbuffer_A.b.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp:17,Modifiability,variab,variable,17,// Create global variable for CB.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp:24,Deployability,update,update,24,"// TODO: We may need to update this when we add things like ByteAddressBuffer; // that don't have a template parameter (or, indeed, an element type).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp:126,Availability,error,error,126,"// At this point we have a resource with an element type, so we can assume; // that it's valid or we would have diagnosed the error earlier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp:161,Testability,assert,assert,161,"// The global_ctor array elements are a struct [Priority, Fn *, COMDat].; // HLSL neither supports priorities or COMDat values, so we will check those; // in an assert but not handle them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.h:29,Integrability,Interface,Interface,29,"//===----- CGHLSLRuntime.h - Interface to HLSL Runtimes -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This provides an abstract class for HLSL code generation. Concrete; // subclasses of this implement code generation for specific HLSL; // runtime libraries.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.h:10,Modifiability,variab,variable,10,// Global variable and offset for each constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp:233,Performance,scalab,scalable,233,"// vectorize.enable is set if:; // 1) loop hint vectorize.enable is set, or; // 2) it is implied when vectorize.predicate is set, or; // 3) it is implied when vectorize.width is set to a value > 1; // 4) it is implied when vectorize.scalable.enable is true; // 5) it is implied when vectorize.width is unset (0) and the user; // explicitly requested fixed-width vectorization, i.e.; // vectorize.scalable.enable is false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp:396,Performance,scalab,scalable,396,"// vectorize.enable is set if:; // 1) loop hint vectorize.enable is set, or; // 2) it is implied when vectorize.predicate is set, or; // 3) it is implied when vectorize.width is set to a value > 1; // 4) it is implied when vectorize.scalable.enable is true; // 5) it is implied when vectorize.width is unset (0) and the user; // explicitly requested fixed-width vectorization, i.e.; // vectorize.scalable.enable is false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp:13,Security,access,access,13,// Create an access group for this loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp:192,Safety,detect,detect,192,// Splitting the attributes into a BeforeJam and an AfterJam part will; // stop 'llvm.loop.isvectorized' (generated by vectorization in BeforeJam); // to be forwarded to the AfterJam part. We detect the situation here and; // add it manually.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp:47,Modifiability,inherit,inherit,47,// Clear the attributes so nested loops do not inherit them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp:3,Usability,Clear,Clear,3,// Clear the attributes so nested loops do not inherit them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp:53,Performance,load,load,53,"// Apply ""llvm.mem.parallel_loop_access"" metadata to load/stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp:46,Security,access,access,46,// Here we assume that every loop that has an access group is parallel.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h:45,Performance,load,loads,45,/// Generate llvm.loop.parallel metadata for loads and stores.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h:33,Performance,scalab,scalable,33,// Value for llvm.loop.vectorize.scalable.enable,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h:24,Deployability,pipeline,pipeline,24,/// Value for llvm.loop.pipeline.disable metadata.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h:24,Deployability,pipeline,pipeline,24,/// Value for llvm.loop.pipeline.iicount metadata.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h:23,Security,access,access,23,/// Return this loop's access group or nullptr if it does not have one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h:8,Security,access,access,8,/// The access group for memory accesses parallel to this loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h:32,Security,access,accesses,32,/// The access group for memory accesses parallel to this loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h:400,Security,access,accesses,400,"/// Create a LoopID for transformations.; ///; /// The methods call each other in case multiple transformations are applied; /// to a loop. The transformation first to be applied will use LoopID of the; /// next transformation in its followup attribute.; ///; /// @param Attrs The loop's transformations.; /// @param LoopProperties Non-transformation properties such as debug; /// location, parallel accesses and disabled; /// transformations. These are added to the returned; /// LoopID.; /// @param HasUserTransforms [out] Set to true if the returned MDNode encodes; /// at least one transformation.; ///; /// @return A LoopID (metadata node) that can be used for the llvm.loop; /// annotation or followup-attribute.; /// @{",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h:104,Usability,clear,cleared,104,/// Begin a new structured loop. The set of staged attributes will be; /// applied to the loop and then cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h:131,Usability,clear,cleared,131,/// Begin a new structured loop. Stage attributes from the Attrs list.; /// The staged attributes are applied to the loop and then cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h:12,Deployability,pipeline,pipeline,12,/// Set the pipeline disabled state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h:12,Deployability,pipeline,pipeline,12,/// Set the pipeline initiation interval.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGNonTrivialStruct.cpp:13,Deployability,update,update,13,// Instrs to update the destination and source addresses.; // Update phi instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGNonTrivialStruct.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGNonTrivialStruct.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGNonTrivialStruct.cpp:62,Deployability,Update,Update,62,// Instrs to update the destination and source addresses.; // Update phi instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGNonTrivialStruct.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGNonTrivialStruct.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGNonTrivialStruct.cpp:24,Modifiability,variab,variable,24,// Default-initialize a variable that is a non-trivial struct or an array of; // such structure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGNonTrivialStruct.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGNonTrivialStruct.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:27,Modifiability,variab,variable,27,"/// Given the address of a variable of pointer type, find the correct; /// null to store into it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:29,Integrability,rout,routine,29,"/// EmitObjCBoxedExpr - This routine generates code to call; /// the appropriate expression boxing method. This will either be; /// one of +[NSNumber numberWith<Type>:], or +[NSString stringWithUTF8String:],; /// or [NSValue valueWithBytes:objCType:].; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:149,Integrability,message,messaged,149,"// Generate a reference to the class pointer, which will be the receiver.; // Assumes that the method was introduced in the class that should be; // messaged (avoids pulling it out of the result type).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:159,Safety,avoid,avoids,159,"// Generate a reference to the class pointer, which will be the receiver.; // Assumes that the method was introduced in the class that should be; // messaged (avoids pulling it out of the result type).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:61,Availability,avail,available,61,"// Optimize empty collections by referencing constants, when available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:3,Performance,Optimiz,Optimize,3,"// Optimize empty collections by referencing constants, when available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate the temporary array(s).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:76,Availability,alive,alive,76,"// In ARC, we may need to do extra work to keep all the keys and; // values alive until after the call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:3,Performance,Perform,Perform,3,// Perform the actual initialialization of the array(s).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:16,Integrability,message,message,16,// Generate the message send.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:13,Integrability,message,message,13,"// The above message send needs these objects, but in ARC they are; // passed in a buffer that is essentially __unsafe_unretained.; // Therefore we must prevent the optimizer from releasing them until; // after the call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:165,Performance,optimiz,optimizer,165,"// The above message send needs these objects, but in ARC they are; // passed in a buffer that is essentially __unsafe_unretained.; // Therefore we must prevent the optimizer from releasing them until; // after the call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:157,Modifiability,parameteriz,parameterized,157,"/// Adjust the type of an Objective-C object that doesn't match up due; /// to type erasure at various points, e.g., related result types or the use; /// of parameterized classes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:90,Integrability,message,message,90,/// Decide whether to extend the lifetime of the receiver of a; /// returns-inner-pointer message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:22,Modifiability,extend,extend,22,/// Decide whether to extend the lifetime of the receiver of a; /// returns-inner-pointer message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:25,Integrability,message,message,25,"// For a normal instance message, we should extend unless the; // receiver is loaded from a variable with precise lifetime.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:44,Modifiability,extend,extend,44,"// For a normal instance message, we should extend unless the; // receiver is loaded from a variable with precise lifetime.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:92,Modifiability,variab,variable,92,"// For a normal instance message, we should extend unless the; // receiver is loaded from a variable with precise lifetime.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:78,Performance,load,loaded,78,"// For a normal instance message, we should extend unless the; // receiver is loaded from a variable with precise lifetime.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:17,Modifiability,variab,variables,17,// Only __strong variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:24,Modifiability,variab,variables,24,"// Otherwise, check for variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:7,Modifiability,variab,variables,7,// All variables have precise lifetime except local variables with; // automatic storage duration that aren't specially marked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:52,Modifiability,variab,variables,52,// All variables have precise lifetime except local variables with; // automatic storage duration that aren't specially marked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:84,Performance,load,loaded,84,"/// Given an expression of ObjC pointer type, check whether it was; /// immediately loaded from an ARC __weak l-value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:96,Integrability,message,message,96,"/// The ObjC runtime may provide entrypoints that are likely to be faster; /// than an ordinary message send of the appropriate selector.; ///; /// The entrypoints are guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// behavior; if that's dynamically a large proportion of all objects, using; /// the entrypoint will also be faster than using a message send.; ///; /// If the runtime does support a required entrypoint, then this method will; /// generate a call and return the resulting value. Otherwise it will return; /// std::nullopt and the caller can generate a msgSend instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:235,Integrability,message,message,235,"/// The ObjC runtime may provide entrypoints that are likely to be faster; /// than an ordinary message send of the appropriate selector.; ///; /// The entrypoints are guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// behavior; if that's dynamically a large proportion of all objects, using; /// the entrypoint will also be faster than using a message send.; ///; /// If the runtime does support a required entrypoint, then this method will; /// generate a call and return the resulting value. Otherwise it will return; /// std::nullopt and the caller can generate a msgSend instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:300,Integrability,message,message,300,"/// The ObjC runtime may provide entrypoints that are likely to be faster; /// than an ordinary message send of the appropriate selector.; ///; /// The entrypoints are guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// behavior; if that's dynamically a large proportion of all objects, using; /// the entrypoint will also be faster than using a message send.; ///; /// If the runtime does support a required entrypoint, then this method will; /// generate a call and return the resulting value. Otherwise it will return; /// std::nullopt and the caller can generate a msgSend instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:642,Integrability,message,message,642,"/// The ObjC runtime may provide entrypoints that are likely to be faster; /// than an ordinary message send of the appropriate selector.; ///; /// The entrypoints are guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// behavior; if that's dynamically a large proportion of all objects, using; /// the entrypoint will also be faster than using a message send.; ///; /// If the runtime does support a required entrypoint, then this method will; /// generate a call and return the resulting value. Otherwise it will return; /// std::nullopt and the caller can generate a msgSend instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:459,Safety,detect,detect,459,"/// The ObjC runtime may provide entrypoints that are likely to be faster; /// than an ordinary message send of the appropriate selector.; ///; /// The entrypoints are guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// behavior; if that's dynamically a large proportion of all objects, using; /// the entrypoint will also be faster than using a message send.; ///; /// If the runtime does support a required entrypoint, then this method will; /// generate a call and return the resulting value. Otherwise it will return; /// std::nullopt and the caller can generate a msgSend instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:31,Integrability,protocol,protocols,31,// If there are no non-runtime protocols then we can just stop now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:50,Integrability,protocol,protocol,50,"// Else we have to search through the non-runtime protocol's inheritancy; // hierarchy DAG stopping whenever a branch either finds a runtime protocol or; // a non-runtime protocol without any parents. These are the ""first-implied""; // protocols from a non-runtime protocol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:141,Integrability,protocol,protocol,141,"// Else we have to search through the non-runtime protocol's inheritancy; // hierarchy DAG stopping whenever a branch either finds a runtime protocol or; // a non-runtime protocol without any parents. These are the ""first-implied""; // protocols from a non-runtime protocol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:171,Integrability,protocol,protocol,171,"// Else we have to search through the non-runtime protocol's inheritancy; // hierarchy DAG stopping whenever a branch either finds a runtime protocol or; // a non-runtime protocol without any parents. These are the ""first-implied""; // protocols from a non-runtime protocol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:235,Integrability,protocol,protocols,235,"// Else we have to search through the non-runtime protocol's inheritancy; // hierarchy DAG stopping whenever a branch either finds a runtime protocol or; // a non-runtime protocol without any parents. These are the ""first-implied""; // protocols from a non-runtime protocol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:264,Integrability,protocol,protocol,264,"// Else we have to search through the non-runtime protocol's inheritancy; // hierarchy DAG stopping whenever a branch either finds a runtime protocol or; // a non-runtime protocol without any parents. These are the ""first-implied""; // protocols from a non-runtime protocol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:61,Modifiability,inherit,inheritancy,61,"// Else we have to search through the non-runtime protocol's inheritancy; // hierarchy DAG stopping whenever a branch either finds a runtime protocol or; // a non-runtime protocol without any parents. These are the ""first-implied""; // protocols from a non-runtime protocol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:36,Integrability,protocol,protocols,36,"// Walk the Runtime list to get all protocols implied via the inclusion of; // this protocol, e.g. all protocols it inherits from including itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:84,Integrability,protocol,protocol,84,"// Walk the Runtime list to get all protocols implied via the inclusion of; // this protocol, e.g. all protocols it inherits from including itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:103,Integrability,protocol,protocols,103,"// Walk the Runtime list to get all protocols implied via the inclusion of; // this protocol, e.g. all protocols it inherits from including itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:116,Modifiability,inherit,inherits,116,"// Walk the Runtime list to get all protocols implied via the inclusion of; // this protocol, e.g. all protocols it inherits from including itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:52,Integrability,protocol,protocols,52,"// Similar to above, walk the list of first-implied protocols to find the set; // all the protocols implied excluding the listed protocols themselves since; // they are not yet a part of the `RuntimePds` list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:90,Integrability,protocol,protocols,90,"// Similar to above, walk the list of first-implied protocols to find the set; // all the protocols implied excluding the listed protocols themselves since; // they are not yet a part of the `RuntimePds` list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:129,Integrability,protocol,protocols,129,"// Similar to above, walk the list of first-implied protocols to find the set; // all the protocols implied excluding the listed protocols themselves since; // they are not yet a part of the `RuntimePds` list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:223,Availability,redundant,redundant,223,// From the first-implied list we have to finish building the final protocol; // list. If a protocol in the first-implied list was already implied via some; // inheritance path through some other protocols then it would be redundant to; // add it here and so we skip over it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:68,Integrability,protocol,protocol,68,// From the first-implied list we have to finish building the final protocol; // list. If a protocol in the first-implied list was already implied via some; // inheritance path through some other protocols then it would be redundant to; // add it here and so we skip over it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:92,Integrability,protocol,protocol,92,// From the first-implied list we have to finish building the final protocol; // list. If a protocol in the first-implied list was already implied via some; // inheritance path through some other protocols then it would be redundant to; // add it here and so we skip over it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:196,Integrability,protocol,protocols,196,// From the first-implied list we have to finish building the final protocol; // list. If a protocol in the first-implied list was already implied via some; // inheritance path through some other protocols then it would be redundant to; // add it here and so we skip over it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:160,Modifiability,inherit,inheritance,160,// From the first-implied list we have to finish building the final protocol; // list. If a protocol in the first-implied list was already implied via some; // inheritance path through some other protocols then it would be redundant to; // add it here and so we skip over it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:223,Safety,redund,redundant,223,// From the first-implied list we have to finish building the final protocol; // list. If a protocol in the first-implied list was already implied via some; // inheritance path through some other protocols then it would be redundant to; // add it here and so we skip over it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:168,Performance,optimiz,optimized,168,"/// Instead of '[[MyClass alloc] init]', try to generate; /// 'objc_alloc_init(MyClass)'. This provides a code size improvement on the; /// caller side, as well as the optimized objc_alloc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:79,Modifiability,variab,variable,79,"// If the method is -retain, and the receiver's being loaded from; // a __weak variable, peephole the entire operation to objc_loadWeakRetained.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:54,Performance,load,loaded,54,"// If the method is -retain, and the receiver's being loaded from; // a __weak variable, peephole the entire operation to objc_loadWeakRetained.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:114,Performance,load,loaded,114,"// We don't retain the receiver in delegate init calls, and this is; // safe because the receiver value is always loaded from 'self',; // which we zero out. We don't want to Block_copy block receivers,; // though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:72,Safety,safe,safe,72,"// We don't retain the receiver in delegate init calls, and this is; // safe because the receiver value is always loaded from 'self',; // which we zero out. We don't want to Block_copy block receivers,; // though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:126,Integrability,message,messages,126,"// In ARC, we sometimes want to ""extend the lifetime""; // (i.e. retain+autorelease) of receivers of returns-inner-pointer; // messages.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:33,Modifiability,extend,extend,33,"// In ARC, we sometimes want to ""extend the lifetime""; // (i.e. retain+autorelease) of receivers of returns-inner-pointer; // messages.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:41,Safety,unsafe,unsafe,41,"// For delegate init calls in ARC, do an unsafe store of null into; // self. This represents the call taking direct ownership of that; // value. We have to do this after emitting the other call; // arguments because they might also reference self, but we don't; // have to worry about any of them modifying self because that would; // be an undefined read and write of an object in unordered; // expressions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:9,Safety,unsafe,unsafe,9,// Do an unsafe store of null into self.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:56,Performance,load,load,56,/// emitStructGetterCall - Call the runtime function to load a property; /// into the return value slot.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:76,Security,access,accesses,76,"/// Determine whether the given architecture supports unaligned atomic; /// accesses. They don't have to be fast, just faster than a function; /// call and a mutex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:33,Performance,load,load,33,// FIXME: Allow unaligned atomic load/store on x86. (It is not; // currently supported by the backend.),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:48,Security,access,accesses,48,/// Return the maximum size that permits atomic accesses for the given; /// architecture.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:25,Security,access,accesses,25,"// ARM has 8-byte atomic accesses, but it's not clear whether we; // want to rely on them here.; // In the default case, just assume that any size up to a pointer is; // fine given adequate alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:48,Usability,clear,clear,48,"// ARM has 8-byte atomic accesses, but it's not clear whether we; // want to rely on them here.; // In the default case, just assume that any size up to a pointer is; // fine given adequate alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:44,Security,access,accesses,44,"// If we're not atomic, just use expression accesses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:72,Security,access,accesses,72,// Properties on bitfield ivars need to be emitted using expression; // accesses even if they're nominally atomic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:16,Security,access,access,16,"// We can never access structs with object members with a native; // access, because we need to use write barriers. This is what; // objc_copyStruct is for.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:69,Security,access,access,69,"// We can never access structs with object members with a native; // access, because we need to use write barriers. This is what; // objc_copyStruct is for.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:129,Energy Efficiency,power,power,129,"// Otherwise, this is target-dependent and based on the size and; // alignment of the ivar.; // If the size of the ivar is not a power of two, give up. We don't; // want to get into the business of doing compare-and-swaps.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:29,Integrability,depend,dependent,29,"// Otherwise, this is target-dependent and based on the size and; // alignment of the ivar.; // If the size of the ivar is not a power of two, give up. We don't; // want to get into the business of doing compare-and-swaps.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:60,Performance,cache,cache,60,"// Most architectures require memory to fit within a single cache; // line, so the alignment has to be at least the size of the access.; // Otherwise we have to grab a lock.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:128,Security,access,access,128,"// Most architectures require memory to fit within a single cache; // line, so the alignment has to be at least the size of the access.; // Otherwise we have to grab a lock.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:68,Security,access,access,68,"// If the ivar's size exceeds the architecture's maximum atomic; // access size, we have to use CopyStruct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:32,Performance,load,loads,32,"// Otherwise, we can use native loads and stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:57,Performance,load,load,57,"// emitCmdValueForGetterSetterBody - Handle emitting the load necessary for; // the `_cmd` selector argument for getter/setter bodies. For direct methods,; // this returns an undefined/poison value; this matches behavior prior to `_cmd`; // being removed from the direct method ABI as the getter/setter caller would; // never load one. For non-direct methods, this emits a load of the implicit; // `_cmd` storage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:326,Performance,load,load,326,"// emitCmdValueForGetterSetterBody - Handle emitting the load necessary for; // the `_cmd` selector argument for getter/setter bodies. For direct methods,; // this returns an undefined/poison value; this matches behavior prior to `_cmd`; // being removed from the direct method ABI as the getter/setter caller would; // never load one. For non-direct methods, this emits a load of the implicit; // `_cmd` storage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:373,Performance,load,load,373,"// emitCmdValueForGetterSetterBody - Handle emitting the load necessary for; // the `_cmd` selector argument for getter/setter bodies. For direct methods,; // this returns an undefined/poison value; this matches behavior prior to `_cmd`; // being removed from the direct method ABI as the getter/setter caller would; // never load one. For non-direct methods, this emits a load of the implicit; // `_cmd` storage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:25,Security,access,accesses,25,"// Currently, all atomic accesses have to be through integer; // types, so there's no point in trying to pick a prettier type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:3,Performance,Perform,Perform,3,// Perform an atomic load. This does not impose ordering constraints.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:21,Performance,load,load,21,// Perform an atomic load. This does not impose ordering constraints.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:96,Usability,simpl,simpler,96,"// Return (ivar-type) objc_getProperty((id) self, _cmd, offset, true).; // FIXME: Can't this be simpler? This might even be worse than the; // corresponding gcc code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:14,Performance,load,load,14,// We want to load and autoreleaseReturnValue ARC __weak ivars.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:36,Performance,load,load,36,"// Otherwise we want to do a simple load, suppressing the; // final autorelease.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:29,Usability,simpl,simple,29,"// Otherwise we want to do a simple load, suppressing the; // final autorelease.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:55,Modifiability,variab,variable,55,// The second argument is the address of the parameter variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:55,Modifiability,variab,variable,55,// The second argument is the address of the parameter variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:25,Security,access,accesses,25,"// Currently, all atomic accesses have to be through integer; // types, so there's no point in trying to pick a prettier type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:3,Performance,Perform,Perform,3,// Perform an atomic store. There are no memory ordering requirements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:13,Modifiability,variab,variable,13,// The local variable comes into scope immediately.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:29,Deployability,release,release,29,// Enter a cleanup to do the release.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:15,Integrability,message,message,15,// Send it our message:,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:100,Performance,load,loading,100,// The second argument is a temporary array with space for NumItems; // pointers. We'll actually be loading elements from the array; // pointer written into the control state; this buffer is so that; // collections that *aren't* backed by arrays can still queue up; // batches of elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:256,Performance,queue,queue,256,// The second argument is a temporary array with space for NumItems; // pointers. We'll actually be loading elements from the array; // pointer written into the control state; this buffer is so that; // collections that *aren't* backed by arrays can still queue up; // batches of elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:26,Modifiability,variab,variable,26,// Initialize the element variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:18,Modifiability,variab,variable,18,"// Initialize the variable, in case it's a __block variable or something.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:51,Modifiability,variab,variable,51,"// Initialize the variable, in case it's a __block variable or something.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:161,Performance,optimiz,optimizations,161,"// Fetch the buffer out of the enumeration state.; // TODO: this pointer should actually be invariant between; // refreshes, which would help us do certain loop optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:28,Modifiability,variab,variable,28,"// If we do have an element variable, this assignment is the end of; // its initialization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:3,Performance,Perform,Perform,3,"// Perform the loop body, setting up break and continue labels.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:23,Modifiability,variab,variable,23,// Destroy the element variable now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:98,Usability,simpl,simplifying,98,"// If we haven't overrun the buffer yet, we can continue.; // Set the branch weights based on the simplifying assumption that this is; // like a while-loop, i.e., ignoring that the false branch fetches more; // elements and then returns to the loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:18,Integrability,message,message,18,// (note that the message send might split FetchMoreBB),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:3,Deployability,Release,Releases,3,// Releases at the end of the full-expression are imprecise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:70,Deployability,release,release,70,/// Produce the code for a CK_ARCConsumeObject. Does a primitive; /// release at the end of the full-expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:43,Performance,optimiz,optimizer,43,"/// Given a number of pointers, inform the optimizer that they're; /// being intrinsically used up until this point in the program.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:4,Performance,Perform,Perform,4,/// Perform an operation having the signature; /// i8* (i8*); /// where a null input causes a no-op and returns null.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:4,Performance,Perform,Perform,4,/// Perform an operation having the following signature:; /// i8* (i8**),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:4,Performance,Perform,Perform,4,"/// Perform an operation having the following signature:; /// i8* (i8**, i8*)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:4,Performance,Perform,Perform,4,"/// Perform an operation having the following signature:; /// void (i8**, i8**)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:4,Performance,Perform,Perform,4,/// Perform an operation having the signature; /// i8* (i8*); /// where a null input causes a no-op and returns null.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:56,Performance,perform,performance,56,"// We have Native ARC, so set nonlazybind attribute for performance",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:297,Availability,down,down,297,"/// Retain the given block, with _Block_copy semantics.; /// call i8* \@objc_retainBlock(i8* %value); ///; /// \param mandatory - If false, emit the call with metadata; /// indicating that it's okay for the optimizer to eliminate this call; /// if it can prove that the block never escapes except down the stack.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:207,Performance,optimiz,optimizer,207,"/// Retain the given block, with _Block_copy semantics.; /// call i8* \@objc_retainBlock(i8* %value); ///; /// \param mandatory - If false, emit the call with metadata; /// indicating that it's okay for the optimizer to eliminate this call; /// if it can prove that the block never escapes except down the stack.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:78,Performance,optimiz,optimizer,78,"// If the copy isn't mandatory, add !clang.arc.copy_on_escape to; // tell the optimizer that it doesn't need to do this copy if the; // block doesn't escape, where being passed as an argument doesn't; // count as escaping.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:127,Performance,optimiz,optimizer,127,"// If we're at -O1 and above, we don't want to litter the code; // with this marker yet, so leave a breadcrumb for the ARC; // optimizer to pick up.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:159,Performance,optimiz,optimization,159,"// Add operand bundle ""clang.arc.attachedcall"" to the call instead of emitting; // retainRV or claimRV calls in the IR. We currently do this only when the; // optimization level isn't -O0 since global-isel, which is currently run at; // -O0, doesn't know about the operand bundle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:284,Modifiability,variab,variable,284,"/// Claim a possibly-autoreleased return value at +0. This is only; /// valid to do in contexts which do not rely on the retain to keep; /// the object valid for all of its uses; for example, when; /// the value is ignored, or when it is being assigned to an; /// __unsafe_unretained variable.; ///; /// call i8* \@objc_unsafeClaimAutoreleasedReturnValue(i8* %value)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:4,Deployability,Release,Release,4,/// Release the given object.; /// call void \@objc_release(i8* %value),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:23,Modifiability,variab,variable,23,"/// Destroy a __strong variable.; ///; /// At -O0, emit a call to store 'null' into the address;; /// instrumenting tools prefer this because the address is exposed,; /// but it's relatively cumbersome to optimize.; ///; /// At -O1 and above, just load and call objc_release.; ///; /// call void \@objc_storeStrong(i8** %addr, i8* null)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:205,Performance,optimiz,optimize,205,"/// Destroy a __strong variable.; ///; /// At -O0, emit a call to store 'null' into the address;; /// instrumenting tools prefer this because the address is exposed,; /// but it's relatively cumbersome to optimize.; ///; /// At -O1 and above, just load and call objc_release.; ///; /// call void \@objc_storeStrong(i8** %addr, i8* null)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:248,Performance,load,load,248,"/// Destroy a __strong variable.; ///; /// At -O0, emit a call to store 'null' into the address;; /// instrumenting tools prefer this because the address is exposed,; /// but it's relatively cumbersome to optimize.; ///; /// At -O1 and above, just load and call objc_release.; ///; /// call void \@objc_storeStrong(i8** %addr, i8* null)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:157,Security,expose,exposed,157,"/// Destroy a __strong variable.; ///; /// At -O0, emit a call to store 'null' into the address;; /// instrumenting tools prefer this because the address is exposed,; /// but it's relatively cumbersome to optimize.; ///; /// At -O1 and above, just load and call objc_release.; ///; /// call void \@objc_storeStrong(i8** %addr, i8* null)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:140,Availability,down,down,140,"/// Store into a strong object. Sometimes calls this:; /// call void \@objc_storeStrong(i8** %addr, i8* %value); /// Other times, breaks it down into components.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:32,Deployability,release,release,32,// Store. We do this before the release so that any deallocs won't; // see the old value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:12,Deployability,release,release,12,"// Finally, release the old value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:123,Performance,optimiz,optimization,123,"// If we're initializing to null, just write null to memory; no need; // to get the runtime involved. But don't do this if optimization; // is enabled, because accounting for this would make the optimizer; // much more complicated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:195,Performance,optimiz,optimizer,195,"// If we're initializing to null, just write null to memory; no need; // to get the runtime involved. But don't do this if optimization; // is enabled, because accounting for this would make the optimizer; // much more complicated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:39,Deployability,release,release,39,/// Produce the code to do a primitive release.; /// call void \@objc_autoreleasePoolPop(i8* %ptr),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate the given objc object.; /// call i8* \@objc_alloc(i8* %value),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate the given objc object.; /// call i8* \@objc_allocWithZone(i8* %value),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:39,Deployability,release,release,39,/// Produce the code to do a primitive release.; /// [tmp drain];,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:58,Energy Efficiency,drain,drain,58,/// Produce the code to do a primitive release.; /// [tmp drain];,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:4,Deployability,Release,Release,4,/// Release the given object.; /// call void \@objc_release(i8* %value),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:56,Performance,perform,performance,56,"// We have Native ARC, so set nonlazybind attribute for performance",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:86,Deployability,release,release,86,"// If we're loading retained from a __strong xvalue, we can avoid; // an extra retain/release pair by zeroing out the source of this; // ""move"" operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:12,Performance,load,loading,12,"// If we're loading retained from a __strong xvalue, we can avoid; // an extra retain/release pair by zeroing out the source of this; // ""move"" operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:60,Safety,avoid,avoid,60,"// If we're loading retained from a __strong xvalue, we can avoid; // an extra retain/release pair by zeroing out the source of this; // ""move"" operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:3,Performance,Load,Load,3,// Load the object pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:21,Performance,optimiz,optimization,21,"// As a very special optimization, in ARC++, if the l-value is the; // result of a non-volatile assignment, do a simple retain of the; // result of the call to objc_storeWeak instead of reloading.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:113,Usability,simpl,simple,113,"// As a very special optimization, in ARC++, if the l-value is the; // result of a non-volatile assignment, do a simple retain of the; // result of the call to objc_storeWeak instead of reloading.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:217,Modifiability,variab,variable,217,// Try to emit code for scalar constant instead of emitting LValue and; // loading it because we are not guaranteed to have an l-value. One of such; // cases is DeclRefExpr referencing non-odr-used constant-evaluated variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:75,Performance,load,loading,75,// Try to emit code for scalar constant instead of emitting LValue and; // loading it because we are not guaranteed to have an l-value. One of such; // cases is DeclRefExpr referencing non-odr-used constant-evaluated variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:57,Modifiability,Rewrite,Rewrite,57,// Bitcasts can arise because of related-result returns. Rewrite; // the operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:30,Safety,avoid,avoid,30,// Change the insert point to avoid emitting the fall-back call after the; // bitcast.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:105,Integrability,message,message,105,// Handle phi instructions that are generated when it's necessary to check; // whether the receiver of a message is null.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:96,Performance,perform,perform,96,"/// Given that the given expression is some sort of call (which does; /// not return retained), perform an unsafeClaim following it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:107,Safety,unsafe,unsafeClaim,107,"/// Given that the given expression is some sort of call (which does; /// not return retained), perform an unsafeClaim following it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:30,Testability,log,logic,30,"// Otherwise, use the default logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:100,Modifiability,variab,variable,100,"/// The default rule for __unsafe_unretained emits the RHS recursively,; /// stores into the unsafe variable, and propagates the result outward.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:93,Safety,unsafe,unsafe,93,"/// The default rule for __unsafe_unretained emits the RHS recursively,; /// stores into the unsafe variable, and propagates the result outward.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:45,Safety,safe,safety,45,"// Recursively emit the RHS.; // For __block safety, do this before emitting the LHS.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:3,Performance,Perform,Perform,3,// Perform the store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:36,Testability,log,logic,36,/// The general expression-emission logic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:196,Safety,unsafe,unsafe,196,"// We should *never* see a nested full-expression here, because if; // we fail to emit at +1, our caller must not retain after we close; // out the full-expression. This isn't as important in the unsafe; // emitter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:61,Integrability,message,message,61,"// TODO: handle conditional operators here; // For calls and message sends, use the retained-call logic.; // Delegate inits are a special case in that they're the only; // returns-retained expression that *isn't* surrounded by; // a consume.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:98,Testability,log,logic,98,"// TODO: handle conditional operators here; // For calls and message sends, use the retained-call logic.; // Delegate inits are a special case in that they're the only; // returns-retained expression that *isn't* surrounded by; // a consume.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:81,Deployability,release,release,81,"/// For consumptions, just emit the subexpression and thus elide; /// the retain/release pair.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:8,Energy Efficiency,consumption,consumptions,8,"/// For consumptions, just emit the subexpression and thus elide; /// the retain/release pair.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:3,Safety,Avoid,Avoid,3,// Avoid the block-retain if this is a block literal that doesn't need to be; // copied to the heap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:10,Modifiability,extend,extends,10,"/// Block extends are net +0. Naively, we could just recurse on; /// the subexpression, but actually we need to ensure that the; /// value is copied as a block, so there's a little filter here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:38,Safety,safe,safely,38,"// will be a +0 value; // If we can't safely assume the sub-expression will produce a; // block-copied value, emit the sub-expression at +0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:78,Energy Efficiency,consumption,consumption,78,"/// For reclaims, emit the subexpression as a retained call and; /// skip the consumption.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:169,Safety,safe,safety,169,"// Otherwise, use the normal scalar-expression emission. The; // exception machinery doesn't do anything special with the; // exception like retaining it, so there's no safety associated with; // only running cleanups after the throw has started, and when it; // matters it tends to be substantially inferior code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:8,Energy Efficiency,consumption,consumptions,8,"/// For consumptions, just emit the subexpression and perform the; /// consumption like normal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:71,Energy Efficiency,consumption,consumption,71,"/// For consumptions, just emit the subexpression and perform the; /// consumption like normal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:54,Performance,perform,perform,54,"/// For consumptions, just emit the subexpression and perform the; /// consumption like normal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:15,Testability,log,logic,15,"/// No special logic for block extensions. (This probably can't; /// actually happen in this emitter, though.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:18,Performance,perform,perform,18,"/// For reclaims, perform an unsafeClaim if that's enabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:29,Safety,unsafe,unsafeClaim,29,"/// For reclaims, perform an unsafeClaim if that's enabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:2,Safety,unsafe,unsafe,2,/*unsafe*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:75,Safety,unsafe,unsafeClaim,75,"/// When we have an undecorated call, just emit it without adding; /// the unsafeClaim.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:185,Performance,perform,performing,185,"/// EmitARCUnsafeUnretainedScalarExpr - Semantically equivalent to; /// immediately releasing the resut of EmitARCRetainScalarExpr, but; /// avoiding any spurious retains, including by performing reclaims; /// with objc_unsafeClaimAutoreleasedReturnValue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:141,Safety,avoid,avoiding,141,"/// EmitARCUnsafeUnretainedScalarExpr - Semantically equivalent to; /// immediately releasing the resut of EmitARCRetainScalarExpr, but; /// avoiding any spurious retains, including by performing reclaims; /// with objc_unsafeClaimAutoreleasedReturnValue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:91,Safety,unsafe,unsafe,91,"// Evaluate the RHS first. If we're ignoring the result, assume; // that we can emit at an unsafe +0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:20,Performance,perform,perform,20,// Emit the LHS and perform the store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:60,Integrability,rout,routines,60,// Darwin uses the new __isPlatformVersionAtLeast family of routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:4,Availability,avail,available,4,// @available requires CoreFoundation only on Darwin.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:4,Availability,avail,available,4,"// @available doesn't need Foundation on macOS 10.15+, iOS/tvOS 13+, or; // watchOS 6+.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:113,Availability,down,down,113,"// Add -framework CoreFoundation to the linker commands. We still want to; // emit the core foundation reference down below because otherwise if; // CoreFoundation is not used in the code, the linker won't link the; // framework.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:56,Safety,Avoid,Avoids,56,"/// Class that lazily initialises the runtime function. Avoids inserting the; /// types and the function declaration into a module if they're not used, and; /// avoids constructing the type more than once if it's used more than once.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:161,Safety,avoid,avoids,161,"/// Class that lazily initialises the runtime function. Avoids inserting the; /// types and the function declaration into a module if they're not used, and; /// avoids constructing the type more than once if it's used more than once.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:39,Integrability,message,messages,39,/// strut objc_super. Used for sending messages to super. This structure; /// contains the receiver (object) and the expected class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:67,Integrability,message,message,67,/// struct objc_super*. The type of the argument to the superclass message; /// lookup functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:18,Performance,Cache,Cached,18,/// LLVM i8 type. Cached here to avoid repeatedly getting it in all of the; /// places where it's used,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:33,Safety,avoid,avoid,33,/// LLVM i8 type. Cached here to avoid repeatedly getting it in all of the; /// places where it's used,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:4,Integrability,Protocol,Protocol,4,/// Protocol * type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:76,Integrability,message,message,76,/// Pointer to a pointer to an Objective-C object. Used in the new ABI; /// message lookup function and some GC-related functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:55,Security,access,accessor,55,/// LLVM type for C ptrdiff_t. Mainly used in property accessor functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:80,Modifiability,variab,variables,80,/// LLVM type for C int*. Used for GCC-ABI-compatible non-fragile instance; /// variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:48,Integrability,message,message,48,/// Metadata kind used to tie method lookups to message sends. The GNUstep; /// runtime provides some LLVM passes that can use this to do things like; /// automatic IMP caching and speculative inlining.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:29,Usability,clear,clear,29,"// For read-only properties, clear the copy and retain flags",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:7,Integrability,protocol,protocol,7,"// For protocol properties, synthesized and dynamic have no meaning, so we; // reuse these flags to indicate that this is a protocol property (both set; // has no meaning, as a property can't be both synthesized and dynamic)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:124,Integrability,protocol,protocol,124,"// For protocol properties, synthesized and dynamic have no meaning, so we; // reuse these flags to indicate that this is a protocol property (both set; // has no meaning, as a property can't be both synthesized and dynamic)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:152,Availability,redundant,redundant,152,"/// Ensures that the value has the required type, by inserting a bitcast if; /// required. This function lets us avoid inserting bitcasts that are; /// redundant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:113,Safety,avoid,avoid,113,"/// Ensures that the value has the required type, by inserting a bitcast if; /// required. This function lets us avoid inserting bitcasts that are; /// redundant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:152,Safety,redund,redundant,152,"/// Ensures that the value has the required type, by inserting a bitcast if; /// required. This function lets us avoid inserting bitcasts that are; /// redundant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:15,Integrability,protocol,protocols,15,/// All of the protocols that have been declared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:84,Integrability,synchroniz,synchronize,84,"/// Function used for rethrowing exceptions, used at the end of \@finally or; /// \@synchronize blocks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:39,Integrability,synchroniz,synchronize,39,/// Function called when entering an \@synchronize block. Acquires the lock.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:57,Deployability,Release,Releases,57,/// Function called when exiting an \@synchronize block. Releases the lock.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:38,Integrability,synchroniz,synchronize,38,/// Function called when exiting an \@synchronize block. Releases the lock.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:96,Deployability,update,update,96,/// Function called if fast enumeration detects that the collection is; /// modified during the update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:40,Safety,detect,detects,40,/// Function called if fast enumeration detects that the collection is; /// modified during the update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:23,Integrability,protocol,protocol,23,"/// The version of the protocol class. Used to differentiate between ObjC1; /// and ObjC2 protocols. Objective-C 1 protocols can not contain optional; /// components and can not contain declared properties. We always emit; /// Objective-C 2 property structures, but we have to pretend that they're; /// Objective-C 1 property structures when targeting the GCC runtime or it; /// will abort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:90,Integrability,protocol,protocols,90,"/// The version of the protocol class. Used to differentiate between ObjC1; /// and ObjC2 protocols. Objective-C 1 protocols can not contain optional; /// components and can not contain declared properties. We always emit; /// Objective-C 2 property structures, but we have to pretend that they're; /// Objective-C 1 property structures when targeting the GCC runtime or it; /// will abort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:115,Integrability,protocol,protocols,115,"/// The version of the protocol class. Used to differentiate between ObjC1; /// and ObjC2 protocols. Objective-C 1 protocols can not contain optional; /// components and can not contain declared properties. We always emit; /// Objective-C 2 property structures, but we have to pretend that they're; /// Objective-C 1 property structures when targeting the GCC runtime or it; /// will abort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:384,Safety,abort,abort,384,"/// The version of the protocol class. Used to differentiate between ObjC1; /// and ObjC2 protocols. Objective-C 1 protocols can not contain optional; /// components and can not contain declared properties. We always emit; /// Objective-C 2 property structures, but we have to pretend that they're; /// Objective-C 1 property structures when targeting the GCC runtime or it; /// will abort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:26,Modifiability,variab,variable,26,"/// Generates an instance variable list structure. This is a structure; /// containing a size and an array of structures containing instance variable; /// metadata. This is used purely for introspection in the fragile ABI. In; /// the non-fragile ABI, it's used for instance variable fixup.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:141,Modifiability,variab,variable,141,"/// Generates an instance variable list structure. This is a structure; /// containing a size and an array of structures containing instance variable; /// metadata. This is used purely for introspection in the fragile ABI. In; /// the non-fragile ABI, it's used for instance variable fixup.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:275,Modifiability,variab,variable,275,"/// Generates an instance variable list structure. This is a structure; /// containing a size and an array of structures containing instance variable; /// metadata. This is used purely for introspection in the fragile ABI. In; /// the non-fragile ABI, it's used for instance variable fixup.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:19,Integrability,protocol,protocol,19,/// Emits an empty protocol. This is used for \@protocol() where no protocol; /// is found. The runtime will (hopefully) fix up the pointer to refer to the; /// real protocol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:48,Integrability,protocol,protocol,48,/// Emits an empty protocol. This is used for \@protocol() where no protocol; /// is found. The runtime will (hopefully) fix up the pointer to refer to the; /// real protocol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:68,Integrability,protocol,protocol,68,/// Emits an empty protocol. This is used for \@protocol() where no protocol; /// is found. The runtime will (hopefully) fix up the pointer to refer to the; /// real protocol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:166,Integrability,protocol,protocol,166,/// Emits an empty protocol. This is used for \@protocol() where no protocol; /// is found. The runtime will (hopefully) fix up the pointer to refer to the; /// real protocol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:112,Modifiability,variab,variable,112,/// Generates a list of property metadata structures. This follows the same; /// pattern as method and instance variable metadata lists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:35,Integrability,protocol,protocols,35,"/// Generates a list of referenced protocols. Classes, categories, and; /// protocols all use this structure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:76,Integrability,protocol,protocols,76,"/// Generates a list of referenced protocols. Classes, categories, and; /// protocols all use this structure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:23,Integrability,protocol,protocols,23,"/// To ensure that all protocols are seen by the runtime, we add a category on; /// a class defined in the runtime, declaring no methods, but adopting the; /// protocols. This is a horribly ugly hack, but it allows us to collect all; /// of the protocols without changing the ABI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:160,Integrability,protocol,protocols,160,"/// To ensure that all protocols are seen by the runtime, we add a category on; /// a class defined in the runtime, declaring no methods, but adopting the; /// protocols. This is a horribly ugly hack, but it allows us to collect all; /// of the protocols without changing the ABI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:245,Integrability,protocol,protocols,245,"/// To ensure that all protocols are seen by the runtime, we add a category on; /// a class defined in the runtime, declaring no methods, but adopting the; /// protocols. This is a horribly ugly hack, but it allows us to collect all; /// of the protocols without changing the ABI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:45,Integrability,protocol,protocols,45,/// Generates a method list. This is used by protocols to define the required; /// and optional methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:36,Modifiability,variab,variables,36,"/// Returns the name of ivar offset variables. In the GNUstep v1 ABI, this; /// contains the class and ivar names, in the v2 ABI this contains the type; /// encoding as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:16,Modifiability,variab,variable,16,/// Returns the variable used to store the offset of an instance variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:65,Modifiability,variab,variable,65,/// Returns the variable used to store the offset of an instance variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:38,Integrability,message,message,38,"/// Looks up the method for sending a message to the specified object. This; /// mechanism differs between the GCC and GNU runtimes, so this method must be; /// overridden in subclasses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:38,Integrability,message,message,38,"/// Looks up the method for sending a message to a superclass. This; /// mechanism differs between the GCC and GNU runtimes, so this method must; /// be overridden in subclasses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:379,Modifiability,extend,extended,379,"/// Class representing the legacy GCC Objective-C ABI. This is the default when; /// -fobjc-nonfragile-abi is not specified.; ///; /// The GCC ABI target actually generates code that is approximately compatible; /// with the new GNUstep runtime ABI, but refrains from using any features that; /// would not work with the GCC runtime. For example, clang always generates; /// the extended form of the class structure, and the extra fields are simply; /// ignored by GCC libobjc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:442,Usability,simpl,simply,442,"/// Class representing the legacy GCC Objective-C ABI. This is the default when; /// -fobjc-nonfragile-abi is not specified.; ///; /// The GCC ABI target actually generates code that is approximately compatible; /// with the new GNUstep runtime ABI, but refrains from using any features that; /// would not work with the GCC runtime. For example, clang always generates; /// the extended form of the class structure, and the extra fields are simply; /// ignored by GCC libobjc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:16,Integrability,message,message,16,/// The GCC ABI message lookup function. Returns an IMP pointing to the; /// method implementation for this message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:108,Integrability,message,message,108,/// The GCC ABI message lookup function. Returns an IMP pointing to the; /// method implementation for this message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:27,Integrability,message,message,27,"/// The GCC ABI superclass message lookup function. Takes a pointer to a; /// structure describing the receiver and the class, and a selector as; /// arguments. Returns the IMP for the corresponding method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:53,Performance,cache,cacheable,53,/// The slot lookup function. Returns a pointer to a cacheable structure; /// that contains (among other things) the IMP.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:31,Integrability,message,message,31,"/// The GNUstep ABI superclass message lookup function. Takes a pointer to; /// a structure describing the receiver and the class, and a selector as; /// arguments. Returns the slot for the corresponding method. Superclass; /// message lookup rarely changes, so this is a good caching opportunity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:228,Integrability,message,message,228,"/// The GNUstep ABI superclass message lookup function. Takes a pointer to; /// a structure describing the receiver and the class, and a selector as; /// arguments. Returns the slot for the corresponding method. Superclass; /// message lookup rarely changes, so this is a good caching opportunity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:16,Performance,perform,perform,16,/// Function to perform atomic copies of C++ objects with nontrivial copy; /// constructors from Objective-C ivars.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:16,Performance,perform,perform,16,/// Function to perform atomic copies of C++ objects with nontrivial copy; /// constructors to Objective-C ivars.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:3,Performance,Load,Load,3,// Load the imp from the slot,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:74,Safety,safe,safe,74,"// The optimised property functions omit the GC check, and so are not; // safe to use in GC mode. The standard functions are fast in GC mode,; // so there is less advantage in using them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:27,Integrability,message,message,27,"/// The GCC ABI superclass message lookup function. Takes a pointer to a; /// structure describing the receiver and the class, and a selector as; /// arguments. Returns the IMP for the corresponding method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:52,Integrability,protocol,protocol,52,"/// A flag indicating if we've emitted at least one protocol.; /// If we haven't, then we need to emit an empty protocol, to ensure that the; /// __start__objc_protocols and __stop__objc_protocols sections exist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:112,Integrability,protocol,protocol,112,"/// A flag indicating if we've emitted at least one protocol.; /// If we haven't, then we need to emit an empty protocol, to ensure that the; /// __start__objc_protocols and __stop__objc_protocols sections exist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:52,Integrability,protocol,protocol,52,"/// A flag indicating if we've emitted at least one protocol reference.; /// If we haven't, then we need to emit an empty protocol, to ensure that the; /// __start__objc_protocol_refs and __stop__objc_protocol_refs sections; /// exist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:122,Integrability,protocol,protocol,122,"/// A flag indicating if we've emitted at least one protocol reference.; /// If we haven't, then we need to emit an empty protocol, to ensure that the; /// __start__objc_protocol_refs and __stop__objc_protocol_refs sections; /// exist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:109,Integrability,protocol,protocol,109,"/// A flag indicating if we've emitted at least one class.; /// If we haven't, then we need to emit an empty protocol, to ensure that the; /// __start__objc_classes and __stop__objc_classes sections / exist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:62,Security,Access,Accesses,62,/// Generate the name of a symbol for a reference to a class. Accesses to; /// classes should be indirected via this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:147,Security,hash,hash,147,// struct; // {; // Class isa;; // uint32_t flags;; // uint32_t length; // Number of codepoints; // uint32_t size; // Number of bytes; // uint32_t hash;; // const char *data;; // };,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:97,Usability,simpl,simply,97,"// For now, all non-ASCII strings are represented as UTF-16. As such, the; // number of bytes is simply double the number of UTF-16 codepoints. In; // ASCII strings, the number of bytes is equal to the number of non-ASCII; // codepoints.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:125,Energy Efficiency,Allocate,Allocate,125,"// A UTF-16 representation of a unicode string contains at most the same; // number of code units as a UTF-8 representation. Allocate that much; // space, plus one for the final null character.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:3,Security,Hash,Hash,3,// Hash. Not currently initialised by the compiler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:3,Security,Hash,Hash,3,// Hash. Not currently initialised by the compiler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:48,Performance,cache,cache,48,// Don't access the slot unless we're trying to cache the result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:9,Security,access,access,9,// Don't access the slot unless we're trying to cache the result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:13,Integrability,Interface,Interface,13,"// The first Interface we find may be a @class,; // which should only be treated as the source of; // truth in the absence of a true declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:13,Integrability,protocol,protocol,13,/// Existing protocol references.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:40,Integrability,protocol,protocols,40,// Do nothing - we only emit referenced protocols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:11,Integrability,protocol,protocol,11,"// Use the protocol definition, if there is one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:158,Performance,load,loads,158,"// In Windows, initialisers are sorted by the suffix. XCL is for library; // initialisers, which run before user initialisers. We are running; // Objective-C loads at the end of library load. This means +load methods; // will run before any other static constructors, but that static; // constructors can see a fully initialised Objective-C state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:186,Performance,load,load,186,"// In Windows, initialisers are sorted by the suffix. XCL is for library; // initialisers, which run before user initialisers. We are running; // Objective-C loads at the end of library load. This means +load methods; // will run before any other static constructors, but that static; // constructors can see a fully initialised Objective-C state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:204,Performance,load,load,204,"// In Windows, initialisers are sorted by the suffix. XCL is for library; // initialisers, which run before user initialisers. We are running; // Objective-C loads at the end of library load. This means +load methods; // will run before any other static constructors, but that static; // constructors can see a fully initialised Objective-C state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:100,Availability,failure,failures,100,"/// In the v2 ABI, ivar offset variables use the type encoding in their name; /// to trigger linker failures if the types don't match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:31,Modifiability,variab,variables,31,"/// In the v2 ABI, ivar offset variables use the type encoding in their name; /// to trigger linker failures if the types don't match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:119,Modifiability,refactor,refactoring,119,"// struct objc_method_list *methods; // FIXME: Almost identical code is copied and pasted below for the; // class, but refactoring it cleanly requires C++14 generic lambdas.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:30,Integrability,protocol,protocols,30,// struct objc_protocol_list *protocols;,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:40,Testability,log,log,40,// Alignment will be stored as a base-2 log of the alignment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:70,Modifiability,extend,extended,70,// uint32_t flags;; // Bits 0-1 are ownership.; // Bit 2 indicates an extended type encoding; // Bits 3-8 contain log2(aligment),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:30,Integrability,protocol,protocols,30,// struct objc_protocol_list *protocols;,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:42,Integrability,message,messaged,42,// Nullable `Class` expressions cannot be messaged with a direct method; // so the only reason why the receive can be null would be because; // of weak linking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:16,Integrability,message,message,16,/// The GCC ABI message lookup function. Returns an IMP pointing to the; /// method implementation for this message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:108,Integrability,message,message,108,/// The GCC ABI message lookup function. Returns an IMP pointing to the; /// method implementation for this message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:27,Integrability,message,message,27,"/// The GCC ABI superclass message lookup function. Takes a pointer to a; /// structure describing the receiver and the class, and a selector as; /// arguments. Returns the IMP for the corresponding method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:136,Availability,error,error,136,// end anonymous namespace; /// Emits a reference to a dummy variable which is emitted with each class.; /// This ensures that a linker error will be generated when trying to link; /// together modules where a referenced class is not defined.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:61,Modifiability,variab,variable,61,// end anonymous namespace; /// Emits a reference to a dummy variable which is emitted with each class.; /// This ensures that a linker error will be generated when trying to link; /// together modules where a referenced class is not defined.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:3,Integrability,protocol,protocols,3,// protocols,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:160,Performance,perform,performing,160,"// With the incompatible ABI, this will need to be replaced with a direct; // reference to the class symbol. For the compatible nonfragile ABI we are; // still performing this lookup at run time but emitting the symbol for the; // class externally so that we can make the switch later.; //; // Libobjc2 contains an LLVM pass that replaces calls to objc_lookup_class; // with memoized versions or with static references if it's safe to do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:427,Safety,safe,safe,427,"// With the incompatible ABI, this will need to be replaced with a direct; // reference to the class symbol. For the compatible nonfragile ABI we are; // still performing this lookup at run time but emitting the symbol for the; // class externally so that we can make the switch later.; //; // Libobjc2 contains an LLVM pass that replaces calls to objc_lookup_class; // with memoized versions or with static references if it's safe to do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:15,Performance,perform,perform,15,"// This has to perform the lookup every time, since posing and related; // techniques can modify the name -> class mapping.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:41,Integrability,interface,interface,41,// All other types should be Objective-C interface pointer types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:15,Integrability,message,message,15,///Generates a message send where the super is the receiver. This is a message; ///send to self with special delivery semantics indicating which class's method; ///should be called.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:71,Integrability,message,message,71,///Generates a message send where the super is the receiver. This is a message; ///send to self with special delivery semantics indicating which class's method; ///should be called.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:3,Performance,Load,Load,3,// Load the isa pointer of the superclass is this is a class method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:252,Integrability,message,message,252,"// Set up global aliases for the metaclass or class pointer if they do not; // already exist. These will are forward-references which will be set to; // pointers to the class and metaclass structure created for the runtime; // load function. To send a message to super, we look up the value of the; // super_class pointer from either the class or metaclass structure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:227,Performance,load,load,227,"// Set up global aliases for the metaclass or class pointer if they do not; // already exist. These will are forward-references which will be set to; // pointers to the class and metaclass structure created for the runtime; // load function. To send a message to super, we look up the value of the; // super_class pointer from either the class or metaclass structure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:25,Usability,simpl,simplified,25,// Cast the pointer to a simplified version of the class structure,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:3,Performance,Load,Load,3,// Load the superclass pointer,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:24,Integrability,message,message,24,/// Generate code for a message send expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:39,Deployability,release,release,39,// Strip out message sends to retain / release in GC mode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:13,Integrability,message,message,13,// Strip out message sends to retain / release in GC mode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:3,Integrability,Message,Message,3,"// Message sends are expected to return a zero value when the; // receiver is nil. At one point, this was only guaranteed for; // simple integer and pointer types, but expectations have grown; // over time.; //; // Given a nil receiver, the GNU runtime's message lookup will; // return a stub function that simply sets various return-value; // registers to zero and then returns. That's good enough for us; // if and only if (1) the calling conventions of that stub are; // compatible with the signature we're using and (2) the registers; // it sets are sufficient to produce a zero value of the return type.; // Rather than doing a whole target-specific analysis, we assume it; // only works for void, integer, and pointer types, and in all; // other cases we do an explicit nil check is emitted code. In; // addition to ensuring we produce a zero value for other types, this; // sidesteps the few outright CC incompatibilities we know about that; // could otherwise lead to crashes, like when a method is expected to; // return on the x87 floating point stack or adjust the stack pointer; // because of an indirect return.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:255,Integrability,message,message,255,"// Message sends are expected to return a zero value when the; // receiver is nil. At one point, this was only guaranteed for; // simple integer and pointer types, but expectations have grown; // over time.; //; // Given a nil receiver, the GNU runtime's message lookup will; // return a stub function that simply sets various return-value; // registers to zero and then returns. That's good enough for us; // if and only if (1) the calling conventions of that stub are; // compatible with the signature we're using and (2) the registers; // it sets are sufficient to produce a zero value of the return type.; // Rather than doing a whole target-specific analysis, we assume it; // only works for void, integer, and pointer types, and in all; // other cases we do an explicit nil check is emitted code. In; // addition to ensuring we produce a zero value for other types, this; // sidesteps the few outright CC incompatibilities we know about that; // could otherwise lead to crashes, like when a method is expected to; // return on the x87 floating point stack or adjust the stack pointer; // because of an indirect return.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:288,Testability,stub,stub,288,"// Message sends are expected to return a zero value when the; // receiver is nil. At one point, this was only guaranteed for; // simple integer and pointer types, but expectations have grown; // over time.; //; // Given a nil receiver, the GNU runtime's message lookup will; // return a stub function that simply sets various return-value; // registers to zero and then returns. That's good enough for us; // if and only if (1) the calling conventions of that stub are; // compatible with the signature we're using and (2) the registers; // it sets are sufficient to produce a zero value of the return type.; // Rather than doing a whole target-specific analysis, we assume it; // only works for void, integer, and pointer types, and in all; // other cases we do an explicit nil check is emitted code. In; // addition to ensuring we produce a zero value for other types, this; // sidesteps the few outright CC incompatibilities we know about that; // could otherwise lead to crashes, like when a method is expected to; // return on the x87 floating point stack or adjust the stack pointer; // because of an indirect return.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:461,Testability,stub,stub,461,"// Message sends are expected to return a zero value when the; // receiver is nil. At one point, this was only guaranteed for; // simple integer and pointer types, but expectations have grown; // over time.; //; // Given a nil receiver, the GNU runtime's message lookup will; // return a stub function that simply sets various return-value; // registers to zero and then returns. That's good enough for us; // if and only if (1) the calling conventions of that stub are; // compatible with the signature we're using and (2) the registers; // it sets are sufficient to produce a zero value of the return type.; // Rather than doing a whole target-specific analysis, we assume it; // only works for void, integer, and pointer types, and in all; // other cases we do an explicit nil check is emitted code. In; // addition to ensuring we produce a zero value for other types, this; // sidesteps the few outright CC incompatibilities we know about that; // could otherwise lead to crashes, like when a method is expected to; // return on the x87 floating point stack or adjust the stack pointer; // because of an indirect return.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:130,Usability,simpl,simple,130,"// Message sends are expected to return a zero value when the; // receiver is nil. At one point, this was only guaranteed for; // simple integer and pointer types, but expectations have grown; // over time.; //; // Given a nil receiver, the GNU runtime's message lookup will; // return a stub function that simply sets various return-value; // registers to zero and then returns. That's good enough for us; // if and only if (1) the calling conventions of that stub are; // compatible with the signature we're using and (2) the registers; // it sets are sufficient to produce a zero value of the return type.; // Rather than doing a whole target-specific analysis, we assume it; // only works for void, integer, and pointer types, and in all; // other cases we do an explicit nil check is emitted code. In; // addition to ensuring we produce a zero value for other types, this; // sidesteps the few outright CC incompatibilities we know about that; // could otherwise lead to crashes, like when a method is expected to; // return on the x87 floating point stack or adjust the stack pointer; // because of an indirect return.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:307,Usability,simpl,simply,307,"// Message sends are expected to return a zero value when the; // receiver is nil. At one point, this was only guaranteed for; // simple integer and pointer types, but expectations have grown; // over time.; //; // Given a nil receiver, the GNU runtime's message lookup will; // return a stub function that simply sets various return-value; // registers to zero and then returns. That's good enough for us; // if and only if (1) the calling conventions of that stub are; // compatible with the signature we're using and (2) the registers; // it sets are sufficient to produce a zero value of the return type.; // Rather than doing a whole target-specific analysis, we assume it; // only works for void, integer, and pointer types, and in all; // other cases we do an explicit nil check is emitted code. In; // addition to ensuring we produce a zero value for other types, this; // sidesteps the few outright CC incompatibilities we know about that; // could otherwise lead to crashes, like when a method is expected to; // return on the x87 floating point stack or adjust the stack pointer; // because of an indirect return.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:48,Integrability,message,message,48,// The block we're going to end up in after any message send or nil path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:3,Modifiability,Extend,Extended,3,// Extended type encoding,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:125,Performance,perform,performs,125,"// Set up the class structure; // Note: Several of these are char*s when they should be ids. This is; // because the runtime performs this translation on load.; //; // Fields marked New ABI are part of the GNUstep runtime. We emit them; // anyway; the classes will still work with the GNU runtime, they will just; // be ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:154,Performance,load,load,154,"// Set up the class structure; // Note: Several of these are char*s when they should be ids. This is; // because the runtime performs this translation on load.; //; // Fields marked New ABI are part of the GNUstep runtime. We emit them; // anyway; the classes will still work with the GNU runtime, they will just; // be ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:3,Integrability,protocol,protocols,3,// protocols,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:3,Integrability,protocol,protocols,3,// protocols,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:119,Integrability,message,messages,119,"// Create an instance of the structure; // This is now an externally visible symbol, so that we can speed up class; // messages in the next ABI. We may already have some weak references to; // this, so check and fix them properly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:14,Integrability,protocol,protocol,14,"// Create the protocol list structure used in classes, categories and so on",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:3,Integrability,Protocol,Protocols,3,// Protocols are objects containing lists of the methods implemented and; // protocols adopted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:77,Integrability,protocol,protocols,77,// Protocols are objects containing lists of the methods implemented and; // protocols adopted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:11,Integrability,protocol,protocol,11,"// Use the protocol definition, if there is one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:165,Integrability,protocol,protocol,165,"// Property metadata: name, attributes, isSynthesized, setter name, setter; // types, getter name, getter types.; // The isSynthesized value is always set to 0 in a protocol. It exists to; // simplify the runtime library by allowing it to use the same data; // structures for protocol metadata everywhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:276,Integrability,protocol,protocol,276,"// Property metadata: name, attributes, isSynthesized, setter name, setter; // types, getter name, getter types.; // The isSynthesized value is always set to 0 in a protocol. It exists to; // simplify the runtime library by allowing it to use the same data; // structures for protocol metadata everywhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:192,Usability,simpl,simplify,192,"// Property metadata: name, attributes, isSynthesized, setter name, setter; // types, getter name, getter types.; // The isSynthesized value is always set to 0 in a protocol. It exists to; // simplify the runtime library by allowing it to use the same data; // structures for protocol metadata everywhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:3,Integrability,Protocol,Protocols,3,// Protocols are objects containing lists of the methods implemented and; // protocols adopted.; // The isa pointer must be set to a magic number so the runtime knows it's; // the correct layout.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:77,Integrability,protocol,protocols,77,// Protocols are objects containing lists of the methods implemented and; // protocols adopted.; // The isa pointer must be set to a magic number so the runtime knows it's; // the correct layout.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:3,Integrability,Protocol,Protocol,3,// Protocol list,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:35,Integrability,protocol,protocols,35,// Collect the names of referenced protocols,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:3,Integrability,Protocol,Protocol,3,// Protocol list,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:44,Integrability,protocol,protocols,44,// Skip any properties that are declared in protocols that this class; // conforms to but are not actually implemented by this class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:36,Integrability,protocol,protocol,36,"// If we're generating a list for a protocol, skip optional / required ones; // when generating the other list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:51,Availability,error,errors,51,// Emit the symbol that is used to generate linker errors if this class is; // referenced in other modules but not declared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:38,Modifiability,variab,variables,38,// Collect information about instance variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:145,Performance,load,load,145,"// For non-fragile ivars, set the instance size to 0 - {the size of just this; // class}. The runtime will then set this to the correct value on load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:35,Integrability,protocol,protocols,35,// Collect the names of referenced protocols,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:36,Modifiability,variab,variable,36,// Generate the method and instance variable lists,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:206,Modifiability,inherit,inherit,206,"// Irrespective of whether we are compiling for a fragile or non-fragile ABI,; // we emit a symbol containing the offset for each ivar in the class. This; // allows code compiled for the non-Fragile ABI to inherit from code compiled; // for the legacy ABI, without causing problems. The converse is also; // possible, but causes all ivar accesses to be fragile.; // Offset pointer for getting at the correct field in the ivar list when; // setting up the alias. These are: The base address for the global, the; // ivar array (second field), the ivar in this list (set for each ivar), and; // the offset (third field in ivar structure)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:338,Security,access,accesses,338,"// Irrespective of whether we are compiling for a fragile or non-fragile ABI,; // we emit a symbol containing the offset for each ivar in the class. This; // allows code compiled for the non-Fragile ABI to inherit from code compiled; // for the legacy ABI, without causing problems. The converse is also; // possible, but causes all ivar accesses to be fragile.; // Offset pointer for getting at the correct field in the ivar list when; // setting up the alias. These are: The base address for the global, the; // ivar array (second field), the ivar in this list (set for each ivar), and; // the offset (third field in ivar structure)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:20,Modifiability,variab,variable,20,"// Get the existing variable, if one exists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:21,Performance,load,load,21,// Only emit an ObjC load function if no Objective-C stuff has been called,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:22,Integrability,protocol,protocols,22,// Add all referenced protocols to a category.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:27,Availability,redundant,redundant,27,// FIXME: We're generating redundant loads and stores here!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:37,Performance,load,loads,37,// FIXME: We're generating redundant loads and stores here!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:27,Safety,redund,redundant,27,// FIXME: We're generating redundant loads and stores here!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:14,Performance,load,load,14,// Create the load function calling the runtime entry point with the module; // structure,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:214,Performance,cache,cached,214,"// Objective-C allows for the declaration and implementation types; // to differ slightly.; //; // If we're being asked for the Function associated for a method; // implementation, a previous value might have been cached; // based on the type of the canonical declaration.; //; // If these do not match, then we'll replace this function with; // a new one that has the proper type below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:15,Performance,cache,cached,15,// Replace the cached function in the map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:289,Safety,avoid,avoids,289,"// Unlike the Apple non-fragile runtimes, which also uses; // unwind-based zero cost exceptions, the GNU Objective C runtime's; // EH support isn't a veneer over C++ EH. Instead, exception; // objects are created by objc_exception_throw and destroyed by; // the personality function; this avoids the need for bracketing; // catch handlers with calls to __blah_begin_catch/__blah_end_catch; // (or even _Unwind_DeleteException), but probably doesn't; // interoperate very well with foreign exceptions.; //; // In Objective-C++ mode, we actually emit something equivalent to the C++; // exception handler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:12,Modifiability,variab,variable,12,// Emit the variable and initialize it with what we think the correct value; // is. This allows code compiled with non-fragile ivars to work correctly; // when linked against code which isn't (most of the time).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:29,Integrability,Interface,Interface,29,"//===------- CGObjCMac.cpp - Interface to Apple Objective-C Runtime -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This provides Objective-C code generation targeting the Apple runtime.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Integrability,Protocol,ProtocolPtrTy,4,/// ProtocolPtrTy - LLVM type for external protocol handles; /// (typeof(Protocol)),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:43,Integrability,protocol,protocol,43,/// ProtocolPtrTy - LLVM type for external protocol handles; /// (typeof(Protocol)),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:73,Integrability,Protocol,Protocol,73,/// ProtocolPtrTy - LLVM type for external protocol handles; /// (typeof(Protocol)),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Performance,Cache,CacheTy,4,/// CacheTy - LLVM type for struct objc_cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Performance,Cache,CachePtrTy,4,/// CachePtrTy - LLVM type for struct objc_cache *.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:9,Integrability,rout,routine,9,"/// This routine declares and returns address of:; /// void objc_copyCppObjectAtomic(; /// void *dest, const void *src,; /// void (*copyHelper) (void *dest, const void *source));",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Integrability,Protocol,ProtocolTy,4,/// ProtocolTy - LLVM type for struct objc_protocol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Integrability,Protocol,ProtocolPtrTy,4,/// ProtocolPtrTy - LLVM type for struct objc_protocol *.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Integrability,Protocol,ProtocolExtensionTy,4,/// ProtocolExtensionTy - LLVM type for struct; /// objc_protocol_extension.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Integrability,Protocol,ProtocolExtensionTy,4,/// ProtocolExtensionTy - LLVM type for struct; /// objc_protocol_extension *.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Integrability,Protocol,ProtocolListTy,4,/// ProtocolListTy - LLVM type for struct objc_property_list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Integrability,Protocol,ProtocolListPtrTy,4,/// ProtocolListPtrTy - LLVM type for struct objc_property_list*.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Integrability,Protocol,ProtocolnfABITy,3,// ProtocolnfABITy = LLVM for struct _protocol_t,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Integrability,Protocol,ProtocolnfABIPtrTy,3,// ProtocolnfABIPtrTy = LLVM for struct _protocol_t*,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Integrability,Protocol,ProtocolListnfABITy,3,// ProtocolListnfABITy - LLVM for struct _objc_protocol_list,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Integrability,Protocol,ProtocolListnfABIPtrTy,3,// ProtocolListnfABIPtrTy - LLVM for struct _objc_protocol_list*,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:47,Integrability,Message,MessageRefTy,47,// New types for nonfragile abi messaging.; // MessageRefTy - LLVM for:; // struct _message_ref_t {; // IMP messenger;; // SEL name;; // };,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Integrability,Message,MessageRefCTy,3,// MessageRefCTy - clang type for struct _message_ref_t,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Integrability,Message,MessageRefPtrTy,3,// MessageRefPtrTy - LLVM for struct _message_ref_t*,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Integrability,Message,MessageRefCPtrTy,3,// MessageRefCPtrTy - clang type for struct _message_ref_t*,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:47,Performance,Load,Loads,47,"/// Class objc_loadClassref (void *); ///; /// Loads from a classref. For Objective-C stub classes, this invokes the; /// initialization callback stored inside the stub. For all other classes; /// this simply dereferences the pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:86,Testability,stub,stub,86,"/// Class objc_loadClassref (void *); ///; /// Loads from a classref. For Objective-C stub classes, this invokes the; /// initialization callback stored inside the stub. For all other classes; /// this simply dereferences the pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:164,Testability,stub,stub,164,"/// Class objc_loadClassref (void *); ///; /// Loads from a classref. For Objective-C stub classes, this invokes the; /// initialization callback stored inside the stub. For all other classes; /// this simply dereferences the pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:202,Usability,simpl,simply,202,"/// Class objc_loadClassref (void *); ///; /// Loads from a classref. For Objective-C stub classes, this invokes the; /// initialization callback stored inside the stub. For all other classes; /// this simply dereferences the pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:154,Performance,load,load,154,"// Add the non-lazy-bind attribute, since objc_loadClassref is likely to; // be called a lot.; //; // Also it is safe to make it readnone, since we never load or store the; // classref except by calling this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:113,Safety,safe,safe,113,"// Add the non-lazy-bind attribute, since objc_loadClassref is likely to; // be called a lot.; //; // Also it is safe to make it readnone, since we never load or store the; // classref except by calling this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:30,Modifiability,variab,variables,30,"/// opcode for captured block variables layout 'instructions'.; /// In the following descriptions, 'I' is the value of the immediate field.; /// (field following the opcode).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:93,Performance,optimiz,optimized,93,/// The next I+1 words do not contain a value of object pointer type.; /// This is simply an optimized version of BLOCK_LAYOUT_BYTES for; /// when the required skip quantity is a multiple of the pointer size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:83,Usability,simpl,simply,83,/// The next I+1 words do not contain a value of object pointer type.; /// This is simply an optimized version of BLOCK_LAYOUT_BYTES for; /// when the required skip quantity is a multiple of the pointer size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:47,Modifiability,variab,variables,47,/// The next I+1 words are pointers to __block variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:44,Modifiability,variab,variables,44,// arc/mrr layout of captured block literal variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:36,Modifiability,variab,variable,36,/// MethodVarNames - uniqued method variable names.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:35,Modifiability,variab,variable,35,/// PropertyNames - uniqued method variable names.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Integrability,Protocol,Protocols,4,/// Protocols - Protocols for which an objc_protocol structure has; /// been emitted. Forward declarations are handled by creating an; /// empty structure whose initializer is filled in when/if defined.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:16,Integrability,Protocol,Protocols,16,/// Protocols - Protocols for which an objc_protocol structure has; /// been emitted. Forward declarations are handled by creating an; /// empty structure whose initializer is filled in when/if defined.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:23,Integrability,Protocol,Protocols,23,"/// DefinedProtocols - Protocols which have actually been; /// defined. We should not need this, see FIXME in GenerateProtocol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:64,Testability,stub,stubs,64,/// DefinedStubCategories - List of defined categories on class stubs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Performance,Cache,Cached,4,/// Cached reference to the class for constant strings. This value has type; /// int * but is actually an Obj-C class pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:161,Integrability,protocol,protocol,161,/// GetClassName - Return a unique constant for the given selector's; /// runtime name (which may change via use of objc_runtime_name attribute on; /// class or protocol definition. The return value has type char *.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:52,Modifiability,extend,extended,52,/// EmitProtocolMethodTypes - Generate the array of extended method type; /// strings. The return value has type Int8PtrPtrTy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:56,Integrability,protocol,protocol,56,"/// GetProtocolRef - Return a reference to the internal protocol; /// description, creating an empty one if it has not been; /// defined. The return value has type ProtocolPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:164,Integrability,Protocol,ProtocolPtrTy,164,"/// GetProtocolRef - Return a reference to the internal protocol; /// description, creating an empty one if it has not been; /// defined. The return value has type ProtocolPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:144,Integrability,wrap,wrapper,144,"/// CreateMetadataVar - Create a global variable with internal; /// linkage for use by the Objective-C runtime.; ///; /// This is a convenience wrapper which not only creates the; /// variable, but also sets the section and alignment and adds the; /// global to the ""llvm.used"" list.; ///; /// \param Name - The variable name.; /// \param Init - The variable initializer; this is also used to; /// define the type of the variable.; /// \param Section - The section the variable should go into, or empty.; /// \param Align - The alignment for the variable, or 0.; /// \param AddToUsed - Whether the variable should be added to; /// ""llvm.used"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:40,Modifiability,variab,variable,40,"/// CreateMetadataVar - Create a global variable with internal; /// linkage for use by the Objective-C runtime.; ///; /// This is a convenience wrapper which not only creates the; /// variable, but also sets the section and alignment and adds the; /// global to the ""llvm.used"" list.; ///; /// \param Name - The variable name.; /// \param Init - The variable initializer; this is also used to; /// define the type of the variable.; /// \param Section - The section the variable should go into, or empty.; /// \param Align - The alignment for the variable, or 0.; /// \param AddToUsed - Whether the variable should be added to; /// ""llvm.used"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:184,Modifiability,variab,variable,184,"/// CreateMetadataVar - Create a global variable with internal; /// linkage for use by the Objective-C runtime.; ///; /// This is a convenience wrapper which not only creates the; /// variable, but also sets the section and alignment and adds the; /// global to the ""llvm.used"" list.; ///; /// \param Name - The variable name.; /// \param Init - The variable initializer; this is also used to; /// define the type of the variable.; /// \param Section - The section the variable should go into, or empty.; /// \param Align - The alignment for the variable, or 0.; /// \param AddToUsed - Whether the variable should be added to; /// ""llvm.used"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:312,Modifiability,variab,variable,312,"/// CreateMetadataVar - Create a global variable with internal; /// linkage for use by the Objective-C runtime.; ///; /// This is a convenience wrapper which not only creates the; /// variable, but also sets the section and alignment and adds the; /// global to the ""llvm.used"" list.; ///; /// \param Name - The variable name.; /// \param Init - The variable initializer; this is also used to; /// define the type of the variable.; /// \param Section - The section the variable should go into, or empty.; /// \param Align - The alignment for the variable, or 0.; /// \param AddToUsed - Whether the variable should be added to; /// ""llvm.used"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:350,Modifiability,variab,variable,350,"/// CreateMetadataVar - Create a global variable with internal; /// linkage for use by the Objective-C runtime.; ///; /// This is a convenience wrapper which not only creates the; /// variable, but also sets the section and alignment and adds the; /// global to the ""llvm.used"" list.; ///; /// \param Name - The variable name.; /// \param Init - The variable initializer; this is also used to; /// define the type of the variable.; /// \param Section - The section the variable should go into, or empty.; /// \param Align - The alignment for the variable, or 0.; /// \param AddToUsed - Whether the variable should be added to; /// ""llvm.used"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:421,Modifiability,variab,variable,421,"/// CreateMetadataVar - Create a global variable with internal; /// linkage for use by the Objective-C runtime.; ///; /// This is a convenience wrapper which not only creates the; /// variable, but also sets the section and alignment and adds the; /// global to the ""llvm.used"" list.; ///; /// \param Name - The variable name.; /// \param Init - The variable initializer; this is also used to; /// define the type of the variable.; /// \param Section - The section the variable should go into, or empty.; /// \param Align - The alignment for the variable, or 0.; /// \param AddToUsed - Whether the variable should be added to; /// ""llvm.used"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:469,Modifiability,variab,variable,469,"/// CreateMetadataVar - Create a global variable with internal; /// linkage for use by the Objective-C runtime.; ///; /// This is a convenience wrapper which not only creates the; /// variable, but also sets the section and alignment and adds the; /// global to the ""llvm.used"" list.; ///; /// \param Name - The variable name.; /// \param Init - The variable initializer; this is also used to; /// define the type of the variable.; /// \param Section - The section the variable should go into, or empty.; /// \param Align - The alignment for the variable, or 0.; /// \param AddToUsed - Whether the variable should be added to; /// ""llvm.used"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:546,Modifiability,variab,variable,546,"/// CreateMetadataVar - Create a global variable with internal; /// linkage for use by the Objective-C runtime.; ///; /// This is a convenience wrapper which not only creates the; /// variable, but also sets the section and alignment and adds the; /// global to the ""llvm.used"" list.; ///; /// \param Name - The variable name.; /// \param Init - The variable initializer; this is also used to; /// define the type of the variable.; /// \param Section - The section the variable should go into, or empty.; /// \param Align - The alignment for the variable, or 0.; /// \param AddToUsed - Whether the variable should be added to; /// ""llvm.used"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:598,Modifiability,variab,variable,598,"/// CreateMetadataVar - Create a global variable with internal; /// linkage for use by the Objective-C runtime.; ///; /// This is a convenience wrapper which not only creates the; /// variable, but also sets the section and alignment and adds the; /// global to the ""llvm.used"" list.; ///; /// \param Name - The variable name.; /// \param Init - The variable initializer; this is also used to; /// define the type of the variable.; /// \param Section - The section the variable should go into, or empty.; /// \param Align - The alignment for the variable, or 0.; /// \param AddToUsed - Whether the variable should be added to; /// ""llvm.used"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:58,Integrability,protocol,protocol,58,"/// GetOrEmitProtocolRef - Get a forward reference to the protocol; /// object for the given declaration, emitting it if needed. These; /// forward references will be filled in with empty bodies if no; /// definition is seen. The return value has type ProtocolPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:252,Integrability,Protocol,ProtocolPtrTy,252,"/// GetOrEmitProtocolRef - Get a forward reference to the protocol; /// object for the given declaration, emitting it if needed. These; /// forward references will be filled in with empty bodies if no; /// definition is seen. The return value has type ProtocolPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:55,Integrability,protocol,protocol,55,/// A convenience class for splitting the methods of a protocol into; /// the four interesting groups.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:184,Integrability,interface,interface,184,"/// EmitIvarList - Emit the ivar list for the given; /// implementation. If ForClass is true the list of class ivars; /// (i.e. metaclass ivars) is emitted, otherwise the list of; /// interface ivars will be emitted. The return value has type; /// IvarListPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:104,Integrability,interface,interface,104,/// EmitMetaClass - Emit a forward reference to the class structure; /// for the metaclass of the given interface. The return value has; /// type ClassPtrTy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:32,Integrability,protocol,protocol,32,"/// GetOrEmitProtocol - Get the protocol object for the given; /// declaration, emitting it if necessary. The return value has type; /// ProtocolPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:137,Integrability,Protocol,ProtocolPtrTy,137,"/// GetOrEmitProtocol - Get the protocol object for the given; /// declaration, emitting it if necessary. The return value has type; /// ProtocolPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:58,Integrability,protocol,protocol,58,"/// GetOrEmitProtocolRef - Get a forward reference to the protocol; /// object for the given declaration, emitting it if needed. These; /// forward references will be filled in with empty bodies if no; /// definition is seen. The return value has type ProtocolPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:252,Integrability,Protocol,ProtocolPtrTy,252,"/// GetOrEmitProtocolRef - Get a forward reference to the protocol; /// object for the given declaration, emitting it if needed. These; /// forward references will be filled in with empty bodies if no; /// definition is seen. The return value has type ProtocolPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:41,Integrability,protocol,protocol,41,"/// EmitProtocolExtension - Generate the protocol extension; /// structure used to store optional instance and class methods, and; /// protocol properties. The return value has type; /// ProtocolExtensionPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:135,Integrability,protocol,protocol,135,"/// EmitProtocolExtension - Generate the protocol extension; /// structure used to store optional instance and class methods, and; /// protocol properties. The return value has type; /// ProtocolExtensionPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:187,Integrability,Protocol,ProtocolExtensionPtrTy,187,"/// EmitProtocolExtension - Generate the protocol extension; /// structure used to store optional instance and class methods, and; /// protocol properties. The return value has type; /// ProtocolExtensionPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:60,Integrability,protocol,protocols,60,/// EmitProtocolList - Generate the list of referenced; /// protocols. The return value has type ProtocolListPtrTy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:97,Integrability,Protocol,ProtocolListPtrTy,97,/// EmitProtocolList - Generate the list of referenced; /// protocols. The return value has type ProtocolListPtrTy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:84,Integrability,message,message,84,/// VTableDispatchMethods - List of methods for which we generate; /// vtable-based message dispatch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:184,Integrability,interface,interface,184,"/// EmitIvarList - Emit the ivar list for the given; /// implementation. If ForClass is true the list of class ivars; /// (i.e. metaclass ivars) is emitted, otherwise the list of; /// interface ivars will be emitted. The return value has type; /// IvarListnfABIPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:32,Integrability,protocol,protocol,32,"/// GetOrEmitProtocol - Get the protocol object for the given; /// declaration, emitting it if necessary. The return value has type; /// ProtocolPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:137,Integrability,Protocol,ProtocolPtrTy,137,"/// GetOrEmitProtocol - Get the protocol object for the given; /// declaration, emitting it if necessary. The return value has type; /// ProtocolPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:58,Integrability,protocol,protocol,58,"/// GetOrEmitProtocolRef - Get a forward reference to the protocol; /// object for the given declaration, emitting it if needed. These; /// forward references will be filled in with empty bodies if no; /// definition is seen. The return value has type ProtocolPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:252,Integrability,Protocol,ProtocolPtrTy,252,"/// GetOrEmitProtocolRef - Get a forward reference to the protocol; /// object for the given declaration, emitting it if needed. These; /// forward references will be filled in with empty bodies if no; /// definition is seen. The return value has type ProtocolPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:60,Integrability,protocol,protocols,60,/// EmitProtocolList - Generate the list of referenced; /// protocols. The return value has type ProtocolListPtrTy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:97,Integrability,Protocol,ProtocolListPtrTy,97,/// EmitProtocolList - Generate the list of referenced; /// protocols. The return value has type ProtocolListPtrTy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:39,Modifiability,variab,variable,39,/// GetClassGlobal - Return the global variable for the Objective-C; /// class of the given name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:53,Modifiability,variab,variable,53,/// ObjCIvarOffsetVariable - Returns the ivar offset variable for; /// the given ivar.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:78,Integrability,interface,interface,78,/// GetInterfaceEHType - Get the cached ehtype for the given Objective-C; /// interface. The return value has type EHTypePtrTy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:33,Performance,cache,cached,33,/// GetInterfaceEHType - Get the cached ehtype for the given Objective-C; /// interface. The return value has type EHTypePtrTy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:510,Availability,avail,available,510,"// Annotate the load as an invariant load iff inside an instance method; // and ivar belongs to instance method's class and one of its super class.; // This check is needed because the ivar offset is a lazily; // initialised value that may depend on objc_msgSend to perform a fixup on; // the first message dispatch.; //; // An additional opportunity to mark the load as invariant arises when the; // base of the ivar access is a parameter to an Objective C method.; // However, because the parameters are not available in the current; // interface, we cannot perform this check.; //; // Note that for direct methods, because objc_msgSend is skipped,; // and that the method may be inlined, this optimization actually; // can't be performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:240,Integrability,depend,depend,240,"// Annotate the load as an invariant load iff inside an instance method; // and ivar belongs to instance method's class and one of its super class.; // This check is needed because the ivar offset is a lazily; // initialised value that may depend on objc_msgSend to perform a fixup on; // the first message dispatch.; //; // An additional opportunity to mark the load as invariant arises when the; // base of the ivar access is a parameter to an Objective C method.; // However, because the parameters are not available in the current; // interface, we cannot perform this check.; //; // Note that for direct methods, because objc_msgSend is skipped,; // and that the method may be inlined, this optimization actually; // can't be performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:299,Integrability,message,message,299,"// Annotate the load as an invariant load iff inside an instance method; // and ivar belongs to instance method's class and one of its super class.; // This check is needed because the ivar offset is a lazily; // initialised value that may depend on objc_msgSend to perform a fixup on; // the first message dispatch.; //; // An additional opportunity to mark the load as invariant arises when the; // base of the ivar access is a parameter to an Objective C method.; // However, because the parameters are not available in the current; // interface, we cannot perform this check.; //; // Note that for direct methods, because objc_msgSend is skipped,; // and that the method may be inlined, this optimization actually; // can't be performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:539,Integrability,interface,interface,539,"// Annotate the load as an invariant load iff inside an instance method; // and ivar belongs to instance method's class and one of its super class.; // This check is needed because the ivar offset is a lazily; // initialised value that may depend on objc_msgSend to perform a fixup on; // the first message dispatch.; //; // An additional opportunity to mark the load as invariant arises when the; // base of the ivar access is a parameter to an Objective C method.; // However, because the parameters are not available in the current; // interface, we cannot perform this check.; //; // Note that for direct methods, because objc_msgSend is skipped,; // and that the method may be inlined, this optimization actually; // can't be performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:16,Performance,load,load,16,"// Annotate the load as an invariant load iff inside an instance method; // and ivar belongs to instance method's class and one of its super class.; // This check is needed because the ivar offset is a lazily; // initialised value that may depend on objc_msgSend to perform a fixup on; // the first message dispatch.; //; // An additional opportunity to mark the load as invariant arises when the; // base of the ivar access is a parameter to an Objective C method.; // However, because the parameters are not available in the current; // interface, we cannot perform this check.; //; // Note that for direct methods, because objc_msgSend is skipped,; // and that the method may be inlined, this optimization actually; // can't be performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:37,Performance,load,load,37,"// Annotate the load as an invariant load iff inside an instance method; // and ivar belongs to instance method's class and one of its super class.; // This check is needed because the ivar offset is a lazily; // initialised value that may depend on objc_msgSend to perform a fixup on; // the first message dispatch.; //; // An additional opportunity to mark the load as invariant arises when the; // base of the ivar access is a parameter to an Objective C method.; // However, because the parameters are not available in the current; // interface, we cannot perform this check.; //; // Note that for direct methods, because objc_msgSend is skipped,; // and that the method may be inlined, this optimization actually; // can't be performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:266,Performance,perform,perform,266,"// Annotate the load as an invariant load iff inside an instance method; // and ivar belongs to instance method's class and one of its super class.; // This check is needed because the ivar offset is a lazily; // initialised value that may depend on objc_msgSend to perform a fixup on; // the first message dispatch.; //; // An additional opportunity to mark the load as invariant arises when the; // base of the ivar access is a parameter to an Objective C method.; // However, because the parameters are not available in the current; // interface, we cannot perform this check.; //; // Note that for direct methods, because objc_msgSend is skipped,; // and that the method may be inlined, this optimization actually; // can't be performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:363,Performance,load,load,363,"// Annotate the load as an invariant load iff inside an instance method; // and ivar belongs to instance method's class and one of its super class.; // This check is needed because the ivar offset is a lazily; // initialised value that may depend on objc_msgSend to perform a fixup on; // the first message dispatch.; //; // An additional opportunity to mark the load as invariant arises when the; // base of the ivar access is a parameter to an Objective C method.; // However, because the parameters are not available in the current; // interface, we cannot perform this check.; //; // Note that for direct methods, because objc_msgSend is skipped,; // and that the method may be inlined, this optimization actually; // can't be performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:560,Performance,perform,perform,560,"// Annotate the load as an invariant load iff inside an instance method; // and ivar belongs to instance method's class and one of its super class.; // This check is needed because the ivar offset is a lazily; // initialised value that may depend on objc_msgSend to perform a fixup on; // the first message dispatch.; //; // An additional opportunity to mark the load as invariant arises when the; // base of the ivar access is a parameter to an Objective C method.; // However, because the parameters are not available in the current; // interface, we cannot perform this check.; //; // Note that for direct methods, because objc_msgSend is skipped,; // and that the method may be inlined, this optimization actually; // can't be performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:696,Performance,optimiz,optimization,696,"// Annotate the load as an invariant load iff inside an instance method; // and ivar belongs to instance method's class and one of its super class.; // This check is needed because the ivar offset is a lazily; // initialised value that may depend on objc_msgSend to perform a fixup on; // the first message dispatch.; //; // An additional opportunity to mark the load as invariant arises when the; // base of the ivar access is a parameter to an Objective C method.; // However, because the parameters are not available in the current; // interface, we cannot perform this check.; //; // Note that for direct methods, because objc_msgSend is skipped,; // and that the method may be inlined, this optimization actually; // can't be performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:731,Performance,perform,performed,731,"// Annotate the load as an invariant load iff inside an instance method; // and ivar belongs to instance method's class and one of its super class.; // This check is needed because the ivar offset is a lazily; // initialised value that may depend on objc_msgSend to perform a fixup on; // the first message dispatch.; //; // An additional opportunity to mark the load as invariant arises when the; // base of the ivar access is a parameter to an Objective C method.; // However, because the parameters are not available in the current; // interface, we cannot perform this check.; //; // Note that for direct methods, because objc_msgSend is skipped,; // and that the method may be inlined, this optimization actually; // can't be performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:418,Security,access,access,418,"// Annotate the load as an invariant load iff inside an instance method; // and ivar belongs to instance method's class and one of its super class.; // This check is needed because the ivar offset is a lazily; // initialised value that may depend on objc_msgSend to perform a fixup on; // the first message dispatch.; //; // An additional opportunity to mark the load as invariant arises when the; // base of the ivar access is a parameter to an Objective C method.; // However, because the parameters are not available in the current; // interface, we cannot perform this check.; //; // Note that for direct methods, because objc_msgSend is skipped,; // and that the method may be inlined, this optimization actually; // can't be performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:84,Modifiability,inherit,inherits,84,// NSObject is a fixed size. If we can see the @implementation of a class; // which inherits from NSObject then we know that all it's offsets also must; // be fixed. FIXME: Can we do this if see a chain of super classes with; // implementations leading to NSObject?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:23,Performance,perform,performing,23,/// A helper class for performing the null-initialization of a return; /// value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:4,Performance,Perform,Perform,4,/// Perform a null-check of the given receiver.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:118,Safety,avoid,avoid,118,"// Check for a null receiver and, if there is one, jump to the; // null-receiver block. There's no point in trying to avoid it:; // we're always going to put *something* there, because otherwise; // we shouldn't have done this null-check in the first place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:20,Performance,perform,performing,20,"// Otherwise, start performing the call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:28,Integrability,message,message-send,28,// No jumps required if the message-send was noreturn.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:88,Integrability,rout,routine,88,// end anonymous namespace; /* *** Helper Functions *** */; /// getConstantGEP() - Help routine to construct simple GEPs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:109,Usability,simpl,simple,109,// end anonymous namespace; /* *** Helper Functions *** */; /// getConstantGEP() - Help routine to construct simple GEPs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:62,Modifiability,variab,variable,62,/// A helper function to create an internal or private global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:24,Integrability,Interface,Interface,24,/* *** CGObjCMac Public Interface *** */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:61,Integrability,interface,interface,61,/// GetClass - Return a reference to the class for the given interface; /// decl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:16,Integrability,message,message,16,/// Generates a message send where the super is the receiver. This is; /// a message send to self with special delivery semantics indicating; /// which class's method should be called.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:77,Integrability,message,message,77,/// Generates a message send where the super is the receiver. This is; /// a message send to self with special delivery semantics indicating; /// which class's method should be called.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:22,Integrability,message,message,22,// If this is a class message the metaclass is passed as the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Integrability,Message,Message,3,"// Message sent to 'super' in a class method defined in a category; // implementation requires an odd treatment.; // If we are in a class method, we must retrieve the; // _metaclass_ for the current class, pointed at by; // the class's ""isa"" pointer. The following assumes that; // isa"" is the first ivar in a class (which it must be).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:24,Integrability,message,message,24,/// Generate code for a message send expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:52,Performance,load,load,52,"// If a selector value needs to be passed, emit the load before the call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:21,Modifiability,variab,variables,21,// Walk the captured variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:51,Safety,detect,detect,51,"// Block fields are not necessarily ordered; if we detect that we're; // adding them out-of-order, make sure we sort later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:11,Modifiability,variab,variables,11,// __block variables are passed by their descriptor address.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:35,Integrability,rout,routine,35,/// getBlockCaptureLifetime - This routine returns life time of the captured; /// block variable for the purpose of block layout meta-data generation. FQT is; /// the type of the variable captured in the block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:88,Modifiability,variab,variable,88,/// getBlockCaptureLifetime - This routine returns life time of the captured; /// block variable for the purpose of block layout meta-data generation. FQT is; /// the type of the variable captured in the block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:179,Modifiability,variab,variable,179,/// getBlockCaptureLifetime - This routine returns life time of the captured; /// block variable for the purpose of block layout meta-data generation. FQT is; /// the type of the variable captured in the block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:56,Modifiability,variab,variables,56,"// In MRC, retainable pointers are owned by non-__block variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:11,Modifiability,variab,variables,11,// __block variables are passed by their descriptor address.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:88,Integrability,depend,dependency,88,"// Note that 'i' here is actually the field index inside RD of Field,; // although this dependency is hidden.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:35,Deployability,update,update,35,// Last field was a bitfield. Must update the info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:32,Deployability,update,update,32,// Last field was unnamed. Must update skip info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:35,Integrability,rout,routine,35,"/// InlineLayoutInstruction - This routine produce an inline instruction for the; /// block variable layout if it can. If not, it returns 0. Rules are as follow:; /// If ((uintptr_t) layout) < (1 << 12), the layout is inline. In the 64bit world,; /// an inline layout of value 0x0000000000000xyz is interpreted as follows:; /// x captured object pointers of BLOCK_LAYOUT_STRONG. Followed by; /// y captured object of BLOCK_LAYOUT_BYREF. Followed by; /// z captured object of BLOCK_LAYOUT_WEAK. If any of the above is missing, zero; /// replaces it. For example, 0x00000x00 means x BLOCK_LAYOUT_STRONG and no; /// BLOCK_LAYOUT_BYREF and no BLOCK_LAYOUT_WEAK objects are captured.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:92,Modifiability,variab,variable,92,"/// InlineLayoutInstruction - This routine produce an inline instruction for the; /// block variable layout if it can. If not, it returns 0. Rules are as follow:; /// If ((uintptr_t) layout) < (1 << 12), the layout is inline. In the 64bit world,; /// an inline layout of value 0x0000000000000xyz is interpreted as follows:; /// x captured object pointers of BLOCK_LAYOUT_STRONG. Followed by; /// y captured object of BLOCK_LAYOUT_BYREF. Followed by; /// z captured object of BLOCK_LAYOUT_WEAK. If any of the above is missing, zero; /// replaces it. For example, 0x00000x00 means x BLOCK_LAYOUT_STRONG and no; /// BLOCK_LAYOUT_BYREF and no BLOCK_LAYOUT_WEAK objects are captured.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:48,Energy Efficiency,allocate,allocated,48,"// Sort on byte position; captures might not be allocated in order,; // and unions can do funny things.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:9,Modifiability,variab,variable,9,// Block variable layout instruction has been inlined.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:21,Modifiability,variab,variables,21,// Walk the captured variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:38,Integrability,protocol,protocol,38,"// FIXME: We shouldn't need this, the protocol decl should contain enough; // information to tell us whether this was a declaration or a definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:52,Integrability,protocol,protocol,52,"// If we have generated a forward reference to this protocol, emit; // it now. Otherwise do nothing, the protocol objects are lazily; // emitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:105,Integrability,protocol,protocol,105,"// If we have generated a forward reference to this protocol, emit; // it now. Otherwise do nothing, the protocol objects are lazily; // emitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:11,Integrability,protocol,protocol,11,"// Use the protocol definition, if there is one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:20,Deployability,update,update,20,"// Already created, update the initializer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:146,Integrability,protocol,protocols,146,// We use the initializer as a marker of whether this is a forward; // reference or not. At module finalization we add the empty; // contents for protocols which were referenced but never defined.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:42,Integrability,protocol,protocol,42,// FIXME: Is this necessary? Why only for protocol?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:245,Modifiability,extend,extendedMethodTypes,245,/*; struct _objc_protocol_extension {; uint32_t size;; struct objc_method_description_list *optional_instance_methods;; struct objc_method_description_list *optional_class_methods;; struct objc_property_list *instance_properties;; const char ** extendedMethodTypes;; struct objc_property_list *class_properties;; };; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:80,Integrability,Protocol,Protocol,80,/*; struct objc_protocol_list {; struct objc_protocol_list *next;; long count;; Protocol *list[];; };; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:30,Integrability,protocol,protocol,30,// Just return null for empty protocol lists,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:38,Deployability,deploy,deployment,38,"// Make this entry NULL for OS X with deployment target < 10.11, for iOS; // with deployment target < 9.0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:82,Deployability,deploy,deployment,82,"// Make this entry NULL for OS X with deployment target < 10.11, for iOS; // with deployment target < 9.0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:185,Integrability,protocol,protocols,185,/*; struct _objc_category {; char *category_name;; char *class_name;; struct _objc_method_list *instance_methods;; struct _objc_method_list *class_methods;; struct _objc_protocol_list *protocols;; uint32_t size; // sizeof(struct _objc_category); struct _objc_property_list *instance_properties;; struct _objc_property_list *class_properties;; };; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:168,Integrability,interface,interface,168,"// FIXME: This is poor design, the OCD should have a pointer to the category; // decl. Additionally, note that Category can be null for the @implementation; // w/o an @interface case. Sema should just create one for us as it does for; // @implementation so everyone else can live life under a clear blue sky.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:293,Usability,clear,clear,293,"// FIXME: This is poor design, the OCD should have a pointer to the category; // decl. Additionally, note that Category can be null for the @implementation; // w/o an @interface case. Sema should just create one for us as it does for; // @implementation so everyone else can live life under a clear blue sky.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:28,Integrability,interface,interface,28,// If there is no category @interface then there can be no properties.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:37,Usability,clear,clear,37,// method definition entries must be clear for next implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:249,Integrability,protocol,protocols,249,/*; struct _objc_class {; Class isa;; Class super_class;; const char *name;; long version;; long info;; long instance_size;; struct _objc_ivar_list *ivars;; struct _objc_method_list *methods;; struct _objc_cache *cache;; struct _objc_protocol_list *protocols;; // Objective-C 1.0 extensions (<rdr://4585769>); const char *ivar_layout;; struct _objc_class_ext *ext;; };. See EmitClassExtension();; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:213,Performance,cache,cache,213,/*; struct _objc_class {; Class isa;; Class super_class;; const char *name;; long version;; long info;; long instance_size;; struct _objc_ivar_list *ivars;; struct _objc_method_list *methods;; struct _objc_cache *cache;; struct _objc_protocol_list *protocols;; // Objective-C 1.0 extensions (<rdr://4585769>); const char *ivar_layout;; struct _objc_class_ext *ext;; };. See EmitClassExtension();; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Performance,cache,cache,3,// cache is always NULL.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:37,Usability,clear,clear,37,// method definition entries must be clear for next implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Performance,cache,cache,3,// cache is always NULL.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:101,Usability,clear,clear,101,"// When emitting the root class GCC emits ivar entries for the; // actual class structure. It is not clear if we need to follow this; // behavior; for now lets try and get away with not doing it. If so,; // the cleanest solution would be to make up an ObjCInterfaceDecl; // for the class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:7,Integrability,protocol,protocols,7,"// For protocols, this is an objc_method_description_list, which has; // a slightly different structure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:214,Performance,cache,cached,214,"// Objective-C allows for the declaration and implementation types; // to differ slightly.; //; // If we're being asked for the Function associated for a method; // implementation, a previous value might have been cached; // based on the type of the canonical declaration.; //; // If these do not match, then we'll replace this function with; // a new one that has the proper type below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:15,Performance,cache,cached,15,// Replace the cached function in the map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:42,Integrability,message,messaged,42,// Nullable `Class` expressions cannot be messaged with a direct method; // so the only reason why the receive can be null would be because; // of weak linking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:14,Integrability,interface,interface,14,// Abuse this interface function as a place to finalize.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:65,Performance,optimiz,optimized,65,"// Check whether we need to call objc_exception_try_exit.; // In optimized code, this branch will always be folded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:67,Integrability,synchroniz,synchronized,67,// Emit objc_sync_exit(expr); as finally's sole statement for; // @synchronized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:264,Performance,optimiz,optimization,264,"// end anonymous namespace; /// Create the fragile-ABI read and write hazards based on the current; /// state of the function, which is presumed to be immediately prior; /// to a @try block. These hazards are used to maintain correct; /// semantics in the face of optimization and the fragile ABI's; /// cavalier use of setjmp/longjmp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:70,Safety,hazard,hazards,70,"// end anonymous namespace; /// Create the fragile-ABI read and write hazards based on the current; /// state of the function, which is presumed to be immediately prior; /// to a @try block. These hazards are used to maintain correct; /// semantics in the face of optimization and the fragile ABI's; /// cavalier use of setjmp/longjmp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:197,Safety,hazard,hazards,197,"// end anonymous namespace; /// Create the fragile-ABI read and write hazards based on the current; /// state of the function, which is presumed to be immediately prior; /// to a @try block. These hazards are used to maintain correct; /// semantics in the face of optimization and the fragile ABI's; /// cavalier use of setjmp/longjmp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:236,Modifiability,variab,variables,236,// Create a read hazard for the allocas. This inhibits dead-store; // optimizations and forces the values to memory. This hazard is; // inserted before any 'throwing' calls in the protected scope to; // reflect the possibility that the variables might be read from the; // catch block if the call throws.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:70,Performance,optimiz,optimizations,70,// Create a read hazard for the allocas. This inhibits dead-store; // optimizations and forces the values to memory. This hazard is; // inserted before any 'throwing' calls in the protected scope to; // reflect the possibility that the variables might be read from the; // catch block if the call throws.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:17,Safety,hazard,hazard,17,// Create a read hazard for the allocas. This inhibits dead-store; // optimizations and forces the values to memory. This hazard is; // inserted before any 'throwing' calls in the protected scope to; // reflect the possibility that the variables might be read from the; // catch block if the call throws.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:122,Safety,hazard,hazard,122,// Create a read hazard for the allocas. This inhibits dead-store; // optimizations and forces the values to memory. This hazard is; // inserted before any 'throwing' calls in the protected scope to; // reflect the possibility that the variables might be read from the; // catch block if the call throws.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:196,Modifiability,variab,variables,196,// Create a write hazard for the allocas. This inhibits folding; // loads across the hazard. This hazard is inserted at the; // beginning of the catch path to reflect the possibility that the; // variables might have been written within the protected scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:68,Performance,load,loads,68,// Create a write hazard for the allocas. This inhibits folding; // loads across the hazard. This hazard is inserted at the; // beginning of the catch path to reflect the possibility that the; // variables might have been written within the protected scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:18,Safety,hazard,hazard,18,// Create a write hazard for the allocas. This inhibits folding; // loads across the hazard. This hazard is inserted at the; // beginning of the catch path to reflect the possibility that the; // variables might have been written within the protected scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
